/*==============================================================================
	    Rosalife Reloaded Gamemode

		Copyright (C) 2023 ShadowKev1999 & c0kkie

==============================================================================*/

#include <open.mp>
#include <sscanf2>
#include <a_mysql>
#include <samp_bcrypt>
#include <mSelection>
#include <ocmd>
#include <streamer>
#include <youtube>
#define YSI_NO_CACHE_MESSAGE
#define YSI_NO_OPTIMISATION_MESSAGE
#include <YSI_Data\y_iterate>

#pragma dynamic 5000
#pragma warning disable 239

#include "server/config.pwn"
#include "utils/colors.pwn"
#include "utils/macros.pwn"

new MySQL:sqlHandle;

new AC_Check[MAX_PLAYERS];
forward AC_CheckStatus(playerid);

#define CUSTOM_FUHRPARK_MENU 1
#define CUSTOM_FUHRPARK_GRUPPE_MENU 2

//Farben - German Samplife


//Map Texturen - German Samplife
#define Gehweg(%0) SetDynamicObjectMaterial(%0,0, 13691, "bevcunto2_lahills","crazypave",0)
#define Parkplatz(%0) SetObjectMaterial(%0,0, 9514, "711_sfw","ws_carpark2",0)
#define groovewand(%0) SetDynamicObjectMaterial(%0,0, 4828, "airport3_las","gnhotelwall02_128",0)
#define groovehaus(%0) SetDynamicObjectMaterial(%0,1, 4828, "airport3_las","gnhotelwall02_128",0)
#define aztecaswand(%0) SetDynamicObjectMaterial(%0,0, 5706, "ci_studio5","tw@t_wall1",0)
#define aztecashaus(%0) SetDynamicObjectMaterial(%0,1, 5706, "ci_studio5","tw@t_wall1",0)
#define rifafenster(%0) SetDynamicObjectMaterial(%0,0, 3278, "des_breakwin1","des_warewin",0)
#define rifawand(%0) SetDynamicObjectMaterial(%0,0, 11010, "crackfact_sfse","ws_altz_wall8_top",0)
#define LSPDboden(%0) SetObjectMaterial(%0,0, 13007,"sw_bankint","woodfloor1",0)
#define LSPDwand(%0) SetDynamicObjectMaterial(%0,0, 8399,"vgs_shops","vgsclubwall05_128",0)
#define LSPDdecke(%0) SetDynamicObjectMaterial(%0,0, 4568,"skyscrap2_lan2","sl_marblewall2",0)
#define LSPDzellboden(%0) SetObjectMaterial(%0,0, 13701,"lahillshilhs1c","man_cellarfloor128",0)
#define LSPD_Zaun(%0) SetDynamicObjectMaterial(%0,1, 10837, "airroadsigns_sfse","CJ_LAMPPOST1",0)
#define M_Mauer(%0) SetDynamicObjectMaterial(%0,0, 4552, "ammu_lan2","sl_lavicdtwall1",0)
#define M_Gboden(%0) SetObjectMaterial(%0,0, 10765, "airportgnd_sfse","ws_airpt_concrete",0)
#define M_Gwand(%0) SetDynamicObjectMaterial(%0,0, 18202, "w_towncs_t","ahoodfence2",0)
#define M_Gdecke(%0) SetDynamicObjectMaterial(%0,0, 13691, "bevcunto2_lahills","Bow_Abattoir_Floor_Clean",0)
#define M_Pweg(%0) SetDynamicObjectMaterial(%0,0, 10938, "skyscrap_sfse","ws_floortiles2",0)
#define M_Iboden(%0) SetDynamicObjectMaterial(%0,0, 3961, "lee_kitch","dinerfloor01_128",0)
#define M_Iwand(%0) SetDynamicObjectMaterial(%0,0, 8391, "ballys01","ballywall02_128",0)
#define M_Idecke(%0) SetDynamicObjectMaterial(%0,0, 3975, "lanbloke","p_floor3",0)
#define M_Ibetten(%0) SetDynamicObjectMaterial(%0,0, 1794, "cj_beds","CJ_TARTAN",0)
#define Zollwand(%0) SetDynamicObjectMaterial(%0,0, 18337, "cs_town","GB_sandstwall01",0)
#define Zolldecke(%0) SetDynamicObjectMaterial(%0,0, 3975, "lanbloke","p_floor3",0)
#define Zollboden(%0) SetDynamicObjectMaterial(%0,0, 5986, "chateau_lawn","backstagefloor1_256",0)
#define Zollbecken(%0) SetDynamicObjectMaterial(%0,0, 10837, "airroadsigns_sfse","CJ_LAMPPOST1",0)
#define Zaun(%0) SetDynamicObjectMaterial(%0,1, 10837, "airroadsigns_sfse","CJ_LAMPPOST1",0) // Alle Zäune ID 970
#define Scheiben_LSPD(%0) SetDynamicObjectMaterial(%0,0, 1649, "wglass", "carshowwin2", 0) //Scheiben LSPD
#define MauerScheiben_LSPD(%0) SetDynamicObjectMaterial(%0,0, 3975, "lanbloke", "lasbevcit8", 0) //Mauer an Scheiben LSPD
#define Mauer_LSPD(%0) SetDynamicObjectMaterial(%0,0, 18202, "w_towncs_t", "wall256hi", 0) //Mauer LSPDhof
#define Mauer_FBI(%0) SetDynamicObjectMaterial(%0,0, 8839, "vgsecarshow","sw_wallbrick_06",0) //FBI
#define Decke_FBI(%0) SetDynamicObjectMaterial(%0,0, 12954, "sw_furniture","CJ_WOOD5",0) //FBI
#define Boden_FBI(%0) SetDynamicObjectMaterial(%0,0, 13007, "sw_bankint","woodfloor1",0) //FBI
#define Wand_FBI(%0) SetDynamicObjectMaterial(%0,0, 4600, "theatrelan2","gm_labuld2_b",0) //FBI
#define Plattform_Knast(%0) SetObjectMaterial(%0,1, 18202, "w_towncs_t","plaintarmac1",0) //Knast
#define Geb_Knast(%0) SetDynamicObjectMaterial(%0,0, 9495, "vict_sfw","newall10_seamless",0) //Knast
#define Treppe_Knast(%0) SetDynamicObjectMaterial(%0,1, 10837, "airroadsigns_sfse","CJ_LAMPPOST1",0) // Alle Zäune ID 970
#define Gebäude_Knast(%0) SetDynamicObjectMaterial(%0,0, 8463, "vgseland","luxorwall01_128",0) //Knast
#define Etage_Knast(%0) SetDynamicObjectMaterial(%0,0, 11006, "mission3ground_sfse","Was_scrpyd_floor_hangar",0) //Knast
#define Weg_Knast(%0) SetDynamicObjectMaterial(%0,0, 8565, "vgsebuild01","ws_stonewall",0) //Knast
#define Gras_Knast(%0) SetDynamicObjectMaterial(%0,0, 8678, "wddngchplgrnd01","Grass",0) //Knast
#define Wand_ASF(%0) SetDynamicObjectMaterial(%0,0, 8463, "vgseland","luxorwall01_128",0) //AutohausSF
#define Boden_ASF(%0) SetDynamicObjectMaterial(%0,0, 10941, "silicon2_sfse","ws_stationfloor",0) //AutohausSF
#define Decke_ALV(%0) SetDynamicObjectMaterial(%0,0, 3975, "lanbloke", "p_floor3", 0) //Decke AutohausLV
#define Scheiben(%0) SetDynamicObjectMaterial(%0,0, 1649, "wglass", "carshowwin2", 0)

//Holzfäller Beruf - German Samplife
#define BAUM1 							992.35852, -382.82346, 69.91882
#define BAUM2                           960.28668, -372.08679, 63.17645
#define BAUM3                           982.43243, -359.07874, 68.16492
#define BAUM4                           952.86096, -345.09460, 60.96141
#define BAUM5                           983.79529, -328.28790, 68.14320
#define BAUM6                           964.16803, -315.15341, 63.18056
#define BAUM7                           990.78961, -301.31586, 69.06423
#define BAUM8                           933.38489, -320.36514, 53.21004
#define BAUM9                           932.79358, -357.69962, 55.07752
#define BAUM10                          948.25598, -302.43826, 57.43135
#define GROSSBAUM 						1058.0454, -253.4066,  73.0415
#define GESCHWINDIGKEIT 				0.5
#define BRADIUS                         2.0

//Models News Definitionen
new SkinordnungGovernment = mS_INVALID_LISTID;
new SkinordnungSAPD = mS_INVALID_LISTID;
new SkinordnungSFPD = mS_INVALID_LISTID;
new SkinordnungLVPD = mS_INVALID_LISTID;
new SkinordnungMEDIC = mS_INVALID_LISTID;
new SkinordnungFIRE = mS_INVALID_LISTID;
new SkinordnungFBI = mS_INVALID_LISTID;
new SkinordnungOrdnungsamt = mS_INVALID_LISTID;
new SkinordnungSanNews = mS_INVALID_LISTID;
new SkinordnungGrove = mS_INVALID_LISTID;
new SkinordnungBallas = mS_INVALID_LISTID;
new SkinordnungVagos = mS_INVALID_LISTID;
new SkinordnungAztecas = mS_INVALID_LISTID;
new SkinordnungRifa = mS_INVALID_LISTID;
new SkinordnungTriads = mS_INVALID_LISTID;
new SkinordnungDaNangBoys = mS_INVALID_LISTID;
new SkinordnungBikers = mS_INVALID_LISTID;
new SkinordnungItalia = mS_INVALID_LISTID;
new SkinordnungRussia = mS_INVALID_LISTID;

new SkinsBoy = mS_INVALID_LISTID;
new SkinsGirl = mS_INVALID_LISTID;

//News - German Samplife

new bool:gPlayerUsingLoopingAnim[MAX_PLAYERS];
new BombenIDVar[MAX_PLAYERS];
new C4Transporter;
new	robc4sec;
new	pRobC4BackwardTime;
new	pRobC4TimeNearVehicle;
new C4robTimer;
new robStatusC4;
new boden, wand;
new tmpobjidspawn;
new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
new bool:Motor[MAX_VEHICLES], bool:Licht[MAX_VEHICLES], bool:DOOR[MAX_VEHICLES], bool:Motorhaube[MAX_VEHICLES], bool:Kofferraum[MAX_VEHICLES];
new bool:lspdaufzu, bool:lspd2aufzu, bool:lspd3aufzu;
new CarRadio[MAX_VEHICLES];
new Radio[MAX_VEHICLES];
new Year, Month, Day;
new Hour, Minute, Second;
new ServerRestartFolgt = 0;
new bool:Importfahrzeug = false;
new bool:Kurrierfahrzeug[3] = false;
new SaveAllTimer;
new BaumErledigt[MAX_PLAYERS];
new BaumWeg[MAX_PLAYERS];
new BaumeHolz[MAX_PLAYERS][11];
new Baum1[MAX_PLAYERS];
new Baum2[MAX_PLAYERS];
new Baum3[MAX_PLAYERS];
new Baum4[MAX_PLAYERS];
new Baum5[MAX_PLAYERS];
new Baum6[MAX_PLAYERS];
new Baum7[MAX_PLAYERS];
new Baum8[MAX_PLAYERS];
new Baum9[MAX_PLAYERS];
new Baum10[MAX_PLAYERS];
new grossBaum[MAX_PLAYERS];
new GB2[MAX_PLAYERS];
new GBGefallt[MAX_PLAYERS];
new HFCP2[MAX_PLAYERS];
new	HFCP4[MAX_PLAYERS];
new	HFCP5[MAX_PLAYERS];
new	HFCP6[MAX_PLAYERS];
new	HFCP7[MAX_PLAYERS];
new	HFCP8[MAX_PLAYERS];
new	HFCP10[MAX_PLAYERS];
new	MASCHINE[MAX_PLAYERS];
new	START[MAX_PLAYERS];
new	MASCHINEFERTIG[MAX_PLAYERS];
new PlayerPickup[MAX_PLAYERS];
new HolzNeu[MAX_PLAYERS][4];
new Handschellen[MAX_PLAYERS];
new KnastTimer[MAX_PLAYERS];
new PDEquiptTimer[MAX_PLAYERS];
new CountdownTimer;
new CountdownVar;
new CountdownString[32];
new MutePlayerTimer[MAX_PLAYERS];
new WerbungSperrePlayerTimer[MAX_PLAYERS];
new autohauscarmodelid[MAX_PLAYERS][MAX_VEHICLES];
new autohauscarid[MAX_PLAYERS][MAX_VEHICLES];
new Float:KMHPos[MAX_PLAYERS][3];
new TachoTimer[MAX_PLAYERS];
new OldKilometer[MAX_VEHICLES];
new NewKilometer[MAX_VEHICLES];
new ProbefahrtCar[MAX_PLAYERS];
new ProbefahrtTime[MAX_PLAYERS];
new ProbefahrtTimer[MAX_PLAYERS];
new ImportCarTime, ImportCarTimer, ImportCar;
new KurrierCarTime[3], KurrierCarTimer[3], KurrierCar[3];
new Float:markerX[MAX_PLAYERS], Float:markerY[MAX_PLAYERS], Float:markerZ[MAX_PLAYERS], Float:markerA[MAX_PLAYERS], markerInt[MAX_PLAYERS], markerVw[MAX_PLAYERS];
new SpielerLKWTrailer[MAX_PLAYERS];
new FahrschulCar[MAX_VEHICLES];
new schulung[MAX_PLAYERS];
new Fehlerpunkte[MAX_PLAYERS];
new FahrenTimer[MAX_PLAYERS];
new HealthTimer[MAX_PLAYERS];
new Weather[3];
new WetterRandomLS[] = {7,2};
new WetterRandomSF[] = {7,2};
new WetterRandomLV[] = {7,2,19};
new MedicDuty;
new CopDuty;
new FBIDuty;
new Bankrob;
new PlayerBankRobTimer[MAX_PLAYERS];
new PlayerBankRobSec[MAX_PLAYERS];
new BankRobGeldSack[10];
new BankRobGeldSackSpawned[2];
new Text3D:BankRobGeldSackLabel[10];
new Text3D:aDuty[MAX_PLAYERS];
new BankRobGeld[10];
new BankRobVan;
new BankRobAmLaufen;
new BankRobGeldGesamt;
new BankAttacker;
new Float:FahrzeugTank[MAX_VEHICLES];
new PizzaSpieler[MAX_PLAYERS][5];
new Float:PizzaKundenPos[MAX_PLAYERS][3];
new Float:MuellHausPos[MAX_PLAYERS][3];
new Float:PizzaKofferraumPos[MAX_PLAYERS][3];
new Float:MuellAutoPos[MAX_PLAYERS][3];
new PizzaAusgeliefert[MAX_PLAYERS];
new PizzaReinlegenTimer[MAX_PLAYERS];
new PizzaRausnehmenTimer[MAX_PLAYERS];
new PizzaBekommenTimer[MAX_PLAYERS];
new Float:WaltonKofferraumPos[MAX_PLAYERS][3];
new PayDayTimer[MAX_PLAYERS];
new CamFahrten[MAX_PLAYERS];
new MuellmannTimer[MAX_PLAYERS];
new MuellObjekt[MAX_PLAYERS][29];
new LandwirtObjekt[MAX_PLAYERS][72];
new LandwirtTimer[MAX_PLAYERS];
new NotrufSperre[MAX_PLAYERS][3];
new NotrufTimer[MAX_PLAYERS][3];
new FallschirmPickup;
new LastDriver[MAX_VEHICLES][MAX_PLAYER_NAME];
new RobBarTimer[MAX_PLAYERS];
new Float:RobBarValue[MAX_PLAYERS];
new RobBarAllowed[MAX_PLAYERS];
new ServerLadenStatus;
new ServerLadenTimer;
new ServerSpeichernStatus;
new ServerSpeichernTimer;
new SDMTimer[MAX_PLAYERS];
new Text3D:BlitzerLabel[MAX_BLITZER];
new	bool:firmaerstellen[MAX_PLAYERS];
new	gfirmapunkt[MAX_PLAYERS];
new	Float:gfirmapos[MAX_PLAYERS][7];
//new Float:PBRating[MAX_PLAYERS];
new ServerNewsVar = 0;
//new AntiIF[MAX_PLAYERS];
new PilotenTimer[MAX_PLAYERS];
new BusfahrerTimer[MAX_PLAYERS];
new BombenTimer[MAX_PLAYERS];
new PaintballSpieler[5];
new TazerTimer[MAX_PLAYERS];
new Float:Tot_X[MAX_PLAYERS];
new Float:Tot_Y[MAX_PLAYERS];
new Float:Tot_Z[MAX_PLAYERS];
new Tot_Int[MAX_PLAYERS];
new Tot_World[MAX_PLAYERS];
new FallPlayerTimer[MAX_PLAYERS];
new DeadTimer[MAX_PLAYERS];
new KrankenhausTimer[MAX_PLAYERS];
new Float:FeuerPos[3][100];
new FreikaufModelID[MAX_PLAYERS][14];
new FreikaufDatabaseID[MAX_PLAYERS][14];
new FreikaufKey[MAX_PLAYERS];
new PlayerFireTimer[MAX_PLAYERS][3];
new Float:PlayerOnFireHP[MAX_PLAYERS];
new FeuerStatusTimer;
new bool:Feuerbereit = false;
new EnterLockedV[MAX_PLAYERS];
new AC_PlayerVeh[MAX_PLAYERS];
new AC_PutedVehicle[MAX_PLAYERS];
new stopAC[MAX_PLAYERS];

new Float:AfkX[MAX_PLAYERS],Float:AfkY[MAX_PLAYERS],Float:AfkZ[MAX_PLAYERS];
new Afk[MAX_PLAYERS];
new lastUpdate[MAX_PLAYERS];
new Text3D:Afklabel[MAX_PLAYERS];
new Afkversuche[MAX_PLAYERS];
new Afktimer[MAX_PLAYERS];
new afktimedrestka[MAX_PLAYERS];

new pfanddurchsucht[MAX_PLAYERS];

new Indicators_xqz[MAX_VEHICLES][6];

//Bots - German Samplife
new BotMichelle;
new BotEmilio;
new BotTracy;
new BotBank[2];
new BotMaut[8];
new BotTyler;
new BotBSN[5];
new BotCB[5];
new BotAMMU[MAX_AMMUS];
new BotSTORE[MAX_STORES];

//Tore & Schranken - German Samplife
new LSPDGarage, LSPDGarageZ = 0;
new LSPDSchranke, LSPDSchrankeZ = 0;
new FBITor, FBITorZ = 0;
new RussenTor, RussenTorZ = 0;
new MautSchranke[7];
new bool:MautStatus[7] = false;
new lspddoor, lspddoor2, lspddoor3;
new NewsTor[2];
new NewsStudioTor;
new BombenTor;
new BombenTorHealth = 10000;
//new MedicFahrstuhl;

//new sannews;
new LottoJackpot = 0;
new bool:LottoFind = false;
new LottoWandJackpot[2];

//Pickups - German Samplife
new ImportCarPickup;
new KurrierPickup[3];

//Menü´s - German Samplife
new Menu:Rathaus;
new Menu:Schwarzmarkt;
new Menu:BSNMenu;
new Menu:test1;
new Menu:test2;
new Menu:test3;
new Menu:test4;

//PlayerTextdraws - German Samplife
new PlayerText:ICPBox[MAX_PLAYERS];
new PlayerText:ICPTitel[MAX_PLAYERS];
new PlayerText:ICPMessage[MAX_PLAYERS];
new PlayerText:ICPMessageEdit[MAX_PLAYERS];
new PlayerText:ICPHitsound[MAX_PLAYERS];
new PlayerText:ICPHitsoundEdit[MAX_PLAYERS];
new PlayerText:ICPCamera[MAX_PLAYERS];
new PlayerText:ICPCameraEdit[MAX_PLAYERS];
new PlayerText:ICPHandy[MAX_PLAYERS];
new PlayerText:ICPHandyEdit[MAX_PLAYERS];
new PlayerText:ICPSave[MAX_PLAYERS];
new PlayerText:ICPOChat[MAX_PLAYERS];
new PlayerText:ICPOChatEdit[MAX_PLAYERS];
new PlayerText:Freeze[MAX_PLAYERS];
new PlayerText:LevelUP[MAX_PLAYERS];
new PlayerText:Tacho[MAX_PLAYERS][12];
new PlayerText:Gangfight[MAX_PLAYERS][8];
new PlayerText:WantedDraw[MAX_PLAYERS];
new PlayerText:TankenDraw[MAX_PLAYERS][7];
new PlayerText:BankraubTD[MAX_PLAYERS][6];
new PlayerText:RobBar[MAX_PLAYERS][3];
new PlayerText:StatsDraw[MAX_PLAYERS][5];
new PlayerText:PLottoSchein[MAX_PLAYERS];
new PlayerText:QuestTextdraw[MAX_PLAYERS][8];
new PlayerText:CountdownDraw[MAX_PLAYERS][4];
new PlayerText:Schreinerei[MAX_PLAYERS][17];

//Textdraws - German Samplife
new Text:Statusleiste[3];
new Text:Time;
new Text:Time2;
new Text:StatusWerbung;
new Text:FlyerDraw[11];
new Text:LottoSchein[7];
new Text:Logindraw[16];
new Text:Registring;
new Text:Loginstring;
new Text:BlackScreendraw;

//Forwards - German Samplife
forward EntKnockout(playerid);
forward StopPlayerPlaySound(playerid);
forward RobC4Transporter(fahrerid,beifahrerid,robberid);
forward ShowRegisterTextdraw(playerid);
forward ShowLoginTextdraw(playerid);
forward StartMaschine(playerid);
forward StartMaschine2(playerid);
forward StartMaschine3(playerid);
forward StartMaschine4(playerid);
forward StopMaschine(playerid);
forward SchreinereiIntro(playerid);
forward BaumGefallt(playerid);
forward ErstellungObjekteHolz(playerid);
forward EntfernungObjekteHolz(playerid);
forward Float:mysql_GetFloat(Table[], Field[], Where[], Is[]);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward Float:GetDistanceBetweenObjects(object1,object2);
forward ServerRestart(playerid);
forward SaveAll();
forward ServerSpeichern();
forward ServerLaden();
forward KickTimer(playerid);
forward LSPDGarageT();
forward LSPDSchrankeT();
forward FBITorT();
forward RussenTorT();
forward MautSchrankeT(playerid);
forward NewsTor1T();
forward NewsTor2T();
forward NewsStudioT();
forward TimeToKnast(playerid);
forward LockLicht(vehicleid);
forward Tazer(playerid);
forward TazerSperre(playerid);
forward PDEquiptGone(playerid);
forward CountdownTime(Sekunden);
forward LevelUpPlayer(playerid);
forward settimeex(playerid);
forward WerbungTimer();
forward PlayerMuted(playerid);
forward PlayerWerbungSperre(playerid);
forward SpeedoMeter(playerid);
forward TryToNap(playerid);
forward Personalausweis(playerid);
forward ProbeFahrtPlayer(playerid);
forward ImportCarPlayer();
forward KurrierCarPlayer(playerid);
forward ImportFahrzeugTimer();
forward GangfightTime(Zone);
forward LastGangFightZone(Zone);
forward WertGangFightZone(Zone);
forward FrakCarRespawnTimout(Fraktion);
forward GruppenCarRespawnTimout(Gruppe);
forward CTFTryTimeOut(Zone);
forward TrailerBetanken(playerid);
forward OnTrailerUpdate(playerid, vehicleid);
forward TheoriAufgaben(playerid);
forward Praxis(playerid);
forward abfahrpunkte(playerid);
forward OhneSchein(playerid);
forward Wetter();
//forward MedicFahrstuhlT();
forward Heilen(playerid);
forward Krankenhaus(playerid);
forward DeadCountdown(playerid);
forward FallPlayer(playerid);
forward Reanimation(playerid);
forward BankrobTimer();
forward PlayerBankrob(playerid);
forward PizzaBekommen(playerid);
forward PizzaRausnehmen(playerid);
forward PizzaReinlegen(playerid);
forward HeuballenReinlegen(playerid);
forward PayDay(playerid);
forward Unfreeze(playerid);
forward SpawnCarInGarage(playerid);
forward NotrufTimer1(playerid);
forward NotrufTimer2(playerid);
forward NotrufTimer3(playerid);
forward RobBarT(playerid);
forward TimeToRob(playerid);
forward KickPlayer(playerid,string[]);
forward EndBan(playerid);
forward SendAdminMessage(color,const message[]);
forward GetPlayerSpeed(playerid);
forward OnClientKickPlayer(playerid);
forward AntiSDMFunction(playerid);
forward EndIPBan(playerid);
forward ServerNews();
forward SetConnect(playerid);
forward CheckedAccount(playerid);
forward AntiIntFluchtFunction(playerid);
forward PilotRoute(playerid);
forward Busfahrer(playerid);
forward MuellEntleeren(playerid);
forward HeuballenAbgabe(playerid);
forward CameraFahrten(playerid);
forward LspdDoorTimer(playerid);
forward LspdDoorTimer2(playerid);
forward LspdDoorTimer3(playerid);
forward TheoriFlugAufgaben(playerid);
forward FreikaufKeyWeg(playerid);
forward SetPlayerWetter(playerid);
forward GodmodeCheck(playerid,pID);
forward CanBurn(playerid);
forward TogglePlayerBurning(playerid, burning);
forward BurningTimer(playerid);
forward RemoveSmokeFromFire(id);
forward DestroyFire(id);
forward ExtinguishTimer(playerid, id);
forward FeuerEinsatz();
forward FeuerStatus();
forward BombTorTimer();
forward BombTimer(playerid);
forward TorStatus();
forward BombeExplode();
forward AC_PutPlayerInVehicleEx(playerid,vehicleid,seatid);
forward Afktimered(playerid);
forward pfand(playerid);
forward DrogenStatus();

//Dialoge - German Samplife
enum {
	DIALOG_REGSTEP1 = 0,
	DIALOG_REGSTEP2,
	DIALOG_REGSTEP3,
	DIALOG_REGSTEP4,
	DIALOG_LOGIN,
	DIALOG_ADMIN_PANEL,
	DIALOG_APANEL_KICK_GRUND,
	DIALOG_APANEL_KICK,
	DIALOG_APANEL_BANN_GRUND,
	DIALOG_APANEL_BANN,
	DIALOG_APANEL_TIMEBANN_GRUND,
	DIALOG_APANEL_TIMEBANN_MINUTEN,
	DIALOG_APANEL_TIMEBANN,
	DIALOG_SPAWNCHANGE,
	DIALOG_DUTY_EQUIP,
	DIALOG_SARD_DUTY,
	DIALOG_DUTY2,
	DIALOG_SONSTIGES,
	DIALOG_FIRMAV,
	DIALOG_FIRMAV_ABGEBEN,
	DIALOG_FIRMAV_AUFTRAG,
	DIALOG_FIRMAV_AUFTRAG2,
	DIALOG_FIRMAV_AUFTRAG3,
	DIALOG_FIRMAV_AUFTRAG4,
	DIALOG_FIRMAV_AUFTRAG5,
	DIALOG_FIRMAV_RANGS,
	DIALOG_FIRMAV_RANGSE,
	DIALOG_FIRMA_GRUNDSTUCK,
	DIALOG_GRUPPEV,
	DIALOG_GRUPPEV_RANGS,
	DIALOG_GRUPPEV_RANGSE,
	DIALOG_GRUPPEV_FAHRZEUG,
	DIALOG_GRUPPEV_GEHALT_R,
	DIALOG_GRUPPEV_GEHALT_ER,
	DIALOG_GRUPPEV_UPGRADE,
	DIALOG_SARDV,
	DIALOG_SARDV_SKINR,
	DIALOG_SARDV_RANGS,
	DIALOG_SARDV_RANGSE,
	DIALOG_SARDV_GEHALT2,
	DIALOG_SARDV_GEHALT,
	DIALOG_SARDV_GEHALT_R,
	DIALOG_SARDV_GEHALT_ER,
	DIALOG_FRAKV,
	DIALOG_FRAKV_SKINR,
	DIALOG_FRAKV_RANGSE,
	DIALOG_FRAKV_RANGS,
	DIALOG_PDEQUIP,
	DIALOG_FRAKV_EQUIP,
	DIALOG_FRAKV_EQUIP_EDIT,
	DIALOG_FRAKV_EQUIP_EDIT_NAME,
	DIALOG_FRAKV_EQUIP_EDIT_RANG,
	DIALOG_FRAKV_EQUIP_EDIT_WEAP,
	DIALOG_FRAKV_FAHRZEUG,
	DIALOG_FRAKV_GEHALT,
	DIALOG_FRAKV_GEHALT_R,
	DIALOG_FRAKV_GEHALT_ER,
	DIALOG_INVITE,
	DIALOG_GRUPPEN_INVITE,
	DIALOG_FIRMEN_INVITE,
	DIALOG_AUTOHAUS,
	DIALOG_AUTOHAUS_AUSWAHL,
	DIALOG_AUTO_KAUFEN,
	DIALOG_AUTO_KAUFEN_2,
	DIALOG_AUTO_PROBEFAHRT,
	DIALOG_AUTO_INFOS,
	DIALOG_FAHRZEUG_VERKAUFEN,
	DIALOG_BANKMENU,
	DIALOG_BANKM,
	DIALOG_BANK_AUSWAHL,
	DIALOG_BANK_GUTHABEN,
	DIALOG_BANK_BIZAUSWAHL,
	DIALOG_BANK_EINZAHLEN,
	DIALOG_BANK_AUSZAHLEN,
	DIALOG_BANK_KONTOAUSZUG,
	DIALOG_BANKLOGIN,
	DIALOG_BANKKONTO_ERSTELLEN,
	DIALOG_FAHRZEUG,
	DIALOG_CARRADIO,
	DIALOG_MP3,
	DIALOG_YOUTUBE,
	DIALOG_GEBIET,
	DIALOG_KAUFEN,
	DIALOG_HAUS_KAUFEN,
	DIALOG_TANK_AUSWAHL,
	DIALOG_VERWALTUNG,
	DIALOG_HAUS_VERWALTUNG,
	DIALOG_GHAUS_VERWALTUNG,
	DIALOG_HAUS_UPGRADES,
	DIALOG_GHAUS_UPGRADES,
	DIALOG_HAUS_MIETEN,
	DIALOG_HAUS_MIETE,
	DIALOG_GARAGE_VERWALTUNG,
	DIALOG_GARAGE_UPGRADES,
	DIALOG_GARAGE_MIETEN,
	DIALOG_GARAGE_MIETE,
	DIALOG_TANKSTELLE_UPGRADES,
	DIALOG_TANKSTELLE_UPGRADESK,
	DIALOG_TANKSTELLE_PREISE,
	DIALOG_TANK_BESCHREIBUNG,
	DIALOG_BUSINESS_VERKAUFEN,
	DIALOG_BUSINESS_STAAT,
	DIALOG_BUSINESS_SPIELER,
	DIALOG_BUSINESS_SPIELERV,
	DIALOG_TANKSTELLENINFO,
	DIALOG_TANKSTELLENINFO2,
	DIALOG_TANKSTELLENINFO3,
	DIALOG_TRAILER_TTANKAUSWAHL,
	DIALOG_TRAILER_BETANKEN,
	DIALOG_JOB_DUTY,
	DIALOG_NEBENJOBS,
	DIALOG_NEBENJOB_INFOS,
	DIALOG_ILLEGALE_NEBENJOBS,
	DIALOG_ILLEGALE_NEBENJOB_INFOS,
	DIALOG_FRAKV_CARRANG,
	DIALOG_GRUPPENV_CARRANG,
	DIALOG_HELP,
	DIALOG_HELP1,
	DIALOG_FAHRSCHULE,
	DIALOG_FSCHEIN_INFOS,
	DIALOG_FREIKAUFEN,
	DIALOG_FREIKAUFEN_FAHRZEUG,
	DIALOG_TOG,
	DIALOG_BUYGUN,
	DIALOG_GUN_KAUFEN,
	DIALOG_AMMU_UPGRADES,
	DIALOG_AMMU_UPGRADESK,
	DIALOG_AMMU_UPGRADESP,
	DIALOG_STORE_UPGRADES,
	DIALOG_STORE_UPGRADESK,
	DIALOG_STORE_UPGRADESP,
	DIALOG_FRAKKISTE,
	DIALOG_FRAKKISTE_WAFFEN,
	DIALOG_FRAKKISTE_MATS,
	DIALOG_FRAKKISTE_BOMBE,
	DIALOG_FSCHULE_THEORI,
	DIALOG_STADTPLAN,
	DIALOG_NAVI,
	DIALOG_NAVI1,
	DIALOG_NAVI2,
	DIALOG_NAVI3,
	DIALOG_NAVI4,
	DIALOG_NAVI5,
	DIALOG_NAVI6,
	DIALOG_NAVI7,
	DIALOG_STORE,
	DIALOG_STORE_KAUFEN,
	DIALOG_SERVICE,
	DIALOG_CREATECAR,
	DIALOG_CREATECAR_STEP1,
	DIALOG_CREATECAR_STEP2,
	DIALOG_CREATECAR_STEP3,
	DIALOG_CREATECAR_STEP4,
	DIALOG_CREATECAR_STEP5,
	DIALOG_KOFFERRAUM,
	DIALOG_KOFFERRAUM_GELD,
	DIALOG_KOFFERRAUM_GELD1,
	DIALOG_KOFFERRAUM_C4,
	DIALOG_KOFFERRAUM_C41,
	DIALOG_PAINTBALL,
	DIALOG_PAINTBALL_1VS1,
	DIALOG_LINIEN,
	DIALOG_BASE_AUSWAHL,
	DIALOG_MISSION,
	DIALOG_CREATE_GRUPPE,
	DIALOG_CREATE_GRUPPE2,
	DIALOG_CREATE_GRUPPE3,
	DIALOG_CREATE_FIRMA,
	DIALOG_CREATE_FIRMA2,
	DIALOG_CREATE_FIRMA3,
	DIALOG_NEON,
	DIALOG_GARAGE,
	DIALOG_BETA_KEY,
	DIALOG_BUSFAHRER_ASK,
	DIALOG_TRUCKER_LIEFERUNG,
	DIALOG_ANTIAFK,
	DIALOG_PFANDFLASCHEN,
	DIALOG_OBIBAUMARKT,
	DIALOG_GYM,
	DIALOG_EDIT,
	DIALOG_SERVEREDIT,
	DIALOG_SERVEREDIT_MOTD,
	DIALOG_BOMBE,
	DIALOG_BOMBE_ENT
}

//Enums - German Samplife
enum BombInfo_daten{
	bombid,
	bombcreate,
	bombfarbe, // 1 = rot , 2 = gelb , 3 = grün
	bombtime,
	Float:bombPos[3],
	bombPickup,
	bombzone
}
new BombenInfo[10][BombInfo_daten];

enum Stuff{
	Motd[128]
}
new sachen[Stuff];

enum WerbetafelInfo
{
	wtafelobjectid,
	Float:wtafelx,
	Float:wtafely,
	Float:wtafelz,
	Float:wtafelxrot,
	Float:wtafelyrot,
	Float:wtafelzrot,
	wtafeltext[64],
	wtafeltmindex,
	wtafeltmsize,
	wtafeltfonts[32],
	wtafeltfontsize,
	wtafeltbold,
	wtafeltfontcolor[16],
	wtafeltbackcolor[16],
	wtafeltaligment
}

new	Werbetafeln[MAX_WERBETAFELN][WerbetafelInfo] =
{
	{4988,1350.19,-915.21,52.80, 0.00,0.00,117.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,933.03,-1363.40,27.53, 0.00,0.00,156.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1406.87,-1407.37,34.54, 0.00,0.00,92.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1410.52,-1407.09,34.14, 0.00,0.00,-72.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1371.82,-1268.11,42.96, 0.00,0.00,100.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1353.54,-914.12,52.74, 0.00,0.00,-77.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1493.70,-945.91,54.64, 0.00,0.00,107.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1497.06,-944.94,54.64, 0.00,0.00,-57.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1630.27,-839.11,78.04, 0.00,0.00,-37.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1715.31,-782.01,74.12, 0.00,0.00,-183.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1674.22,-714.00,69.74, 0.00,0.00,-147.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1580.69,-887.03,64.26, 0.00,0.00,-133.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,1029.49,-939.44,58.47, 0.00,0.00,157.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,885.37,-971.25,54.52, 0.00,0.00,-52.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,852.92,-989.66,48.54, 0.00,0.00,200.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,778.96,-1066.47,36.05, 0.00,0.00,-45.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,873.91,-1023.40,51.57, 0.00,0.00,147.50,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,703.10,-1115.20,32.24, 0.00,0.00,164.70,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,695.77,-1187.85,34.92, 0.00,0.00,98.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,619.50,-1296.59,33.76, 0.00,0.00,-92.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,356.61,-1719.20,27.47, 0.00,0.00,100.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1},
	{4988,2410.24,-1556.00,42.01, 0.00,0.00,-10.00,"Hier könnte Ihre Werbung stehen!",0,130,"Arial",26,1,-256,-8092540,1}
};

new	Werbetafelobject[MAX_WERBETAFELN];

enum SpielerDaten {
	sName[MAX_PLAYER_NAME],
	Float:sPosX,
	Float:sPosY,
	Float:sPosZ,
	Float:sPosA,
	sInterior,
	sVirtualWorld,
	sGeschlecht,
	sIPAdresse[16],
	sEmail[32],
	sStadt,
	sSpawn,
	sAdmin,
	sFraktion,
	sTeam,
	sRank,
	sLeader,
	sLastCrime[64],
	sKnast,
	sZelle,
	sEXP,
	sEXPNeeded,
	sWarns,
	sMuted,
	sADSperre,
	sBadword,
	sPerso,
	sStadtplan,
	sBankPin,
 	sBankkonto,
	sMission,
	sMissionComp,
	sTankstelle,
	sAmmunation,
	sStore,
	sHaus,
	sGarage,
	sGHaus,
	sMieter,
	sGMieter,
	sWanteds,
	sNebenjob,
	sQuitJob,
	sCarLic,
	sBikeLic,
	sFlugLic,
	sTruckLic,
	sBootLic,
	sWeaponLic,
	sKrankenhaus,
	sWiederbeleben,
	sPaket,
	sPayDay,
	sNavi,
	sHandy,
	sGuthaben,
	sTelefonbuch,
	sRepairkit,
	sMP3,
	sPBKills,
	sPBTode,
	sStartbonus,
    sBlitzerZeit,
    sFrakSperre,
    sGeld,
	icpNachrichten,
	icpHitsound,
	icpOChat,
	icpCamera,
	icpHandy,
	stvoCarLic,
	stvoBikeLic,
	stvoFlugLic,
	stvoTruckLic,
	stvoBootLic,
	sTicketsBearbeitet,
	sPayDayGeld,
	sJobEXP[6],
	sLotto[3],
	sDrogen,
	sTutorial,
	sQuest,
	sContract,
	sGLeader,
	sGruppe,
	sGRank,
	sFLeader,
	sFirma,
	sFRank,
	sGFirma,
	sDonator,
	sPremium,
	sMaterialien,
 	sOnline,
 	sKurrier,
 	sBombe,
 	sSpectate,
 	sPfandflaschen,
 	sBeutel,
 	sKampfstyle,
 	sHelm,
 	sDrogenPflanze,
 	sAuftrag,
 	bool:sC4RobState,
 	sc4
}
new SpielerInfo[MAX_PLAYERS][SpielerDaten];

enum FahrzeugData {
	fDatabaseID,
	fErstellt = false,
	fModelID,
	Float:fPosition[4],
	fColor[2],
	fPaintjob,
	fKennzeichen[10],
	fAbgeschleppt,
	fParkkralle,
	fKilometer,
	Float:fTank,
	fRang,
	fTuning[14],
	fFraktion,
	fGruppe,
	fFirma,
	fAutohaus,
	fNebenjob,
	fGarage,
	fGPark,
	fFahrschule,
	fSupmobil,
	fZiviroller,
	fImportCar,
	fKurrierCar,
	fPreis,
	Text3D:fLabel,
	fSupMobilObj[4],
	fBesitzer[24],
	fBesitzerID,
	fPizzaObjekt,
	fkGeld,
	fkC4,
	fJobEXP,
	fJobFahrer,
	fPDObject,
	fSirene[5],
	bool:fSireneBool,
	fBankrob,
	bool:fNeonStatus,
	fNeonColor,
	fNeonObj[2]
}
new FahrzeugInfo[MAX_VEHICLES][FahrzeugData];

enum GlobaleVariablen {
	crespawn,
	Rekord,
	AktuellClients,
	WerbungAktiv,
	OOC,
	Werbung
}
new GlobalVars[GlobaleVariablen];

enum PrivatCarDaten
{
	pcBesitzer[50],
	bool:pcCarErstellt,
	pcModelID,
	pcCarobj,
	Float:pcParkX,
	Float:pcParkY,
	Float:pcParkZ,
	Float:pcParkA,
	pcFarbe1,
	pcFarbe2,
	pcAbgeschleppt,
    pcParkkralle,
    pcKilometer,
   	pcLocked,
    Float:pcTank,
    pcSpoiler,
	pcHood,
	pcRoof,
	pcSideskirt,
	pcLamps,
	pcNitro,
	pcExhaust,
	pcWheels,
	pcStereo,
	pcHydraulics,
	pcFrontBumper,
	pcRearBumper,
	pcVentRight,
	pcVentLeft,
	pcPaintJob,
	pcdamagepanels,
	pcdamagedoors,
	pcdamagelights,
	pcdamagetires,
	Float:pcHealth,
	pcSchild[10]
}
new PrivatCar[MAX_PLAYERS][MAX_PCAR][PrivatCarDaten];

enum FrakDaten
{
	fiFrakID,
	fiFrakKasse,
	fiFrakMembers,
	fiFrakGVerbrecher,
	fiCarRespawn,
	fiCarRespawnTimer,
	fiMats,
	fiBomb,
	fiGFAktiv,
	fiWarGegner,
	fiWarPoints
}
new FrakInfo[21][FrakDaten];

enum VehicleDataNum {
	vehModelID,
	vehTankArt,
	Float:vehVerbrauch,
	vehLiter
}
new VehicleData[212][VehicleDataNum];

enum TankstellenDaten {
	tsBesitzer[24],
	tsBeschreibung[15],
	bool:tsErstellt,
 	tsPickup[3],
  	Text3D:tsText[3],
	tsPreis,
	tsKasse,
	tsBenzin,
	tsDiesel,
	tsKerosin,
	tsBenzinPreis,
	tsDieselPreis,
	tsKerosinPreis,
	tsBenzinLiter,
	tsDieselLiter,
	tsKerosinLiter,
	Float:tsPos_X[2],
	Float:tsPos_Y[2],
	Float:tsPos_Z[2],
	Float:tsEPos_X,
	Float:tsEPos_Y,
	Float:tsEPos_Z,
	Float:tsTPos_X,
	Float:tsTPos_Y,
	Float:tsTPos_Z,
	Float:tsTPos_R,
	tsIsFillingB,
	tsIsFillingD,
	tsIsFillingK,
	tsTafel
}
new TankstellenInfo[MAX_TSTELLEN][TankstellenDaten];

enum AmmunationData {
	amBesitzer[24],
	bool:amErstellt,
 	amPickup,
  	Text3D:amText,
	amPreis,
	amKasse,
	Float:amPos_X,
	Float:amPos_Y,
	Float:amPos_Z,
	amArmour,
	amSchlagring,
	amMesser,
	amBaseball,
	amDeagle,
	amMP5,
	amAK,
	amM4,
	amSniper,
	amFallschirm
}
new AmmunationInfo[MAX_AMMUS][AmmunationData];

enum StoreData {
	siBesitzer[24],
	bool:siErstellt,
 	siPickup,
  	Text3D:siText,
	siPreis,
	siKasse,
	siNavi,
	siHandy,
	siTelefonbuch,
	siRepairkit,
	siMP3,
	Float:siPos_X,
	Float:siPos_Y,
	Float:siPos_Z
}
new StoreInfo[MAX_STORES][StoreData];

enum HausData {
	hsBesitzer[24],
	bool:hsErstellt,
 	hsPickup,
  	Text3D:hsText,
	hsPreis,
	hsKasse,
	hsOrt,
	hsTyp,
	hsInterior,
	hsLocked,
	hsMietbar,
	hsMiete,
	hsHealth,
	Float:hsPos_X,
	Float:hsPos_Y,
	Float:hsPos_Z,
	Float:hsIPos_X,
	Float:hsIPos_Y,
	Float:hsIPos_Z
}
new HausInfo[MAX_HAUSER][HausData];

enum GaragenData {
	giBesitzer[24],
	bool:giErstellt,
 	giPickup,
  	Text3D:giText,
	giPreis,
	giOrt,
	giLocked,
	giMietbar,
	giMiete,
	giFahrzeug[10],
	Float:giPos_X,
	Float:giPos_Y,
	Float:giPos_Z,
	Float:giOPos_X,
	Float:giOPos_Y,
	Float:giOPos_Z,
	Float:giOPos_A
}
new GaragenInfo[MAX_GARAGEN][GaragenData];

enum DrogenData {
	dBesitzer[24],
	bool:dErstellt,
  	Text3D:dText,
	Float:dPos_X,
	Float:dPos_Y,
	Float:dPos_Z,
	dReife,
	dObject
}
new DrogenInfo[MAX_DROGEN][DrogenData];

enum ObjectInfo
{
	ID,
	FID,
	RID[5],
	ObjectID,
	Float:oPosX,
	Float:oPosY,
	Float:oPosZ,
	bool:Erstellt,
	Geschwindigkeit,
	BlitzerOrt[64]
}
new Blitzer[MAX_BLITZER][ObjectInfo];
new NagelBand[MAX_NAGELBAENDER][ObjectInfo];
new RoadBlock[MAX_SPERREN][ObjectInfo];
new SchildInfo[MAX_SCHILDER][ObjectInfo];
new FeuerInfo[MAX_FEUER][ObjectInfo];

enum FirmenData
{
	fName[24],
	fOwner[MAX_PLAYER_NAME],
	fSchild[5],
	fKasse,
	fUpgrade[2],
	fCarRespawn,
	fCarRespawnTimer,
	geburen,
	geburenLS,
	geburenSF,
	geburenLV,
	bool:fErstellt
}
new FirmenInfo[MAX_FIRMEN][FirmenData];

enum Firmen_Grundstuck
{
	firmengrid,
	firmengrcreate,
	firmenid,
	Float:fgposx,
	Float:fgposy,
	Float:fgposx2,
	Float:fgposy2,
	Float:iposx,
	Float:iposy,
	Float:iposz,
	fgrpreis,
	igekauft,
	Text3D:iLabel,
	iPickup,
	firmenname[64],
	grid
}
new GFirmaInfo[MAX_FIRMENGR][Firmen_Grundstuck];

enum Firma_Lager
{
	firmenlid,
	firmenlcreate,
	firmid,
	Float:flposx,
	Float:flposy,
	Float:flposz,
	Text3D:flLabel,
	flPickup,
	firmenname[64],
}
new FirmaLagerInfo[MAX_LAGER][Firma_Lager];

enum GruppenDaten
{
	gName[24],
	gSchild[5],
	gKasse,
	gUpgrade[2],
	gCarRespawn,
	gCarRespawnTimer,
	bool:gErstellt
}
new GruppenInfo[MAX_GRUPPEN][GruppenDaten];

new Badword[][]=
{
	{"Hurensohn"},
 	{"Mutterficker"},
  	{"Opfer"},
   	{"Kiddy"},
   	{"Huso"},
    {"Missgeburt"},
    {"Fresse"},
    {"Noob"},
    {"Knecht"},
    {"Lappen"},
    {"Fick"},
    {"Fuck"},
    {"Arschloch"},
    {"Huansohn"},
    {"Wichser"},
    {"Penner"},
    {"Basdart"},
    {"Pisser"},
    {"Fotze"},
    {"Nutte"},
    {"Pimmelberger"}
};

new FahrzeugName[212][] = {
    {"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},{"Feuerwehrtruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},
    {"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},{"Bobcat"},{"MrWhoopee"},{"BFInjection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},{"Predator"},
    {"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer1"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RCBandit"},{"Romero"},{"Packer"},{"Monster"},{"Admiral"},{"Squalo"},{"Seasparrow"},
    {"Pizzaboy"},{"Tram"},{"Trailer2"},{"Turismo"},{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"BerkleyRCVan"},{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},
    {"RCBaron"},{"RCRaider"},{"Glendale"},{"Oceanic"},{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},
    {"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},{"NewsChopper"},{"Rancher"},{"FBIRancher"},{"Virgo"},{"Greenwood"},{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},
    {"Police Maverick"},{"Boxville"},{"Benson"},{"Mesa"},{"RCGoblin"},{"HotringRacer A"},{"HotringRacer B"},{"BloodringBanger"},{"Rancher"},{"SuperGT"},{"Elegant"},{"Journey"},{"Bike"},{"MountainBike"},
    {"Beagle"},{"Cropdust"},{"Stunt"},{"Tanker"},{"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},{"NRG-500"},{"HPV1000"},{"CementTruck"},{"TowTruck"},{"Fortune"},
    {"Cadrona"},{"FBITruck"},{"Willard"},{"Forklift"},{"Traktor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},
	{"Sadler"},{"FiretruckLA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"MonsterA"},{"MonsterB"},{"Uranus"},
    {"Jester"},{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"FreightFlat"},{"SreakCarriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
    {"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"FreightCarriage"},
    {"Trailer3"},{"Andromada"},{"Dodo"},{"RCCam"},{"Launch"},{"Streifenwagen LS"},{"Streifenwagen SF"},{"Streifenwagen LV"},{"PoliceRanger"},{"Picador"},{"SWAT.Van"},{"Alpha"},{"Phoenix"},
    {"Glendale"},{"Sadler"},{"LuggageTrailerA"},{"LuggageTrailerB"},{"StairTrailer"},{"Boxville"},{"FarmPlow"},{"UtilityTrailer"}
};

new Float:ATMs[][6] =
{
	{1488.5000000,-1772.3000500,18.4000000,0.0000000,0.0000000,180.0000000},
	{611.5999800,-1430.0000000,13.7000000,0.0000000,0.0000000,89.9950000},
	{1083.0000000,-1228.8000500,15.5000000,0.0000000,0.0000000,89.9950000},
	{987.5999800,-1340.9000200,13.2000000,0.0000000,0.0000000,89.9950000},
	{1010.5999800,-929.2000100,42.0000000,0.0000000,0.0000000,5.9950000},
	{1367.1999500,-1285.3000500,13.2000000,0.0000000,0.0000000,269.9930000},
	{1928.5999800,-1769.8000500,13.2000000,0.0000000,0.0000000,89.9890000},
	{1765.782,-1708.801,13.137,0.000,0.000,90.000},
	{1765.782,-1710.402,13.137,0.000,0.000,90.000},
	{1765.782,-1712.003,13.137,0.000,0.000,90.000},
	{1765.782,-1713.721,13.137,0.000,0.000,90.000},
	{403.76410,-1808.20374,7.47311,0.00000,0.00000,0.00000},
	{395.53741,-1808.20374,7.47310,0.00000,0.00000,0.00000},
	{-1637.5000000,-2241.6001000,31.2000000,0.0000000,0.0000000,92.0000000}
};

new Float:Muelltonnen[][6] =
{
    {2513.974121, -1665.907959, 13.635386, 0.0000, 0.0000, 281.2500},
    {1993.576416, -1627.072998, 13.571859, 0.0000, 0.0000, 90.0000},
    {1451.862305, -1583.324219, 13.571859, 0.0000, 0.0000, 0.0000},
    {1365.263794, -1437.176758, 13.576775, 0.0000, 0.0000, 270.0000},
    {1309.862061, -911.458862, 38.660831, 0.0000, 6.8755, 0.0000},
    {1185.656372, -911.374084, 43.328209, 0.0000, 0.0000, 281.2500},
    {830.479492, -1068.277222, 25.186308, 0.0000, 0.0000, 168.7500},
    {330.864136, -1372.548828, 14.400108, 0.0000, 0.0000, 33.7500},
    {657.024292, -1766.828979, 13.597816, 0.0000, 0.0000, 258.7500},
    {1303.813232, -1862.807251, 13.521879, 0.0000, 0.0000, 180.0001},
    {-71.847382, -1163.344604, 1.951691, 0.0000, 0.0000, 157.5000},
    {-1809.748779, -187.621185, 13.377101, 0.0000, 2.5783, 1.7188},
    {-1911.473267, 308.637543, 41.109566, 0.0000, 0.0000, 0.0000},
    {-1662.103027, 456.034088, 7.167379, 0.0000, 0.0000, 45.0000},
    {-1989.635132, 957.548584, 45.420326, 0.0000, 0.0000, 0.0000},
    {-2044.343750, 142.218719, 28.860933, 0.0000, 0.0000, 270.0000},
    {1488.883911, -1687.149902, 14.109568, 0.0000, 0.0000, 270.0000}
};

new Float:LTMs[][3] =
{

	{822.0128,-0.3315,1004.1797},
	{822.0084,1.9170,1004.1797},
	{822.0084,4.1446,1004.1797},
	{822.0139,6.4092,1004.1797},
	{833.5985,3.2198,1004.1797},
	{830.6401,-0.2743,1004.1797}
};

new Float:GeldSack[][6] =
{
	{1771.6290000,-1705.7490000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1770.8890000,-1705.7220000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1771.4750000,-1704.6970000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1768.0230000,-1705.4020000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1769.0460000,-1705.4060000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1767.1060000,-1705.3240000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1768.3490000,-1705.9260000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1767.7410000,-1701.9270000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1767.8750000,-1699.0930000,12.9290000,0.0000000,0.0000000,0.0000000},
	{1767.5410000,-1699.7660000,12.9290000,0.0000000,0.0000000,0.0000000}
};

enum MuellRouteData
{
	mrObjekt,
	Float:mrPos_X,
	Float:mrPos_Y,
	Float:mrPos_Z,
	Float:mrRPos_X,
	Float:mrRPos_Y,
	Float:mrRPos_Z
};

new MuellRouteInfo[][MuellRouteData] =
{
	{2670, 1284.89087, -1704.31006, 12.64040,   0.00000, 0.00000, 0.00000},
	{2674, 1280.29834, -1704.37915, 12.59865,   0.00000, 0.00000, 0.00000},
	{2671, 1275.33130, -1704.14331, 12.59227,   0.00000, 0.00000, 0.00000},
	{2672, 1271.07483, -1704.40515, 12.83330,   0.00000, 0.00000, 0.00000},
	{2674, 1266.91479, -1704.35583, 12.56928,   0.00000, 0.00000, 0.00000},
	{2677, 1263.09155, -1704.59265, 12.82020,   0.00000, 0.00000, 0.00000},
	{2676, 1257.79138, -1704.18628, 12.64890,   0.00000, 0.00000, 0.00000},
	{2670, 1252.67273, -1704.55188, 12.64040,   0.00000, 0.00000, 0.00000},
	{2674, 1247.76123, -1704.43213, 12.59865,   0.00000, 0.00000, 0.00000},
	{2671, 1243.67346, -1704.21143, 12.59227,   0.00000, 0.00000, 0.00000},
	{2672, 1239.45361, -1704.47986, 12.83330,   0.00000, 0.00000, 0.00000},
	{2672, 1225.79236, -915.94470, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1224.88159, -906.38434, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1215.81470, -913.36035, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1214.73511, -904.83002, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1220.64722, -901.36859, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1221.69312, -890.61517, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1211.72058, -888.15552, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1208.30603, -877.69482, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1205.38757, -882.74469, 42.22700,   0.00000, 0.00000, 0.00000},
	{2672, 1199.53381, -886.05902, 42.28700,   0.00000, 0.00000, 0.00000},
	{2672, 1190.73914, -879.87592, 42.36700,   0.00000, 0.00000, 0.00000},
	{2672, 1184.98376, -887.42542, 42.44700,   0.00000, 0.00000, 0.00000},
	{2672, 1174.62549, -883.37927, 42.56700,   0.00000, 0.00000, 0.00000},
	{2672, 1174.29150, -896.72931, 42.60700,   0.00000, 0.00000, 0.00000},
	{2672, 1174.89490, -906.05841, 42.60700,   0.00000, 0.00000, 0.00000},
	{2672, 1178.02551, -917.36792, 42.60700,   0.00000, 0.00000, 0.00000},
	{2672, 1183.50281, -925.67419, 42.60700,   0.00000, 0.00000, 0.00000},
	{2672, 1197.84436, -923.58380, 42.60700,   0.00000, 0.00000, 0.00000}
};

enum BusRouteData
{
	bLinie,
	bRoute,
	Float:bPos_X,
	Float:bPos_Y,
	Float:bPos_Z,
};

new BusRouteInfo[][BusRouteData] =
{
	//Linie1 Gelb
	{1, 1, 1447.1656,-2374.7620,14.1412},
	{1, 2, 1283.6877,-1855.7738,13.0955},
	{1, 3, 1433.5641,-1735.3446,13.0874},
	{1, 4, 1532.4639,-1612.4889,13.0883},
	{1, 5, 1458.0858,-1382.5232,13.0877},
	{1, 6, 1579.3933,-1305.9955,17.0172},
	{1, 7, 1594.2197,-1158.0883,23.6118},
	{1, 8, 1430.9827,-1030.8872,23.3612},
	{1, 9, 1183.7302,-1036.2426,31.4685},
	{1, 10, 978.2889,-1035.8562,29.9053},
	{1, 11, 1218.2726,-946.6028,42.3445},
	{1, 12, 1459.5449,-2197.8384,13.3937},
	//Linie2 Grün
    {2, 1, 1388.4955,-2283.0198,13.0397},
	{2, 2, 2270.6770,-2308.9148,13.0792},
	{2, 3, 2153.9526,-2205.3623,13.0407},
	{2, 4, 1936.7617,-2163.4824,13.0870},
	{2, 5, 1315.7910,-1826.7411,13.0877},
	{2, 6, 1359.2850,-1444.9335,13.0915},
	{2, 7, 1361.1804,-1260.5115,13.0884},
	{2, 8, 942.7441,-1137.7500,23.3803},
	{2, 9, 623.8306,-1376.2482,13.2173},
	{2, 10, 778.1974,-1409.6351,13.0869},
	{2, 11, 1158.6934,-1409.3726,13.1587},
	{2, 12, 421.9309,-1578.6650,25.6755},
	{2, 13, 612.8347,-1679.9563,15.6976},
	{2, 14, 1004.1409,-1810.2122,13.7523},
	{2, 15, 1396.6735,-2289.8948,13.0761},
	//Linie3 Blau
	{3, 1, 2254.9478,-1146.8861,26.2074},
	{3, 2, 2431.8616,-1259.5483,23.5370},
	{3, 3, 2508.3765,-1428.5894,28.0639},
	{3, 4, 2187.1921,-1381.4426,23.5331},
	{3, 5, 2009.8409,-1337.2821,23.5252},
	{3, 6, 2511.5725,-1735.9471,13.0876},
	{3, 7, 2711.0703,-2024.0835,13.0165},
	{3, 8, 2294.7698,-2064.4883,13.0879},
	{3, 9, 2172.1868,-2360.3662,13.0757},
	{3, 10, 1388.8896,-2283.1199,13.0407},
	{3, 11, 1396.9742,-2289.7378,13.0770},
	//Linie4 Rot
	{4, 1, 1397.0582,-2290.1274,13.0767},
	{4, 2, 1005.0653,-1810.6642,13.7514},
	{4, 3, 444.8199,-1722.7677,9.6922},
	{4, 4, 168.8333,-1517.5500,11.9091},
	{4, 5, 448.1943,-1309.4574,14.7586},
	{4, 6, 764.7502,-1044.6700,23.5384},
	{4, 7, 1400.7461,-935.3553,34.5307},
	{4, 8, 2344.6082,-1151.2788,26.7674},
	{4, 9, 2917.5540,-1319.0519,10.5798},
	{4, 10, 2841.5264,-1905.2355,10.6415},
	{4, 11, 2270.0068,-2310.0842,13.0801},
	{4, 12, 1397.8367,-2289.2249,13.0801}
};

enum LandwirtData
{
	lStufe,
	lObjekt,
	Float:lPos_X,
	Float:lPos_Y,
	Float:lPos_Z,
	Float:lRPos_X,
	Float:lRPos_Y,
	Float:lRPos_Z
};

new LandwirtInfo[][LandwirtData] =
{
	//Stufe 1
	{1,19473, -123.29149, 104.45739, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -120.56922, 112.10774, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -118.24445, 118.83145, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -116.18787, 125.39165, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -114.06124, 131.60443, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -112.10784, 137.54149, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -110.24897, 143.27980, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -108.42908, 149.38266, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -131.64767, 107.71085, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -128.85739, 115.35144, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -126.49864, 121.94830, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -124.18604, 128.44554, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -122.20000, 134.56425, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -120.29657, 140.48058, 1.59695,   0.00000, 0.00000, 0.00000},
	{1,19473, -118.34426, 146.12245, 1.79795,   0.00000, 0.00000, 0.00000},
	{1,19473, -116.43598, 151.88351, 2.00299,   0.00000, 0.00000, 0.00000},
	{1,19473, -139.82378, 110.99606, 1.70203,   0.00000, 0.00000, 0.00000},
	{1,19473, -137.22540, 118.41414, 1.68767,   0.00000, 0.00000, 0.00000},
	{1,19473, -134.86977, 124.94325, 1.89996,   0.00000, 0.00000, 0.00000},
	{1,19473, -132.53661, 131.73393, 1.79795,   0.00000, 0.00000, 0.00000},
	{1,19473, -130.51050, 137.84602, 1.80404,   0.00000, 0.00000, 0.00000},
	{1,19473, -128.40164, 143.67638, 1.79795,   0.00000, 0.00000, 0.00000},
	{1,19473, -126.39527, 149.35236, 2.00299,   0.00000, 0.00000, 0.00000},
	{1,19473, -124.69233, 154.54172, 2.23079,   0.00000, 0.00000, 0.00000},
	//Stufe 2
	{2,826, -123.29150, 104.45740, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -120.56920, 112.10770, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -118.24440, 118.83150, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -116.18790, 125.39160, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -114.06120, 131.60440, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -112.10780, 137.54150, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -110.24900, 143.27980, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -108.42910, 149.38271, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -131.64771, 107.71080, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -128.85741, 115.35140, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -126.49860, 121.94830, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -124.18600, 128.44550, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -122.20000, 134.56430, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -120.29660, 140.48061, 3.59690,   0.00000, 0.00000, 0.00000},
	{2,826, -118.34430, 146.12250, 3.79790,   0.00000, 0.00000, 0.00000},
	{2,826, -116.43600, 151.88350, 3.00300,   0.00000, 0.00000, 0.00000},
	{2,826, -139.82381, 110.99610, 3.70200,   0.00000, 0.00000, 0.00000},
	{2,826, -137.22540, 118.41410, 3.68770,   0.00000, 0.00000, 0.00000},
	{2,826, -134.86980, 124.94330, 3.90000,   0.00000, 0.00000, 0.00000},
	{2,826, -132.53661, 131.73390, 3.79790,   0.00000, 0.00000, 0.00000},
	{2,826, -130.51050, 137.84599, 3.80400,   0.00000, 0.00000, 0.00000},
	{2,826, -128.40160, 143.67641, 3.79790,   0.00000, 0.00000, 0.00000},
	{2,826, -126.35120, 149.35980, 3.00300,   0.00000, 0.00000, 0.00000},
	{2,826, -124.69230, 154.54170, 3.23080,   0.00000, 0.00000, 0.00000},
	//Stufe 3
	{3,2901, -123.29150, 104.45740, 2.36120,   0.00000, 0.00000, 0.00000},
	{3,2901, -120.56920, 112.10770, 2.27273,   0.00000, 0.00000, 0.00000},
	{3,2901, -118.24450, 118.83150, 2.33626,   0.00000, 0.00000, 0.00000},
	{3,2901, -116.20650, 125.39900, 2.27679,   0.00000, 0.00000, 0.00000},
	{3,2901, -114.06120, 131.60440, 2.28091,   0.00000, 0.00000, 0.00000},
	{3,2901, -112.10780, 137.54150, 2.32875,   0.00000, 0.00000, 0.00000},
	{3,2901, -110.24900, 143.27980, 2.27275,   0.00000, 0.00000, 0.00000},
	{3,2901, -108.42910, 149.38271, 2.37785,   0.00000, 0.00000, 0.00000},
	{3,2901, -131.64079, 107.72960, 2.29994,   0.00000, 0.00000, 0.00000},
	{3,2901, -128.85741, 115.35140, 2.29600,   0.00000, 0.00000, 0.00000},
	{3,2901, -126.49860, 121.94830, 2.29803,   0.00000, 0.00000, 0.00000},
	{3,2901, -124.18600, 128.44550, 2.29397,   0.00000, 0.00000, 0.00000},
	{3,2901, -122.20000, 134.56430, 2.29399,   0.00000, 0.00000, 0.00000},
	{3,2901, -120.28550, 140.46390, 2.29399,   0.00000, 0.00000, 0.00000},
	{3,2901, -118.32760, 146.13361, 2.48890,   0.00000, 0.00000, 0.00000},
	{3,2901, -116.58955, 151.68192, 2.69997,   0.00000, 0.00000, 0.00000},
	{3,2901, -139.82381, 110.99610, 2.70200,   0.00000, 0.00000, 0.00000},
	{3,2901, -137.22540, 118.41410, 2.68770,   0.00000, 0.00000, 0.00000},
	{3,2901, -134.86980, 124.94330, 2.47349,   0.00000, 0.00000, 0.00000},
	{3,2901, -132.53661, 131.73390, 2.52052,   0.00000, 0.00000, 0.00000},
	{3,2901, -130.51050, 137.84599, 2.61116,   0.00000, 0.00000, 0.00000},
	{3,2901, -128.40160, 143.67641, 2.78984,   0.00000, 0.00000, 0.00000},
	{3,2901, -126.39530, 149.35240, 2.90099,   0.00000, 0.00000, 0.00000},
	{3,2901, -124.69230, 154.54170, 3.01864,   0.00000, 0.00000, 0.00000}
};

enum ExpData
{
	eLevel,
	eExp,
};

new ExpInfo[][ExpData] =
{
	{1, 400},
	{2, 800},
	{3, 1400},
	{4, 2000},
	{5, 3500},
	{6, 5000},
	{7, 7000},
	{8, 9000},
	{9, 12000},
	{10, 14000}
};

enum GPSInfo
{
    zone_name[30],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

new Float:Zones[][GPSInfo] = {
{ "'The Big Ear'",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
{ "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
{ "Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
{ "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
{ "Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
{ "Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
{ "Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
{ "Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
{ "Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
{ "Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
{ "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
{ "Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
{ "Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
{ "Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
{ "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
{ "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
{ "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
{ "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
{ "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
{ "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
{ "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
{ "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
{ "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
{ "Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
{ "Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
{ "Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
{ "Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
{ "Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
{ "Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
{ "Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
{ "City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
{ "Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
{ "Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
{ "Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
{ "Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
{ "Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
{ "Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
{ "Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
{ "Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
{ "Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
{ "Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
{ "Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
{ "Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
{ "Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
{ "Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
{ "Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
{ "Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
{ "Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
{ "Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
{ "Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
{ "Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
{ "Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
{ "Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
{ "Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
{ "Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
{ "Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
{ "Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
{ "Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
{ "Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
{ "Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
{ "East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
{ "East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
{ "East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
{ "East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
{ "East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
{ "East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
{ "East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
{ "East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
{ "East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
{ "East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
{ "East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
{ "Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
{ "Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
{ "Easter Bay Airport",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
{ "Easter Bay Airport",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
{ "Easter Bay Airport",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
{ "Easter Bay Airport",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
{ "Easter Bay Airport",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
{ "Easter Bay Airport",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
{ "Easter Bay Airport",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
{ "Easter Bay Airport",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
{ "Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
{ "Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
{ "El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
{ "El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
{ "El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
{ "El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
{ "El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
{ "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
{ "Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
{ "Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
{ "Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
{ "Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
{ "Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
{ "Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
{ "Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
{ "Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
{ "Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
{ "Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
{ "Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
{ "Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
{ "Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
{ "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
{ "Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
{ "Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
{ "Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
{ "Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
{ "Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
{ "Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
{ "Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
{ "Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
{ "Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
{ "Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
{ "Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
{ "Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
{ "~yGarver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
{ "Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
{ "Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
{ "Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
{ "Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
{ "Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
{ "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
{ "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
{ "Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
{ "Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
{ "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
{ "Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
{ "Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
{ "Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
{ "Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
{ "Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
{ "Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
{ "Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
{ "Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
{ "Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
{ "Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
{ "Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
{ "Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
{ "Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
{ "Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
{ "Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
{ "Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
{ "Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
{ "Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
{ "Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
{ "Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
{ "Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
{ "Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
{ "Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
{ "Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
{ "Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
{ "Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
{ "Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
{ "Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
{ "Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
{ "Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
{ "Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
{ "Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
{ "Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
{ "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
{ "Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
{ "Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
{ "Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
{ "King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
{ "King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
{ "King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
{ "LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
{ "LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
{ "LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
{ "LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
{ "LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
{ "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
{ "Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
{ "Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
{ "Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
{ "Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
{ "Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
{ "Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
{ "Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
{ "Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
{ "Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
{ "Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
{ "Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
{ "Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
{ "Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
{ "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
{ "Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
{ "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
{ "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
{ "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
{ "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
{ "Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
{ "Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
{ "Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
{ "Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
{ "Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
{ "Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
{ "Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
{ "Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
{ "Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
{ "Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
{ "Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
{ "Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
{ "Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
{ "Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
{ "Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
{ "Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
{ "Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
{ "Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
{ "Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
{ "Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
{ "Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
{ "Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
{ "Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
{ "Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
{ "Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
{ "Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
{ "Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
{ "Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
{ "Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
{ "Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
{ "Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
{ "Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
{ "Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
{ "Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
{ "Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
{ "Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
{ "Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
{ "Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
{ "North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
{ "Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
{ "Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
{ "Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
{ "Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
{ "Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
{ "Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
{ "Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
{ "Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
{ "Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
{ "Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
{ "Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
{ "Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
{ "Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
{ "Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
{ "Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
{ "Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
{ "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
{ "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
{ "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
{ "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
{ "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
{ "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
{ "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
{ "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
{ "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
{ "Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
{ "Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
{ "Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
{ "Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
{ "Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
{ "Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
{ "Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
{ "Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
{ "Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
{ "Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
{ "Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
{ "Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
{ "Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
{ "Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
{ "Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
{ "Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
{ "Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
{ "Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
{ "Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
{ "Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
{ "Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
{ "Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
{ "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
{ "Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
{ "Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
{ "Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
{ "Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
{ "Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
{ "Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
{ "Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
{ "Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
{ "Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
{ "Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
{ "Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
{ "Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
{ "Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
{ "Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
{ "Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
{ "Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
{ "Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
{ "Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
{ "San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
{ "Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
{ "Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
{ "Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
{ "Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
{ "Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
{ "Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
{ "Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
{ "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
{ "Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
{ "Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
{ "Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
{ "Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
{ "Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
{ "Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
{ "Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
{ "Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
{ "Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
{ "The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
{ "The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
{ "The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
{ "The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
{ "The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
{ "The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
{ "The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
{ "The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
{ "The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
{ "The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
{ "The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
{ "The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
{ "The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
{ "The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
{ "The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
{ "The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
{ "Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
{ "Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
{ "Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
{ "Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
{ "Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
{ "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
{ "Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
{ "Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
{ "Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
{ "Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
{ "Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
{ "Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
{ "Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
{ "Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
{ "Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
{ "Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
{ "Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
{ "Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
{ "Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
{ "Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
{ "Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
{ "Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
{ "Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
{ "Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
{ "~~Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00},
// Main Zones
{ "Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
{ "Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
{ "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
{ "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
{ "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
{ "San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
{ "Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
{ "Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
{ "Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum FastFoodData
{
	fiTyp,
	fiVWorld,
	fiInterior,
	Float:fEPos_X,
	Float:fEPos_Y,
	Float:fEPos_Z,
	Float:fIPos_X,
	Float:fIPos_Y,
	Float:fIPos_Z
};

new FastFoodInfo[][FastFoodData] =
{
	{1,1,10,1199.3014,-918.8158,43.1178,362.9392,-75.0602,1001.5078},//BSN
	{1,2,10,811.0084,-1616.3204,13.5469,362.9392,-75.0602,1001.5078},//BSN
	{1,3,10,1872.4272,2071.8528,11.0625,362.9392,-75.0602,1001.5078},//BSN
	{1,4,10,2472.2639,2034.2052,11.0625,362.9392,-75.0602,1001.5078},//BSN
	{1,5,10,-2336.8687,-166.8965,35.5547,362.9392,-75.0602,1001.5078},//BSN
	{2,1,9,-2672.1287,257.9261,4.6328,364.9103,-11.2952,1001.8516},//CluckingBel
	{2,2,9,928.5099,-1352.9032,13.3438,364.9103,-11.2952,1001.8516},//CluckingBell
	{2,3,9,2397.9097,-1899.0515,13.5469,364.9103,-11.2952,1001.8516},//CluckingBell
	{2,4,9,2393.2490,2042.0236,10.8203,364.9103,-11.2952,1001.8516},//CluckingBell
	{2,5,9,2420.2390,-1508.9371,24.0000,364.9103,-11.2952,1001.8516}//CluckingBell
};

enum GangZoneData {
	gzID,
	bool:gzErstellt,
	Float:gzX1,
	Float:gzY1,
	Float:gzX2,
	Float:gzY2,
	Float:gzCTFX,
	Float:gzCTFY,
	Float:gzCTFZ,
	gzOwner,
	gzAttacker,
	gzOwnerPunkte,
	gzAttackerPunkte,
	gzType,
	gzValue,
	gzLastFight,
	gzFightTime,
	Text3D:gzLabel,
	gzTimer,
	gzTimerLast,
	gzTimerWert,
	gzCTFTry,
	gzGebiet
}
new GangZoneInfo[MAX_GANGZONES][GangZoneData];

enum JobInfoDaten {
	jiID,
	jiGehalt
}
new JobInfo[MAX_JOBS][JobInfoDaten];

new ABC[26][] = {
    {"A"}, {"B"}, {"C"}, {"D"}, {"E"}, {"F"}, {"G"}, {"H"}, {"I"}, {"J"}, {"K"}, {"L"}, {"M"},
    {"N"}, {"O"}, {"P"}, {"Q"}, {"R"}, {"S"}, {"T"}, {"U"}, {"V"}, {"W"}, {"X"}, {"Y"}, {"Z"}
};

main()
{
	print("\nGerman Samplife | Reloaded");
	print("Copyright (c) 2023 bei ShadowKev1999 & c0kkie - Alle Rechte vorbehalten.\n");
}

public OnGameModeInit()
{
    AntiDeAMX();
	mysql_connection();
	SendRconCommand("hostname "SERV_NAME" | "SERV_SLOG"");
	SetGameModeText(SERV_LOAD);
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
	SendRconCommand("language "SERV_LANGUAGE"");
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	print("\n InGame Anti-Cheat Technolygs - "AC_VERSION" - LOADED \n");
			
	//Bots - German Samplife
	ConnectNPC("C4_Transporter","C4Transporter");
	
	C4Transporter = CreateVehicle(433, 727.0985,653.0384,9.9537,267.3164, 1, 1, -1);
	FahrzeugTank[C4Transporter] = VehicleData[GetVehicleModel(C4Transporter)-400][vehLiter];
	GetVehicleParamsEx(C4Transporter, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(C4Transporter, true, true, false, false, false, false, false);
	Motor[C4Transporter] = true;
	
	BotMichelle = CreateDynamicActor(11, 359.7139, 173.5797, 1008.3893, 268.1942, .interiorid = 3);
	
	BotEmilio = CreateDynamicActor(28, -1632.1375,-2241.5371,31.4766, 90.5599, .interiorid = 0);
	
	BotTracy = CreateDynamicActor(12, 204.8534,-8.0864,1001.2109, 267.9277, .interiorid = 5);
	
	BotBank[0] = CreateDynamicActor(11, 1779.8584,-1701.7178,13.5509, 183.0852, .interiorid = 0);
	
	BotBank[1] = CreateDynamicActor(11, 1778.4592,-1701.9597,13.5509, 177.6540, .interiorid = 0);
	
	BotTyler = CreateDynamicActor(37, 1027.7952,-1169.8268,18.7379, 88.7063, .interiorid = 0);
	
	BotMaut[0] = CreateDynamicActor(280, 56.9194,-1531.1129,5.3723, 347.5203, .interiorid = 0);//LS-SF
	
	BotMaut[1] = CreateDynamicActor(281, 50.0334,-1532.1726,5.3723, 170.8220, .interiorid = 0);//SF-LS
	
	BotMaut[2] = CreateDynamicActor(282, 1726.6248,522.5086,28.5074,251.3999, .interiorid = 0);//LV-LS
	
	BotMaut[3] = CreateDynamicActor(280, 1747.9623,514.1594,28.5074, 68.7482, .interiorid = 0);//LS-LV
	
	BotMaut[4] = CreateDynamicActor(281, 28.7410,-1342.2162,10.5739, 38.4527, .interiorid = 0);//SFTunnel - LSTunnel
	
	BotMaut[5] = CreateDynamicActor(280, -4.7365,-1319.9880,11.4619, 218.9344, .interiorid = 0);//LSTunnel - SFTunnel
	
	BotMaut[6] = CreateDynamicActor(280, 519.7160,467.2825,19.2211, 307.9220, .interiorid = 0);//LS - LV
	
	BotMaut[7] = CreateDynamicActor(282, 516.1275,472.4210,19.2211, 303.2220, .interiorid = 0);//LV - LS

 	for(new id = 0; id < MAX_BOTS; id++)
 	{
		BotBSN[id] = CreateDynamicActor(205, 377.1171,-65.6229,1001.5078,179.5881, .interiorid = 10, .worldid = id+1);

		BotCB[id] = CreateDynamicActor(167, 369.2933,-4.4847,1001.8516,178.6006, .interiorid = 9, .worldid = id+1);
	}
	Wetter();
	//SetTimer("Bizraubtimer", 991, true);
	SetTimer("Wetter",900000, true);
	SetTimer("ServerNews",900000,true);
	SetTimer("FeuerEinsatz",1800000,true);
	SetTimer("TorStatus",60000,true);
	SetTimer("BombeExplode",60000,true);
	//SetTimer("DrogenStatus",35000,true);
	SetTimer("DrogenStatus",1000,true);
	LoadJobInfos();
	
	ServerLadenTimer = SetTimer("ServerLaden",2000,true);
	ServerLadenStatus = 1;
    
	//Models News Definitionen
	SkinordnungGovernment = LoadModelSelectionMenu("Skinordnung/GOV.txt");
	SkinordnungSAPD = LoadModelSelectionMenu("Skinordnung/SAPD.txt");
	SkinordnungSFPD = LoadModelSelectionMenu("Skinordnung/SFPD.txt");
	SkinordnungLVPD = LoadModelSelectionMenu("Skinordnung/LVPD.txt");
	SkinordnungMEDIC = LoadModelSelectionMenu("Skinordnung/MEDIC.txt");
	SkinordnungFIRE = LoadModelSelectionMenu("Skinordnung/FIRE.txt");
	SkinordnungFBI = LoadModelSelectionMenu("Skinordnung/FBI.txt");
	SkinordnungOrdnungsamt = LoadModelSelectionMenu("Skinordnung/OAMT.txt");
	SkinordnungSanNews = LoadModelSelectionMenu("Skinordnung/SANNEWS.txt");
	SkinordnungGrove = LoadModelSelectionMenu("Skinordnung/GROVE.txt");
	SkinordnungBallas = LoadModelSelectionMenu("Skinordnung/BALLAS.txt");
	SkinordnungVagos = LoadModelSelectionMenu("Skinordnung/VAGOS.txt");
	SkinordnungAztecas = LoadModelSelectionMenu("Skinordnung/AZTECAS.txt");
	SkinordnungRifa = LoadModelSelectionMenu("Skinordnung/RIFA.txt");
	SkinordnungTriads = LoadModelSelectionMenu("Skinordnung/TRIADS.txt");
	SkinordnungDaNangBoys = LoadModelSelectionMenu("Skinordnung/BOYS.txt");
	SkinordnungBikers = LoadModelSelectionMenu("Skinordnung/BIKERS.txt");
	SkinordnungItalia = LoadModelSelectionMenu("Skinordnung/ITALIA.txt");
	SkinordnungRussia = LoadModelSelectionMenu("Skinordnung/RUSSIA.txt");
	
	SkinsBoy = LoadModelSelectionMenu("Skinordnung/SkinsBoy.txt");
	SkinsGirl = LoadModelSelectionMenu("Skinordnung/SkinsGirl.txt");
	
	//Menü´s - German Samplife
	Rathaus = CreateMenu("Auswahl", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Rathaus,0, "Nebenjobs");
	AddMenuItem(Rathaus,0, "Ausweise");
	AddMenuItem(Rathaus,0, "Versicherungen");
	AddMenuItem(Rathaus,0, "Verlassen");
	
	Schwarzmarkt = CreateMenu("Auswahl", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Schwarzmarkt,0, "Nebenjobs");
	AddMenuItem(Schwarzmarkt,0, "Verlassen");
	
	test1 = CreateMenu("Frage 1/4", 2, 233.0, 100.0, 150.0, 50.0);
	AddMenuItem(test1, 0, "A");
	AddMenuItem(test1, 0, "B");
	AddMenuItem(test1, 0, "C");

	test2 = CreateMenu("Frage 2/4", 2, 233.0, 100.0, 150.0, 50.0);
	AddMenuItem(test2, 0, "A");
	AddMenuItem(test2, 0, "B");
	AddMenuItem(test2, 0, "C");

	test3 = CreateMenu("Frage 3/4", 2, 233.0, 100.0, 150.0, 50.0);
	AddMenuItem(test3, 0, "A");
	AddMenuItem(test3, 0, "B");
	AddMenuItem(test3, 0, "C");

	test4 = CreateMenu("Frage 4/4", 2, 233.0, 100.0, 150.0, 50.0);
	AddMenuItem(test4, 0, "A");
	AddMenuItem(test4, 0, "B");
	AddMenuItem(test4, 0, "C");
	
	BSNMenu = CreateMenu("~r~Burger Shot",1,50.0,180.0,200.0,200.0);
    SetMenuColumnHeader(BSNMenu,0,"~r~Was darf es sein...?");
    AddMenuItem(BSNMenu,0,"Cola 2$");
	AddMenuItem(BSNMenu,0,"Cheeseburger 3$");
	AddMenuItem(BSNMenu,0,"Pommes 5$");
	AddMenuItem(BSNMenu,0,"Bigmac 6$");
	AddMenuItem(BSNMenu,0,"Hamburger Royal 12$");
	
	//3DTextLabel´s & Pickup´s - German Samplife
	
	//San Fiero Police Department
	
	//Ort: Los Santos
	AddStaticPickup(1318, 1, 1564.7876,-1666.4253,28.3956, -1); //LSPD Heli Port Aussen
	Create3DTextLabel("{FFFFFF}LSPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1564.7876,-1666.4253,28.3956, 5.0, 0, false);
	AddStaticPickup(1318, 1, 1575.3047,-1672.2520,1261.2506, -1); //LSPD Heli Port Interior
	Create3DTextLabel("{FFFFFF}LSPD Landeplatz\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1575.3047,-1672.2520,1261.2506, 5.0, 0, false);
	AddStaticPickup(1318, 1, 1524.4829,-1677.8102,6.2188, -1); //LSPD Garage Eingang
	Create3DTextLabel("{FFFFFF}LSPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1524.4829,-1677.8102,6.2188, 5.0, 0, false);
	AddStaticPickup(1318, 1, 1567.2225,-1677.1238,1261.2506, -1); //LSPD Garage Ausgang
	Create3DTextLabel("{FFFFFF}Tiefgarage\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1567.2225,-1677.1238,1261.2506, 5.0, 0, false);
	AddStaticPickup(1318, 1, 1554.1569,-1675.6135,16.1953, -1); //LSPD Normaler Eingang
	Create3DTextLabel("{FFFFFF}Los Santos Police Department\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1554.1569,-1675.6135,16.1953, 5.0, 0, false);
	AddStaticPickup(1318, 1, 1561.6913,-1667.1575,1261.2506, -1); //LSPD Normaler Ausgang
	Create3DTextLabel("{FFFFFF}Los Santos Police Department\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 1561.6913,-1667.1575,1261.2506, 5.0, 0, false);
	AddStaticPickup(1242, 1, 1606.7407,-1672.1595,1257.7506, -1);//LSPD Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, 1606.7407,-1672.1595,1257.7506, 5.0, 0, false);
    AddStaticPickup(1581, 1, 1566.0325,-1659.9797,1261.2506, -1);//LSPD Waffenschein
	Create3DTextLabel("{FFFFFF}Waffenschein\nBenutze '{FF0000}/waffenschein{FFFFFF}'\num ein Waffenschein zu kaufen", 0x008080FF, 1566.0325,-1659.9797,1261.2506, 5.0, 0, false);
 	AddStaticPickup(1247, 1, 1567.7245,-1660.0066,1261.2506, -1);//LSPD Stellen Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/stellen{FFFFFF}'\num dich zu stellen", 0x008080FF, 1567.7245,-1660.0066,1261.2506, 5.0, 0, false);
	AddStaticPickup(1239, 1, 1564.0399,-1660.1068,1261.2506, -1);//LSPD /freikaufen
	Create3DTextLabel("{FEFEFE}Benutze '{FF0000}/freikaufen{FEFEFE}'\n um ein Fahrzeug freizukaufen", 0x008080FF, 1564.0399,-1660.1068,1261.2506, 5.0, 0, false);

	//Ort: San Fierro
	AddStaticPickup(1318, 1, -1594.1666,716.2354,-4.9063, -1); //SFPD Garage Eingang
	Create3DTextLabel("{FFFFFF}SFPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -1594.1666,716.2354,-4.9063, 5.0, 0, false);
	AddStaticPickup(1318, 1, 213.9759,122.1085,999.0156, -1); //SFPD Garage Ausgang
	Create3DTextLabel("{FFFFFF}Tiefgarage\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 213.9759,122.1085,999.0156, 5.0, 0, false);
	AddStaticPickup(1318, 1, -1605.6135,710.8735,13.8672, -1); //SFPD Normaler Eingang
	Create3DTextLabel("{FFFFFF}SFPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -1605.6135,710.8735,13.8672, 5.0, 0, false);
	AddStaticPickup(1318, 1, 246.4395,107.2980,1003.2188, -1); //SFPD Normaler Ausgang
	Create3DTextLabel("{FFFFFF}SFPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 246.4395,107.2980,1003.2188, 5.0, 0, false);
	AddStaticPickup(1242, 1, 231.1223,113.2377,1003.2188, -1);//SFPD Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, 231.1223,113.2377,1003.2188, 5.0, 0, false);
 	AddStaticPickup(1581, 1, 252.1846,117.4193,1003.2188, -1);//SFPD Waffenschein
	Create3DTextLabel("{FFFFFF}Waffenschein\nBenutze '{FF0000}/waffenschein{FFFFFF}'\num ein Waffenschein zu kaufen", 0x008080FF, 252.1846,117.4193,1003.2188, 5.0, 0, false);

    //Ort: Las Venturas
	AddStaticPickup(1318, 1, 2282.1255,2423.9487,3.4766, -1); //LVPD Garage Eingang
	Create3DTextLabel("{FFFFFF}LVPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 2282.1255,2423.9487,3.4766, 5.0, 0, false);
	AddStaticPickup(1318, 1, 238.7352,139.3221,1003.0234, -1); //LVPD Garage Ausgang
	Create3DTextLabel("{FFFFFF}Tiefgarage\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 238.7352,139.3221,1003.0234, 5.0, 0, false);
	AddStaticPickup(1318, 1, 2340.2913,2458.3687,14.9688, -1); //LVPD Normaler Eingang
	Create3DTextLabel("{FFFFFF}LVPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 2340.2913,2458.3687,14.9688, 5.0, 0, false);
	AddStaticPickup(1318, 1, 288.6907,167.7179,1007.1719, -1); //LVPD Normaler Ausgang
	Create3DTextLabel("{FFFFFF}LVPD\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 288.6907,167.7179,1007.1719, 5.0, 0, false);
	AddStaticPickup(1242, 1, 210.4058,185.9881,1003.0313, -1);//LVPD Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, 210.4058,185.9881,1003.0313, 5.0, 0, false);
	AddStaticPickup(1581, 1, 292.4972,180.1965,1007.1794, -1);//LVPD Waffenschein
	Create3DTextLabel("{FFFFFF}Waffenschein\nBenutze '{FF0000}/waffenschein{FFFFFF}'\num ein Waffenschein zu kaufen", 0x008080FF, 292.4972,180.1965,1007.1794, 5.0, 0, false);
	
	//Ort: Dillimore
	AddStaticPickup(1318, 1, 627.3911,-571.7522,17.9145, -1); //Dillimore Normaler Eingang
	Create3DTextLabel("{FFFFFF}Dillimore Station\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 627.3911,-571.7522,17.9145, 5.0, 0, false);
	AddStaticPickup(1318, 1, 322.1980,302.4980,999.1484, -1); //Dillimore Normaler Ausgang
	Create3DTextLabel("{FFFFFF}Dillimore Station\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 322.1980,302.4980,999.1484, 5.0, 0, false);
	AddStaticPickup(1242, 1, 327.1490,307.2458,999.1484, -1);//Dillimore Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, 327.1490,307.2458,999.1484, 5.0, 0, false);
	
	//Federal Bureau of Investigation
	AddStaticPickup(1318, 1, -2204.4993,250.6758,35.3366, -1); //FBI Normaler Eingang
	Create3DTextLabel("{FFFFFF}FBI\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -2204.4993,250.6758,35.3366, 5.0, 0, false);
	AddStaticPickup(1318, 1, -2457.1377,503.8396,25.0943, -1); //FBI Normaler Ausgang
	Create3DTextLabel("{FFFFFF}FBI\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, -2457.1377,503.8396,25.0943, 5.0, 0, false);
	AddStaticPickup(1242, 1, -2469.2332,514.7144,25.0943, -1);//FBI Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, -2469.2332,514.7144,25.0943, 5.0, 0, false);
	
	//San Andreas Rettungdienst
	AddStaticPickup (1318,1,1650.2196,-1245.3818,15.4659,-1);//Los Santos Krankenhaus Eingang
    Create3DTextLabel("{FFFFFF}Krankenhaus\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1650.2196,-1245.3818,15.4659, 5.0, false);
   	AddStaticPickup (1318,1,1171.0063,-1323.0872,-0.8598,-1);//Los Santos Krankenhaus Ausgang
    Create3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 1171.0063,-1323.0872,-0.8598, 5.0, false);
   	AddStaticPickup (1318,1,1644.9175,-1230.3513,21.1381,-1);//Los Santos Krankenhaus Heli Eingang
    Create3DTextLabel("{FFFFFF}Krankenhaus\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1644.9175,-1230.3513,21.1381, 5.0, false);
   	AddStaticPickup (1318,1,1161.4039,-1316.7357,-0.8598,-1);//Los Santos Krankenhaus Heli Ausgang
    Create3DTextLabel("{FFFFFF}Landeplatz\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 1161.4039,-1316.7357,-0.8598, 5.0, false);
	AddStaticPickup(1242, 1, 1164.5529,-1335.2123,-0.8598, -1);//Krankenhaus Equip & Duty
	Create3DTextLabel("{FEFEFE}Benutze die {FF0000}Taste N{FEFEFE} zum equiptieren\nBenutze die {FF0000}Taste N{FEFEFE} um den Dienst zu betreten/verlassen", 0x008080FF, 1164.5529,-1335.2123,-0.8598, 5.0, 0, false);

	//San Andreas News 1
	AddStaticPickup (1318,1,648.4459,-1353.8932,13.5470,-1);//Los Santos San News Eingang
    Create3DTextLabel("{FFFFFF}News Base\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF,648.4459,-1353.8932,13.5470, 5.0, false);
   	AddStaticPickup (1318,1,694.4180,-1369.1532,1695.4110,-1);//Los Santos San Nes Ausgang
    Create3DTextLabel("{FFFFFF}Hauptstraße\n{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 694.4180,-1369.1532,1695.4110, 5.0, false);
    
	//San Andreas News 2
	AddStaticPickup (1318,1,733.4227,-1349.4966,13.5074,-1);//Los Santos San News Eingang
    Create3DTextLabel("{FFFFFF}News Base\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 733.4227,-1349.4966,13.5074, 5.0, false);
   	AddStaticPickup (1318,1,689.0656,-1368.9789,1695.4110,-1);//Los Santos San Nes Ausgang
    Create3DTextLabel("{FFFFFF}Hof\n{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 689.0656,-1368.9789,1695.4110, 5.0, false);
    
	//San News Lottoscheinausgabe
	AddStaticPickup (1318,1,648.5452,-1360.5887,13.5873,-1);//Los Santos Lottoscheinausgabe Eingang
    Create3DTextLabel("{FFFFFF}Lotto\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 648.5452,-1360.5887,13.5873, 5.0, false);
   	AddStaticPickup (1318,1,834.1218,7.3493,1004.1870,-1);//Los Santos Lottoscheinausgabe Ausgang
    Create3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 834.1218,7.3493,1004.1870, 5.0, false);
    
    //International Contract Agency
   	AddStaticPickup (1318,1,1566.8313,23.2738,24.1641,-1);//International Contract Agency Eingang
    Create3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1566.8313,23.2738,24.1641, 5.0, false);
   	AddStaticPickup (1318,1,-2158.6436,642.9801,1052.3750,-1);//International Contract Agency Ausgang
    Create3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, -2158.6436,642.9801,1052.3750, 5.0, false);
    
    //Spezial - Missionen
   	ImportCarPickup = CreatePickup (1210,2,-2433.4509,2313.6296,4.9844,-1);//Importfahrzeug - Bayside
    Create3DTextLabel("{FFFFFF}Spezial Mission:\n{FB944F}Importfahrzeug der Stunde", 0x008080FF, -2433.4509,2313.6296,4.9844, 10.0, false);
   	KurrierPickup[0] = CreatePickup (1210,2,777.7709,-1016.0993,26.3594,-1);//Kurrierdienst - Los Santos
    Create3DTextLabel("{FFFFFF}Spezial Mission:\n{FB944F}Kurrierdienst", 0x008080FF, 777.7709,-1016.0993,26.3594, 10.0, false);
   	KurrierPickup[1] = CreatePickup (1210,2,-939.4828,1425.3187,30.4340,-1);//Kurrierdienst - Fort Carson
    Create3DTextLabel("{FFFFFF}Spezial Mission:\n{FB944F}Kurrierdienst", 0x008080FF, -939.4828,1425.3187,30.4340, 10.0, false);
   	KurrierPickup[2] = CreatePickup (1210,2,2300.5251,1928.7410,10.8440,-1);//Kurrierdienst - Las Venturas
    Create3DTextLabel("{FFFFFF}Spezial Mission:\n{FB944F}Kurrierdienst", 0x008080FF, 2300.5251,1928.7410,10.8440, 10.0, false);
    
    //Neon - Garage
   	AddStaticPickup (1274,1,1569.3154,-2154.8662,14.0352,-1);//Neon Punkt
    Create3DTextLabel("{FF0000}Neon Shop\n{FFFFFF}Benutze die '{FF0000}Taste N{FFFFFF}'\num den Neon Shop zu öffnen", 0x008080FF, 1569.3154,-2154.8662,14.0352, 5.0, false);
    
    //Materialien System - Gang/Mafien
   	AddStaticPickup (1239,1,1083.0126,-1226.7549,15.8203,-1);//Materialien Punkt
    Create3DTextLabel("{FF0000}Materialien\n{FFFFFF}Benutze '{FF0000}/mats{FFFFFF}'\num dir Materialien zu holen", 0x008080FF, 1083.0126,-1226.7549,15.8203, 5.0, false);
   	AddStaticPickup (1239,1,-1826.3789,42.1302,15.1228,-1);//Waffenteile Punkt
    Create3DTextLabel("{FF0000}Materialien Changer\n{FFFFFF}Benutze '{FF0000}/waffenteile{FFFFFF}'\num die Materialien zu wechseln", 0x008080FF, -1826.3789,42.1302,15.1228, 5.0, false);
    
	for(new ltm=0; ltm<sizeof(LTMs); ltm++)
 	{
 	    AddStaticPickup(1274, 1, LTMs[ltm][0],LTMs[ltm][1],LTMs[ltm][2], -1);
 	    Create3DTextLabel("{FFFFFF}Lottoschein {FF0000}120$\n{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/lotto [0-9] [0-9] [0-9]{FFFFFF}", 0x008080FF, LTMs[ltm][0],LTMs[ltm][1],LTMs[ltm][2], 10.0, false);
 	}

	//Gangs
	AddStaticPickup(1318, 1, 2495.2358,-1690.7219,14.7656, -1); //Grove Street Eingang
	Create3DTextLabel("{FFFFFF}Grove Street Families\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 2495.2358,-1690.7219,14.7656, 10.0, 0, false);
	AddStaticPickup(1318, 1, 1999.8800,-1114.5149,27.1250, -1); //Ballas Eingang
	Create3DTextLabel("{FFFFFF}Rolling High Ballas\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1999.8800,-1114.5149,27.1250, 10.0, 0, false);
	AddStaticPickup(1318, 1, 2549.6614,-1032.2898,69.5789, -1); //Vagos Eingang
	Create3DTextLabel("{FFFFFF}Los Santos Vagos\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 2549.6614,-1032.2898,69.5789, 10.0, 0, false);
	AddStaticPickup(1318, 1, 2508.2561,-1998.5865,13.9025, -1); //Aztecas Eingang
	Create3DTextLabel("{FFFFFF}Mara Salvatrucha\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 2508.2561,-1998.5865,13.9025, 10.0, 0, false);
	AddStaticPickup(1318, 1, -2462.7795,132.3849,35.1719, -1); //Rifa Eingang
	Create3DTextLabel("{FFFFFF}San Fierro Rifa\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -2462.7795,132.3849,35.1719, 10.0, 0, false);
	AddStaticPickup(1318, 1, -2192.6589,647.2322,49.4375, -1); //Triads Eingang
	Create3DTextLabel("{FFFFFF}Triaden\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -2192.6589,647.2322,49.4375, 10.0, 0, false);
	AddStaticPickup(1318, 1, -1862.1187,-145.3209,11.8984, -1); //Yakuza Eingang
	Create3DTextLabel("{FFFFFF}Yakuza\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, -1862.1187,-145.3209,11.8984, 10.0, 0, false);
	AddStaticPickup(1318, 1, 1447.6503,362.0286,18.9134, -1); //Camorra
	Create3DTextLabel("{FFFFFF}Camorra\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1447.6503,362.0286,18.9134, 10.0, 0, false);
	AddStaticPickup(1318, 1, 985.9162,2000.5089,11.4609, -1); //Italian Mafia
	Create3DTextLabel("{FFFFFF}Italian Mafia\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 985.9162,2000.5089,11.4609, 10.0, 0, false);
	AddStaticPickup(1318, 1, 302.3475,-1154.6626,81.3429, -1); //Russen Mafia
	Create3DTextLabel("{FFFFFF}Russian Mafia\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 302.3475,-1154.6626,81.3429, 10.0, 0, false);
	AddStaticPickup(1318, 1, 2495.9895,-1692.4834,1014.7422, -1); //Gangbase Ausgang
	Create3DTextLabel("{FFFFFF}Gangbase\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 2495.9895,-1692.4834,1014.7422, 10.0, 0, false);
	
	//Autohaus - Los Santos
	AddStaticPickup(1274, 1, 1864.6090,-1598.8942,13.6107, -1);
	Create3DTextLabel("{FFFFFF}Autohaus [ID:{FF0000}1{FFFFFF}]\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/autohaus{FFFFFF}' um dir\nein Fahrzeug zu kaufen", 0x008080FF, 1864.6090,-1598.8942,13.6107, 7.5, 0, false);
	
	//Motorradhändler - Los Santos
	AddStaticPickup(1274, 1, 1811.1904,-1398.9595,13.6169, -1);
	Create3DTextLabel("{FFFFFF}Motorradhändler [ID:{FF0000}2{FFFFFF}]\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/autohaus{FFFFFF}' um dir\nein Fahrzeug zu kaufen", 0x008080FF, 1811.1904,-1398.9595,13.6169, 7.5, 0, false);
	
	//Autohaus - San Fiero
	AddStaticPickup(1274, 1, -1538.5326,1161.8965,7.1947, -1);
	Create3DTextLabel("{FFFFFF}Autohaus [ID:{FF0000}3{FFFFFF}]\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/autohaus{FFFFFF}' um dir\nein Fahrzeug zu kaufen", 0x008080FF, -1538.5326,1161.8965,7.1947, 7.5, 0, false);
	
	//Stadthalle - Los Santos
	AddStaticPickup(1318, 1, 1480.9746,-1771.4373,18.7958, -1);
	Create3DTextLabel("{FFFFFF}Stadthalle Los Santos\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 1480.9746,-1771.4373,18.7958, 10.0, 0, false);
	AddStaticPickup(1239, 1, 362.2921,173.6492,1008.3828, -1);
	Create3DTextLabel("{FFFFFF}Stadthalle Rezeption\nBenutze '{FF0000}TASTE N{FFFFFF}' oder '{FF0000}/stadthalle{FFFFFF}'\num Michelle S. anzusprechen", 0x008080FF, 362.2921,173.6492,1008.3828, 10.0, 0, false);
	AddStaticPickup(1314, 1, 358.5327,180.3977,1008.3828, -1);
	Create3DTextLabel("{FFFFFF}Gruppe Beantragung\nBenutze '{FF0000}TASTE N{FFFFFF}' oder '{FF0000}/creategruppe{FFFFFF}'\num eine Gruppe zu gründen", 0x008080FF, 358.5327,180.3977,1008.3828, 10.0, 0, false);

	//Schwarzmarkt
	AddStaticPickup(1239, 1, -1634.1162,-2241.6426,31.4766, -1);
	Create3DTextLabel("{FFFFFF}Schwarzmarkt\nBenutze '{FF0000}TASTE N{FFFFFF}' oder '{FF0000}/schwarzmarkt{FFFFFF}'\num Emilio anzusprechen", 0x008080FF, -1634.1162,-2241.6426,31.4766, 10.0, 0, false);

	//Stadthalle - Ausgang ALLE
    AddStaticPickup(1318, 1, 389.0450,173.6811,1008.3828, -1);
	Create3DTextLabel("{FFFFFF}Stadthalle\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 389.0450,173.6811,1008.3828, 10.0, 0, false);
	
	//German Samplife - Banksystem
	AddStaticPickup(1274, 1, 1778.7935,-1703.7747,13.5609, -1); // Bank LS - Menu 1
	Create3DTextLabel("{FFFFFF}Bankschalter: 1\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/bank{FFFFFF}'", 0x008080FF, 1778.7935,-1703.7747,13.5609, 10.0, 0, false);
	AddStaticPickup(1274, 1, 1780.3076,-1703.8090,13.5629, -1); // Bank LS - Menu 2
	Create3DTextLabel("{FFFFFF}Bankschalter: 2\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/bank{FFFFFF}'", 0x008080FF, 1780.3076,-1703.8090,13.5629, 10.0, 0, false);
	
	//24/7 | Tankstelle
 	AddStaticPickup(1318, 1, 6.091179,-29.271898,1003.549438, -1);
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 6.091179,-29.271898,1003.549438,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,10,-1,100.0);

    //Ammunation
 	AddStaticPickup(1318, 1, 286.148986,-40.644397,1001.515625, -1);
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 286.148986,-40.644397,1001.515625,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,1,-1,100.0);
	AddStaticPickup(1274, 1, 295.7924,-38.2544,1001.5156, -1);
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}/buygun{FFFFFF}'\num dir eine Waffe zu kaufen", 0x008080FF, 295.7924,-38.2544,1001.5156,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,1,-1,100.0);

   	//24/7
 	AddStaticPickup(1318, 1, -25.9209,-141.0923,1003.5469, -1);
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, -25.9209,-141.0923,1003.5469,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,16,-1,100.0);
	AddStaticPickup(1274, 1, -22.1672,-138.5988,1003.5469, -1);
	CreateDynamic3DTextLabel("{FFFFFF}Kasse\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/einkaufen{FFFFFF}'\num einzukaufen", 0x008080FF, -22.1672,-138.5988,1003.5469,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,16,-1,100.0);

	//Holzfäller Job - Los Santos
	AddStaticPickup(1275, 1, 1106.1093,-299.7448,74.5391, -1); //Duty
    Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 1106.1093,-299.7448,74.5391, 10.0, 0, false);
   	CreatePickup(1318,1,941.1444,2115.9941,1011.0850);
   	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 941.1444,2115.9941,1011.0850,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,10,-1,100.0);
	CreatePickup(1318,1,2414.0754,-1425.8801,23.9848);
	AddStaticPickup(1239, 1, 941.8840,2130.2949,1011.0850, -1);
	Create3DTextLabel("{FFFFFF}Zerhäcksler\nBenutze '{FF0000}N{FFFFFF}'", 0x008080FF, 941.8840,2130.2949,1011.0850, 10.0, 0, false);
	
	//Pizzabote Los Santos
	AddStaticPickup(1318, 1, 2104.8403,-1806.5245,13.5547, -1); //Pizzaria Eingang Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}' um die Pizzaria zu betreten", 0x008080FF, 2104.8403,-1806.5245,13.5547, 10.0, false);
	AddStaticPickup(1318, 1, 372.3678,-133.3004,1001.4922, -1); //Pizzaria Ausgang Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}' um die Pizzaria zu Verlassen", 0x008080FF, 372.3678,-133.3004,1001.4922, 10.0, false);
	AddStaticPickup(1582, 1, 379.7354,-116.4596,1001.4922, -1); //Pizzaria Pizza Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N{FFFFFF}' oder '{FF0000}/pizza{FFFFFF}'\num Pizzen zu nehmen", 0x008080FF, 379.7354,-116.4596,1001.4922, 10.0, false);
	AddStaticPickup(1275, 1, 369.0709,-114.6389,1001.4995, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 369.0709,-114.6389,1001.4995, 10.0, 0, false);
	
	//Kehrmaschinenfahrer Job - Los Santos
	AddStaticPickup(1275, 1, 1378.4637,-1640.7590,13.5469, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 1378.4637,-1640.7590,13.5469, 10.0, 0, false);
	
	//Pilot Job - Los Santos
	AddStaticPickup(1275, 1, 1957.0295,-2183.6008,13.5469, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 1957.0295,-2183.6008,13.5469, 10.0, 0, false);
	
	//Busfahrer Job - Los Santos
	AddStaticPickup(1275, 1, 1523.1068,-2325.8340,13.5469, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 1523.1068,-2325.8340,13.5469, 10.0, 0, false);
	
	//Müllmann Job - Los Santos
	AddStaticPickup(1275, 1, 1734.5929,-2060.1526,13.5910, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, 1734.5929,-2060.1526,13.5910, 10.0, 0, false);
	
	//Landwirt Job - Los Santos
	AddStaticPickup(1275, 1, -62.7901,76.2742,3.1172, -1); //Duty
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/jduty{FFFFFF}' um den Dienst zu starten", 0x008080FF, -62.7901,76.2742,3.1172, 10.0, 0, false);
	
	//Automatische Fahrschule Los Santos
	AddStaticPickup(1318, 1, 1021.5202,-1349.9446,13.5506, -1); //Eingang Automatische Fahrschule
	Create3DTextLabel("{FFFFFF}Fahrschule\nBenutze '{FF0000}Enter{FFFFFF}'\num die Fahrschule zu betreten.", 0x008080FF, 1021.5202,-1349.9446,13.5506, 10.0, false);
	AddStaticPickup(1318, 1, 1494.5062,1304.1451,1093.2891, -1); //Ausgang Automatische Fahrschule
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}'\num die Fahrschule zu verlassen.", 0x008080FF, 1494.5062,1304.1451,1093.2891, 10.0, false);
	AddStaticPickup(1239, 1, 1490.5149,1305.8287,1093.2964, -1); //Prüfung Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/fahrschule{FFFFFF}' oder '{FF0000}TASTE N'", 0x008080FF, 1490.5149,1305.8287,1093.2964, 20.0, false);

	//Bankrob Los Santos
	AddStaticPickup(1274, 1, 1773.3085,-1699.7356,13.5509, -1); //Bankrob Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/bankrob{FFFFFF}' um die Bank auszurauben", 0x008080FF, 1773.3085,-1699.7356,13.5509, 10.0, false);

	//Fraktionskiste
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/kiste{FFFFFF}' um Waffen zunehmen.", 0x008080FF, 2493.24243, -1707.50134, 1015.58276, 5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,3,-1,100.0);

	//BSN + Cluckin Bell Bestellung-Point
	AddStaticPickup(1274, 1, 377.0177,-67.6665,1001.5151, -1); //BSN Bestellung Icon
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/bestellen{FFFFFF}'\num dir etwas Essen zu bestellen", 0x008080FF, 377.0177,-67.6665,1001.5151, 5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,10,-1,5.0);
	AddStaticPickup(1274, 1, 369.4442,-6.2557,1001.8516, -1); //Cluckin Bell Bestellung Icon
	CreateDynamic3DTextLabel("{FFFFFF}Benutze '{FF0000}N' {FFFFFF}oder {FF0000}'/bestellen{FFFFFF}'\num dir etwas Essen zu bestellen", 0x008080FF, 377.0177,-67.6665,1001.5151, 5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,9,-1,5.0);

	//Paintball - Los Santos
	AddStaticPickup(1318, 1, 1024.1505,-983.4423,42.6440, -1); //Eingang Paintballarena
	Create3DTextLabel("{FFFFFF}Paintballarena\nBenutze '{FF0000}Enter{FFFFFF}'\num die Paintballarena zu betreten.\nEintritt: {FF0000}250$", 0x008080FF, 1024.1505,-983.4423,42.6440, 10.0, false);

	//Fallschirm - Los Santos
	FallschirmPickup = CreatePickup(1310,2,1544.4348,-1353.2225,329.4745); // Fallschirm Punkt
	AddStaticPickup(1318, 1, 1570.7537,-1337.1708,16.4844, -1); //Eingang Fallschirm springen
	Create3DTextLabel("{FFFFFF}Fallschirm springen\nBenutze '{FF0000}Enter{FFFFFF}'\nzum betreten", 0x008080FF, 1570.7537,-1337.1708,16.4844, 10.0, false);
	AddStaticPickup(1318, 1, 1548.5597,-1364.1962,326.2183, -1); //Ausgang Fallschirm springen
	Create3DTextLabel("{FFFFFF}Ausgang\nBenutze '{FF0000}Enter{FFFFFF}'\nzum verlassen", 0x008080FF, 1548.5597,-1364.1962,326.2183, 10.0, false);
	
	//Los Santos Zivispawn - Labels & Icons
	AddStaticPickup(1239, 1, 1025.5607,-1169.8518,18.7379, -1); //Rollerverleih
	Create3DTextLabel("{FFFFFF}Rollerverleih\nBenutze '{FF0000}/roller{FFFFFF}'\num dir einen Roller zu leihen", 0x008080FF, 1025.5607,-1169.8518,18.7379, 10.0, false);

	//Mautstationen
	AddStaticPickup(1274, 1, 1730.1222,520.3935,28.2204, -1); //LV-LS
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 1730.1222,520.3935,28.2204, 10.0, false);
	AddStaticPickup(1274, 1, 1743.9443,515.8735,28.2149, -1); //LS-LV
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 1743.9443,515.8735,28.2149, 10.0, false);
	AddStaticPickup(1274, 1, 56.1354,-1525.3245,4.9989, -1); //LS-SF
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 56.1354,-1525.3245,4.9989, 10.0, false);
	AddStaticPickup(1274, 1, 49.5451,-1538.1730,5.1519, -1); //SF-LS
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 49.5451,-1538.1730,5.1519, 10.0, false);
	AddStaticPickup(1274, 1, 26.1980,-1338.1219,10.1589, -1); // SFTunnel - LSTunnel
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 26.1980,-1338.1219,10.1589, 10.0, false);
	AddStaticPickup(1274, 1, -1.1519,-1323.5649,11.2628, -1); // LSTunnel - SFTunnel
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, -1.1519,-1323.5649,11.2628, 10.0, false);
	AddStaticPickup(1274, 1, 523.5012,469.5414,18.9297, -1); // LS - LV
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 523.5012,469.5414,18.9297, 10.0, false);
	AddStaticPickup(1274, 1, 518.9169,475.9107,18.9297, -1); // LV - LS
	Create3DTextLabel("{FFFFFF}Mautstation\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num die Maut zu bezahlen\nKosten: {FF0000}50$", 0x008080FF, 518.9169,475.9107,18.9297, 10.0, false);
	
	//Bomben System
	AddStaticPickup(1252, 1, 268.67346, 1883.53430, -30.26508, -1); //Bombe
	Create3DTextLabel("{FFFFFF}Bombe\nBenutze die'{FF0000}TASTE N{FFFFFF}'\num eine Bombe zu stehlen", 0x008080FF, 268.67346, 1883.53430, -30.26508, 10.0, false);
	
	//Victim - Los Santos
	AddStaticPickup(1318, 1, 461.4087,-1500.8523,31.0597, -1); //Eingang
	Create3DTextLabel("{FFFFFF}Victim\nBenutze '{FF0000}ENTER{FFFFFF}' zum betreten", 0x008080FF, 461.4087,-1500.8523,31.0597, 10.0, 0, false);
	AddStaticPickup(1318, 1, 227.4834,-8.1822,1002.2109, -1); //Ausgang
	Create3DTextLabel("{FFFFFF}Ausgang\nBenutze '{FF0000}ENTER{FFFFFF}' zum verlassen", 0x008080FF, 227.4834,-8.1822,1002.2109, 10.0, 0, false);
 	AddStaticPickup(1275, 1, 206.3749,-8.0665,1001.2109, -1);//Kaufen Pickup
	Create3DTextLabel("{FFFFFF}Klamotten\nBenutze '{FF0000}/klamotten{FFFFFF}'\num dir neue Kleidung zu kaufen", 0x008080FF, 206.3749,-8.0665,1001.2109, 5.0, 0, false);
	
	//Obi Baumarkt - Los Santos
	Create3DTextLabel("{FFFFFF}OBI Baumarkt\nBenutze '{FF0000}/baumarkt{FFFFFF}' {FFFFFF}' oder '{FF0000}TASTE N'{FFFFFF}\num einzukaufen",0x008080FF,2532.0051,-1519.2444,24.1094,5.0,0,false);
	AddStaticPickup(19131,1,2532.0051,-1519.2444,24.1094,0);
	
	//Gym - Los Santos
	AddStaticPickup(1318, 1, 2229.9260,-1721.2809,13.5615, -1); //Eingang
	Create3DTextLabel("{FFFFFF}Gym\nBenutze '{FF0000}Enter{FFFFFF}'\num das Gym zu betreten.", 0x008080FF, 2229.9260,-1721.2809,13.5615, 10.0, false);
	AddStaticPickup(1318, 1, 772.3620,-5.0215,1000.7288, -1); //Ausgang
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}'\num das Gym zu verlassen.", 0x008080FF, 772.3620,-5.0215,1000.7288, 10.0, false);
	AddStaticPickup(1274, 1, 756.8801,5.5222,1000.7000, -1); //Kauf Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/kampfstyles{FFFFFF}' oder '{FF0000}TASTE N'", 0x008080FF, 756.8801,5.5222,1000.7000, 10.0, false);
	
 	//Gym - San Fierro
 	AddStaticPickup(1318, 1, -2270.2954,-155.9197,35.3203, -1); //Eingang
	Create3DTextLabel("{FFFFFF}Gym\nBenutze '{FF0000}Enter{FFFFFF}'\num das Gym zu betreten.", 0x008080FF, -2270.2954,-155.9197,35.3203, 10.0, false);
	AddStaticPickup(1318, 1, 774.1077,-50.3713,1000.5859, -1); //Ausgang
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}'\num das Gym zu verlassen.", 0x008080FF, 774.1077,-50.3713,1000.5859, 10.0, false);
	AddStaticPickup(1274, 1, 768.1483,-37.2912,1000.6865, -1); //Kauf Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/kampfstyles{FFFFFF}' oder '{FF0000}TASTE N'", 0x008080FF, 768.1483,-37.2912,1000.6865, 20.0, false);
	
 	//Gym - Las Venturas
 	AddStaticPickup(1318, 1, 1968.8300,2295.7092,16.4559, -1); //Eingang
	Create3DTextLabel("{FFFFFF}Gym\nBenutze '{FF0000}Enter{FFFFFF}'\num das Gym zu betreten.", 0x008080FF, 1968.8300,2295.7092,16.4559, 10.0, false);
	AddStaticPickup(1318, 1, 773.8901,-78.5057,1000.6623, -1); //Ausgang
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}Enter{FFFFFF}'\num das Gym zu verlassen.", 0x008080FF, 773.8901,-78.5057,1000.6623, 10.0, false);
	AddStaticPickup(1274, 1, 774.9591,-62.3417,1000.7184, -1); //Kauf Icon
	Create3DTextLabel("{FFFFFF}Benutze '{FF0000}/kampfstyles{FFFFFF}' oder '{FF0000}TASTE N'", 0x008080FF, 774.9591,-62.3417,1000.7184, 20.0, false);
	
	//TextDraws - German Samplife
    BlackScreendraw = TextDrawCreate(1.000000,1.000000,"_");
 	TextDrawUseBox(BlackScreendraw,true);
 	TextDrawBoxColour(BlackScreendraw,0x000000FF);
 	TextDrawTextSize(BlackScreendraw,641.000000,10.000000);
 	TextDrawAlignment(BlackScreendraw,TEXT_DRAW_ALIGN_LEFT);
 	TextDrawBackgroundColour(BlackScreendraw,0x00000000);
 	TextDrawFont(BlackScreendraw,TEXT_DRAW_FONT_3);
 	TextDrawLetterSize(BlackScreendraw,1.000000,51.000000);
	TextDrawColour(BlackScreendraw,0x000000FF);
	TextDrawSetOutline(BlackScreendraw,1);
	TextDrawSetProportional(BlackScreendraw,true);
	TextDrawSetShadow(BlackScreendraw,1);
	
	Logindraw[0] = TextDrawCreate(503.666900, 116.403656, "usebox");
	TextDrawLetterSize(Logindraw[0], 0.000000, 12.282096);
	TextDrawTextSize(Logindraw[0], 133.333312, 0.000000);
	TextDrawAlignment(Logindraw[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[0], 0);
	TextDrawUseBox(Logindraw[0], true);
	TextDrawBoxColour(Logindraw[0], 102);
	TextDrawSetShadow(Logindraw[0], 0);
	TextDrawSetOutline(Logindraw[0], 0);
	TextDrawFont(Logindraw[0], TEXT_DRAW_FONT_0);

	Logindraw[1] = TextDrawCreate(504.333343, 46.300003, "usebox");
	TextDrawLetterSize(Logindraw[1], 0.000000, 5.486214);
	TextDrawTextSize(Logindraw[1], 134.000030, 0.000000);
	TextDrawAlignment(Logindraw[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[1], 0);
	TextDrawUseBox(Logindraw[1], true);
	TextDrawBoxColour(Logindraw[1], 102);
	TextDrawSetShadow(Logindraw[1], 0);
	TextDrawSetOutline(Logindraw[1], 0);
	TextDrawFont(Logindraw[1], TEXT_DRAW_FONT_0);

	Logindraw[2] = TextDrawCreate(490.666870, 128.848114, "usebox");
	TextDrawLetterSize(Logindraw[2], 0.000000, 3.377161);
	TextDrawTextSize(Logindraw[2], 143.666534, 0.000000);
	TextDrawAlignment(Logindraw[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[2], 0);
	TextDrawUseBox(Logindraw[2], true);
	TextDrawBoxColour(Logindraw[2], 102);
	TextDrawSetShadow(Logindraw[2], 0);
	TextDrawSetOutline(Logindraw[2], 0);
	TextDrawFont(Logindraw[2], TEXT_DRAW_FONT_0);

	Logindraw[3] = TextDrawCreate(264.333312, 176.966690, "usebox");
	TextDrawLetterSize(Logindraw[3], 0.000000, 3.219137);
	TextDrawTextSize(Logindraw[3], 143.999954, 0.000000);
	TextDrawAlignment(Logindraw[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[3], 0);
	TextDrawUseBox(Logindraw[3], true);
	TextDrawBoxColour(Logindraw[3], 102);
	TextDrawSetShadow(Logindraw[3], 0);
	TextDrawSetOutline(Logindraw[3], 0);
	TextDrawFont(Logindraw[3], TEXT_DRAW_FONT_0);

	Logindraw[4] = TextDrawCreate(504.333435, 99.396278, "usebox");
	TextDrawLetterSize(Logindraw[4], 0.000000, 1.415426);
	TextDrawTextSize(Logindraw[4], 133.333374, 0.000000);
	TextDrawAlignment(Logindraw[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[4], 0);
	TextDrawUseBox(Logindraw[4], true);
	TextDrawBoxColour(Logindraw[4], 8257535);
	TextDrawSetShadow(Logindraw[4], 0);
	TextDrawSetOutline(Logindraw[4], 0);
	TextDrawBackgroundColour(Logindraw[4], 8257535);
	TextDrawFont(Logindraw[4], TEXT_DRAW_FONT_0);

	Logindraw[5] = TextDrawCreate(504.333404, 230.892669, "usebox");
	TextDrawLetterSize(Logindraw[5], 0.000000, 1.340945);
	TextDrawTextSize(Logindraw[5], 133.333404, 0.000000);
	TextDrawAlignment(Logindraw[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[5], 0);
	TextDrawUseBox(Logindraw[5], true);
	TextDrawBoxColour(Logindraw[5], 8257535);
	TextDrawSetShadow(Logindraw[5], 0);
	TextDrawSetOutline(Logindraw[5], 0);
	TextDrawFont(Logindraw[5], TEXT_DRAW_FONT_0);

	Logindraw[6] = TextDrawCreate(145.000000, 97.896301, "HERZLICH WILLKOMMEN AUF ROSALIFE!");
	TextDrawLetterSize(Logindraw[6], 0.251332, 1.512889);
	TextDrawAlignment(Logindraw[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[6], -1);
	TextDrawSetShadow(Logindraw[6], 0);
	TextDrawSetOutline(Logindraw[6], 1);
	TextDrawBackgroundColour(Logindraw[6], 8257535);
	TextDrawFont(Logindraw[6], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[6], true);

	Logindraw[7] = TextDrawCreate(240.999877, 48.948146, "RIME    F   IFE");
	TextDrawLetterSize(Logindraw[7], 0.574666, 2.948148);
	TextDrawAlignment(Logindraw[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[7], -1);
	TextDrawSetShadow(Logindraw[7], 0);
	TextDrawSetOutline(Logindraw[7], 1);
	TextDrawBackgroundColour(Logindraw[7], 51);
	TextDrawFont(Logindraw[7], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[7], true);

	Logindraw[8] = TextDrawCreate(148.666702, 128.592559, "Hallo.~n~Willkommen auf Rosalife, deinem neuartigen Reallife Server. Suche nun~n~eine Aktion zum Fortfahren aus!");
	TextDrawLetterSize(Logindraw[8], 0.180996, 1.077332);
	TextDrawAlignment(Logindraw[8], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[8], -1);
	TextDrawSetShadow(Logindraw[8], 0);
	TextDrawSetOutline(Logindraw[8], 1);
	TextDrawBackgroundColour(Logindraw[8], 51);
	TextDrawFont(Logindraw[8], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[8], true);

	Logindraw[9] = TextDrawCreate(307.666625, 168.829605, "Message of the Day");
	TextDrawLetterSize(Logindraw[9], 0.449999, 1.600000);
	TextDrawAlignment(Logindraw[9], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[9], -1);
	TextDrawSetShadow(Logindraw[9], 0);
	TextDrawSetOutline(Logindraw[9], 1);
	TextDrawBackgroundColour(Logindraw[9], 51);
	TextDrawFont(Logindraw[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Logindraw[9], true);

	Logindraw[10] = TextDrawCreate(307.000061, 183.762985, "-");
	TextDrawLetterSize(Logindraw[10], 10.940002, 0.625185);
	TextDrawAlignment(Logindraw[10], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[10], 8257535);
	TextDrawSetShadow(Logindraw[10], 0);
	TextDrawSetOutline(Logindraw[10], 1);
	TextDrawBackgroundColour(Logindraw[10], 51);
	TextDrawFont(Logindraw[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Logindraw[10], true);

	Logindraw[11] = TextDrawCreate(304.000061, 190.400009, "Keine");
	TextDrawLetterSize(Logindraw[11], 0.203333, 1.322075);
	TextDrawAlignment(Logindraw[11], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[11], -1);
	TextDrawSetShadow(Logindraw[11], 0);
	TextDrawSetOutline(Logindraw[11], 1);
	TextDrawBackgroundColour(Logindraw[11], 51);
	TextDrawFont(Logindraw[11], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Logindraw[11], true);

	Logindraw[12] = TextDrawCreate(247.666717, 75.081481, "We are Leaving Ground");
	TextDrawLetterSize(Logindraw[12], 0.244665, 1.122963);
	TextDrawAlignment(Logindraw[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[12], -1);
	TextDrawSetShadow(Logindraw[12], 0);
	TextDrawSetOutline(Logindraw[12], 1);
	TextDrawBackgroundColour(Logindraw[12], 51);
	TextDrawFont(Logindraw[12], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[12], true);

	Logindraw[13] = TextDrawCreate(225.333190, 48.948143, "C");
	TextDrawLetterSize(Logindraw[13], 0.574666, 2.948148);
	TextDrawAlignment(Logindraw[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[13], 8257535);
	TextDrawSetShadow(Logindraw[13], 0);
	TextDrawSetOutline(Logindraw[13], 1);
	TextDrawBackgroundColour(Logindraw[13], 51);
	TextDrawFont(Logindraw[13], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[13], true);

	Logindraw[14] = TextDrawCreate(309.333618, 48.948184, "O");
	TextDrawLetterSize(Logindraw[14], 0.574666, 2.948148);
	TextDrawAlignment(Logindraw[14], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[14], 8257535);
	TextDrawSetShadow(Logindraw[14], 0);
	TextDrawSetOutline(Logindraw[14], 1);
	TextDrawBackgroundColour(Logindraw[14], 51);
	TextDrawFont(Logindraw[14], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[14], true);

	Logindraw[15] = TextDrawCreate(351.000122, 48.948154, "L");
	TextDrawLetterSize(Logindraw[15], 0.574666, 2.948148);
	TextDrawAlignment(Logindraw[15], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Logindraw[15], 8257535);
	TextDrawSetShadow(Logindraw[15], 0);
	TextDrawSetOutline(Logindraw[15], 1);
	TextDrawBackgroundColour(Logindraw[15], 51);
	TextDrawFont(Logindraw[15], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Logindraw[15], true);
	
	Loginstring = TextDrawCreate(176.333358, 183.762954, "LOGIN");
	TextDrawLetterSize(Loginstring, 0.449999, 1.600000);
	TextDrawTextSize(Loginstring, 231.666702, 4.562963);
	TextDrawAlignment(Loginstring, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Loginstring, -1);
	TextDrawSetShadow(Loginstring, 0);
	TextDrawSetOutline(Loginstring, 1);
	TextDrawBackgroundColour(Loginstring, 51);
	TextDrawFont(Loginstring, TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Loginstring, true);
	TextDrawSetSelectable(Loginstring, true);

	Registring = TextDrawCreate(158.999938, 183.762924, "REGISTER");
	TextDrawLetterSize(Registring, 0.449999, 1.600000);
	TextDrawTextSize(Registring, 247.999969, 17.422222);
	TextDrawAlignment(Registring, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Registring, -1);
	TextDrawSetShadow(Registring, 0);
	TextDrawSetOutline(Registring, 1);
	TextDrawBackgroundColour(Registring, 51);
	TextDrawFont(Registring, TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Registring, true);
	TextDrawSetSelectable(Registring, true);

	FlyerDraw[0] = TextDrawCreate(419.000000, 100.000000, "~r~");
	TextDrawBackgroundColour(FlyerDraw[0], 255);
	TextDrawFont(FlyerDraw[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[0], 0.500000, 30.000000);
	TextDrawColour(FlyerDraw[0], -1);
	TextDrawSetOutline(FlyerDraw[0], 0);
	TextDrawSetProportional(FlyerDraw[0], true);
	TextDrawSetShadow(FlyerDraw[0], 1);
	TextDrawUseBox(FlyerDraw[0], true);
	TextDrawBoxColour(FlyerDraw[0], -1);
	TextDrawTextSize(FlyerDraw[0], 230.000000, 10.000000);
	TextDrawSetSelectable(FlyerDraw[0], false);

	FlyerDraw[1] = TextDrawCreate(236.000000, 102.000000, "LOADSUK:loadsc4");
	TextDrawBackgroundColour(FlyerDraw[1], 255);
	TextDrawFont(FlyerDraw[1], TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize(FlyerDraw[1], 0.500000, 1.000000);
	TextDrawColour(FlyerDraw[1], -1);
	TextDrawSetOutline(FlyerDraw[1], 0);
	TextDrawSetProportional(FlyerDraw[1], true);
	TextDrawSetShadow(FlyerDraw[1], 1);
	TextDrawUseBox(FlyerDraw[1], true);
	TextDrawBoxColour(FlyerDraw[1], 255);
	TextDrawTextSize(FlyerDraw[1], 90.000000, 80.000000);
	TextDrawSetSelectable(FlyerDraw[1], false);

	FlyerDraw[2] = TextDrawCreate(330.000000, 119.000000, "Party?~n~Spass?~n~Arbeit?~n~Unterkunft?");
	TextDrawBackgroundColour(FlyerDraw[2], 255);
	TextDrawFont(FlyerDraw[2], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[2], 0.400000, 1.000000);
	TextDrawColour(FlyerDraw[2], -1);
	TextDrawSetOutline(FlyerDraw[2], 1);
	TextDrawSetProportional(FlyerDraw[2], true);
	TextDrawSetSelectable(FlyerDraw[2], false);

	FlyerDraw[3] = TextDrawCreate(235.000000, 189.000000, "Wenn Sie der Meinung sind Ihr Leben waere~n~langweilig. Dann liegt das daran das Sie nicht in~n~San Andreas leben!");
	TextDrawBackgroundColour(FlyerDraw[3], 255);
	TextDrawFont(FlyerDraw[3], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[3], 0.200000, 1.000000);
	TextDrawColour(FlyerDraw[3], -1);
	TextDrawSetOutline(FlyerDraw[3], 1);
	TextDrawSetProportional(FlyerDraw[3], true);
	TextDrawSetSelectable(FlyerDraw[3], false);

	FlyerDraw[4] = TextDrawCreate(235.000000, 229.000000, "Die 3 beliebtesten amerikanischen Staaten bieten ~n~Ihnen alles was Sie brauchen!~n~Los Santos, San Fierro, Las Venturas.");
	TextDrawBackgroundColour(FlyerDraw[4], 255);
	TextDrawFont(FlyerDraw[4], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[4], 0.200000, 1.000000);
	TextDrawColour(FlyerDraw[4], -1);
	TextDrawSetOutline(FlyerDraw[4], 1);
	TextDrawSetProportional(FlyerDraw[4], true);
	TextDrawSetSelectable(FlyerDraw[4], false);

	FlyerDraw[5] = TextDrawCreate(235.000000, 269.000000, "Es ist gar nicht so schwer wie Sie es glauben!~n~Richten Sie Ihre Ziele ein und kommen Sie nach~n~San Andreas!");
	TextDrawBackgroundColour(FlyerDraw[5], 255);
	TextDrawFont(FlyerDraw[5], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[5], 0.200000, 1.000000);
	TextDrawColour(FlyerDraw[5], -1);
	TextDrawSetOutline(FlyerDraw[5], 1);
	TextDrawSetProportional(FlyerDraw[5], true);
	TextDrawSetSelectable(FlyerDraw[5], false);

	FlyerDraw[6] = TextDrawCreate(370.000000, 320.000000, "LD_CHAT:thumbup");
	TextDrawBackgroundColour(FlyerDraw[6], 255);
	TextDrawFont(FlyerDraw[6], TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize(FlyerDraw[6], 0.500000, 1.000000);
	TextDrawColour(FlyerDraw[6], -1);
	TextDrawSetOutline(FlyerDraw[6], 0);
	TextDrawSetProportional(FlyerDraw[6], true);
	TextDrawSetShadow(FlyerDraw[6], 1);
	TextDrawUseBox(FlyerDraw[6], true);
	TextDrawBoxColour(FlyerDraw[6], 255);
	TextDrawTextSize(FlyerDraw[6], 30.000000, 30.000000);
	TextDrawSetSelectable(FlyerDraw[6], false);

	FlyerDraw[7] = TextDrawCreate(240.000000, 310.000000, "Jetzt mit JunkAir!");
	TextDrawBackgroundColour(FlyerDraw[7], 255);
	TextDrawFont(FlyerDraw[7], TEXT_DRAW_FONT_3);
	TextDrawLetterSize(FlyerDraw[7], 0.400000, 1.000000);
	TextDrawColour(FlyerDraw[7], -1);
	TextDrawSetOutline(FlyerDraw[7], 1);
	TextDrawSetProportional(FlyerDraw[7], true);
	TextDrawSetSelectable(FlyerDraw[7], false);

	FlyerDraw[8] = TextDrawCreate(240.000000, 330.000000, "nur ~r~57$ ~w~p.P!");
	TextDrawBackgroundColour(FlyerDraw[8], 255);
	TextDrawFont(FlyerDraw[8], TEXT_DRAW_FONT_3);
	TextDrawLetterSize(FlyerDraw[8], 0.400000, 1.000000);
	TextDrawColour(FlyerDraw[8], -1);
	TextDrawSetOutline(FlyerDraw[8], 1);
	TextDrawSetProportional(FlyerDraw[8], true);
	TextDrawSetSelectable(FlyerDraw[8], false);

	FlyerDraw[9] = TextDrawCreate(254.000000, 361.000000, "Flyer by German Samplife - Wir machen beeinDRUCKenden Druck!");
	TextDrawBackgroundColour(FlyerDraw[9], 255);
	TextDrawFont(FlyerDraw[9], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[9], 0.130000, 1.000000);
	TextDrawColour(FlyerDraw[9], 255);
	TextDrawSetOutline(FlyerDraw[9], 0);
	TextDrawSetProportional(FlyerDraw[9], true);
	TextDrawSetShadow(FlyerDraw[9], 0);
	TextDrawSetSelectable(FlyerDraw[9], false);
	
	FlyerDraw[10] = TextDrawCreate(230.000000, 380.000000, ">> FERTIG GELESEN <<");
	TextDrawBackgroundColour(FlyerDraw[10], 255);
	TextDrawFont(FlyerDraw[10], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(FlyerDraw[10], 0.500000, 1.000000);
	TextDrawColour(FlyerDraw[10], -1);
	TextDrawSetOutline(FlyerDraw[10], 0);
	TextDrawSetProportional(FlyerDraw[10], true);
	TextDrawSetShadow(FlyerDraw[10], 1);
	TextDrawSetSelectable(FlyerDraw[10], false);

	//Lottoschein
	LottoSchein[0] = TextDrawCreate(320.000000, 142.000000, "~n~");
	TextDrawAlignment(LottoSchein[0], TEXT_DRAW_ALIGN_CENTER);
	TextDrawBackgroundColour(LottoSchein[0], 255);
	TextDrawFont(LottoSchein[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(LottoSchein[0], 0.500000, 23.000000);
	TextDrawColour(LottoSchein[0], -1);
	TextDrawSetOutline(LottoSchein[0], 0);
	TextDrawSetProportional(LottoSchein[0], true);
	TextDrawSetShadow(LottoSchein[0], 1);
	TextDrawUseBox(LottoSchein[0], true);
	TextDrawBoxColour(LottoSchein[0], -1);
	TextDrawTextSize(LottoSchein[0], 430.000000, 110.000000);

	LottoSchein[1] = TextDrawCreate(265.000000, 142.000000, "~n~");
	TextDrawAlignment(LottoSchein[1], TEXT_DRAW_ALIGN_CENTER);
	TextDrawBackgroundColour(LottoSchein[1], 255);
	TextDrawFont(LottoSchein[1], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(LottoSchein[1], 0.500000, 23.000000);
	TextDrawColour(LottoSchein[1], -1);
	TextDrawSetOutline(LottoSchein[1], 0);
	TextDrawSetProportional(LottoSchein[1], true);
	TextDrawSetShadow(LottoSchein[1], 1);
	TextDrawUseBox(LottoSchein[1], true);
	TextDrawBoxColour(LottoSchein[1], -16776961);
	TextDrawTextSize(LottoSchein[1], 420.000000, 0.000000);

	LottoSchein[2] = TextDrawCreate(375.000000, 142.000000, "~n~");
	TextDrawAlignment(LottoSchein[2], TEXT_DRAW_ALIGN_CENTER);
	TextDrawBackgroundColour(LottoSchein[2], 255);
	TextDrawFont(LottoSchein[2], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(LottoSchein[2], 0.500000, 23.000000);
	TextDrawColour(LottoSchein[2], -1);
	TextDrawSetOutline(LottoSchein[2], 0);
	TextDrawSetProportional(LottoSchein[2], true);
	TextDrawSetShadow(LottoSchein[2], 1);
	TextDrawUseBox(LottoSchein[2], true);
	TextDrawBoxColour(LottoSchein[2], -16776961);
	TextDrawTextSize(LottoSchein[2], 420.000000, 0.000000);

	LottoSchein[3] = TextDrawCreate(320.000000, 144.000000, "SPIELQUITTUNG~n~~n~~n~~n~LOTTO 3/9");
	TextDrawAlignment(LottoSchein[3], TEXT_DRAW_ALIGN_CENTER);
	TextDrawBackgroundColour(LottoSchein[3], 255);
	TextDrawFont(LottoSchein[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(LottoSchein[3], 0.270000, 1.099999);
	TextDrawColour(LottoSchein[3], 255);
	TextDrawSetOutline(LottoSchein[3], 0);
	TextDrawSetProportional(LottoSchein[3], true);
	TextDrawSetShadow(LottoSchein[3], 0);


	LottoSchein[4] = TextDrawCreate(274.000000, 173.000000, "-----------------------------~n~~n~~n~~n~~n~~n~~n~------------------------------~n~~n~~n~~n~~n~------------------------------");
	TextDrawBackgroundColour(LottoSchein[4], 255);
	TextDrawFont(LottoSchein[4], TEXT_DRAW_FONT_0);
	TextDrawLetterSize(LottoSchein[4], 0.240000, 1.300000);
	TextDrawColour(LottoSchein[4], 255);
	TextDrawSetOutline(LottoSchein[4], 1);
	TextDrawSetProportional(LottoSchein[4], true);

	LottoSchein[5] = TextDrawCreate(273.000000, 269.000000, "Spieleinsatz einschliesslich~n~Bearbeitungsgebuer~n~~n~Umtausch ausgeschlossen~n~~n~~n~~t~~t~~t~~t~~t~ID: 01020445");
	TextDrawBackgroundColour(LottoSchein[5], 255);
	TextDrawFont(LottoSchein[5], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(LottoSchein[5], 0.170000, 0.699999);
	TextDrawColour(LottoSchein[5], 255);
	TextDrawSetOutline(LottoSchein[5], 0);
	TextDrawSetProportional(LottoSchein[5], true);
	TextDrawSetShadow(LottoSchein[5], 0);

	LottoSchein[6] = TextDrawCreate(273.000000, 326.000000, "Spielteilnahme ab 12.~n~Gluecksspiel kann suechtig machen.~n~Infos unter san-news.ls");
	TextDrawBackgroundColour(LottoSchein[6], 255);
	TextDrawFont(LottoSchein[6], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(LottoSchein[6], 0.170000, 0.699999);
	TextDrawColour(LottoSchein[6], 255);
	TextDrawSetOutline(LottoSchein[6], 0);
	TextDrawSetProportional(LottoSchein[6], true);
	TextDrawSetShadow(LottoSchein[6], 0);

	//Statusleiste

	Statusleiste[0] = TextDrawCreate(641.332946, 434.152038, "usebox");
	TextDrawLetterSize(Statusleiste[0], 0.000000, 1.310082);
	TextDrawTextSize(Statusleiste[0], -2.666703, 0.000000);
	TextDrawAlignment(Statusleiste[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Statusleiste[0], 0);
	TextDrawUseBox(Statusleiste[0], true);
	TextDrawBoxColour(Statusleiste[0], 102);
	TextDrawSetShadow(Statusleiste[0], 0);
	TextDrawSetOutline(Statusleiste[0], 0);
	TextDrawFont(Statusleiste[0], TEXT_DRAW_FONT_0);

	Statusleiste[1] = TextDrawCreate(560.999145, 434.311431, "~w~www.rosalife.de");
	TextDrawLetterSize(Statusleiste[1], 0.205666, 1.063699);
	TextDrawAlignment(Statusleiste[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Statusleiste[1], SRVFARBE);
	TextDrawSetShadow(Statusleiste[1], 0);
	TextDrawSetOutline(Statusleiste[1], 1);
	TextDrawBackgroundColour(Statusleiste[1], 255);
	TextDrawFont(Statusleiste[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Statusleiste[1], true);
	
	Statusleiste[2] = TextDrawCreate(642.333312, 434.151916, "usebox");
	TextDrawLetterSize(Statusleiste[2], 0.000000, -0.565638);
	TextDrawTextSize(Statusleiste[2], -3.000020, 0.000000);
	TextDrawAlignment(Statusleiste[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Statusleiste[2], 0);
	TextDrawUseBox(Statusleiste[2], true);
	TextDrawBoxColour(Statusleiste[2], SRVFARBE);
	TextDrawSetShadow(Statusleiste[2], 0);
	TextDrawSetOutline(Statusleiste[2], 0);
	TextDrawFont(Statusleiste[2], TEXT_DRAW_FONT_0);

	StatusWerbung = TextDrawCreate(3.000001, 434.311309, "~g~Werbung: ~w~Keine - Benutze /ad um eine Werbung zu schalten.");
	TextDrawLetterSize(StatusWerbung, 0.205666, 1.106370);
	TextDrawAlignment(StatusWerbung, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(StatusWerbung, 255);
	TextDrawSetShadow(StatusWerbung, 0);
	TextDrawSetOutline(StatusWerbung, 1);
	TextDrawBackgroundColour(StatusWerbung, 255);
	TextDrawFont(StatusWerbung, TEXT_DRAW_FONT_1);
	TextDrawSetProportional(StatusWerbung, true);

	Time = TextDrawCreate(44.666656, 322.725860, "05:09");
	TextDrawLetterSize(Time, 0.378666, 1.761777);
	TextDrawAlignment(Time, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Time, SRVFARBE);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColour(Time, 255);
	TextDrawFont(Time, TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Time, true);

	Time2 = TextDrawCreate(86.333282, 328.533355, "00/00/0000");
	TextDrawLetterSize(Time2, 0.242333, 0.687407);
	TextDrawAlignment(Time2, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Time2, SRVFARBE);
	TextDrawSetShadow(Time2, 0);
	TextDrawSetOutline(Time2, 1);
	TextDrawBackgroundColour(Time2, 255);
	TextDrawFont(Time2, TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Time2, true);

	//Tore & Schranken - German Samplife
    LSPDGarage = CreateObject(969,1593.3000500,-1638.0999800,12.5000000,0.0000000,0.0000000,180.0000000); //object(LSPD Tor)
    LSPDSchranke = CreateObject(968,1544.6999500,-1630.9000200,13.1000000,0.0000000,270.0000000,270.0000000); //object(barrierturn) (1)
    FBITor = CreateObject(2990, -2168.68530, 249.60730, 36.57600,   0.00000, 0.00000, 90.00000);
    RussenTor = CreateObject(988,321.191,-1187.818,75.783,0.000,0.000,38.177);
    NewsTor[0] = CreateObject(969, 781.79523, -1384.78162, 12.88760,   0.00000, 0.00000, 180.00000);
 	NewsTor[1] = CreateObject(969, 781.77570, -1330.23206, 12.70840,   0.00000, 0.00000, 179.60001);
	NewsStudioTor = CreateObject(5422, 671.36200, -1353.85547,1696.4069,   0.00000, 0.00000, 0.00000);
	BombenTor = CreateObject(971, 283.05493, 1868.84778, 7.75518,   0.00000, 0.00000, 269.82675);
	
	//ZOLL LS1:
	MautSchranke[0] = CreateObject(968, 50.20850, -1528.00586, 4.59290,   0.00000, 88.00000, 81.00000); // CLOSED FR RED COUNTY
	MautSchranke[1] = CreateObject(968, 55.64380, -1535.61462, 4.65890,   0.00000, -88.00000, 82.00000); // CLOSED FR LS

	//ZOLL LS2:
	MautSchranke[2] = CreateObject(968, 32.93180, -1338.09875, 9.97200,   0.00000, -89.50000, -51.00000); // CLOSED FR LS
	MautSchranke[3] = CreateObject(968, -9.03120, -1324.38770, 10.83550,   0.00000, 89.50000, -50.00000); // CLOSED FR RED COUNTY

	//ZOLL LS --> LV Brücke klein
	MautSchranke[4] = CreateObject(968, 518.43420, 470.30151, 18.66560,   0.00000, 90.00000, 35.00000); // CLOSED

	//ZOLL LS --> LV Brücke groß
	MautSchranke[5] = CreateObject(968, 1724.22595, 518.73871, 28.09300,   0.00000, 89.00000, -19.00000); // CLOSED FR LS
	MautSchranke[6] = CreateObject(968, 1749.94031, 517.41351, 27.70300,   0.00000, -89.80000, -19.00000); // CLOSED FR LV

    //MedicFahrstuhl = CreateObject(18755, 1180.35889, -1365.29614, 15.12730, 0.00000, 0.00000, -90.00000);//object(elevator) (1)
    
   	//ATM´s - German Samplife
	for(new atm=0; atm<sizeof(ATMs); atm++)
 	{
 	    CreateObject(2942,ATMs[atm][0],ATMs[atm][1],ATMs[atm][2],ATMs[atm][3],ATMs[atm][4],ATMs[atm][5]);
 	    Create3DTextLabel("{FFFFFF}Bankautomat\nBenutze '{FF0000}N' {FFFFFF}oder {FF0000}'/atm{FFFFFF}", 0x008080FF, ATMs[atm][0],ATMs[atm][1],ATMs[atm][2], 10.0, 0);
 	}
 	
 	//Pfandflaschen System
	for(new mt=0; mt<sizeof(Muelltonnen); mt++)
 	{
 	    CreateObject(1332,Muelltonnen[mt][0],Muelltonnen[mt][1],Muelltonnen[mt][2],Muelltonnen[mt][3],Muelltonnen[mt][4],Muelltonnen[mt][5]);
 	    Create3DTextLabel("{FFFFFF}Mülltonne\nBenutze '{FF0000}/durchsuchen{FFFFFF}'\num die Mülltonne zu durchsuchen", 0x008080FF, Muelltonnen[mt][0],Muelltonnen[mt][1],Muelltonnen[mt][2], 10.0, 0);
 	}
 	
 	//Eingänge + Ausgänge der Restaurants - German Samplife
	for(new id=0; id<sizeof(FastFoodInfo); id++)
 	{
 	    if(FastFoodInfo[id][fiTyp] == 1)//BSN
 	    {
 	    	Create3DTextLabel("{FFFFFF}Burger Shot\nBenutze '{FF0000}Enter'{FFFFFF} zum betreten", 0x008080FF, FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z], 10.0, 0);
 	    }
 	    else if(FastFoodInfo[id][fiTyp] == 2)//Cluckin Bell
 	    {
 	        Create3DTextLabel("{FFFFFF}Cluckin Bell\nBenutze '{FF0000}Enter'{FFFFFF} zum betreten", 0x008080FF, FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z], 10.0, 0);
 	    }
 	    AddStaticPickup(1318, 1, FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z], -1);
 	    AddStaticPickup(1318, 1, FastFoodInfo[id][fIPos_X],FastFoodInfo[id][fIPos_Y],FastFoodInfo[id][fIPos_Z], -1);
 	}
	//Lotto
	SetObjectMaterial(
	CreateObject(16000, 647.6967, -1357.7480, 20.5803, 0.0000, 0.0000, 89.7000)
	, 3, 16639, "a51_labs", "studiowall4_law", 0xFFFFFFFF);
	SetObjectMaterialText(
	CreateObject(7901, 648.0975, -1357.6785, 29.9418, 0.0000, 0.0000, -90.1999)
	, "Lotto 3/9", 0, OBJECT_MATERIAL_SIZE_512x256, "Arial", 130, true, 0xFF840410, 0x0, OBJECT_MATERIAL_TEXT_ALIGN_CENT);


 	//Objekte - German Samplife

   	//Schreinerei - by John_Doq
	boden = CreateDynamicObject(19378, 946.72241, 2119.24194, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2119.24194, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2128.87012, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2138.49219, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 946.72241, 2128.87012, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 946.72241, 2138.51099, 1009.99902,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 17298, "weefarmcuntw", "sjmbigold1", 0xFFFFFFFF);

	wand = CreateDynamicObject(19376, 932.35522, 2126.00781, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 951.73431, 2135.61938, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 932.35522, 2116.38477, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 932.35522, 2135.61938, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 951.73431, 2126.00781, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 947.00427, 2114.63574, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 951.73431, 2116.38477, 1012.80731,   0.00000, 0.00000, 0.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 937.40198, 2139.86328, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 937.40143, 2114.61572, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 927.76947, 2114.61572, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 927.76947, 2139.86328, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);
	wand = CreateDynamicObject(19376, 947.00427, 2139.86328, 1012.80731,   0.00000, 0.00000, 90.00000);SetDynamicObjectMaterial(wand, 0, 8401, "vgshpground", "vegaspawnwall02_128", 0xFFFFFFFF);

    boden = CreateDynamicObject(19378, 946.72241, 2119.24194, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2119.24194, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2128.87012, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 936.22083, 2138.49219, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 946.72241, 2128.87012, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);
	boden = CreateDynamicObject(19378, 946.72241, 2138.51099, 1018.00000,   0.00000, 90.00000, 0.00000);SetDynamicObjectMaterial(boden, 0, 8567, "vgsebuild02", "la_brownhibuildb", 0xFFFFFFFF);

	CreateDynamicObject(14584, 947.67249, 2156.05811, 1011.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14584, 940.49487, 2156.07056, 1011.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 933.79181, 2130.90918, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 936.59119, 2133.22461, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 933.58777, 2125.02271, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 933.55469, 2119.39478, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 936.20514, 2120.02441, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 936.13538, 2124.10767, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 950.06964, 2125.24414, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 934.32855, 2135.44312, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(1462, 943.70410, 2139.27930, 1010.02478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1462, 932.62579, 2139.35815, 1010.02478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1463, 934.34943, 2134.84082, 1010.38348,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1463, 936.08197, 2123.66089, 1010.38348,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1463, 933.72028, 2130.68286, 1010.38348,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19273, 948.71729, 2130.23804, 1011.53247,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19273, 941.52557, 2130.24976, 1011.53247,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1566, 942.89252, 2114.74878, 1011.56720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1566, 939.71771, 2114.75513, 1011.56720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 936.07788, 2128.30396, 1010.06543,   270.00000, 180.00000, 0.00000);
	CreateDynamicObject(3260, 949.57153, 2118.27686, 1010.06543,   270.00000, 180.00000, 0.00000);
	
	//Spawn - John_Doq
	tmpobjidspawn = CreateDynamicObject(19538,1012.623,-1148.329,15.908,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0);
	tmpobjidspawn = CreateDynamicObject(19538,983.596,-1148.401,15.912,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0);
	tmpobjidspawn = CreateDynamicObject(5710,1020.737,-1170.278,21.278,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3979, "civic01_lan", "sl_laglasswall2", 0);
	SetDynamicObjectMaterial(tmpobjidspawn, 3, 17545, "burnsground", "newall10_seamless", 0);
	SetDynamicObjectMaterial(tmpobjidspawn, 6, 17545, "burnsground", "newall10_seamless", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.945,-1205.882,15.568,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.924,-1195.884,17.000,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.894,-1185.970,18.695,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.894,-1185.970,13.713,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.909,-1176.096,20.392,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.909,-1176.096,15.409,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.928,-1166.159,22.034,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,1043.951,-1163.730,22.033,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18981,1031.901,-1159.143,12.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18981,1007.053,-1159.042,12.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18981,982.056,-1159.054,12.050,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18981,964.642,-1159.035,12.048,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.687,-1205.911,15.568,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.685,-1195.962,16.681,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.703,-1185.979,18.271,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.599,-1176.073,19.927,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.599,-1176.073,14.932,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.615,-1166.088,22.049,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.615,-1166.088,17.183,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.624,-1163.559,22.024,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(18766,952.600,-1156.140,17.183,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjidspawn = CreateDynamicObject(19377,992.789,-1172.680,15.900,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjidspawn = CreateDynamicObject(19377,982.385,-1172.698,15.900,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjidspawn = CreateDynamicObject(19377,971.941,-1172.707,15.900,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjidspawn = CreateDynamicObject(19378,992.724,-1175.825,15.898,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjidspawn = CreateDynamicObject(19378,982.267,-1175.853,15.898,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjidspawn = CreateDynamicObject(19378,971.986,-1175.843,15.896,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjidspawn = CreateDynamicObject(1483,994.763,-1169.281,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(1483,988.030,-1169.345,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(1483,981.352,-1169.306,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(1483,974.616,-1169.304,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(1483,968.076,-1169.358,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(1483,961.439,-1169.279,18.568,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	tmpobjidspawn = CreateDynamicObject(19377,963.277,-1172.734,15.898,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjidspawn = CreateDynamicObject(19378,963.304,-1175.788,15.894,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjidspawn = CreateDynamicObject(19377,1018.438,-1166.603,17.520,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	tmpobjidspawn = CreateDynamicObject(19377,1018.504,-1162.151,17.520,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	tmpobjidspawn = CreateDynamicObject(19377,1028.104,-1162.174,17.520,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	tmpobjidspawn = CreateDynamicObject(19377,1031.198,-1166.512,17.520,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	tmpobjidspawn = CreateDynamicObject(19379,1029.387,-1166.453,17.652,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "pavepat2_128", 0);
	tmpobjidspawn = CreateDynamicObject(19379,1018.911,-1167.608,17.652,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "pavepat2_128", 0);
	tmpobjidspawn = CreateDynamicObject(19379,1018.880,-1157.973,17.652,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "pavepat2_128", 0);
	tmpobjidspawn = CreateDynamicObject(19456,1027.366,-1166.412,21.746,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	tmpobjidspawn = CreateDynamicObject(19379,1032.557,-1166.369,20.073,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 6284, "bev_law2", "lasjmposh1", 0);
	tmpobjidspawn = CreateDynamicObject(19377,1027.504,-1171.252,17.520,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjidspawn, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjidspawn = CreateDynamicObject(19543,1012.396,-1203.377,15.923,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19543,1036.371,-1164.692,15.923,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19543,1005.522,-1149.507,15.923,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19543,967.285,-1173.042,15.925,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,994.775,-1169.305,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,988.043,-1169.308,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,981.348,-1169.287,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,974.627,-1169.313,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,969.711,-1169.310,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1483,961.454,-1169.285,15.478,180.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19543,969.401,-1158.055,15.923,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,981.221,-1206.025,14.502,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,981.242,-1200.688,14.504,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,986.157,-1195.965,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,995.749,-1195.965,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1005.383,-1195.975,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1014.990,-1195.966,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1023.995,-1195.956,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1028.788,-1191.208,14.506,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1028.800,-1181.602,14.506,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1007.995,-1180.715,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1002.749,-1180.709,14.506,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,997.968,-1175.978,14.508,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,997.960,-1172.693,14.510,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,994.161,-1167.983,14.510,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,984.565,-1167.973,14.510,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,974.956,-1167.986,14.510,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,965.346,-1167.977,14.510,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,962.870,-1167.986,14.512,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,958.082,-1172.635,14.514,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,958.069,-1175.778,14.516,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,953.331,-1180.526,14.512,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,985.928,-1210.766,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,995.532,-1210.760,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1005.115,-1210.753,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1014.702,-1210.745,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1024.287,-1210.757,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1033.848,-1210.776,14.504,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19456,1038.759,-1210.781,14.506,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,1009.143,-1177.276,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,1031.246,-1177.696,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(824,989.982,-1202.295,15.758,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,985.432,-1198.011,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,995.913,-1197.602,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1006.256,-1197.611,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1016.404,-1197.474,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1027.799,-1197.324,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1029.607,-1194.567,16.371,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1029.949,-1185.285,16.371,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,1004.224,-1179.273,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(620,1032.659,-1174.449,10.106,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(620,1010.680,-1173.581,10.106,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(824,1021.334,-1201.736,15.758,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(824,1033.721,-1188.731,15.758,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(691,1005.221,-1200.725,14.442,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(691,1035.527,-1198.627,14.442,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(808,999.553,-1179.468,17.308,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(808,982.826,-1208.349,17.308,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3660,1002.784,-1209.364,17.794,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3660,1002.795,-1207.971,17.794,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3660,1002.104,-1209.378,17.792,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3660,1002.099,-1207.436,17.792,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,1016.817,-1208.191,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,1027.057,-1208.226,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,1037.117,-1208.426,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(759,955.777,-1178.637,15.281,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,994.662,-1163.087,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,984.205,-1162.904,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,970.854,-1162.776,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(3532,958.626,-1162.865,16.371,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19377,1013.593,-1156.947,17.520,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19377,1032.589,-1156.763,17.520,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(19379,1029.355,-1156.822,17.652,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1280,1025.014,-1173.062,18.093,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1280,1016.216,-1172.815,18.093,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2434,1026.828,-1170.752,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.831,-1169.839,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.824,-1168.896,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.808,-1167.960,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.812,-1167.030,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.815,-1166.101,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.816,-1165.188,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2435,1026.810,-1164.266,17.738,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2434,1026.967,-1163.130,17.738,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1726,1020.099,-1162.801,17.674,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1726,1019.095,-1165.762,17.674,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1516,1020.883,-1164.522,17.686,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(630,1019.018,-1162.768,18.674,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(630,1026.651,-1162.792,18.674,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(630,1026.292,-1170.854,18.674,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1569,1022.848,-1162.209,17.701,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1569,1025.848,-1162.205,17.701,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2608,1030.954,-1163.068,18.327,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2610,1031.087,-1164.377,18.537,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2610,1031.087,-1164.818,18.537,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2610,1031.087,-1165.280,18.537,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2604,1030.663,-1167.931,18.453,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(630,1030.756,-1170.832,18.674,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2008,1026.992,-1169.386,17.965,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2008,1026.982,-1167.437,17.965,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2008,1026.981,-1165.469,17.965,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1663,1028.017,-1168.835,18.155,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1663,1028.132,-1166.872,18.155,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1663,1028.305,-1164.509,18.155,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1721,1024.981,-1171.007,17.728,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1721,1024.160,-1171.014,17.728,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(1721,1023.437,-1171.017,17.728,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2256,1018.558,-1168.609,20.721,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2257,1018.540,-1164.490,20.721,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjidspawn = CreateDynamicObject(2258,1024.159,-1171.137,20.721,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);

	new GSFReallifeSchildAdressen = CreateDynamicObject(5811,1033.85413, -1182.77356, 17.00000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 400.0, 400.0); //object(lawnmallsign1) (1)
	SetDynamicObjectMaterialText(GSFReallifeSchildAdressen, 5, "{FFBF00}R{FFFFFF}osa {FFBF00}L{FFFFFF}ife:", 120, "Arial", 45, 1, -1, -16777216, 1);
	SetDynamicObjectMaterialText(GSFReallifeSchildAdressen, 4, "{007DFF}Homepage\n{FFBF00}rosalife.de", 120, "Arial", 40, 0, -32256, -16777216, 1);
	SetDynamicObjectMaterialText(GSFReallifeSchildAdressen, 3, "{007DFF}TeamSpeak\n{FFBF00}ts.rosalife.de", 120, "Arial", 40, 0, -32256, -16777216, 1);
	SetDynamicObjectMaterialText(GSFReallifeSchildAdressen, 2, "{007DFF}facebook\n{FFBF00}facebook.com/rosalife", 120, "Arial", 40, 0, -32256, -16777216, 1);
	SetDynamicObjectMaterialText(GSFReallifeSchildAdressen, 1, "{007DFF}YouTube\n{FFBF00}youtube.com/rosalife", 120, "Arial", 40, 0, -32256, -16777216, 1);

	//Lichter
	CreateDynamicObject(19126, 1028.72510, -1173.94885, 18.27860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1012.75610, -1173.94885, 18.27860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1007.98700, -1172.86218, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1001.33759, -1172.86218, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1033.65442, -1172.74939, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1040.19421, -1172.74939, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 953.30267, -1200.51453, 16.44790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 953.30267, -1190.64832, 16.44790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1297, 954.05731, -1182.75146, 19.16000,   356.85840, 0.00000, 180.00000);
	CreateDynamicObject(1297, 954.05731, -1209.54504, 19.16000,   356.85840, 0.00000, 180.00000);
	CreateDynamicObject(1232, 1032.25439, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1040.97034, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1021.55621, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1013.07751, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 991.36493, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 981.85577, -1208.76746, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 981.85577, -1196.67456, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 991.36493, -1196.67456, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1013.07751, -1196.67456, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1021.55621, -1196.67456, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1040.97034, -1194.92542, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1040.97034, -1181.39795, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1029.30408, -1189.85486, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 957.62494, -1177.15173, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 998.41992, -1173.24866, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 957.62488, -1168.94910, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 998.41992, -1180.29358, 18.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 998.41992, -1176.80432, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 957.62488, -1173.31738, 16.44790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1297, 971.11133, -1162.72498, 19.07600,   3.14160, 0.00000, 90.00000);
	CreateDynamicObject(1297, 984.72449, -1162.72498, 19.07600,   3.14160, 0.00000, 90.00000);
	CreateDynamicObject(1297, 995.81628, -1162.72498, 19.07600,   3.14160, 0.00000, 90.00000);
	CreateDynamicObject(1297, 957.86719, -1162.72498, 19.07600,   3.14160, 0.00000, 90.00000);
	CreateDynamicObject(3472, 990.10461, -1203.46814, 16.22480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1021.88788, -1203.46814, 16.22480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19123, 981.63641, -1197.86292, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19123, 981.63641, -1200.94751, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19123, 981.63641, -1204.24365, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19123, 981.63641, -1207.87219, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1022.41211, -1162.76318, 22.85530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1022.41211, -1165.99023, 22.85530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1022.41211, -1170.72559, 22.85530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1016.87970, -1210.16467, 16.46480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1027.09338, -1210.16467, 16.46480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1037.05273, -1210.16467, 16.46480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1016.71301, -1196.67456, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1027.83838, -1196.67456, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1005.97467, -1196.67456, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 995.58368, -1196.67456, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 985.18298, -1196.67456, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1029.30408, -1185.04956, 16.42280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1007.26971, -1210.16467, 16.88480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1002.15479, -1210.16467, 16.88480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 995.86688, -1210.16467, 16.88480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 986.59552, -1210.16467, 16.46480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1042.66443, -1202.18738, 16.42130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1042.66443, -1189.50330, 16.42130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1042.66443, -1176.57947, 16.42130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 962.22333, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 967.15527, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 972.17932, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 977.10260, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 982.19409, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 987.32928, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 992.30438, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 997.22729, -1167.78491, 16.26060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 952.62482, -1211.09839, 16.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1001.33759, -1180.43445, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1007.98700, -1180.35266, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1012.43671, -1178.23230, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1029.30408, -1177.98425, 16.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1014.31238, -1202.41333, 18.00800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 995.72717, -1202.41333, 18.00800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1039.58826, -1202.41333, 18.00800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 962.79962, -1210.67468, 15.36080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 973.21948, -1210.67468, 15.36070,   0.00000, 0.00000, 0.00000);

 	//Freizeit - Ray_Krieger
 	CreateDynamicObject(18981, 2285.66797, -1462.41992, 11.41947,   0.00000, 0.00000, -10.62000);
	CreateDynamicObject(18981, 2289.63306, -1437.85315, 11.41947,   0.00000, 0.00000, -8.04000);
	CreateDynamicObject(18981, 2292.16992, -1413.00720, 11.41947,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(18981, 2292.22729, -1420.29749, 11.41950,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(18981, 2293.06226, -1406.39404, 11.41990,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(18981, 2292.47217, -1406.34558, 11.41900,   0.00000, 0.00000, -3.18000);
	CreateDynamicObject(18981, 2305.18311, -1394.34131, 11.41900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2320.41870, -1394.35022, 11.41950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2332.39282, -1407.30994, 11.41950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2332.38257, -1432.18372, 11.41950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2332.39478, -1457.12085, 11.41950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2332.39624, -1461.62476, 11.41900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2320.48145, -1473.64868, 11.41950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18766, 2288.59131, -1474.21228, 21.41200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2303.49463, -1428.18884, 10.41050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2314.61963, -1400.40662, 10.41050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2311.33716, -1420.05859, 15.07511,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2315.51147, -1428.18799, 10.41090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2327.59375, -1412.41846, 10.41050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2327.60938, -1416.14648, 10.41020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2311.35620, -1395.12305, 15.07510,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2306.07520, -1400.40894, 10.41090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2319.45679, -1461.72424, 21.07690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2303.02881, -1471.76123, 21.56130,   80.00000, -2.96000, 3.06000);
	CreateDynamicObject(18766, 2293.09863, -1474.22754, 21.41200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2301.93921, -1440.21997, 21.81690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2325.37573, -1440.22131, 21.81730,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2340.44214, -1426.00574, 21.07690,   0.00000, 90.00000, 90.72000);
	CreateDynamicObject(18981, 2339.75708, -1417.13855, 21.07690,   0.00000, 90.00000, 90.72000);
	CreateDynamicObject(18981, 2295.97241, -1461.23486, 21.07090,   0.00000, 90.00000, 89.58000);
	CreateDynamicObject(18981, 2291.70557, -1420.23157, 11.41910,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(18981, 2340.39111, -1419.19556, 21.81690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2340.42285, -1394.27222, 21.81690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2315.63672, -1387.59351, 21.81690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2290.68018, -1387.45496, 21.81690,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2290.17090, -1447.71887, 21.81650,   90.00000, 0.00000, 89.64000);
	CreateDynamicObject(18981, 2285.59180, -1462.35205, 11.41910,   0.00000, 0.00000, -10.62000);
	CreateDynamicObject(18766, 2290.23975, -1445.40979, 21.81610,   90.00000, 0.00000, 89.64000);
	CreateDynamicObject(19377, 2327.12622, -1452.53088, 26.90984,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2317.53442, -1452.55188, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2305.60864, -1452.55188, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2292.89868, -1452.55896, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2331.94678, -1447.73438, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2331.94043, -1438.16577, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2331.92065, -1428.55005, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2331.97583, -1420.49011, 25.95620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2331.97583, -1420.49011, 30.06460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2331.97583, -1413.88293, 25.95620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2331.97583, -1413.88293, 30.06460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2331.96143, -1399.40601, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2327.14697, -1394.81543, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2317.53125, -1394.81543, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2299.15210, -1394.81543, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2309.49805, -1394.76758, 25.95620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2301.46167, -1394.79504, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2310.53711, -1394.78394, 18.65010,   0.00000, 0.00000, 89.69700);
	CreateDynamicObject(19325, 2309.49805, -1394.76758, 30.06820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2294.01709, -1399.54297, 26.90980,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19377, 2293.37622, -1409.13672, 26.90980,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19325, 2292.83472, -1417.23303, 25.95620,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19325, 2292.83472, -1417.23303, 30.06770,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19325, 2292.39136, -1423.81335, 25.95620,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19325, 2292.39136, -1423.81335, 30.06770,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(19377, 2291.19849, -1431.79602, 26.90980,   0.00000, 0.00000, -11.51999);
	CreateDynamicObject(19377, 2291.93066, -1431.85461, 26.90980,   0.00000, 0.00000, -4.68000);
	CreateDynamicObject(19377, 2289.68970, -1441.30725, 26.90980,   0.00000, 0.00000, -6.96000);
	CreateDynamicObject(19377, 2288.84521, -1447.80225, 26.90980,   0.00000, 0.00000, -7.80000);
	CreateDynamicObject(19377, 2290.32666, -1441.26282, 26.90980,   0.00000, 0.00000, -14.58000);
	CreateDynamicObject(18981, 2293.46875, -1416.12317, 10.41020,   0.00000, 0.00000, -3.90000);
	CreateDynamicObject(18981, 2293.71289, -1412.59155, 10.41070,   0.00000, 0.00000, -3.90000);
	CreateDynamicObject(18766, 2297.61255, -1471.68994, 18.90510,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2307.61768, -1471.69556, 18.90510,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, 2299.22510, -1452.53674, 30.40650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2327.19580, -1442.88220, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2313.98267, -1441.90576, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2304.41284, -1441.90479, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2295.02344, -1441.88208, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18763, 2320.69067, -1434.86658, 23.18595,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2309.77637, -1434.86658, 24.49700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2309.77686, -1434.86633, 25.45543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 2309.88940, -1431.37598, 27.61482,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 2320.69678, -1431.37048, 25.29412,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 2323.16406, -1434.16125, 26.28820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2318.24121, -1434.07153, 26.28820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2318.22729, -1429.94934, 26.28820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2323.18262, -1430.05444, 26.28820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2307.44629, -1434.25916, 28.57960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2307.44116, -1430.11633, 28.57650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2312.35181, -1430.11487, 28.57650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2312.32544, -1434.20398, 28.57650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1428, 2320.78564, -1436.36414, 23.79860,   15.00000, 0.00000, 0.00000);
	CreateDynamicObject(1428, 2309.82446, -1436.37305, 23.84701,   15.00000, 0.00000, 0.00000);
	CreateDynamicObject(1428, 2309.82422, -1436.37305, 26.49790,   15.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 2331.37036, -1439.50439, 22.42710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 2316.99927, -1439.36462, 22.42710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 2306.53345, -1441.39734, 22.42710,   0.00000, 0.00000, -45.06000);
	CreateDynamicObject(625, 2297.69287, -1441.32642, 22.42710,   0.00000, 0.00000, -42.42000);
	CreateDynamicObject(9697, 2362.26099, -1470.66455, 21.59770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(9697, 2362.32715, -1454.65125, 21.59770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2286.36304, -1418.99634, 15.07511,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2286.38379, -1412.98547, 15.07430,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2336.32349, -1421.65405, 15.07511,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2336.35986, -1396.65405, 15.07511,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2292.55225, -1422.23022, 18.68060,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(19377, 2293.14185, -1412.64221, 18.68060,   0.00000, 0.00000, -3.66000);
	CreateDynamicObject(19362, 2299.22510, -1452.57593, 26.95790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2314.56299, -1452.54211, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18766, 2309.31592, -1470.73523, 17.03180,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2309.31470, -1469.35400, 17.03120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2309.43628, -1455.93396, 17.03140,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 2309.44556, -1455.23230, 17.03180,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2303.70728, -1407.32080, 32.50007,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2320.79858, -1407.30847, 32.50050,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2320.87427, -1430.41931, 32.49580,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 2301.18506, -1433.43579, 32.50007,   0.00000, 90.00000, 78.48000);
	CreateDynamicObject(18981, 2302.78784, -1429.37415, 32.50800,   0.00000, 90.00000, 78.48000);
	CreateDynamicObject(18981, 2299.58325, -1442.44202, 32.50090,   0.00000, 90.00000, 78.48000);
	CreateDynamicObject(19377, 2331.94678, -1447.73438, 37.38925,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2327.12622, -1452.53088, 37.38920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2327.16382, -1442.91028, 37.38920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2322.43433, -1447.59265, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2327.12549, -1442.01758, 26.90980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2322.39844, -1446.84705, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2322.40039, -1447.75024, 37.38920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 2309.83276, -1441.83398, 32.49540,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2327.10498, -1447.75244, 42.52890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19770, 2319.51172, -1449.51379, 42.64570,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19769, 2314.43896, -1449.51306, 39.27580,   0.00000, 20.00000, -180.00000);
	CreateDynamicObject(19769, 2308.53979, -1449.49158, 37.40210,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19764, 2302.41431, -1448.90808, 37.19480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19764, 2298.08008, -1444.66333, 37.19480,   0.00000, 0.00000, -43.86000);
	CreateDynamicObject(19764, 2298.01831, -1438.65466, 37.19480,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(19764, 2302.26660, -1434.33301, 37.20000,   0.00000, 0.00000, -134.09990);
	CreateDynamicObject(19769, 2308.20264, -1433.67529, 36.74000,   0.00000, -2.20000, 0.00000);
	CreateDynamicObject(19740, 2317.42041, -1433.64038, 35.57410,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(19740, 2329.64893, -1433.63208, 34.52650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19740, 2341.92651, -1433.62402, 33.44400,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(19740, 2345.64746, -1433.63513, 32.81390,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(19740, 2357.90991, -1433.64795, 31.76400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19752, 2366.80200, -1432.59229, 31.76080,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(19740, 2368.59937, -1423.94653, 31.75560,   0.00000, 0.00000, 87.54000);
	CreateDynamicObject(19740, 2368.84009, -1418.10913, 31.74200,   0.00000, 0.00000, 87.54000);
	CreateDynamicObject(19752, 2368.18506, -1409.23999, 31.74080,   0.00000, 0.00000, 172.08000);
	CreateDynamicObject(19740, 2359.65405, -1407.58899, 31.73560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19740, 2347.43506, -1407.58948, 30.67700,   0.00000, -10.00000, 0.00000);
	CreateDynamicObject(19740, 2335.34351, -1407.58899, 28.54700,   0.00000, -10.00000, 0.00000);
	CreateDynamicObject(19325, 2332.02295, -1404.11035, 29.66260,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2332.02295, -1404.11035, 23.01990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2332.02539, -1408.23206, 23.87210,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.98755, -1410.44751, 25.59864,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.98755, -1410.44751, 29.10807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.97998, -1410.44714, 30.20990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.99146, -1409.58411, 25.60070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.99219, -1409.68604, 29.04780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.99121, -1409.68604, 31.24880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.98999, -1408.13196, 30.94200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2331.98999, -1406.52576, 30.94200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19740, 2323.16235, -1407.58691, 26.40000,   0.00000, -10.00000, 0.00000);
	CreateDynamicObject(19740, 2312.49927, -1407.58704, 24.51400,   0.00000, -10.00000, 0.00000);
	CreateDynamicObject(19325, 2327.42407, -1452.58789, 43.78100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2327.15039, -1442.82764, 43.78100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2331.96777, -1447.95972, 43.78100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2323.93506, -1452.51636, 44.11400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2330.37061, -1452.51929, 44.11400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2331.92163, -1450.88318, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2331.91870, -1444.44275, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2330.36841, -1442.84509, 44.11400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2324.14990, -1442.87390, 44.11400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 2322.47998, -1444.40918, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2322.48560, -1446.54749, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2322.40503, -1451.67126, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2322.47070, -1449.38428, 45.06410,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 2327.10498, -1447.71838, 45.89979,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3440, 2313.06201, -1449.41943, 35.40861,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2298.78003, -1445.33252, 34.19450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2301.45557, -1435.43909, 34.32150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2348.31128, -1433.65674, 24.59560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2348.32153, -1433.65674, 29.35200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2336.04858, -1433.65674, 24.22160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2336.04858, -1433.65674, 28.87667,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2336.04810, -1433.65625, 31.45220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2335.16846, -1407.69019, 25.56030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2349.53711, -1407.57556, 23.19200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2349.53711, -1407.57556, 28.08180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2328.85986, -1450.96106, 44.11400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2330.36963, -1449.39893, 44.11400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19740, 2309.27466, -1407.58801, 23.95000,   0.00000, -10.00000, 0.00000);
	CreateDynamicObject(3440, 2327.40210, -1407.58374, 24.18630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 2326.93457, -1450.29187, 46.81680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 2326.84619, -1444.77148, 46.81680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2299.57373, -1402.16553, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2310.62036, -1412.62903, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2324.82837, -1404.62170, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2323.83545, -1423.85852, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2301.06201, -1425.29224, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2311.99902, -1427.28442, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1691, 2305.72070, -1439.94812, 32.99628,   0.00000, 0.00000, 86.75999);
	CreateDynamicObject(1691, 2313.17822, -1437.65515, 32.99628,   0.00000, 0.00000, 86.75999);
	CreateDynamicObject(1691, 2313.80444, -1444.50671, 32.99628,   0.00000, 0.00000, 86.75999);
	CreateDynamicObject(1688, 2313.11499, -1441.40308, 33.90569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1697, 2309.90259, -1421.01282, 34.66149,   0.00000, 0.00000, 66.66000);
	CreateDynamicObject(1697, 2310.72119, -1402.34167, 34.66149,   0.00000, 0.00000, 66.66000);
	CreateDynamicObject(1697, 2298.39136, -1411.59912, 34.66149,   0.00000, 0.00000, 66.66000);
	CreateDynamicObject(1697, 2324.96875, -1415.78015, 34.66149,   0.00000, 0.00000, 66.66000);
	CreateDynamicObject(1697, 2293.65625, -1433.56921, 34.66149,   0.00000, 0.00000, 66.66000);
	CreateDynamicObject(1691, 2293.42554, -1449.14380, 32.99628,   0.00000, 0.00000, 78.95998);
	CreateDynamicObject(1691, 2302.66895, -1450.83875, 32.99628,   0.00000, 0.00000, 78.95998);
	CreateDynamicObject(1691, 2314.40576, -1452.03979, 32.99628,   0.00000, 0.00000, 92.75999);
	CreateDynamicObject(9314, 2311.30493, -1473.73523, 25.68171,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7666, 2327.01855, -1452.65198, 36.57730,   0.00000, 0.00000, 119.70000);
	CreateDynamicObject(7666, 2332.04004, -1447.66003, 36.57730,   0.00000, 0.00000, 209.81996);
	CreateDynamicObject(7666, 2322.30127, -1447.89807, 36.57730,   0.00000, 0.00000, 209.81996);
	CreateDynamicObject(7666, 2327.10425, -1442.81934, 36.57730,   0.00000, 0.00000, 119.70000);
	CreateDynamicObject(7666, 2292.54150, -1452.74097, 27.94400,   0.00000, 0.00000, 119.70000);
	CreateDynamicObject(7666, 2304.22852, -1452.67065, 27.54100,   0.00000, 0.00000, 119.70000);
	CreateDynamicObject(7666, 2289.90454, -1438.64160, 27.94400,   0.00000, 0.00000, 23.22001);
	CreateDynamicObject(7666, 2293.61572, -1404.13428, 27.94400,   0.00000, 0.00000, 25.74001);
	CreateDynamicObject(7666, 2299.57593, -1394.68762, 27.94400,   0.00000, 0.00000, -60.29998);
	CreateDynamicObject(7666, 2322.86768, -1394.70837, 27.94400,   0.00000, 0.00000, -60.23998);
	CreateDynamicObject(7666, 2332.05591, -1399.61829, 27.94400,   0.00000, 0.00000, 29.76002);
	CreateDynamicObject(7666, 2332.05127, -1435.79224, 27.94400,   0.00000, 0.00000, 29.76002);
	CreateDynamicObject(716, 2291.69824, -1457.12366, 21.54464,   0.00000, 0.00000, 36.78000);
	CreateDynamicObject(716, 2332.35352, -1475.68225, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2334.04761, -1460.46350, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2316.59863, -1475.88843, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2334.74072, -1428.42981, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2290.98169, -1470.09351, 21.54464,   0.00000, 0.00000, -71.16000);
	CreateDynamicObject(716, 2335.03906, -1396.81726, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2315.23828, -1392.07336, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(716, 2295.74048, -1391.83838, 22.90473,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(3660, 2294.39429, -1463.90320, 23.51500,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(3660, 2287.82227, -1463.92383, 23.51500,   0.00000, 0.00000, 83.81998);
	CreateDynamicObject(9833, 2291.45654, -1464.32019, 24.11141,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 2294.47412, -1462.35010, 23.51550,   0.00000, 0.00000, 86.94000);
	CreateDynamicObject(3660, 2287.98633, -1462.34668, 23.51550,   0.00000, 0.00000, 83.82000);
	CreateDynamicObject(19435, 2331.98242, -1404.97461, 30.94480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2331.92700, -1419.04773, 18.70683,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19377, 2331.97314, -1409.49561, 18.70683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2331.97607, -1408.81580, 18.70640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2319.61060, -1442.00562, 27.09290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2321.20654, -1442.00562, 27.09290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2321.54858, -1442.00000, 27.09290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2321.54858, -1441.92932, 30.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2319.95264, -1441.92932, 30.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2318.35669, -1441.92932, 30.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1428, 2320.78564, -1436.36450, 24.34260,   15.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 2297.01733, -1430.71057, 22.42710,   0.00000, 0.00000, -31.38000);
	CreateDynamicObject(625, 2306.98828, -1429.61682, 22.42710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2303.22900, -1430.14185, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2304.29248, -1434.01086, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2300.36206, -1434.60547, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2299.79297, -1430.54602, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2297.33447, -1432.64355, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2296.94287, -1438.41016, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2300.68408, -1438.63989, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2304.00366, -1438.04773, 22.31324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 2294.43237, -1432.12122, 24.03760,   0.00000, 0.00000, 174.53999);
	CreateDynamicObject(19362, 2293.96924, -1437.73022, 24.03760,   0.00000, 0.00000, 175.67999);
	CreateDynamicObject(19362, 2293.04102, -1430.47913, 23.91760,   0.00000, 0.00000, 264.65991);
	CreateDynamicObject(19362, 2292.36328, -1439.16272, 24.03760,   0.00000, 0.00000, 264.65991);
	CreateDynamicObject(19435, 2294.20190, -1434.84314, 25.29200,   90.00000, 0.00000, 175.38000);
	CreateDynamicObject(19362, 2292.43262, -1436.91040, 23.91760,   0.00000, 0.00000, 264.65991);
	CreateDynamicObject(19362, 2292.63330, -1432.91565, 23.91760,   0.00000, 0.00000, 264.65991);
	CreateDynamicObject(19362, 2292.89990, -1432.13367, 25.70790,   0.00000, 90.00000, 264.65991);
	CreateDynamicObject(19362, 2292.59570, -1435.61035, 25.70700,   0.00000, 90.00000, 264.97989);
	CreateDynamicObject(19362, 2292.42407, -1437.50317, 25.70790,   0.00000, 90.00000, 264.65991);
	CreateDynamicObject(2416, 2292.02588, -1436.29041, 22.15370,   0.00000, 0.00000, 82.71909);
	CreateDynamicObject(2451, 2292.41699, -1434.42847, 22.15370,   0.00000, 0.00000, 83.28001);
	CreateDynamicObject(2420, 2291.65698, -1439.64624, 22.31469,   0.00000, 0.00000, 87.84000);
	CreateDynamicObject(2455, 2294.59131, -1435.71753, 22.17920,   0.00000, 0.00000, 84.54000);
	CreateDynamicObject(2428, 2293.94678, -1432.33228, 25.71382,   0.00000, 0.00000, 73.26001);
	CreateDynamicObject(2429, 2293.90918, -1436.43237, 23.37179,   0.00000, 0.00000, 87.84001);
	CreateDynamicObject(2431, 2294.08032, -1435.79419, 24.73670,   -12.00000, 0.00000, 85.44010);
	CreateDynamicObject(2455, 2294.68213, -1434.80029, 22.17920,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2455, 2294.75122, -1434.11853, 22.17980,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2454, 2294.87061, -1433.21240, 22.17980,   0.00000, 0.00000, 82.50000);
	CreateDynamicObject(2454, 2294.32666, -1436.76013, 22.17980,   0.00000, 0.00000, -7.38000);
	CreateDynamicObject(2456, 2293.99292, -1436.88599, 25.71406,   0.00000, 0.00000, -80.45998);
	CreateDynamicObject(2420, 2291.64355, -1440.74622, 22.31469,   0.00000, 0.00000, 87.84000);
	CreateDynamicObject(2420, 2294.07910, -1437.75647, 22.31469,   0.00000, 0.00000, 87.84000);
	CreateDynamicObject(2500, 2294.76392, -1432.94482, 23.21754,   0.00000, 0.00000, 53.88001);
	CreateDynamicObject(2753, 2294.77100, -1434.41101, 23.39580,   0.00000, 0.00000, 93.24000);
	CreateDynamicObject(2452, 2294.90161, -1431.88818, 22.32920,   0.00000, 0.00000, 84.48000);
	CreateDynamicObject(19811, 2294.79541, -1435.46033, 23.24520,   0.00000, 0.00000, -6.42000);
	CreateDynamicObject(19811, 2294.82715, -1435.26062, 23.24520,   0.00000, 0.00000, -6.36000);
	CreateDynamicObject(2453, 2294.54785, -1435.94409, 23.56700,   0.00000, 0.00000, -5.16000);
	CreateDynamicObject(19811, 2294.54932, -1435.22754, 23.24520,   0.00000, 0.00000, -6.36000);
	CreateDynamicObject(19811, 2294.54517, -1435.42847, 23.24520,   0.00000, 0.00000, -6.36000);
	CreateDynamicObject(19379, 2322.85107, -1433.45911, 22.31340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2322.86890, -1437.17261, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2312.37354, -1437.09998, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2312.36548, -1433.43420, 22.31340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2301.91699, -1433.44067, 22.31340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2301.89697, -1437.11755, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2297.19409, -1433.49304, 22.31270,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2295.20728, -1437.13062, 22.31420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2326.69360, -1437.14026, 22.31420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2326.66577, -1432.98303, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2333.22510, -1423.41113, 22.31000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2332.42969, -1413.78833, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2333.34009, -1404.27832, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2333.32739, -1394.66040, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2322.82715, -1395.24023, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2312.35303, -1395.13086, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2301.85425, -1395.19031, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2291.35498, -1395.68640, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(625, 2316.89355, -1430.73401, 22.42710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 2331.52612, -1397.83484, 22.42710,   0.00000, 0.00000, -43.97999);
	CreateDynamicObject(625, 2319.63159, -1395.28247, 22.42710,   0.00000, 0.00000, 43.50000);
	CreateDynamicObject(625, 2305.65308, -1395.25342, 22.42710,   0.00000, 0.00000, 43.50000);
	CreateDynamicObject(625, 2297.32349, -1395.33618, 22.42710,   0.00000, 0.00000, 43.50000);
	CreateDynamicObject(1646, 2297.93384, -1397.29187, 22.66320,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(1646, 2302.42383, -1397.05176, 22.66320,   0.00000, 0.00000, -39.11998);
	CreateDynamicObject(1646, 2301.60498, -1396.28088, 22.66320,   0.00000, 0.00000, -39.11998);
	CreateDynamicObject(1646, 2298.71265, -1396.61401, 22.66320,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(1646, 2326.16260, -1397.07568, 22.66320,   0.00000, 0.00000, -39.11998);
	CreateDynamicObject(1646, 2325.38257, -1396.38000, 22.66320,   0.00000, 0.00000, -39.11998);
	CreateDynamicObject(1646, 2321.43555, -1397.16760, 22.66320,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(1646, 2322.26660, -1396.35913, 22.66320,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(1643, 2316.42944, -1397.09753, 22.39765,   0.00000, 0.00000, 23.70000);
	CreateDynamicObject(1642, 2313.25049, -1397.30347, 22.39754,   0.00000, 0.00000, -22.26000);
	CreateDynamicObject(1641, 2310.36450, -1397.29346, 22.39759,   0.00000, 0.00000, 19.92000);
	CreateDynamicObject(1640, 2306.96265, -1397.42542, 22.43520,   0.00000, 0.00000, -28.80000);
	CreateDynamicObject(1598, 2308.59180, -1398.24243, 22.55080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1610, 2314.88672, -1397.80627, 22.39920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2311.83008, -1395.37354, 23.08310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2307.39648, -1395.28540, 23.08310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2331.39502, -1400.06030, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1368, 2331.40601, -1405.52380, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 2331.40454, -1402.85999, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2331.41675, -1408.36646, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2331.36108, -1411.14148, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 2331.42725, -1413.93018, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2331.36304, -1416.66418, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 2331.49878, -1419.35095, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2331.39697, -1422.12988, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 2331.51001, -1424.87219, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2331.44043, -1427.48914, 23.08310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 2331.46216, -1430.29907, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1642, 2327.77197, -1430.73975, 22.39866,   0.00000, 0.00000, 23.82000);
	CreateDynamicObject(1641, 2324.40088, -1431.30579, 22.39899,   0.00000, 0.00000, -209.93996);
	CreateDynamicObject(1643, 2326.00732, -1433.41943, 22.39898,   0.00000, 0.00000, 127.02000);
	CreateDynamicObject(1598, 2326.10278, -1431.25269, 22.62680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2327.15723, -1441.56140, 23.08310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, 2324.27881, -1441.57678, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2330.22388, -1441.55396, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 2313.42676, -1441.40381, 23.08310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, 2316.61182, -1441.38879, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2310.42432, -1441.50525, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 2300.56445, -1441.40417, 23.08310,   0.00000, 0.00000, 179.16000);
	CreateDynamicObject(638, 2303.32813, -1441.52576, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2297.92529, -1441.45166, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 2317.20215, -1446.81689, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2306.74268, -1446.81946, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2296.25122, -1446.83411, 22.31380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2293.89722, -1447.42554, 22.31420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2296.28027, -1447.73999, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2306.74780, -1447.65417, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2317.24023, -1447.65564, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2295.08691, -1446.61658, 22.31300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 2293.45654, -1447.80103, 22.31280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2292.72925, -1447.68701, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2292.72974, -1446.73706, 26.90980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1533, 2322.28125, -1445.95508, 22.22100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 2322.28296, -1447.45630, 22.22100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19465, 2301.38940, -1444.82520, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 2301.37695, -1449.60950, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 2304.34424, -1446.70129, 24.86460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, 2310.24048, -1446.70471, 24.86460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 2313.11182, -1449.55920, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 2307.40771, -1449.55640, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 2313.11108, -1444.89575, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2321.94263, -1444.64636, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2321.95337, -1450.33191, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2308.88501, -1451.68530, 23.87210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2310.38745, -1451.70593, 23.87210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2311.83276, -1451.42114, 23.87210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 2307.98535, -1451.99512, 22.40120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2514, 2309.54199, -1451.98376, 22.40120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2514, 2311.03906, -1451.91663, 22.40120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19435, 2312.61304, -1450.70215, 23.87210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 2311.93530, -1450.96021, 22.35410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 2310.46069, -1450.96301, 22.35410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 2308.99463, -1450.91821, 22.35410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 2313.33984, -1449.55920, 24.86460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2311.81323, -1451.74060, 23.87210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11709, 2312.05322, -1447.24719, 23.06950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11709, 2312.58691, -1449.71094, 23.06950,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11709, 2308.54590, -1447.20276, 23.06950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2520, 2306.48022, -1448.32813, 22.36560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2520, 2305.19434, -1448.30396, 22.36560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2520, 2303.93555, -1448.30042, 22.36560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2520, 2302.53345, -1448.30542, 22.36560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2520, 2306.61133, -1450.99011, 22.36560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2520, 2305.31055, -1450.99280, 22.36560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2520, 2304.02173, -1450.97351, 22.36560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2520, 2302.57153, -1450.98499, 22.36560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2842, 2302.09888, -1450.14746, 22.40216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2842, 2303.90771, -1450.15125, 22.40216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2842, 2305.70996, -1450.16138, 22.40216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2842, 2307.96802, -1448.67920, 22.40216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2842, 2311.54346, -1448.72168, 22.40216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 2304.74561, -1442.32910, 23.37790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 2308.48462, -1442.42664, 22.30610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 2309.47583, -1442.41614, 22.30610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 2310.48560, -1442.42896, 22.30610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 2311.47266, -1442.42480, 22.30610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 2312.47339, -1442.44507, 22.30610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 2309.00000, -1442.29517, 23.35770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 2312.00317, -1442.31079, 23.35770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2742, 2312.03955, -1447.01367, 24.08010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2742, 2312.86450, -1449.65271, 24.08010,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2742, 2308.54688, -1446.96594, 24.08010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2750, 2310.35034, -1442.07373, 23.95730,   0.00000, 0.00000, -90.72000);
	CreateDynamicObject(11728, 2310.46484, -1441.89868, 24.11485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11728, 2312.04126, -1441.87732, 24.11485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2750, 2311.91479, -1442.06396, 23.95730,   0.00000, 0.00000, -90.72000);
	CreateDynamicObject(11728, 2309.00244, -1441.87390, 24.11485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2750, 2308.86938, -1442.04517, 23.95730,   0.00000, 0.00000, -90.72000);
	CreateDynamicObject(2751, 2311.07300, -1442.19397, 23.39610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2751, 2309.87183, -1442.17529, 23.39610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2752, 2310.82324, -1442.06506, 23.35857,   0.00000, 0.00000, 47.16000);
	CreateDynamicObject(2752, 2310.16187, -1442.06104, 23.35857,   0.00000, 0.00000, 47.16000);
	CreateDynamicObject(14782, 2304.84180, -1446.22107, 23.37790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19379, 2303.95630, -1447.80200, 22.31280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(948, 2305.77246, -1442.45203, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2303.78931, -1446.16492, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2301.87842, -1443.60205, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2312.58716, -1446.25647, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2308.45239, -1446.25940, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2312.68604, -1443.70789, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2307.90967, -1448.50061, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2312.69531, -1448.54822, 22.40182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2296.90918, -1450.75012, 22.63010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2296.90332, -1447.27246, 22.63010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2296.90625, -1443.77014, 22.63010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2296.89600, -1443.74170, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2296.90625, -1447.23865, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2296.90723, -1450.72083, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2293.61499, -1450.82800, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2293.61499, -1447.34033, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2293.61499, -1443.85083, 23.35210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2293.60059, -1451.11462, 23.58010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2293.63037, -1444.34216, 23.58010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2293.61499, -1446.01025, 25.25910,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2293.59668, -1449.43225, 25.25950,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(948, 2293.69482, -1451.84009, 23.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2293.80029, -1443.15002, 23.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 2293.52173, -1449.84717, 25.30840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 2293.52734, -1448.08618, 25.30840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 2293.53418, -1446.32495, 25.30840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2654, 2293.36621, -1445.22131, 22.63060,   0.00000, 0.00000, -23.34000);
	CreateDynamicObject(2654, 2293.55811, -1446.67993, 22.63060,   0.00000, 0.00000, 23.28000);
	CreateDynamicObject(2654, 2293.45044, -1448.04102, 22.63060,   0.00000, 0.00000, -28.80000);
	CreateDynamicObject(2654, 2293.51318, -1449.41028, 22.63060,   0.00000, 0.00000, 23.87999);
	CreateDynamicObject(2654, 2293.71460, -1450.50781, 22.63060,   0.00000, 0.00000, -61.79996);
	CreateDynamicObject(19435, 2292.75024, -1447.72156, 28.58670,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(2422, 2296.79810, -1450.95239, 23.40200,   0.00000, 0.00000, 65.52000);
	CreateDynamicObject(2422, 2296.60278, -1449.63989, 23.40200,   0.00000, 0.00000, 113.34000);
	CreateDynamicObject(2422, 2296.95508, -1444.57898, 23.40200,   0.00000, 0.00000, 59.04003);
	CreateDynamicObject(2422, 2296.73462, -1442.95422, 23.40200,   0.00000, 0.00000, 124.38004);
	CreateDynamicObject(19893, 2296.85449, -1448.70483, 23.44027,   0.00000, 0.00000, -104.87999);
	CreateDynamicObject(19893, 2296.88110, -1445.98706, 23.44027,   0.00000, 0.00000, -76.43997);
	CreateDynamicObject(2196, 2296.73901, -1446.97815, 23.44030,   0.00000, 0.00000, 181.50000);
	CreateDynamicObject(2196, 2296.69336, -1448.54272, 23.44030,   0.00000, 0.00000, 173.45996);
	CreateDynamicObject(948, 2296.93921, -1451.91736, 23.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2296.95117, -1442.39893, 23.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 2296.86426, -1447.31482, 23.44035,   0.00000, 0.00000, -90.00002);
	CreateDynamicObject(1703, 2300.72339, -1447.64929, 22.20640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(948, 2300.81763, -1450.86047, 22.17240,   0.00000, 0.00000, 0.48000);
	CreateDynamicObject(948, 2300.77612, -1446.58594, 22.17240,   0.00000, 0.00000, 0.48000);
	CreateDynamicObject(1536, 2328.82446, -1451.44641, 42.51470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 2311.00171, -1446.64001, 22.35410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 2313.09131, -1445.68005, 22.35410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2313.85864, -1447.01514, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2313.91064, -1450.93298, 23.00780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1605, 2292.85718, -1447.18237, 24.08650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1606, 2292.54980, -1448.65869, 24.32840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2294.37817, -1449.96472, 24.28900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2294.36255, -1447.74487, 24.28900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2294.36182, -1445.55042, 24.28900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2300.76855, -1442.53650, 22.17240,   0.00000, 0.00000, 0.48000);
	CreateDynamicObject(638, 2315.64136, -1442.36267, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2318.07788, -1452.07751, 23.00780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19769, 2308.32251, -1433.67529, 36.70000,   0.00000, -2.20000, 0.00000);
	CreateDynamicObject(14407, 2299.23975, -1454.53943, 19.18590,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19435, 2301.13965, -1452.89880, 20.63260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2297.27002, -1452.89099, 20.63260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2309.87280, -1467.02417, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.09082, -1467.12097, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2318.45068, -1467.02014, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2322.85181, -1467.16016, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2327.23364, -1467.09058, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2331.65039, -1467.04639, 22.09395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2331.63281, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2327.28882, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2322.94482, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2318.60083, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2314.25684, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2310.06372, -1458.28357, 22.09390,   0.00000, 0.00000, 0.00000);
 	
 	//SAPD - Ray_Krieger
 	CreateDynamicObject(19379, 1207.00696, -1768.48560, 12.51210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1209.02502, -1762.79785, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1210.49207, -1759.16846, 12.51210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1213.00623, -1753.89429, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1218.84155, -1750.95032, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1223.95496, -1747.91003, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1223.89429, -1757.49438, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1223.85962, -1767.10522, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1215.51611, -1760.54736, 12.51340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1209.02502, -1762.79785, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1215.61902, -1768.49841, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1223.76965, -1768.53796, 12.51150,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1216.68384, -1778.11133, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1216.61462, -1787.73987, 12.51190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1216.56018, -1797.36401, 12.51190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1216.47339, -1806.94653, 12.51190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1234.42847, -1740.54980, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1234.37622, -1750.20032, 12.51260,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1234.35925, -1759.79321, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1234.20837, -1768.62158, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1234.20532, -1778.24817, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1223.70874, -1778.16785, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1213.19604, -1778.07495, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1202.69617, -1777.98438, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38208, -1778.20703, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38269, -1768.56982, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1234.65308, -1783.04895, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1225.01599, -1783.06433, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1224.59094, -1745.36316, 14.18720,   0.00000, 0.00000, 98.88000);
	CreateDynamicObject(19377, 1215.67029, -1748.50879, 14.18720,   0.00000, 0.00000, 119.87998);
	CreateDynamicObject(19377, 1208.86609, -1754.88184, 14.18720,   0.00000, 0.00000, 146.81999);
	CreateDynamicObject(19377, 1204.87488, -1763.52271, 14.18720,   0.00000, 0.00000, 163.44002);
	CreateDynamicObject(19377, 1203.49927, -1772.94409, 14.18720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1225.41626, -1749.00867, 22.86450,   0.00000, -45.00000, 98.88000);
	CreateDynamicObject(19377, 1226.13672, -1753.53772, 27.45354,   0.00000, -45.00000, 98.88000);
	CreateDynamicObject(19377, 1207.17395, -1772.97327, 22.99050,   0.00000, -45.00000, 180.00000);
	CreateDynamicObject(19377, 1211.59937, -1772.98474, 27.45350,   0.00000, -45.00000, 180.00000);
	CreateDynamicObject(19454, 1220.09253, -1758.34973, 29.93110,   0.00000, 45.00000, -56.93999);
	CreateDynamicObject(19454, 1215.33276, -1764.92004, 29.93110,   0.00000, 45.00000, -14.81999);
	CreateDynamicObject(3851, 1206.38965, -1763.15588, 20.64744,   0.00000, 45.00000, -16.38000);
	CreateDynamicObject(3851, 1211.40210, -1753.85535, 20.64744,   0.00000, 45.00000, -40.55998);
	CreateDynamicObject(3851, 1219.89917, -1747.73071, 20.64744,   0.00000, 45.00000, -67.50000);
	CreateDynamicObject(3851, 1208.88245, -1763.88330, 23.25060,   0.00000, 45.00000, -16.38000);
	CreateDynamicObject(3851, 1213.36060, -1755.54883, 23.25060,   0.00000, 45.00000, -40.56000);
	CreateDynamicObject(3851, 1220.89172, -1750.13269, 23.25060,   0.00000, 45.00000, -67.50000);
	CreateDynamicObject(3851, 1221.94543, -1752.72388, 26.04060,   0.00000, 45.00000, -67.50000);
	CreateDynamicObject(18762, 1217.84192, -1746.89197, 19.38610,   90.00000, 90.00000, 28.14001);
	CreateDynamicObject(18762, 1213.61365, -1749.51367, 19.38610,   90.00000, 90.00000, 35.76001);
	CreateDynamicObject(18762, 1209.95984, -1753.00366, 19.38610,   90.00000, 90.00000, 51.42001);
	CreateDynamicObject(18762, 1207.15796, -1756.96692, 19.38610,   90.00000, 90.00000, 58.32001);
	CreateDynamicObject(18762, 1205.12756, -1761.52649, 19.38610,   90.00000, 90.00000, 74.16003);
	CreateDynamicObject(18762, 1203.80505, -1766.13159, 19.38610,   90.00000, 90.00000, 73.86003);
	CreateDynamicObject(18762, 1204.75732, -1768.61853, 20.97700,   0.00000, 45.00000, -0.18000);
	CreateDynamicObject(18762, 1208.08862, -1768.63232, 24.35427,   0.00000, 45.00000, -0.18000);
	CreateDynamicObject(18762, 1210.07349, -1768.64331, 26.34460,   0.00000, 45.00000, -0.18000);
	CreateDynamicObject(18762, 1212.51843, -1766.41101, 27.79943,   90.00000, 90.00000, 75.78004);
	CreateDynamicObject(18762, 1214.27283, -1761.81653, 27.79940,   90.00000, 90.00000, 61.14001);
	CreateDynamicObject(18762, 1217.19482, -1757.88477, 27.79940,   90.00000, 90.00000, 46.14000);
	CreateDynamicObject(18762, 1219.93518, -1755.36218, 27.79980,   90.00000, 90.00000, 37.32000);
	CreateDynamicObject(18762, 1220.27319, -1746.45972, 19.88145,   0.00000, 45.00000, -79.14002);
	CreateDynamicObject(18762, 1220.89819, -1749.75488, 23.22886,   0.00000, 45.00000, -79.14002);
	CreateDynamicObject(3851, 1215.46948, -1757.35901, 26.04060,   0.00000, 45.00000, -40.56000);
	CreateDynamicObject(3851, 1210.71924, -1766.29785, 26.04060,   0.00000, 45.00000, -16.38000);
	CreateDynamicObject(19454, 1214.30017, -1764.65491, 28.87362,   0.00000, 45.00000, -14.81999);
	CreateDynamicObject(19454, 1219.12329, -1757.84680, 29.01496,   0.00000, 45.00000, -56.93999);
	CreateDynamicObject(18762, 1220.89819, -1749.75488, 23.22886,   0.00000, 45.00000, -79.14002);
	CreateDynamicObject(18762, 1221.35876, -1752.14075, 26.09735,   0.00000, 45.00000, -79.14002);
	CreateDynamicObject(18762, 1221.48901, -1752.81226, 26.35618,   0.00000, 45.00000, -79.14002);
	CreateDynamicObject(18762, 1212.41492, -1766.73645, 27.79980,   90.00000, 90.00000, 75.78000);
	CreateDynamicObject(1536, 1208.61865, -1755.36255, 12.56876,   0.00000, 0.00000, 56.69997);
	CreateDynamicObject(1536, 1210.24866, -1752.82544, 12.56876,   0.00000, 0.00000, -123.66013);
	CreateDynamicObject(19377, 1207.13794, -1779.53040, 22.99050,   0.00000, -45.00000, 180.00000);
	CreateDynamicObject(19377, 1203.46521, -1782.48218, 14.18720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1211.60620, -1779.55164, 27.45350,   0.00000, -45.00000, 180.00000);
	CreateDynamicObject(19377, 1234.16321, -1744.64026, 14.18720,   0.00000, 0.00000, 89.64001);
	CreateDynamicObject(19377, 1239.37463, -1755.51929, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38232, -1749.58533, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1243.76428, -1744.68762, 14.18720,   0.00000, 0.00000, 89.64001);
	CreateDynamicObject(19377, 1210.68079, -1783.04126, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1208.30103, -1783.04968, 24.66253,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1217.91699, -1783.04919, 24.52650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1227.51099, -1783.04968, 24.66250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1237.12305, -1783.04968, 24.66250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1239.37732, -1778.18762, 24.66250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38269, -1768.56982, 24.66250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38269, -1755.73926, 24.66250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38232, -1749.58533, 24.66250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1239.38220, -1759.89734, 24.66250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1234.45496, -1748.22083, 22.86450,   0.00000, -45.00000, 90.77999);
	CreateDynamicObject(19377, 1235.28552, -1752.76599, 27.45350,   0.00000, -45.00000, 90.78000);
	CreateDynamicObject(19377, 1215.53210, -1777.75220, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1225.17627, -1777.73352, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1237.19885, -1775.90247, 20.90377,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1234.73303, -1767.23022, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1225.09277, -1767.23315, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1234.62317, -1756.72278, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1225.00208, -1756.75281, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1215.48706, -1767.24133, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1215.37842, -1756.75293, 27.74618,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3660, 1229.68359, -1750.66138, 14.99410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1219.22510, -1742.09583, 14.99410,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3660, 1200.08130, -1763.70471, 14.99410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1209.17847, -1774.73413, 14.99410,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(745, 1205.55835, -1766.51489, 12.59570,   0.00000, 0.00000, -17.46000);
	CreateDynamicObject(745, 1205.92224, -1769.75940, 12.59570,   0.00000, 0.00000, 16.02000);
	CreateDynamicObject(745, 1205.99451, -1780.24182, 12.59570,   0.00000, 0.00000, 26.82000);
	CreateDynamicObject(745, 1205.61450, -1777.80127, 12.59570,   0.00000, 0.00000, -166.19998);
	CreateDynamicObject(745, 1205.85205, -1774.75232, 12.59570,   0.00000, 0.00000, -96.06001);
	CreateDynamicObject(745, 1222.64587, -1747.71814, 12.59570,   0.00000, 0.00000, -15.00000);
	CreateDynamicObject(745, 1227.26953, -1747.16870, 12.59570,   0.00000, 0.00000, -151.85997);
	CreateDynamicObject(745, 1231.01636, -1746.96338, 12.59570,   0.00000, 0.00000, -336.36002);
	CreateDynamicObject(745, 1236.04297, -1746.88135, 12.59570,   0.00000, 0.00000, -528.17963);
	CreateDynamicObject(646, 1211.54553, -1752.53284, 13.82602,   0.00000, 0.00000, -91.08000);
	CreateDynamicObject(646, 1208.74158, -1756.48572, 13.82602,   0.00000, 0.00000, -91.08000);
	CreateDynamicObject(2744, 1208.62842, -1759.77783, 14.36570,   0.00000, 0.00000, 79.44000);
	CreateDynamicObject(2810, 1208.61560, -1759.78381, 14.32770,   0.00000, 0.00000, 79.44000);
	CreateDynamicObject(2744, 1215.29834, -1751.73254, 14.36570,   0.00000, 0.00000, 14.36570);
	CreateDynamicObject(2810, 1215.29614, -1751.73096, 14.36570,   0.00000, 0.00000, 14.36570);
	CreateDynamicObject(11245, 1209.37378, -1758.77698, 15.34270,   0.00000, -70.00000, 65.04000);
	CreateDynamicObject(11245, 1215.61243, -1752.21472, 15.34270,   0.00000, -70.00000, -153.24002);
	CreateDynamicObject(19460, 1225.97009, -1782.10547, 11.68840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 1229.35632, -1773.92615, 11.68840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19460, 1239.75757, -1770.98254, 11.68840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18762, 1232.79700, -1770.83691, 15.06610,   0.00000, 0.00000, 39.06000);
	CreateDynamicObject(18762, 1226.00696, -1777.51758, 15.04711,   0.00000, 0.00000, 39.06001);
	CreateDynamicObject(18762, 1226.00769, -1777.51831, 20.03710,   0.00000, 0.00000, 39.06000);
	CreateDynamicObject(18762, 1232.79700, -1770.83691, 20.03714,   0.00000, 0.00000, 39.06000);
	CreateDynamicObject(18762, 1232.79700, -1770.83691, 25.03400,   0.00000, 0.00000, 39.06000);
	CreateDynamicObject(18762, 1226.00769, -1777.51831, 25.03400,   0.00000, 0.00000, 39.06000);
	CreateDynamicObject(19460, 1237.52673, -1770.57568, 25.78768,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19460, 1237.53955, -1770.56030, 22.37944,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1233.44519, -1770.98926, 10.94190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1236.45691, -1770.48621, 18.61561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1225.82434, -1781.35022, 18.61560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 1229.33813, -1773.93457, 22.37940,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19460, 1229.35632, -1773.92615, 25.78770,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19460, 1225.97009, -1782.10547, 22.37940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 1225.97009, -1782.10547, 25.78770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19442, 1232.12708, -1771.14661, 19.29750,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19442, 1232.12769, -1771.14685, 18.30590,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19442, 1226.58252, -1776.69202, 19.29750,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19442, 1226.58252, -1776.69263, 18.30230,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19442, 1227.40369, -1775.89209, 16.75024,   90.00000, 90.00000, 225.00000);
	CreateDynamicObject(19442, 1229.76990, -1773.53271, 16.75060,   90.00000, 90.00000, 225.00000);
	CreateDynamicObject(19442, 1231.59949, -1771.70605, 16.75024,   90.00000, 90.00000, 225.00000);
	CreateDynamicObject(19442, 1234.84155, -1770.53052, 16.75020,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19442, 1237.85803, -1770.53662, 16.75060,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19442, 1225.87634, -1779.70544, 16.75000,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19442, 1225.89990, -1783.12671, 16.75020,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(18762, 1214.27283, -1761.49048, 27.79980,   90.00000, 90.00000, 61.14000);
	CreateDynamicObject(19379, 1244.67908, -1762.63428, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1255.13611, -1762.63818, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1227.01807, -1797.46899, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1255.34058, -1772.19250, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1255.37427, -1781.83118, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1255.35596, -1791.45264, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1237.52002, -1797.54553, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1248.00989, -1797.64136, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1258.50806, -1797.73279, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19377, 1260.57996, -1787.93127, 14.18720,   0.00000, 0.00000, -0.42000);
	CreateDynamicObject(19377, 1260.62280, -1775.61646, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1260.62280, -1762.61157, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1264.33557, -1789.51489, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1257.00354, -1793.53772, 14.18720,   0.00000, 0.00000, 147.53995);
	CreateDynamicObject(19377, 1251.03638, -1800.99500, 14.18720,   0.00000, 0.00000, 135.23994);
	CreateDynamicObject(19377, 1244.76074, -1802.31982, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1225.60242, -1802.31982, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1220.86804, -1807.06140, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1211.50928, -1806.95410, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1211.52954, -1787.78528, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1221.81702, -1787.95386, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1226.55322, -1792.70435, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1245.28650, -1792.81079, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1237.91125, -1792.79529, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1237.99866, -1802.33899, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1231.28210, -1807.10083, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19379, 1226.93787, -1807.11816, 12.51120,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19377, 1225.62646, -1809.86060, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1234.42908, -1807.29834, 14.18720,   0.00000, 0.00000, 122.51998);
	CreateDynamicObject(19377, 1236.39612, -1807.10608, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1232.23840, -1787.94373, 12.51190,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19377, 1227.37756, -1787.88330, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1237.38037, -1787.86865, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1250.16272, -1786.20081, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1250.09204, -1774.86829, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1250.12817, -1772.23291, 14.18780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1245.38525, -1767.48401, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1244.22388, -1767.48279, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1244.27234, -1757.80151, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1255.74292, -1757.80151, 14.18720,   0.00000, 0.00000, 88.98000);
	CreateDynamicObject(19377, 1260.62207, -1782.57764, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1250.54102, -1753.00391, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1261.04211, -1753.00720, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1271.52454, -1753.02576, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1261.60364, -1743.39697, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1271.48389, -1743.44873, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1265.94116, -1762.62317, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1276.40979, -1762.62268, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1265.84985, -1772.25610, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1276.34021, -1772.23181, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1276.37122, -1781.81580, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1265.87793, -1781.88513, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1265.34387, -1783.59216, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1272.12268, -1783.55713, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1274.34009, -1765.94958, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1274.34009, -1775.55762, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1274.34314, -1785.17993, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1274.34021, -1756.33398, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1274.34460, -1746.69531, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1251.56763, -1748.26123, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1244.21655, -1748.25952, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1245.53259, -1752.96973, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1261.20032, -1748.26758, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1270.83435, -1748.26599, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1244.87939, -1781.04102, 12.51240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1244.88611, -1778.05591, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1245.18420, -1773.57764, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1244.78870, -1789.31055, 12.51280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1242.61182, -1787.93311, 14.18720,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(19377, 1242.54773, -1778.32361, 14.18720,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(19377, 1211.49500, -1801.05957, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1216.10608, -1809.35193, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1265.63782, -1762.27930, 12.51220,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1244.20679, -1762.17456, 16.71780,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1244.21082, -1752.43066, 16.71779,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1253.81567, -1752.42639, 16.71780,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1253.82324, -1762.23657, 16.71780,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1244.14746, -1783.15723, 19.37395,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1234.48828, -1788.28455, 19.37460,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1224.85754, -1788.26611, 19.37460,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1263.41052, -1787.36658, 19.37395,   0.00000, 90.00000, 90.12000);
	CreateDynamicObject(19377, 1263.37549, -1776.93640, 19.37395,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1273.00159, -1787.28955, 19.37395,   0.00000, 90.00000, 90.12000);
	CreateDynamicObject(19377, 1272.96948, -1776.91394, 19.37395,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1263.43408, -1766.45300, 19.37395,   0.00000, 90.00000, 90.06000);
	CreateDynamicObject(19377, 1273.03577, -1766.44385, 19.37400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1263.44336, -1755.98926, 19.37400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1263.44678, -1745.50049, 19.37400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1273.06726, -1755.95874, 19.37400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1273.08093, -1745.48865, 19.37400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1211.48584, -1800.39929, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1240.23474, -1764.16479, 13.82378,   0.00000, 0.00000, -26.21999);
	CreateDynamicObject(19302, 1240.08875, -1759.72607, 13.82380,   0.00000, 0.00000, 42.30000);
	CreateDynamicObject(19377, 1239.38025, -1759.89734, 20.29550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1249.07019, -1756.86133, 13.82380,   0.00000, 0.00000, 89.28004);
	CreateDynamicObject(19379, 1255.39319, -1762.66272, 12.51290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1252.38647, -1765.70874, 14.92162,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1250.60632, -1767.49939, 14.48115,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1252.38647, -1759.57568, 14.92160,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1253.30627, -1764.14343, 13.82380,   0.00000, 0.00000, -10.62000);
	CreateDynamicObject(19454, 1252.39307, -1760.49683, 14.92160,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1252.39172, -1763.01880, 19.89120,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1260.58191, -1768.30286, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1260.57043, -1769.95471, 13.82380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1260.63220, -1771.04370, 20.31570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1260.62366, -1756.21399, 14.07190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1260.62366, -1753.01001, 14.07190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1260.62366, -1749.83997, 14.07190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19444, 1261.49390, -1751.42468, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19444, 1261.51379, -1754.59753, 14.06990,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19444, 1261.39001, -1757.85352, 14.06990,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19444, 1261.51636, -1748.28552, 14.06990,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(19444, 1259.85596, -1748.32800, 14.06990,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(19444, 1259.80786, -1751.42468, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19444, 1259.77820, -1754.59485, 14.06990,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(19444, 1259.80408, -1757.85303, 14.06990,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(1536, 1214.64465, -1809.30994, 12.56880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1217.63062, -1809.27869, 12.56880,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19371, 1262.31665, -1770.92285, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1262.31665, -1776.42285, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1262.26074, -1782.15405, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1263.89197, -1781.87415, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1268.89197, -1781.87415, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1273.39197, -1781.87415, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.88013, -1780.32532, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1272.87781, -1775.23804, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1272.85779, -1770.34167, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1263.89526, -1771.86853, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1263.88989, -1774.89148, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1263.90845, -1774.31177, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1263.91003, -1779.82751, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1263.92285, -1777.36389, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1269.82568, -1780.28149, 13.82380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.29077, -1780.32568, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1264.85413, -1780.31128, 13.82380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1267.32690, -1780.35291, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1271.31763, -1776.17554, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1271.36975, -1778.63391, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1271.34375, -1773.74536, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1271.29504, -1771.29065, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1271.32886, -1768.82263, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1271.27271, -1766.36597, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1272.78882, -1765.42175, 14.06990,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19371, 1271.24487, -1763.89404, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1271.18896, -1761.45752, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1272.71985, -1760.56677, 14.06990,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19371, 1262.22974, -1767.06323, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1263.80029, -1766.13000, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19371, 1263.75684, -1763.68701, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.22546, -1762.06177, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19444, 1262.96655, -1757.84766, 14.06990,   0.00000, 0.00000, 90.06001);
	CreateDynamicObject(19302, 1263.73718, -1758.78601, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19444, 1263.73987, -1761.20374, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19444, 1263.72766, -1760.44214, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.31665, -1770.92285, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1263.90845, -1774.31177, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1263.88989, -1774.89148, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.31665, -1776.42285, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1263.91003, -1779.82751, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1263.89197, -1781.87415, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.26074, -1782.15405, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1267.32690, -1780.35291, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1268.89771, -1781.85498, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.29077, -1780.32568, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1272.88013, -1780.32532, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1273.39197, -1781.87415, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1271.36975, -1778.63391, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.87781, -1775.23804, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1271.34375, -1773.74536, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.85779, -1770.34167, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1271.32886, -1768.82263, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.78882, -1765.42175, 17.56960,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19371, 1271.24487, -1763.89404, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1272.71985, -1760.56677, 17.56960,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19371, 1262.22974, -1767.06323, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1263.75684, -1763.68701, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.22546, -1762.06177, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19444, 1263.72766, -1760.44214, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19444, 1263.73987, -1761.20374, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19444, 1262.96655, -1757.84766, 17.56960,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(19444, 1261.39001, -1757.85352, 17.56960,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19371, 1260.63977, -1759.45349, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.63293, -1762.64587, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.63672, -1765.44385, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.64795, -1772.59448, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.64880, -1775.77808, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.62939, -1778.98535, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.62952, -1782.19946, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1265.49561, -1783.57788, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1267.53552, -1783.55164, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1270.71533, -1783.53857, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1273.91711, -1783.53711, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1274.32837, -1778.65186, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.30237, -1775.45471, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29175, -1772.25977, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29639, -1769.10034, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29895, -1765.92737, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.30176, -1762.76709, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.31763, -1762.22217, 14.06990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.31763, -1762.22217, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.30176, -1762.76709, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29895, -1765.92737, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29639, -1769.10034, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29639, -1769.10034, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.29175, -1772.25977, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.30237, -1775.45471, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1274.32837, -1778.65186, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1273.91711, -1783.53711, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1270.71533, -1783.53857, 14.06990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1270.71533, -1783.53857, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1267.53552, -1783.55164, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1265.49561, -1783.57788, 17.56960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1260.62952, -1782.19946, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.62939, -1778.98535, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.64880, -1775.77808, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.64795, -1772.59448, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.63672, -1765.44385, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.63293, -1762.64587, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1260.63977, -1759.45349, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1262.29199, -1759.45215, 15.81080,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.36841, -1762.65710, 15.81080,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.34717, -1765.42102, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.43591, -1772.48242, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.42651, -1775.68518, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.42419, -1778.89063, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1262.42444, -1782.09180, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1265.91626, -1781.89832, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1269.41663, -1781.88770, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1272.91626, -1781.97571, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.03821, -1778.56665, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.03748, -1775.36597, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.05981, -1772.18323, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.05554, -1768.98987, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.06885, -1765.79053, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.02795, -1762.62219, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1273.02393, -1762.21973, 15.81080,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19444, 1270.47681, -1762.28528, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1270.47461, -1765.78564, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1270.47888, -1769.26990, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1270.47449, -1772.76135, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1270.46924, -1776.26135, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1270.47168, -1779.74609, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1267.93323, -1779.50940, 15.81020,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19444, 1264.45032, -1779.51855, 15.81070,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19444, 1264.78101, -1776.99170, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.78345, -1773.48950, 15.81070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.78015, -1772.62830, 15.81040,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.78052, -1765.37769, 15.81240,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.78052, -1761.90430, 15.81240,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.78015, -1759.53955, 15.81280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.77466, -1769.42957, 15.81240,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1264.77161, -1767.68713, 15.81280,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19302, 1263.73718, -1758.78601, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1263.82007, -1766.12708, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1263.89526, -1771.86853, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1263.92285, -1777.36389, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1264.85413, -1780.31128, 17.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1269.82568, -1780.28149, 17.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1271.31763, -1776.17554, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1271.29504, -1771.29065, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1271.27271, -1766.36597, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1271.18896, -1761.45752, 17.11540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1260.60596, -1752.99072, 20.99488,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1263.49536, -1757.83081, 16.42160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1271.76245, -1760.56140, 16.42160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1265.55957, -1759.89148, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1265.56055, -1764.01978, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1265.55920, -1768.14966, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1265.55518, -1772.29126, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1265.54968, -1776.41382, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1269.69812, -1762.63342, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1269.70300, -1766.77393, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1269.70630, -1770.90967, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1269.69922, -1775.03040, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1269.70703, -1776.62769, 16.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18767, 1270.46863, -1773.72339, 10.99880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18767, 1271.45166, -1773.72937, 10.99880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18767, 1269.62781, -1773.71484, 10.99820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1267.54077, -1774.69836, 1.05131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1267.56531, -1778.59607, 2.99860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1267.49902, -1776.93250, 12.98990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1263.87988, -1768.66284, 17.56960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1263.88110, -1769.36621, 17.56920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1261.38416, -1763.53259, 16.35472,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1261.41821, -1766.50488, 16.36490,   0.00000, 0.00000, 137.27991);
	CreateDynamicObject(1771, 1261.35400, -1759.22437, 16.35472,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1263.27722, -1761.38110, 16.36490,   0.00000, 0.00000, 224.69986);
	CreateDynamicObject(1771, 1261.45740, -1775.05591, 16.35472,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(2602, 1261.12830, -1771.63733, 16.37840,   0.00000, 0.00000, 49.14000);
	CreateDynamicObject(1771, 1261.38916, -1780.77039, 16.35472,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(2602, 1261.14929, -1777.15027, 16.40013,   0.00000, 0.00000, 55.56001);
	CreateDynamicObject(1771, 1267.51575, -1782.78552, 16.35470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2602, 1264.64685, -1783.13855, 16.37840,   0.00000, 0.00000, 130.92000);
	CreateDynamicObject(1771, 1271.99561, -1782.77979, 16.35470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2602, 1269.61279, -1783.04199, 16.37840,   0.00000, 0.00000, 139.32001);
	CreateDynamicObject(1771, 1273.57727, -1778.93604, 16.35470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1273.58447, -1775.77356, 16.37840,   0.00000, 0.00000, -40.08000);
	CreateDynamicObject(1771, 1272.08301, -1785.06274, 16.35470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1273.54858, -1773.86890, 16.35470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1273.57263, -1770.80676, 16.37840,   0.00000, 0.00000, -40.08000);
	CreateDynamicObject(1771, 1273.52747, -1766.80237, 16.35470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1273.80396, -1769.65039, 16.37840,   0.00000, 0.00000, -126.06001);
	CreateDynamicObject(1771, 1273.48169, -1761.94495, 16.35470,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(2602, 1273.81323, -1764.70276, 16.37840,   0.00000, 0.00000, -126.06001);
	CreateDynamicObject(1771, 1273.48169, -1761.94495, 13.16980,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1771, 1273.52747, -1766.80237, 13.16980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1273.54858, -1773.86890, 13.16980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1273.57727, -1778.93604, 13.16980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1271.99561, -1782.77979, 13.16980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1267.49573, -1782.78613, 13.16980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1261.38916, -1780.77039, 13.16980,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(1771, 1261.45740, -1775.05591, 13.16980,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(1771, 1261.38416, -1763.53259, 13.16980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1261.35400, -1759.22437, 13.16980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1263.27722, -1761.38110, 12.96120,   0.00000, 0.00000, 224.69991);
	CreateDynamicObject(2602, 1261.41821, -1766.50488, 12.96120,   0.00000, 0.00000, 137.27991);
	CreateDynamicObject(2602, 1261.11548, -1771.62195, 12.96120,   0.00000, 0.00000, 49.14000);
	CreateDynamicObject(2602, 1261.14929, -1777.15027, 12.96120,   0.00000, 0.00000, 55.56000);
	CreateDynamicObject(2602, 1264.64685, -1783.13855, 12.96120,   0.00000, 0.00000, 130.92000);
	CreateDynamicObject(2602, 1269.61279, -1783.04199, 16.37840,   0.00000, 0.00000, 139.32001);
	CreateDynamicObject(2602, 1269.61279, -1783.04199, 12.96120,   0.00000, 0.00000, 139.32001);
	CreateDynamicObject(2602, 1273.58447, -1775.77356, 12.96120,   0.00000, 0.00000, -40.08000);
	CreateDynamicObject(2602, 1273.57263, -1770.80676, 12.96120,   0.00000, 0.00000, -40.08000);
	CreateDynamicObject(2602, 1273.80396, -1769.65039, 12.96120,   0.00000, 0.00000, -126.06000);
	CreateDynamicObject(2602, 1273.81323, -1764.70276, 12.96120,   0.00000, 0.00000, -126.06000);
	CreateDynamicObject(1722, 1261.55774, -1756.23840, 12.59830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1261.69666, -1753.02991, 12.59830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1261.86450, -1749.78333, 12.59830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1259.55652, -1749.79346, 12.59830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1259.22534, -1752.96790, 12.59830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1259.30139, -1756.13892, 12.59830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1259.94519, -1751.13489, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1216, 1259.85486, -1754.31213, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1216, 1259.81702, -1757.52820, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1216, 1261.35437, -1757.50488, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1216, 1261.37585, -1754.30396, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1216, 1261.43469, -1751.13916, 12.82740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1248.03308, -1757.74622, 20.45298,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2627, 1273.17822, -1759.30115, 12.59950,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2627, 1273.17664, -1757.26758, 12.59950,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2627, 1273.17834, -1755.24048, 12.59950,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2629, 1272.94226, -1753.12646, 12.59940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2629, 1272.85474, -1751.16467, 12.59940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2629, 1272.81897, -1749.12354, 12.59940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2631, 1269.38184, -1750.70618, 12.59950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 1269.33521, -1757.46655, 12.59950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1260.62805, -1756.31409, 13.98110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1260.63892, -1752.91235, 13.98110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1260.64319, -1749.79187, 13.98110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1706, 1256.73511, -1757.26807, 12.56120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1706, 1253.22070, -1757.21338, 12.56120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1706, 1246.07703, -1754.77771, 12.56120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1706, 1246.03491, -1750.83191, 12.56120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1706, 1251.41357, -1748.79663, 12.56120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1706, 1254.94336, -1748.81848, 12.56120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 1238.93884, -1754.49988, 12.59908,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(625, 1230.31433, -1754.13049, 12.59908,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(625, 1219.73755, -1754.06934, 12.59908,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(625, 1211.71509, -1764.83679, 12.59908,   0.00000, 0.00000, -42.84000);
	CreateDynamicObject(625, 1211.73413, -1773.63196, 12.59908,   0.00000, 0.00000, -42.84000);
	CreateDynamicObject(625, 1212.01746, -1782.61133, 12.59908,   0.00000, 0.00000, -42.78000);
	CreateDynamicObject(19302, 1250.09473, -1791.86182, 13.82380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1250.11621, -1780.50867, 13.82380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1250.13818, -1780.42053, 20.31990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18762, 1212.93616, -1749.98267, 19.38570,   90.00000, 90.00000, 35.76000);
	CreateDynamicObject(700, 1204.48438, -1724.85156, 13.03906,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19377, 1234.99548, -1748.22412, 22.86450,   0.00000, -45.00000, 90.77999);
	CreateDynamicObject(19377, 1230.71875, -1802.34497, 20.29196,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(758, 1221.86035, -1765.53967, 11.66291,   0.00000, 0.00000, 25.98000);
	CreateDynamicObject(3515, 1221.37354, -1765.97131, 11.60783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1221.32092, -1765.97974, 13.22661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(692, 1220.76697, -1764.71887, 13.50093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(692, 1222.33240, -1766.42786, 13.50093,   0.00000, 0.00000, 51.05999);
	CreateDynamicObject(692, 1221.80017, -1765.22034, 13.50093,   0.00000, 0.00000, 84.66000);
	CreateDynamicObject(692, 1220.53284, -1765.62268, 13.60093,   0.00000, 0.00000, 31.55999);
	CreateDynamicObject(692, 1221.19153, -1766.78394, 13.60093,   0.00000, 0.00000, -41.46000);
	CreateDynamicObject(19630, 1219.34985, -1766.00085, 12.98210,   0.00000, 0.00000, -28.43999);
	CreateDynamicObject(19630, 1219.19287, -1763.98962, 12.98210,   0.00000, 0.00000, -130.49998);
	CreateDynamicObject(19630, 1219.21777, -1765.39392, 12.98210,   0.00000, 0.00000, -130.43999);
	CreateDynamicObject(19630, 1219.20032, -1764.61597, 12.98210,   0.00000, 0.00000, -229.38000);
	CreateDynamicObject(19630, 1219.92517, -1763.88257, 12.98210,   0.00000, 0.00000, -18.83996);
	CreateDynamicObject(19630, 1223.00464, -1764.97034, 12.98210,   0.00000, 0.00000, 53.46004);
	CreateDynamicObject(19630, 1222.42468, -1763.93335, 12.98210,   0.00000, 0.00000, -21.77995);
	CreateDynamicObject(19630, 1222.67749, -1764.47156, 12.98210,   0.00000, 0.00000, -66.47994);
	CreateDynamicObject(19630, 1223.25232, -1764.16797, 12.98210,   0.00000, 0.00000, -64.49995);
	CreateDynamicObject(19630, 1223.22742, -1766.11987, 12.98210,   0.00000, 0.00000, -209.45996);
	CreateDynamicObject(19630, 1223.25916, -1765.29614, 12.98210,   0.00000, 0.00000, -266.81998);
	CreateDynamicObject(19630, 1223.31543, -1766.67896, 12.98210,   0.00000, 0.00000, -325.61996);
	CreateDynamicObject(19630, 1223.17871, -1767.23950, 12.98210,   0.00000, 0.00000, -199.07997);
	CreateDynamicObject(19630, 1222.51733, -1767.82056, 12.98210,   0.00000, 0.00000, -319.97992);
	CreateDynamicObject(19630, 1223.26245, -1767.76245, 12.98210,   0.00000, 0.00000, -319.97992);
	CreateDynamicObject(19630, 1219.44287, -1766.75610, 12.98210,   0.00000, 0.00000, 51.78000);
	CreateDynamicObject(19630, 1219.79321, -1767.24255, 12.98210,   0.00000, 0.00000, -41.27999);
	CreateDynamicObject(19630, 1219.42041, -1767.77576, 12.98210,   0.00000, 0.00000, -169.62003);
	CreateDynamicObject(19630, 1220.05640, -1767.76770, 12.98210,   0.00000, 0.00000, -258.60004);
	CreateDynamicObject(19630, 1220.48035, -1767.90125, 12.98210,   0.00000, 0.00000, -197.10005);
	CreateDynamicObject(19325, 1221.25671, -1768.37390, 10.10140,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 1218.86414, -1765.92395, 10.10140,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19325, 1221.19250, -1763.35767, 10.10140,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 1223.87622, -1765.90442, 10.10140,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(1214, 1218.83704, -1767.91052, 12.21270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1218.90125, -1763.96143, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1223.80518, -1763.71631, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1223.38013, -1768.37195, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19603, 1221.36658, -1765.86951, 13.29527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1218.91931, -1763.62695, 12.21260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1219.01172, -1763.41821, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1223.68372, -1763.44153, 12.21290,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(1214, 1223.36084, -1763.38513, 12.21214,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(1214, 1223.70984, -1768.27966, 12.21270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1223.80237, -1768.00244, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1219.20825, -1768.40186, 12.21214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1218.95068, -1768.21887, 12.21170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 1223.20215, -1763.36938, 13.41100,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 1221.65295, -1763.36987, 13.41190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 1218.87000, -1764.13696, 13.41190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19087, 1218.87000, -1765.41504, 13.41190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19087, 1221.79333, -1768.36255, 13.41190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 1223.20532, -1768.36255, 13.41190,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 1223.86780, -1765.36060, 13.41190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19087, 1223.86780, -1763.88452, 13.41190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2161, 1232.11511, -1782.96497, 14.41830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, 1230.77808, -1782.96497, 14.41830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, 1233.44604, -1782.96497, 14.41830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1226.55432, -1780.96191, 12.53290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1227.29211, -1776.68311, 12.53290,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2165, 1230.96252, -1773.10608, 12.53290,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2165, 1236.71387, -1771.52539, 12.53290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1231.21277, -1782.94690, 12.58420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1233.45923, -1782.95227, 12.58420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1808, 1231.96021, -1782.69824, 12.45000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1229.46277, -1782.96008, 12.58420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1235.21582, -1782.95447, 12.58420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, 1232.11511, -1782.96497, 15.74255,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2257, 1235.14380, -1782.93909, 15.65860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2257, 1228.66150, -1782.94812, 15.65860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2612, 1237.73328, -1782.92578, 14.49161,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2133, 1236.21240, -1782.51660, 12.54540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2132, 1238.20264, -1782.51160, 12.54540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1328, 1238.97644, -1781.82593, 13.00613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11743, 1236.15784, -1782.62219, 13.59760,   0.00000, 0.00000, 153.11996);
	CreateDynamicObject(2149, 1238.33472, -1782.57178, 13.74990,   0.00000, 0.00000, 202.44000);
	CreateDynamicObject(2342, 1226.57935, -1779.73633, 13.43380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2342, 1237.94995, -1771.50671, 13.43380,   0.00000, 0.00000, -107.51998);
	CreateDynamicObject(19835, 1236.47705, -1782.70984, 13.68200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19835, 1235.81189, -1782.55664, 13.68200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19835, 1236.70239, -1782.42773, 13.64800,   0.00000, 70.00000, -39.06000);
	CreateDynamicObject(2864, 1237.17151, -1782.66589, 13.47316,   0.00000, 0.00000, -25.50001);
	CreateDynamicObject(631, 1226.85327, -1782.54504, 13.40784,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1226.99939, -1777.97620, 13.40784,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1233.16724, -1771.82751, 13.40784,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1238.76379, -1771.64124, 13.40784,   0.00000, 0.00000, -55.26000);
	CreateDynamicObject(14455, 1239.35718, -1779.34253, 13.85240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1232.25061, -1773.35095, 12.60042,   0.00000, 0.00000, 50.22000);
	CreateDynamicObject(1806, 1228.50977, -1776.94824, 12.60042,   0.00000, 0.00000, 39.90000);
	CreateDynamicObject(1806, 1227.58118, -1780.24695, 12.60042,   0.00000, 0.00000, 95.40000);
	CreateDynamicObject(1806, 1237.39490, -1772.39783, 12.60042,   0.00000, 0.00000, 2.99999);
	CreateDynamicObject(2191, 1238.84399, -1773.38428, 12.59260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2191, 1238.83350, -1780.45728, 12.59260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1228.88440, -1774.55908, 12.51070,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2842, 1236.34497, -1782.29626, 12.59942,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1229.25159, -1773.97473, 18.61560,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19377, 1232.61194, -1777.51257, 20.90340,   0.00000, 90.00000, 43.80000);
	CreateDynamicObject(19377, 1234.77905, -1777.72339, 27.74660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1236.92029, -1786.38635, 20.90377,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1231.15149, -1782.95276, 20.90420,   0.00000, 90.00000, -0.12000);
	CreateDynamicObject(19426, 1249.17944, -1783.43945, 14.28940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19426, 1243.47034, -1783.45044, 14.28940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1651, 1244.93555, -1783.36548, 14.94920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1651, 1247.79675, -1783.35864, 14.94920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1250.15466, -1788.08142, 20.31990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19426, 1246.00525, -1783.44287, 13.05795,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19426, 1247.43713, -1783.44580, 13.05730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19426, 1248.22913, -1783.44580, 16.84550,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19426, 1244.73108, -1783.44580, 16.84550,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19426, 1241.23315, -1783.44580, 16.84550,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1247.74048, -1773.61560, 14.10715,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 1249.18103, -1773.61609, 14.10715,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 1249.98767, -1778.79614, 14.10720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1242.59778, -1774.50354, 14.10720,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14455, 1242.61377, -1777.38477, 14.10750,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2115, 1245.97986, -1778.78821, 12.57400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2115, 1245.97803, -1778.05957, 12.57440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1246.42114, -1776.93665, 12.57670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1245.17102, -1772.67029, 16.52480,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1245.33594, -1783.11646, 16.52480,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1245.27942, -1787.64307, 16.52420,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1722, 1246.49622, -1780.24707, 12.59290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1246.18774, -1777.91956, 13.37550,   0.00000, 0.00000, -188.58003);
	CreateDynamicObject(1616, 1242.95972, -1782.92529, 16.20664,   0.00000, 0.00000, -94.86001);
	CreateDynamicObject(14391, 1246.53784, -1784.40344, 13.20070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1244.56421, -1786.54846, 12.57670,   0.00000, 0.00000, 149.76001);
	CreateDynamicObject(1714, 1246.89795, -1786.78015, 12.57670,   0.00000, 0.00000, 182.63998);
	CreateDynamicObject(1714, 1248.82996, -1786.62036, 12.57670,   0.00000, 0.00000, 213.42000);
	CreateDynamicObject(2264, 1243.41418, -1784.03906, 14.77818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 1249.18542, -1784.02881, 14.77818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1243.42334, -1792.70837, 14.10720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1249.56311, -1790.31995, 13.47730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1249.67664, -1787.43762, 13.47730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2199, 1249.96448, -1788.72314, 12.59960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2257, 1242.71790, -1788.72644, 14.89150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(631, 1243.28943, -1786.56763, 13.47730,   0.00000, 0.00000, -37.50000);
	CreateDynamicObject(631, 1243.27649, -1791.02625, 13.47730,   0.00000, 0.00000, -37.50000);
	CreateDynamicObject(2272, 1254.35608, -1757.18359, 14.75450,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1433, 1254.41174, -1757.02112, 12.73960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1254.37537, -1757.06836, 13.24543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1433, 1253.72070, -1749.03430, 12.73960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1253.70959, -1749.02344, 13.24543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, 1253.74329, -1748.36230, 14.94548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1433, 1246.26404, -1752.28894, 12.73960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1246.12366, -1752.30713, 13.24543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2286, 1245.63416, -1752.28186, 14.96240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(631, 1258.10974, -1757.23792, 13.47730,   0.00000, 0.00000, -54.41999);
	CreateDynamicObject(631, 1251.33801, -1756.99097, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1246.41321, -1755.98560, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1246.22314, -1748.93115, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1250.37073, -1748.98865, 13.47730,   0.00000, 0.00000, -57.41999);
	CreateDynamicObject(631, 1256.86902, -1748.98071, 13.47730,   0.00000, 0.00000, -57.41999);
	CreateDynamicObject(19443, 1249.79163, -1748.45361, 11.51045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1247.32202, -1748.45691, 11.51045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1249.06873, -1749.15479, 11.51050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1248.12000, -1749.15808, 11.51020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1248.05615, -1747.48560, 13.17890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1249.05981, -1747.48315, 13.17830,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1600, 1249.36316, -1748.65674, 13.48630,   0.00000, 0.00000, 94.14000);
	CreateDynamicObject(1600, 1247.70520, -1748.57800, 13.48630,   0.00000, 0.00000, -79.49999);
	CreateDynamicObject(1599, 1248.56360, -1748.64246, 14.18720,   0.00000, 0.00000, 96.00001);
	CreateDynamicObject(1599, 1248.89771, -1749.09363, 14.18720,   0.00000, 0.00000, 69.48002);
	CreateDynamicObject(1604, 1248.16199, -1748.98389, 13.49300,   0.00000, 0.00000, -75.42000);
	CreateDynamicObject(1604, 1249.48755, -1748.99292, 13.49300,   0.00000, 0.00000, 61.20000);
	CreateDynamicObject(19466, 1248.37610, -1749.24048, 13.98110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1247.25696, -1748.12146, 13.98110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1249.85095, -1748.11877, 13.98110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1249.05981, -1747.48315, 15.02350,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1248.05615, -1747.48560, 15.02220,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19466, 1248.73206, -1749.23975, 13.98110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 1247.47852, -1757.86047, 12.59950,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1255.74622, -1752.44299, 16.71720,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1255.76489, -1762.24463, 16.71720,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1254.65454, -1772.74390, 16.71780,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1255.73596, -1772.75525, 16.71720,   0.00000, 90.00000, 89.76000);
	CreateDynamicObject(19377, 1254.31555, -1783.03345, 16.71780,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1255.82397, -1783.01086, 16.71740,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1255.73230, -1793.49536, 16.71740,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1255.10461, -1793.51099, 16.71780,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1246.65747, -1802.32056, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1251.36829, -1798.03271, 16.71720,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1241.71741, -1797.07178, 16.71720,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1232.09058, -1796.99841, 16.71740,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1224.21362, -1798.02087, 16.71720,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1215.99817, -1807.46375, 16.71780,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1212.87488, -1796.99585, 16.71780,   0.00000, 90.00000, 90.48000);
	CreateDynamicObject(19377, 1217.12476, -1788.26355, 16.71720,   0.00000, 90.00000, 90.48000);
	CreateDynamicObject(19377, 1207.50061, -1788.24365, 16.71720,   0.00000, 90.00000, 90.48000);
	CreateDynamicObject(19377, 1207.59473, -1798.37244, 16.71720,   0.00000, 90.00000, 90.48000);
	CreateDynamicObject(19377, 1206.67139, -1798.07703, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1206.67676, -1790.15662, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1232.24597, -1792.76086, 13.82380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1236.04932, -1792.70837, 20.27534,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1232.71704, -1788.34741, 16.71720,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1232.30737, -1788.30872, 16.71780,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19302, 1231.27905, -1802.25525, 13.82380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1236.93774, -1802.35107, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1225.68799, -1808.47998, 16.71720,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1233.94641, -1807.55554, 16.71380,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19377, 1218.54382, -1797.81628, 16.71680,   0.00000, 90.00000, 90.60000);
	CreateDynamicObject(19302, 1215.08618, -1783.80347, 13.82380,   0.00000, 0.00000, -119.34000);
	CreateDynamicObject(19302, 1219.18848, -1783.98145, 13.82380,   0.00000, 0.00000, 284.76004);
	CreateDynamicObject(19377, 1223.77039, -1783.07312, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1214.17834, -1783.06018, 20.32580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1706, 1247.34595, -1758.33472, 12.56120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1706, 1241.88855, -1758.33337, 12.56120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1246.48438, -1758.49976, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1243.90820, -1758.42419, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(1433, 1245.14954, -1758.57678, 12.73960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1245.16577, -1758.57300, 13.24543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1251.74438, -1758.41260, 13.47730,   0.00000, 0.00000, -43.37999);
	CreateDynamicObject(1234, 1249.08557, -1757.85193, 13.98470,   0.00000, 0.00000, 89.76002);
	CreateDynamicObject(1706, 1248.59167, -1766.95911, 12.56120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1706, 1242.49902, -1766.94531, 12.56120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(631, 1246.48596, -1766.90002, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1243.50574, -1766.86536, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1240.60632, -1766.83850, 13.47730,   0.00000, 0.00000, -18.77999);
	CreateDynamicObject(631, 1249.58044, -1766.87549, 13.47730,   0.00000, 0.00000, -54.11999);
	CreateDynamicObject(1433, 1244.89758, -1766.58704, 12.73960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1244.84277, -1766.65222, 13.24543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1245.10986, -1757.90662, 15.05896,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1244.94995, -1767.38672, 15.05900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(633, 1220.49463, -1783.88391, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1213.83899, -1783.81177, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1201.09180, -1782.97046, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1239.32288, -1762.04358, 20.60810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1229.30994, -1773.89697, 23.83847,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19325, 1225.82434, -1781.35022, 18.61560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1216.84375, -1783.03809, 20.60810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2257, 1239.28442, -1767.70398, 20.60611,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2257, 1239.27795, -1756.79138, 20.60611,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2257, 1210.01233, -1782.94373, 20.60610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2257, 1222.67004, -1782.93604, 20.60610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(625, 1238.87354, -1768.09167, 12.59908,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(625, 1220.04431, -1782.77344, 12.59908,   0.00000, 0.00000, -147.48001);
	CreateDynamicObject(1703, 1221.22192, -1785.40735, 12.48610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1221.24207, -1789.74866, 12.48610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1775, 1221.30261, -1788.57153, 13.60160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(633, 1221.63110, -1793.66565, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(1703, 1212.10986, -1787.43396, 12.48610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1212.12549, -1792.44653, 12.48610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1433, 1212.23926, -1788.83142, 12.71320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1212.14575, -1788.74451, 13.21927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1212.31055, -1793.29175, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1212.10974, -1796.56335, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 1221.69495, -1790.76172, 14.67490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2275, 1221.20508, -1786.45691, 14.39270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19174, 1211.64014, -1788.93103, 15.05990,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(14455, 1221.71301, -1802.12915, 14.10720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1211.66345, -1803.79834, 14.10720,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1212.09448, -1799.95288, 12.48610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1433, 1212.30835, -1801.51563, 12.71320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1212.23218, -1801.56555, 13.21927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1220.65405, -1808.04089, 14.10720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(633, 1213.31140, -1808.25281, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1218.96130, -1808.51135, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1220.38342, -1801.86255, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1228.00891, -1801.64197, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1233.08948, -1801.67529, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1234.66003, -1802.08923, 14.10720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1223.31311, -1793.24512, 12.48610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1228.02271, -1793.27515, 12.48610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1226.62842, -1793.45227, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(633, 1230.87634, -1793.39038, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(633, 1233.96033, -1793.41821, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(14455, 1239.92798, -1793.02759, 14.10720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(633, 1241.45703, -1793.57532, 13.51283,   0.00000, 0.00000, -48.84000);
	CreateDynamicObject(19174, 1211.58240, -1799.02991, 15.05990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1242.40027, -1793.38721, 12.48610,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1703, 1247.65649, -1793.39648, 12.48610,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1775, 1245.89441, -1793.35608, 13.60160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1243.09070, -1802.20862, 14.10720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1241.07190, -1801.70032, 13.51283,   0.00000, 0.00000, -39.66000);
	CreateDynamicObject(14455, 1250.38525, -1784.30237, 14.10720,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(633, 1251.27234, -1790.26587, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(633, 1251.34265, -1782.82837, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(1703, 1250.70129, -1777.97009, 12.48610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(633, 1250.91638, -1778.92542, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(1433, 1250.90808, -1774.72668, 12.75650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 1250.85437, -1774.71326, 13.26270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1250.88171, -1773.65039, 12.48610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(633, 1250.89172, -1770.81689, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(14455, 1258.70447, -1758.11853, 14.10720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(633, 1253.32092, -1758.81848, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(633, 1259.92493, -1758.84021, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(1742, 1250.09973, -1769.40112, 12.59200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1260.45850, -1788.50891, 14.10720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1260.40039, -1777.10950, 14.10720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1260.04541, -1779.71008, 12.48610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(633, 1259.82056, -1778.77563, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(633, 1259.78528, -1782.84143, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(2611, 1258.15332, -1791.49573, 14.05712,   0.00000, 0.00000, -122.64004);
	CreateDynamicObject(2612, 1256.48401, -1794.09570, 13.88336,   0.00000, 0.00000, -122.58001);
	CreateDynamicObject(2611, 1254.95874, -1796.48474, 14.05712,   0.00000, 0.00000, -122.46004);
	CreateDynamicObject(1703, 1252.47473, -1798.62085, 12.48610,   0.00000, 0.00000, -132.84001);
	CreateDynamicObject(633, 1253.11011, -1797.72205, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(633, 1249.24402, -1801.43433, 13.51283,   0.00000, 0.00000, -60.42000);
	CreateDynamicObject(1998, 1227.91003, -1784.73486, 12.53850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1227.93445, -1786.67029, 12.53850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1227.95569, -1788.59387, 12.53850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1227.93860, -1790.55713, 12.53850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2201, 1228.18091, -1788.33081, 13.40545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2201, 1228.17688, -1790.23499, 13.40545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2201, 1228.20654, -1786.41638, 13.40545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2201, 1228.28015, -1784.43250, 13.40545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1228.23303, -1791.83557, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(633, 1236.61292, -1791.85864, 13.51283,   0.00000, 0.00000, -22.86000);
	CreateDynamicObject(1742, 1234.83020, -1792.84827, 12.57060,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, 1230.04736, -1792.76331, 12.57060,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1228.96838, -1790.49438, 12.59957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1228.83069, -1788.47314, 12.59957,   0.00000, 0.00000, 20.22000);
	CreateDynamicObject(1806, 1228.68750, -1786.54382, 12.59957,   0.00000, 0.00000, -41.76000);
	CreateDynamicObject(1806, 1228.78540, -1784.41382, 12.59957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2182, 1235.84045, -1783.66772, 12.59773,   0.00000, 0.00000, -89.81998);
	CreateDynamicObject(2183, 1233.64331, -1789.37390, 12.59860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1234.23914, -1790.17859, 12.59957,   0.00000, 0.00000, 20.22000);
	CreateDynamicObject(1806, 1235.83032, -1790.10620, 12.59957,   0.00000, 0.00000, -26.40001);
	CreateDynamicObject(1806, 1233.74841, -1787.28052, 12.59957,   0.00000, 0.00000, -150.36000);
	CreateDynamicObject(1806, 1236.49744, -1787.30835, 12.59957,   0.00000, 0.00000, -221.87994);
	CreateDynamicObject(19893, 1234.27087, -1788.14160, 13.40651,   0.00000, 0.00000, -141.12000);
	CreateDynamicObject(19893, 1235.94568, -1788.14832, 13.40651,   0.00000, 0.00000, -234.42003);
	CreateDynamicObject(19893, 1234.02979, -1789.34827, 13.40651,   0.00000, 0.00000, -341.57999);
	CreateDynamicObject(19893, 1236.24512, -1789.36462, 13.40651,   0.00000, 0.00000, -397.97995);
	CreateDynamicObject(11743, 1235.94189, -1783.61304, 13.39747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1234.57263, -1783.14954, 14.10720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19172, 1237.30286, -1788.68152, 15.32113,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(19174, 1227.46606, -1787.83557, 15.39654,   0.00000, 0.00000, 90.00005);
	CreateDynamicObject(2841, 1231.94946, -1788.13123, 12.59894,   0.00000, 0.00000, 87.77998);
	CreateDynamicObject(2366, 1233.52502, -1806.60107, 12.59850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2708, 1236.04980, -1803.70398, 12.63244,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2708, 1233.71594, -1802.77832, 12.63240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19521, 1236.02222, -1805.36011, 13.65410,   0.00000, -90.00000, 90.66000);
	CreateDynamicObject(19521, 1236.04163, -1805.08850, 13.65410,   0.00000, -90.00000, 61.20000);
	CreateDynamicObject(19521, 1236.02148, -1804.82642, 13.65410,   0.00000, -90.00000, 130.56000);
	CreateDynamicObject(19521, 1235.99695, -1804.54456, 13.65410,   0.00000, -90.00000, 55.98000);
	CreateDynamicObject(19161, 1235.95020, -1804.20850, 13.61500,   0.00000, -90.00000, 65.94000);
	CreateDynamicObject(19161, 1236.00562, -1803.47656, 13.61500,   0.00000, -90.00000, 134.76001);
	CreateDynamicObject(19099, 1235.89929, -1803.89526, 13.69500,   0.00000, -90.00000, 83.64000);
	CreateDynamicObject(18637, 1233.10107, -1806.13586, 13.73660,   90.00000, 90.00000, 178.98000);
	CreateDynamicObject(18637, 1233.22070, -1806.67712, 13.73660,   90.00000, 90.00000, 217.97995);
	CreateDynamicObject(18637, 1233.42346, -1805.64636, 13.73660,   90.00000, 90.00000, 137.45995);
	CreateDynamicObject(18637, 1234.04041, -1805.58459, 13.73660,   90.00000, 90.00000, 88.25993);
	CreateDynamicObject(18637, 1234.52637, -1805.99036, 13.73660,   90.00000, 90.00000, 40.01992);
	CreateDynamicObject(19200, 1234.19885, -1806.25903, 13.91670,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19200, 1234.15796, -1806.63770, 13.91670,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19200, 1233.83350, -1806.70020, 13.91670,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19200, 1233.50171, -1806.54126, 13.91670,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19200, 1233.83386, -1806.33875, 13.91670,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(334, 1233.55542, -1806.21521, 13.83770,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(334, 1233.73535, -1806.12756, 13.83770,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(334, 1233.91150, -1806.05957, 13.83770,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(334, 1233.40344, -1806.36938, 13.83770,   90.00000, 90.00000, -28.68000);
	CreateDynamicObject(19377, 1227.64001, -1807.19666, 14.18720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19785, 1233.21667, -1802.81140, 14.91510,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19785, 1233.21667, -1802.81140, 14.51209,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19785, 1233.21667, -1802.81140, 14.00199,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19785, 1233.21667, -1802.81140, 13.49798,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19785, 1233.21667, -1802.81140, 12.99397,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19834, 1234.58252, -1807.09351, 14.20333,   0.00000, 0.00000, 32.51999);
	CreateDynamicObject(2844, 1234.56445, -1804.39746, 12.59936,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2819, 1234.37292, -1804.65320, 12.65454,   0.00000, 0.00000, 76.08001);
	CreateDynamicObject(19142, 1235.78967, -1805.21790, 14.57660,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(19142, 1235.81860, -1804.53101, 14.57660,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(19142, 1235.88025, -1803.91309, 14.57660,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(19142, 1235.17786, -1802.99548, 14.57660,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19142, 1234.46802, -1803.02039, 14.57660,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19142, 1233.70813, -1803.00415, 14.57660,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19141, 1233.60986, -1802.94373, 13.65530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19141, 1233.96423, -1802.93591, 13.65530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19141, 1234.36255, -1802.91919, 13.14530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19141, 1234.74670, -1802.87793, 13.65530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19141, 1235.20764, -1802.85791, 13.65530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(2043, 1233.82031, -1802.99866, 12.85520,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2043, 1234.62024, -1803.00586, 12.85520,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2043, 1235.38464, -1802.89233, 12.85520,   0.00000, 0.00000, -56.69999);
	CreateDynamicObject(2358, 1233.73389, -1802.87280, 13.18120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 1235.11804, -1802.83887, 13.18120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 1235.97144, -1803.69873, 13.18120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2358, 1235.97632, -1805.06787, 13.18120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19141, 1234.36255, -1802.91919, 13.65530,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(2043, 1235.97192, -1803.56360, 12.85520,   0.00000, 0.00000, -56.69999);
	CreateDynamicObject(2043, 1236.03552, -1804.26868, 12.85520,   0.00000, 0.00000, -56.69999);
	CreateDynamicObject(2043, 1236.01404, -1805.02930, 12.85520,   0.00000, 0.00000, -56.69999);
	CreateDynamicObject(19377, 1232.47046, -1807.96350, 14.18720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2475, 1227.71216, -1803.79480, 12.86510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2475, 1227.71338, -1805.28528, 12.86510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2475, 1227.71338, -1806.76331, 12.86510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2257, 1230.62622, -1807.85010, 14.92240,   0.00000, 0.00000, 180.04037);
	CreateDynamicObject(633, 1232.35718, -1807.62524, 13.51283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 1228.90137, -1807.49487, 13.51283,   0.00000, 0.00000, -28.85999);
	CreateDynamicObject(3016, 1227.84351, -1803.07471, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3016, 1227.89807, -1803.79309, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3016, 1227.88538, -1804.63916, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3016, 1227.85059, -1805.44348, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3016, 1227.85083, -1806.21985, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3016, 1227.86914, -1806.89050, 15.18380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(356, 1227.78882, -1807.03882, 14.48500,   0.00000, 0.00000, 94.32000);
	CreateDynamicObject(356, 1227.80469, -1806.17419, 14.48500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(356, 1227.79565, -1805.31958, 14.48500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(351, 1227.76965, -1807.19238, 13.73190,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(351, 1227.76758, -1806.45154, 13.73190,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(351, 1227.76514, -1805.69092, 13.73190,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(353, 1227.77527, -1806.97644, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(353, 1227.74890, -1806.44788, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(353, 1227.77063, -1805.94861, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(353, 1227.76843, -1805.43445, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1242, 1227.93469, -1803.01147, 13.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1242, 1227.96655, -1803.35071, 13.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1242, 1227.95276, -1803.65649, 13.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1242, 1227.94165, -1803.98206, 13.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1242, 1227.95325, -1804.32434, 13.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2358, 1227.87903, -1803.22693, 13.77500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1227.88184, -1804.17761, 13.77500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1672, 1227.86670, -1802.88159, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.82153, -1803.02710, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.99854, -1802.98853, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.78052, -1803.21240, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.97742, -1803.17175, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.85901, -1803.38525, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1227.99207, -1803.31104, 14.46950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 1227.88184, -1804.17761, 14.47300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1211.52954, -1790.83228, 14.18720,   0.00000, 0.00000, -0.42000);
	CreateDynamicObject(1776, 1211.98657, -1794.87244, 13.48170,   0.00000, 0.00000, 90.00000);
 	
 	//Kirche - Ray_Krieger
 	CreateDynamicObject(18783, 2244.35327, -1334.24744, 302.22198,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 2244.39502, -1351.91602, 302.22256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2234.40454, -1329.07727, 304.71204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2234.39185, -1338.62476, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2234.39185, -1348.12280, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2234.39185, -1357.66284, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2254.31274, -1357.66284, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2254.31274, -1348.12280, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2234.39185, -1338.62476, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2254.31274, -1338.62476, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2254.31274, -1329.09265, 304.71201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2238.07471, -1329.07642, 313.61560,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19377, 2238.07471, -1338.61340, 313.61560,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19377, 2238.07471, -1348.12244, 313.61560,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19377, 2238.07471, -1357.63135, 313.61560,   0.00000, 45.00000, 0.00000);
	CreateDynamicObject(19377, 2250.63550, -1357.66113, 313.61560,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19377, 2250.63550, -1348.15210, 313.61560,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19377, 2250.63550, -1338.64307, 313.61560,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19377, 2250.63550, -1329.13416, 313.61560,   0.00000, -45.00000, 0.00000);
	CreateDynamicObject(19377, 2244.48511, -1327.73413, 315.04800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2244.45264, -1337.33276, 315.04800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2244.52612, -1346.95947, 315.04800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2244.52954, -1356.93640, 315.04800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2244.55835, -1366.20593, 317.28659,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2239.09521, -1324.30872, 309.54916,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2248.60425, -1324.30872, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2258.11499, -1324.28882, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2237.40039, -1324.30701, 320.00607,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2246.86279, -1324.29602, 320.00607,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2248.61621, 309.54919, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2248.60425, -1361.82666, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2239.09521, -1361.82666, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2258.11499, -1361.82666, 309.54919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2246.86279, -1361.82666, 320.00610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 2237.40039, -1361.82666, 320.00610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1537, 2234.53125, -1328.76501, 304.70621,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1537, 2234.53076, -1330.20618, 304.70621,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 2239.33154, -1330.25916, 304.65479,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19462, 2244.09790, -1333.33093, 304.65421,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2244.09668, -1342.95105, 304.65421,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2244.09473, -1352.57031, 304.65421,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2243.37646, -1357.43054, 304.14612,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 2252.99805, -1357.43835, 304.14612,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 2233.75024, -1357.42810, 304.14612,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 2236.14087, -1362.23218, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2239.64160, -1362.24353, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2243.14258, -1362.19385, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2246.64307, -1362.18140, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2250.14331, -1362.20715, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2253.63892, -1362.19397, 305.78439,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11726, 2244.13745, -1355.44446, 313.92010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11726, 2244.53101, -1349.56897, 313.92010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11726, 2244.13745, -1341.28247, 313.92010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11726, 2244.13745, -1333.78247, 313.92010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11726, 2244.13745, -1327.28247, 313.92010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2240.41626, -1335.93909, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2236.40527, -1335.93909, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2240.41626, -1339.24512, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2236.40527, -1339.24512, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2240.41626, -1342.37708, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2236.40527, -1342.37708, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2240.41626, -1346.20508, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2236.40527, -1346.20508, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2240.41626, -1350.20715, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2236.40527, -1350.20715, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2247.72437, -1350.20715, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2247.72437, -1346.20508, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2247.72437, -1342.37708, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2247.72437, -1339.24512, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2247.72437, -1335.93909, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2251.90039, -1350.20715, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2251.90039, -1346.20508, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2251.90039, -1342.37708, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2251.90039, -1339.24512, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 2251.90039, -1335.93909, 305.24991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2745, 2246.35986, -1335.11108, 305.87659,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2745, 2241.88501, -1335.07910, 305.87659,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19339, 2244.11768, -1356.82910, 305.91519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2558, 2244.94507, -1355.93066, 304.25629,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2244.33276, -1355.92773, 304.25629,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2245.75879, -1357.74329, 304.25629,   0.00000, 0.00000, 90.29997);
	CreateDynamicObject(2558, 2242.53296, -1356.73682, 304.25629,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(325, 2244.27832, -1356.76831, 306.40359,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2260, 2243.60913, -1356.08545, 306.37949,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 2243.60913, -1356.08545, 306.37949,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 2243.58276, -1357.01636, 306.37949,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, 2243.57593, -1356.91003, 306.41949,   0.00000, 45.00000, 90.00000);
	CreateDynamicObject(3462, 2253.06421, -1360.56055, 307.09912,   0.00000, 0.00000, -48.00000);
	CreateDynamicObject(3462, 2235.67310, -1360.64490, 307.09909,   0.00000, 0.00000, -125.00000);
	CreateDynamicObject(19279, 2236.72632, -1359.14514, 305.87057,   0.00000, 0.00000, 145.98000);
	CreateDynamicObject(19279, 2252.05884, -1359.64014, 305.87057,   0.00000, 0.00000, 226.31999);
	CreateDynamicObject(2233, 2245.64453, -1358.07617, 305.86938,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2233, 2241.77441, -1358.06226, 305.86938,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2235.94507, -1356.97473, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2236.79614, -1356.96082, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2238.57593, -1356.95435, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2239.49243, -1356.97461, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2241.39600, -1356.97302, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2242.29907, -1356.94031, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2246.90576, -1356.96326, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2247.84009, -1356.95557, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2249.73047, -1356.95569, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2250.67578, -1356.96631, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2252.55737, -1356.95435, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2253.47827, -1356.95898, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, 2255.33984, -1356.95227, 304.56830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11712, 2244.09863, -1356.54919, 306.33179,   0.00000, 0.00000, 88.26000);
	CreateDynamicObject(638, 2241.97339, -1333.32959, 305.37277,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2246.19385, -1333.36841, 305.37277,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2241.99731, -1353.42847, 305.37277,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2246.16919, -1353.42847, 305.37280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 2248.18433, -1335.07056, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2250.86157, -1335.06104, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2253.46484, -1335.06348, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2240.07178, -1335.05444, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2237.38965, -1335.05798, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2234.72266, -1335.05615, 305.37280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3440, 2254.10620, -1333.89868, 304.00998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.10669, -1333.35474, 304.82315,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.11719, -1332.73486, 305.22922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.14551, -1332.11108, 305.52420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.10303, -1331.55225, 305.22922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.11426, -1330.97607, 304.82315,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2254.06274, -1330.36438, 304.00998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2187, 2254.26758, -1333.90491, 304.53745,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2187, 2253.81616, -1332.56653, 304.53741,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2187, 2253.30884, -1330.44739, 304.53741,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19427, 2253.86597, -1332.55530, 304.10770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, 2253.86670, -1331.90686, 304.10721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.80176, -1333.89404, 306.09579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.80322, -1333.34033, 306.68579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.79932, -1332.71472, 307.09879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.82568, -1332.11377, 307.51181,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.79932, -1331.53467, 307.09879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.80322, -1330.98035, 306.68579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2253.74292, -1330.41296, 306.09579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 2253.96802, -1331.75903, 305.49390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(325, 2253.71729, -1333.14575, 306.12851,   0.00000, 0.00000, 91.50000);
	CreateDynamicObject(14705, 2253.68018, -1333.07385, 306.06100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14705, 2253.61914, -1331.42065, 306.06100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(325, 2253.56372, -1331.49316, 306.15649,   0.00000, 0.00000, 57.66000);
	CreateDynamicObject(2187, 2253.06519, -1331.60034, 304.53741,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2187, 2253.12329, -1333.82397, 304.53741,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2187, 2254.23389, -1330.45068, 304.53741,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2187, 2254.26099, -1334.83765, 304.53741,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2080, 2253.59082, -1332.76685, 304.48529,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 2253.69897, -1332.28113, 305.97760,   45.00000, 0.00000, -90.53999);
	CreateDynamicObject(2079, 2252.81592, -1332.34314, 305.28159,   0.00000, 0.00000, -180.47997);
	CreateDynamicObject(19808, 2253.33252, -1332.55811, 305.28201,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19808, 2253.33252, -1332.08215, 305.28201,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1958, 2253.61230, -1332.55762, 305.28201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1958, 2253.61694, -1332.01733, 305.28201,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19416, 2243.51929, -1325.80811, 306.44479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2240.30688, -1325.77917, 306.44479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 2245.03394, -1327.32935, 306.45239,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19386, 2241.84424, -1327.30933, 306.45239,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2246.58618, -1325.80652, 306.44479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2245.00220, -1327.42725, 307.51181,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11712, 2241.82520, -1327.41187, 307.51181,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2244.25513, -1327.36499, 304.72491,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2241.06543, -1327.33997, 304.72491,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2559, 2243.92603, -1326.35889, 305.94580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2559, 2243.13745, -1325.36182, 305.96078,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 2243.51587, -1325.90906, 304.14380,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2559, 2243.13843, -1326.35779, 306.01071,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(2559, 2243.92114, -1325.36597, 305.96979,   180.00000, 0.00000, -90.00000);
	CreateDynamicObject(19370, 2241.97510, -1325.73547, 308.11420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2244.92212, -1325.73035, 308.11481,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2245.08276, -1324.31006, 306.44479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2241.98291, -1324.31006, 306.44479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2833, 2244.52563, -1328.45044, 304.71909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2833, 2241.31421, -1328.44678, 304.71909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2243.44141, -1328.07544, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8615, 2238.70142, -1356.46936, 304.21310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(948, 2238.46216, -1336.14966, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2238.43433, -1339.50684, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2238.45679, -1342.56787, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2238.39966, -1346.36633, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2238.38672, -1350.38867, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2249.79297, -1350.13599, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2249.80981, -1346.10608, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2249.79883, -1342.22559, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2249.83423, -1339.14563, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2249.81006, -1335.86597, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 2244.67798, -1325.46619, 305.30911,   0.00000, 0.00000, 38.76000);
	CreateDynamicObject(1811, 2242.07324, -1325.67822, 305.30911,   0.00000, 0.00000, 180.77995);
	CreateDynamicObject(1744, 2243.44312, -1326.22852, 305.47739,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 2243.82983, -1326.05066, 305.81717,   0.00000, 0.00000, 89.70001);
	CreateDynamicObject(1744, 2243.58301, -1326.22852, 305.47748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2248.04956, -1327.56860, 305.37277,   0.00000, 0.00000, 69.42000);
	CreateDynamicObject(638, 2250.52368, -1328.49194, 305.37277,   0.00000, 0.00000, 69.42000);
	CreateDynamicObject(638, 2253.03540, -1329.42896, 305.37277,   0.00000, 0.00000, 69.42000);
	CreateDynamicObject(3462, 2251.65674, -1325.74011, 306.05029,   0.00000, 0.00000, 55.98000);
	CreateDynamicObject(19279, 2250.69971, -1327.29932, 304.84622,   0.00000, 0.00000, 322.55997);
	CreateDynamicObject(2288, 2253.73633, -1337.54529, 306.93164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2288, 2253.74146, -1340.80688, 306.93164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2288, 2253.73486, -1344.16748, 306.93164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2288, 2253.72534, -1348.12915, 306.93164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2288, 2253.72803, -1354.05518, 306.93164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2288, 2234.96948, -1352.81360, 306.93161,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2288, 2234.97583, -1348.15332, 306.93161,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2288, 2234.97974, -1344.09766, 306.93161,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2288, 2234.98120, -1340.61035, 306.93161,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2288, 2234.98560, -1337.44312, 306.93161,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2244.85938, -1357.75244, 305.31171,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2243.27344, -1357.75671, 305.31171,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2244.07471, -1358.48218, 306.98160,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 2242.56006, -1358.48450, 305.31171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2245.68652, -1358.48926, 305.31171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2558, 2244.37671, -1359.68799, 305.70160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2558, 2243.72754, -1359.66895, 305.70160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2558, 2242.86523, -1359.66565, 305.70160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2233, 2248.13208, -1358.05713, 305.86938,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2233, 2239.33569, -1357.98975, 305.86938,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 2243.39551, -1358.51575, 307.06989,   0.00000, 0.00000, 16.67999);
	CreateDynamicObject(11712, 2245.29785, -1357.71106, 307.18079,   0.00000, 0.00000, 88.26000);
	CreateDynamicObject(11712, 2242.75659, -1357.73975, 307.18079,   0.00000, 0.00000, 88.26000);
	CreateDynamicObject(19611, 2244.37793, -1358.51782, 305.69116,   0.00000, 0.00000, 0.40604);
	CreateDynamicObject(19610, 2244.38672, -1358.47461, 307.32211,   0.00000, 0.00000, 150.66000);
	CreateDynamicObject(19893, 2244.68237, -1358.51709, 307.07001,   0.00000, 0.00000, -40.32000);
	CreateDynamicObject(11712, 2244.04321, -1357.70032, 307.18079,   0.00000, 0.00000, 88.26000);
	CreateDynamicObject(18762, 2244.27661, -1362.23401, 312.21283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18762, 2244.27686, -1362.23438, 309.38849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18762, 2244.16895, -1362.23584, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3785, 2247.37793, -1361.67908, 311.18030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3785, 2248.86890, -1361.67908, 309.68930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3785, 2250.35986, -1361.67908, 307.98529,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3785, 2240.77490, -1361.67908, 311.18030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3785, 2239.49683, -1361.67908, 309.68930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3785, 2238.00586, -1361.67908, 307.98529,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2288, 2247.16992, -1361.25195, 307.21149,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2288, 2241.11108, -1361.25537, 307.21149,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2833, 2239.30859, -1360.43787, 305.87140,   0.00000, 0.00000, 21.78000);
	CreateDynamicObject(2833, 2248.13721, -1360.03125, 305.87140,   0.00000, 0.00000, -36.30000);
	CreateDynamicObject(638, 2238.89185, -1327.53418, 305.37277,   0.00000, 0.00000, 98.81998);
	CreateDynamicObject(638, 2236.25708, -1327.94116, 305.37277,   0.00000, 0.00000, 98.81998);
	CreateDynamicObject(638, 2233.78125, -1328.32166, 305.37277,   0.00000, 0.00000, 98.81998);
	CreateDynamicObject(3462, 2235.75000, -1325.36609, 306.05029,   0.00000, 0.00000, 121.20001);
	CreateDynamicObject(19279, 2236.92773, -1326.95923, 304.84622,   0.00000, 0.00000, 396.66003);
	CreateDynamicObject(18762, 2238.40894, -1354.60034, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2243.30786, -1354.60034, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2248.20679, -1354.60034, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2253.10571, -1354.60034, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2238.40894, -1346.66626, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2243.36890, -1346.66626, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2248.26489, -1346.66626, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2253.16089, -1346.66626, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2238.40894, -1337.14624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2238.40894, -1329.66626, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2243.36182, -1337.14624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2248.33887, -1337.14624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2253.31592, -1337.14624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2243.38477, -1329.64624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2248.36182, -1329.64624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18762, 2253.33887, -1329.64624, 312.45871,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2288, 2243.45532, -1324.89636, 311.14392,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2288, 2238.47021, -1324.89636, 311.14389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2288, 2250.61523, -1324.89636, 311.14389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11709, 2251.35034, -1353.82947, 305.05029,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11709, 2249.60596, -1353.90588, 305.05029,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11709, 2250.46558, -1354.74866, 305.05029,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11709, 2250.45361, -1352.93274, 305.05029,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1433, 2237.58325, -1353.07336, 304.92313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19525, 2237.60620, -1353.07446, 305.42865,   0.00000, 0.00000, 108.12002);
	CreateDynamicObject(3802, 2249.50146, -1354.78259, 306.24228,   0.00000, 0.00000, -136.74001);
	CreateDynamicObject(18762, 2250.46655, -1353.83875, 304.69202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3802, 2249.61792, -1352.81494, 306.24228,   0.00000, 0.00000, -234.48003);
	CreateDynamicObject(3802, 2251.47876, -1352.95093, 306.24228,   0.00000, 0.00000, -321.54001);
	CreateDynamicObject(3802, 2251.47754, -1354.73694, 306.24228,   0.00000, 0.00000, -398.28000);
	CreateDynamicObject(11712, 2249.88330, -1353.85413, 306.67065,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11712, 2250.51416, -1354.34802, 306.67068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11712, 2250.96582, -1353.81104, 306.67068,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11712, 2250.43188, -1353.33728, 306.67068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(949, 2250.42212, -1353.79810, 307.49359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2236.31689, -1333.45227, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 2239.55811, -1333.50586, 304.71927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2080, 2238.39844, -1333.46179, 304.48529,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 2237.36646, -1333.48047, 305.28085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 2238.26367, -1333.55334, 305.28085,   0.00000, 0.00000, 41.28000);
	CreateDynamicObject(2251, 2243.91187, -1325.12476, 306.64517,   0.00000, 0.00000, 110.46001);
	CreateDynamicObject(19377, 2244.52954, -1356.53638, 315.04880,   0.00000, 90.00000, 0.00000);
 	
 	//Fahrschule - Ray_Krieger
 	CreateDynamicObject(19379, 1604.50024, -1455.74341, 12.47880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1614.96460, -1455.74573, 12.47880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1604.64539, -1465.33557, 12.47880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1615.13916, -1465.32690, 12.47880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1604.54407, -1455.74304, 16.40180,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1604.54285, -1462.96704, 16.40120,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1604.63196, -1463.03210, 20.52050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19385, 1600.48376, -1467.77332, 14.26720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 1599.76819, -1467.75989, 17.73470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 1599.76819, -1467.75916, 18.83120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14414, 1611.72229, -1460.58069, 13.29720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1609.70300, -1461.78955, 11.22380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1609.70361, -1462.92957, 11.22380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1610.98877, -1462.89185, 15.32570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1610.98828, -1455.75269, 15.35370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1599.33228, -1455.75269, 15.32570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 1609.37219, -1451.01514, 14.26720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 1609.37097, -1451.01465, 17.73470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1599.33289, -1462.96069, 15.32570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1609.37354, -1451.01587, 18.85880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1603.80505, -1450.98401, 14.42100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 1598.90698, -1451.00061, 14.29690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1607.79016, -1450.99573, 14.25670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1603.80505, -1450.98401, 14.42100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1603.80505, -1450.98401, 14.42100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1603.80505, -1450.98401, 18.54800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1607.77881, -1450.99878, 18.23860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1607.79016, -1451.01563, 18.86170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1599.70667, -1451.06189, 18.23860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1599.70667, -1451.06128, 18.86060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1601.06311, -1450.99976, 16.50360,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1604.47693, -1450.99548, 16.50310,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1606.02515, -1450.99512, 16.50360,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1601.07690, -1451.01428, 12.00860,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1604.47693, -1451.01367, 12.00820,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1606.01685, -1451.01331, 12.00860,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1615.14929, -1455.73059, 20.52650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1606.17725, -1467.76575, 15.32570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1615.12317, -1463.03137, 20.52050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1604.65015, -1455.67212, 20.52650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1695, 1608.26355, -1452.84058, 21.08920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1609.28503, -1456.72974, 16.40030,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1609.54468, -1455.13806, 16.40030,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1609.62573, -1453.54907, 16.40030,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1609.85913, -1451.96997, 16.40030,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1609.88159, -1451.89050, 16.40090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1611.53455, -1463.21033, 16.40230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1611.52808, -1464.80872, 16.40230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1611.53333, -1466.41248, 16.40230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1611.52234, -1466.87244, 16.40290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 1609.75244, -1460.33972, 16.99890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1609.21118, -1457.47668, 16.40090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 1611.80139, -1458.27820, 16.99890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 1603.45044, -1452.85852, 21.08920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 1603.29468, -1459.88855, 21.08920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 1608.51489, -1459.98303, 21.08920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 1603.12720, -1465.99329, 21.08920,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1695, 1608.48962, -1466.09473, 21.08920,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(18092, 1605.96826, -1465.52380, 16.93508,   0.00000, 0.00000, 41.22001);
	CreateDynamicObject(1714, 1606.53723, -1466.34766, 16.48937,   0.00000, 0.00000, 220.86002);
	CreateDynamicObject(2485, 1607.40833, -1464.06189, 17.48250,   0.00000, 0.00000, -60.36000);
	CreateDynamicObject(19363, 1601.80872, -1467.75745, 18.53740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2230, 1599.73059, -1467.87634, 18.61280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1599.73059, -1467.87634, 17.30980,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1603.28857, -1467.87634, 18.61280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1603.28857, -1467.87634, 17.30980,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1516, 1602.00903, -1461.29639, 20.25500,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1839, 1602.02429, -1461.29297, 19.73060,   0.00000, 0.00000, 90.78000);
	CreateDynamicObject(367, 1601.89575, -1461.42139, 20.12340,   0.00000, 20.00000, -88.38000);
	CreateDynamicObject(1721, 1603.92627, -1462.86108, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1602.96753, -1462.90894, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1601.94629, -1462.93506, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1600.78003, -1462.92224, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1603.92139, -1461.49963, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1602.97314, -1461.55103, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1601.97485, -1461.57458, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1600.84937, -1461.51807, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1599.80872, -1461.51733, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1599.80542, -1463.03882, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1603.90771, -1460.25964, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1602.97876, -1460.24536, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1602.03699, -1460.26062, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1600.89734, -1460.20410, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1599.81641, -1460.15015, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1599.76526, -1458.66284, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1600.85962, -1458.69641, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1602.00281, -1458.69299, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1603.00378, -1458.65991, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1603.98486, -1458.64636, 16.48920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1737, 1599.88196, -1452.56079, 16.33690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1737, 1599.88489, -1454.40198, 16.33630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1737, 1599.86768, -1456.27026, 16.33690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1737, 1600.70398, -1451.53162, 16.33630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1737, 1602.51208, -1451.53101, 16.33690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1737, 1604.35803, -1451.55334, 16.33630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1600.91223, -1455.84851, 16.91160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1600.88306, -1453.89417, 16.91160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1600.92261, -1452.43262, 16.91160,   0.00000, 0.00000, -123.53992);
	CreateDynamicObject(1671, 1603.11145, -1452.48022, 16.91160,   0.00000, 0.00000, -178.67993);
	CreateDynamicObject(1671, 1605.01978, -1452.42017, 16.91160,   0.00000, 0.00000, -178.67993);
	CreateDynamicObject(19826, 1604.47974, -1451.06897, 17.21610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19826, 1602.67981, -1451.08142, 17.21610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19826, 1600.42761, -1451.14856, 17.21610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19826, 1599.40930, -1453.20691, 17.21610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19826, 1599.41626, -1456.37476, 17.21610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18075, 1603.27112, -1460.03906, 20.42845,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1612.45105, -1460.03906, 20.42840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 1605.04907, -1451.53101, 17.13049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 1603.08569, -1451.67090, 17.13049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 1600.14124, -1451.80420, 17.13049,   0.00000, 0.00000, 49.13999);
	CreateDynamicObject(19893, 1600.05823, -1453.86426, 17.13049,   0.00000, 0.00000, 89.69999);
	CreateDynamicObject(19893, 1600.09619, -1455.92627, 17.13049,   0.00000, 0.00000, 89.69999);
	CreateDynamicObject(2852, 1603.97278, -1451.58069, 17.13101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1599.84021, -1455.08337, 17.13088,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 1601.94373, -1451.55933, 17.13080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1600.69995, -1451.59619, 17.13067,   0.00000, 0.00000, 11.33999);
	CreateDynamicObject(2894, 1599.90503, -1453.24817, 17.13067,   0.00000, 0.00000, 70.07999);
	CreateDynamicObject(2855, 1599.88257, -1452.39954, 17.13080,   0.00000, 0.00000, 54.84000);
	CreateDynamicObject(3077, 1610.21448, -1454.80737, 16.48860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 1605.00708, -1465.72729, 17.43423,   0.00000, 0.00000, 84.24001);
	CreateDynamicObject(2894, 1605.85315, -1465.36719, 17.43471,   0.00000, 0.00000, 25.56000);
	CreateDynamicObject(19807, 1606.72498, -1464.78345, 17.50170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2245, 1604.40430, -1466.78552, 17.63551,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 1607.73181, -1467.68982, 18.86590,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2196, 1606.40161, -1467.68384, 19.34200,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2196, 1608.31433, -1467.68701, 19.34200,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19952, 1608.86438, -1451.73767, 16.48870,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19951, 1608.94617, -1457.73474, 16.48740,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(19964, 1610.19714, -1454.81982, 16.43020,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(19957, 1610.91785, -1460.54724, 16.49960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 1610.91785, -1463.20715, 16.55000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19970, 1610.91785, -1465.95142, 16.52750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(631, 1609.87988, -1466.84375, 17.40645,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1607.79724, -1451.51416, 17.40645,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1599.42493, -1453.76746, 19.09440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19976, 1599.40466, -1459.13269, 16.82600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19983, 1599.40466, -1461.41455, 16.72846,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19967, 1599.40466, -1464.16577, 16.86100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19992, 1599.40466, -1466.01013, 16.69330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18092, 1607.18970, -1464.69995, 12.79940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18092, 1603.18518, -1464.68372, 12.79990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1604.58533, -1467.61975, 14.08150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1603.10425, -1467.60486, 14.08150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19959, 1601.86328, -1467.68774, 11.91680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2852, 1609.00439, -1464.59424, 13.29904,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1601.14990, -1464.59131, 13.29904,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(2369, 1607.56775, -1464.48340, 13.29893,   0.00000, 0.00000, 136.73997);
	CreateDynamicObject(2369, 1602.35425, -1464.74622, 13.29893,   0.00000, 0.00000, 217.85995);
	CreateDynamicObject(19975, 1609.63416, -1464.82947, 12.34150,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2190, 1605.43030, -1464.45837, 13.29914,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19808, 1605.22229, -1465.18555, 13.29974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1605.22900, -1466.08044, 12.56690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1707, 1609.10693, -1461.32654, 12.47050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1707, 1609.07764, -1457.67749, 12.47050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2071, 1609.07666, -1460.28687, 13.79299,   0.00000, 0.00000, -78.95999);
	CreateDynamicObject(2254, 1609.60596, -1458.40344, 15.02320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2258, 1599.42834, -1457.43884, 14.53160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18075, 1603.27112, -1460.03906, 16.31116,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1611.45020, -1460.19177, 16.31120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18092, 1599.60217, -1457.83386, 12.79990,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2485, 1600.13171, -1455.72742, 13.34170,   0.00000, 0.00000, 33.90000);
	CreateDynamicObject(2485, 1600.14075, -1457.19482, 13.34170,   0.00000, 0.00000, 33.90000);
	CreateDynamicObject(2485, 1600.17932, -1458.64612, 13.34170,   0.00000, 0.00000, 33.90000);
	CreateDynamicObject(2485, 1600.17847, -1459.91406, 13.34170,   0.00000, 0.00000, 33.90000);
	CreateDynamicObject(2485, 1599.66492, -1459.33044, 13.34170,   0.00000, 0.00000, 214.61998);
	CreateDynamicObject(2485, 1599.63953, -1457.97681, 13.34170,   0.00000, 0.00000, 214.61998);
	CreateDynamicObject(2485, 1599.61646, -1456.57288, 13.34170,   0.00000, 0.00000, 214.61998);
	CreateDynamicObject(2469, 1599.81055, -1456.34302, 14.62670,   0.00000, 45.00000, 9.96000);
	CreateDynamicObject(19087, 1599.93884, -1456.38757, 14.61027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19524, 1599.42285, -1457.34473, 13.43780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19524, 1599.42468, -1456.69983, 13.43780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19524, 1599.42468, -1455.71582, 13.43780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19524, 1599.42285, -1458.45166, 13.43780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19524, 1599.42285, -1460.05066, 13.43780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2256, 1599.43982, -1459.33142, 14.40120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1599.91467, -1460.97925, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1599.93347, -1454.63232, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1610.88843, -1452.06055, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1610.94812, -1455.77795, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1610.91174, -1453.92676, 14.65780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1600.06860, -1451.81091, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1604.75024, -1458.14624, 12.56626,   0.00000, 0.00000, 55.26000);
	CreateDynamicObject(19978, 1599.40234, -1453.05859, 11.79540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1607.77869, -1451.83948, 13.56788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1608.57690, -1451.00647, 12.50820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1599.69067, -1467.78857, 12.50820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1608.35449, -1483.20569, 13.17041,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 1604.98364, -1484.08716, 13.16370,   0.00000, 0.00000, -42.72000);
	CreateDynamicObject(638, 1603.17212, -1486.05823, 13.16370,   0.00000, 0.00000, -42.72000);
	CreateDynamicObject(640, 1598.13757, -1487.56909, 13.17041,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1592.76501, -1487.54456, 13.17041,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1251, 1609.93774, -1468.10120, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(1251, 1609.93774, -1470.70020, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(1251, 1609.93774, -1474.00378, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(1251, 1609.93774, -1476.87134, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(1251, 1609.93774, -1479.79114, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(1251, 1609.93774, -1482.90393, 12.51350,   0.00000, 80.00000, 90.00000);
	CreateDynamicObject(19953, 1599.44165, -1480.33691, 12.03327,   0.00000, 0.00000, 51.72001);
	CreateDynamicObject(1215, 1606.48230, -1468.11890, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1606.45605, -1470.70203, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1606.49109, -1474.01196, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1606.49585, -1476.85596, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1606.47461, -1479.76343, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1599.53931, -1469.42285, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1599.43018, -1473.30286, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1599.39795, -1477.21375, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1599.38147, -1479.75159, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1598.50964, -1480.41516, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1595.61780, -1480.42358, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1592.88562, -1480.40344, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1589.44861, -1480.47278, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1590.63721, -1485.79407, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1593.88635, -1486.97253, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1597.13330, -1487.13391, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1600.61804, -1487.01282, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1602.58398, -1485.93530, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1605.67041, -1482.76782, 12.72170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1607.56702, -1446.05090, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1607.00757, -1446.06958, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1606.39185, -1446.09131, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1601.37134, -1446.10461, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1600.72815, -1446.08997, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1600.15002, -1446.05200, 12.94444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1603.84802, -1446.02563, 13.09125,   0.00000, 0.00000, 0.00000);
 	
 	//Fraktionskiste
 	CreateDynamicObject(964, 2493.24243, -1707.50134, 1014.58276, 0.00000, 0.00000, 90.00000);
 	
 	//Bombem Garage - Los Santos
    CreateObject(969, 1843.24280, -1859.12170, 12.37560,   0.00000, 0.00000, 90.00000);
    
    //Bomben System
    CreateObject(980, 270.42242, 1884.12329, 16.47049,   90.00000, 0.00000, 90.00000);
	CreateObject(980, 264.87231, 1884.38757, 16.47050,   90.00000, 0.00000, 90.00000);
	//CreateObject(971, 283.05493, 1868.84778, 7.75518,   0.00000, 0.00000, 269.82675);//Zu
	//CreateObject(971, 283.05493, 1868.84778, 3.58456,   0.00000, 0.00000, 269.82675);//Auf

    //Obi Baumarkt - Map by Rocky_Balboa
    CreateDynamicObject(8661, 2517.35791, -1524.41956, 23.00000,   -0.02400, 0.00000, 0.00000);
    CreateDynamicObject(19378, 2531.58203, -1519.00171, 23.02350,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 2531.65063, -1528.47864, 23.04750,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19387, 2526.30029, -1525.38940, 24.75112,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19403, 2526.31396, -1528.34656, 24.75110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19449, 2526.30225, -1519.14600, 24.75110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19357, 2526.30640, -1531.54272, 24.75110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19449, 2531.02319, -1533.21497, 24.75110,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19430, 2536.28955, -1533.21802, 24.75110,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19449, 2531.02856, -1514.28455, 24.75110,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19430, 2536.01685, -1514.29968, 24.75110,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19449, 2536.87598, -1518.99292, 24.75110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19449, 2536.87964, -1528.60559, 24.75110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19378, 2531.58496, -1519.03345, 26.38390,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 2531.55469, -1528.29053, 26.38390,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1491, 2526.34912, -1526.14111, 22.99440,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3859, 2526.22339, -1529.33496, 23.23110,   0.00000, 0.00000, 17.00000);
    CreateDynamicObject(2435, 2526.84399, -1517.98657, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2527.76392, -1517.98730, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2528.68408, -1517.98511, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2529.60840, -1517.98328, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2530.53857, -1517.98145, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2531.45874, -1517.97778, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2532.38428, -1517.97668, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2533.31372, -1517.97949, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2534.24463, -1517.98206, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2534.28931, -1517.40198, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2533.36084, -1517.38147, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2528.81055, -1517.35437, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2532.50757, -1517.36255, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2531.57788, -1517.34216, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2530.66431, -1517.32214, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2529.71436, -1517.33374, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2527.89453, -1517.37805, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2527.00146, -1517.39636, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2535.15894, -1517.97498, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2536.08032, -1517.96790, 23.13584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2535.21875, -1517.39478, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2435, 2536.14893, -1517.38757, 25.66768,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 2529.04053, -1516.91992, 23.53941,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 2531.70557, -1516.88904, 23.53941,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 2534.54688, -1517.01917, 23.53941,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2190, 2531.51172, -1517.98755, 24.05860,   0.00000, 0.00000, 150.00000);
    CreateDynamicObject(2190, 2528.03857, -1518.11890, 24.05860,   0.00000, 0.00000, 150.00000);
    CreateDynamicObject(2190, 2533.67505, -1518.19824, 24.05860,   0.00000, 0.00000, 150.00000);
    CreateDynamicObject(942, 2533.77856, -1531.71277, 24.00859,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2412, 2526.59741, -1523.97925, 23.14264,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2412, 2526.57129, -1526.19800, 23.14264,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2459, 2528.53857, -1522.63269, 23.00423,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2459, 2530.97388, -1522.62769, 23.00423,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2459, 2528.61328, -1527.43445, 23.00423,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2459, 2531.00464, -1527.44250, 23.00423,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18635, 2532.05591, -1527.38892, 24.58770,   450.00000, 90.00000, 0.00000);
    CreateDynamicObject(341, 2531.45947, -1527.23010, 24.00470,   50.00000, 0.00000, 9.00000);
    CreateDynamicObject(18644, 2529.51440, -1527.22485, 24.30930,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(18638, 2529.45117, -1522.33545, 24.68220,   0.00000, 270.00000, 359.89801);
    CreateDynamicObject(18641, 2531.55371, -1522.77136, 24.03584,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8875, 2536.35059, -1524.04614, 19.76560,   9.00000, 0.00000, 0.00000);
    CreateDynamicObject(18637, 2530.23071, -1518.32825, 24.25204,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19326, 2536.78784, -1520.48108, 25.64360,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(10183, 2517.62012, -1530.49719, 23.01350,   0.00000, 0.00000, 225.25681);
    CreateDynamicObject(1233, 2526.06030, -1516.88159, 24.23520,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1271, 2536.25366, -1525.17029, 23.47310,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 2503.87817, -1514.42651, 23.62323,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 2530.56323, -1534.29089, 23.62323,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 2521.38428, -1514.36377, 23.62323,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 2517.75122, -1534.29248, 23.62323,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 2504.93481, -1534.26563, 23.62323,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 2498.54297, -1534.28162, 23.62320,   0.00000, 0.00000, 90.00000);

    //San Fierro Kart Bahn - Map
    CreateDynamicObject(978, -2082.315918, -136.974884, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2082.457520, -145.931808, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2082.612549, -155.178101, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2079.496582, -163.104187, 35.160534, 0.0000, 0.0000, 133.6901);
	CreateDynamicObject(978, -2071.854492, -167.593994, 35.160534, 0.0000, 0.0000, 165.5211);
	CreateDynamicObject(978, -2062.749268, -168.374344, 35.160534, 0.0000, 0.0000, 184.6197);
	CreateDynamicObject(978, -2058.039551, -163.432068, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2062.176514, -157.628662, 35.160534, 0.0000, 0.0000, 343.7747);
	CreateDynamicObject(978, -2071.159180, -155.028503, 35.160534, 0.0000, 0.0000, 343.7747);
	CreateDynamicObject(978, -2075.473633, -149.101349, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2075.042480, -139.793472, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2070.155518, -134.738190, 35.160534, 0.0000, 0.0000, 184.6197);
	CreateDynamicObject(978, -2060.876221, -133.967743, 35.160534, 0.0000, 0.0000, 184.6197);
	CreateDynamicObject(978, -2052.897949, -136.975739, 35.167614, 0.0000, 0.0000, 133.6901);
	CreateDynamicObject(978, -2047.745361, -144.526901, 35.160534, 0.0000, 0.0000, 114.5916);
	CreateDynamicObject(978, -2041.980225, -161.925186, 35.167614, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2043.852905, -152.958832, 35.160534, 0.0000, 0.0000, 114.5916);
	CreateDynamicObject(978, -2042.102173, -171.124634, 35.167614, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2040.222046, -179.958466, 35.160534, 0.0000, 0.0000, 114.5916);
	CreateDynamicObject(978, -2036.365601, -188.346619, 35.160534, 0.0000, 0.0000, 114.5916);
	CreateDynamicObject(978, -2034.494019, -197.274719, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2038.233521, -204.895721, 35.160534, 0.0000, 0.0000, 38.1971);
	CreateDynamicObject(978, -2045.562988, -210.688629, 35.160534, 0.0000, 0.0000, 38.1971);
	CreateDynamicObject(978, -2053.794922, -214.647919, 35.167614, 0.0000, 0.0000, 12.7324);
	CreateDynamicObject(978, -2062.765625, -216.724136, 35.160534, 0.0000, 0.0000, 12.7324);
	CreateDynamicObject(978, -2071.728271, -216.241638, 35.160534, 0.0000, 0.0000, 340.9014);
	CreateDynamicObject(978, -2078.153809, -214.078873, 35.160534, 0.0000, 0.0000, 340.9014);
	CreateDynamicObject(978, -2082.386475, -207.812927, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2081.939697, -198.446838, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2081.533691, -189.190903, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2083.074707, -207.371307, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2082.953613, -198.138397, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2082.838867, -189.314270, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2083.209473, -216.685181, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2080.789307, -225.182251, 35.160534, 0.0000, 0.0000, 122.4401);
	CreateDynamicObject(978, -2081.124756, -240.610229, 35.160534, 0.0000, 0.0000, 122.4401);
	CreateDynamicObject(978, -2080.982910, -232.994553, 35.160534, 0.0000, 0.0000, 54.9401);
	CreateDynamicObject(978, -2081.287109, -248.422546, 35.160534, 0.0000, 0.0000, 54.9401);
	CreateDynamicObject(978, -2081.459717, -256.052582, 35.160534, 0.0000, 0.0000, 122.4401);
	CreateDynamicObject(978, -2074.371094, -260.014862, 35.160534, 0.0000, 0.0000, 178.6901);
	CreateDynamicObject(978, -2066.481934, -256.910553, 35.160534, 0.0000, 0.0000, 223.6902);
	CreateDynamicObject(978, -2063.040283, -249.128677, 35.160534, 0.0000, 0.0000, 268.6902);
	CreateDynamicObject(978, -2062.838867, -239.787994, 35.160534, 0.0000, 0.0000, 268.6902);
	CreateDynamicObject(978, -2060.034912, -231.278885, 35.167614, 0.0000, 0.0000, 234.9402);
	CreateDynamicObject(978, -2053.435303, -224.944794, 35.160534, 0.0000, 0.0000, 212.4401);
	CreateDynamicObject(978, -2044.894897, -222.572830, 35.167614, 0.0000, 0.0000, 178.6901);
	CreateDynamicObject(978, -2040.288086, -227.418915, 35.167614, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2040.423950, -236.700241, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2040.547852, -245.959625, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2040.691650, -255.283356, 35.160534, 0.0000, 0.0000, 89.1267);
	CreateDynamicObject(978, -2036.214478, -259.404846, 35.160534, 0.0000, 0.0000, 184.6197);
	CreateDynamicObject(978, -2031.451050, -254.445374, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2031.038940, -245.110016, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2030.632080, -235.800629, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2030.206421, -226.476471, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2029.797241, -217.120300, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2029.362793, -207.782776, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2028.926514, -198.518387, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2030.299316, -189.496628, 35.160534, 0.0000, 0.0000, 289.8803);
	CreateDynamicObject(978, -2033.456177, -180.800400, 35.160534, 0.0000, 0.0000, 289.8803);
	CreateDynamicObject(978, -2036.611572, -172.101044, 35.167614, 0.0000, 0.0000, 289.8803);
	CreateDynamicObject(978, -2038.002808, -163.007385, 35.167614, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2037.591431, -153.699051, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2037.174927, -144.378265, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2040.683472, -137.079346, 35.135830, 0.0000, 0.0000, 323.6303);
	CreateDynamicObject(978, -2048.202881, -131.551086, 35.135464, 0.0000, 0.0000, 323.6303);
	CreateDynamicObject(978, -2056.567383, -128.621429, 35.157154, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2069.884033, -127.986526, 35.167259, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2064.287842, -128.261551, 35.167057, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2078.394531, -130.150314, 35.167614, 0.0000, 0.0000, 31.1304);
	CreateDynamicObject(979, -2077.486816, -269.740723, 35.160534, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(979, -2069.195557, -269.749268, 35.160534, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(979, -2061.250977, -266.460846, 35.160534, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(979, -2057.216553, -262.387939, 35.160534, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(979, -2053.970459, -254.478439, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2053.985352, -245.334412, 35.167614, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2051.381836, -236.918182, 35.160534, 0.0000, 0.0000, 56.2500);
	CreateDynamicObject(979, -2049.028076, -237.669510, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2049.044922, -246.884918, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2049.033936, -255.769867, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2049.063477, -263.385803, 35.167614, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2044.377563, -268.041107, 35.167614, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(979, -2035.054443, -268.083069, 35.160534, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(979, -2027.050781, -264.789642, 35.160534, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(979, -2023.787598, -256.779480, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2023.786987, -247.463089, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2022.878540, -238.330688, 35.167614, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2021.946167, -229.181305, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2021.948853, -220.116791, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2021.899048, -210.973465, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2021.009277, -201.825668, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2019.233887, -192.898376, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2017.461426, -184.186554, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2015.731201, -175.498901, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2014.272705, -168.217346, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2012.533936, -159.430328, 35.160534, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(979, -2014.876099, -129.756851, 35.133190, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(979, -2022.594849, -125.589493, 35.064091, 0.0000, 0.0000, 168.7500);
	CreateDynamicObject(979, -2031.312256, -122.929245, 35.039532, 0.0000, 0.0000, 157.5000);
	CreateDynamicObject(979, -2039.772095, -119.407532, 35.036922, 0.0000, 0.0000, 157.5000);
	CreateDynamicObject(979, -2046.626831, -113.800323, 35.077694, 0.0000, 0.0000, 123.7499);
	CreateDynamicObject(979, -2051.738770, -106.122696, 35.116837, 0.0000, 0.0000, 123.7499);
	CreateDynamicObject(979, -2025.770264, -173.442429, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2025.757813, -164.119827, 35.167614, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2025.758179, -154.931900, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2025.758667, -145.796967, 35.160534, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(979, -2029.020020, -137.787109, 35.128262, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(979, -2035.433838, -131.358917, 35.094032, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(979, -2042.985352, -126.250740, 35.092319, 0.0000, 0.0000, 157.5000);
	CreateDynamicObject(979, -2050.985352, -121.902679, 35.113529, 0.0000, 0.0000, 146.2500);
	CreateDynamicObject(979, -2059.412598, -119.327591, 35.163830, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(979, -2068.707031, -119.353165, 35.172398, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(979, -2073.904053, -119.286736, 35.168591, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(979, -2086.979492, -124.013260, 35.167614, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2095.323242, -132.024109, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2094.234375, -139.290741, 35.160534, 0.0000, 0.0000, 292.5001);
	CreateDynamicObject(979, -2092.519043, -148.170197, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2092.538818, -157.202362, 35.160534, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(979, -2090.011475, -165.679352, 35.160534, 0.0000, 0.0000, 303.7500);
	CreateDynamicObject(979, -2083.662354, -172.137756, 35.160534, 0.0000, 0.0000, 326.2501);
	CreateDynamicObject(979, -2075.244385, -175.678741, 35.160534, 0.0000, 0.0000, 348.7501);
	CreateDynamicObject(979, -2066.109375, -176.594070, 35.160534, 0.0000, 0.0000, 0.0001);
	CreateDynamicObject(979, -2056.840088, -176.592545, 35.160534, 0.0000, 0.0000, 0.0001);
	CreateDynamicObject(979, -2052.049805, -171.906342, 35.160534, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(979, -2052.009521, -162.798279, 35.160534, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(979, -2053.610107, -154.407455, 35.160534, 0.0000, 0.0000, 112.5001);
	CreateDynamicObject(979, -2060.046143, -149.165756, 35.160534, 0.0000, 0.0000, 168.7501);
	CreateDynamicObject(979, -2060.682373, -145.822357, 35.167614, 0.0000, 0.0000, 33.7501);
	CreateDynamicObject(979, -2054.385986, -147.047577, 35.160534, 0.0000, 0.0000, 303.7502);
	CreateDynamicObject(979, -2050.886963, -155.399200, 35.167614, 0.0000, 0.0000, 281.2502);
	CreateDynamicObject(979, -2050.000977, -164.589020, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2050.017334, -173.789963, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2048.174805, -182.691895, 35.167614, 0.0000, 0.0000, 292.5002);
	CreateDynamicObject(979, -2044.901978, -190.480392, 35.160534, 0.0000, 0.0000, 292.5002);
	CreateDynamicObject(979, -2044.961182, -198.745239, 35.160534, 0.0000, 0.0000, 247.5002);
	CreateDynamicObject(979, -2050.940918, -204.728165, 35.167614, 0.0000, 0.0000, 202.5002);
	CreateDynamicObject(979, -2059.551514, -207.326019, 35.160534, 0.0000, 0.0000, 191.2502);
	CreateDynamicObject(979, -2068.167969, -206.474213, 35.160534, 0.0000, 0.0000, 157.5002);
	CreateDynamicObject(979, -2071.424072, -200.238525, 35.160534, 0.0000, 0.0000, 78.7501);
	CreateDynamicObject(979, -2069.588623, -191.400833, 35.160534, 0.0000, 0.0000, 78.7501);
	CreateDynamicObject(979, -2071.236084, -183.003128, 35.160534, 0.0000, 0.0000, 123.7502);
	CreateDynamicObject(979, -2078.117676, -177.437805, 35.160534, 0.0000, 0.0000, 157.5002);
	CreateDynamicObject(979, -2086.826416, -177.391769, 35.160534, 0.0000, 0.0000, 202.5002);
	CreateDynamicObject(979, -2092.937012, -183.473770, 35.160530, 0.0000, 0.0000, 247.5002);
	CreateDynamicObject(979, -2094.803467, -192.350510, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2094.768555, -201.254089, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2094.729492, -210.396332, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2094.761719, -219.705276, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2091.659180, -225.347885, 35.160534, 0.0000, 0.0000, 315.0002);
	CreateDynamicObject(979, -2090.960693, -232.308746, 35.160534, 0.0000, 0.0000, 236.2502);
	CreateDynamicObject(979, -2090.118164, -239.445877, 35.160534, 0.0000, 0.0000, 315.0002);
	CreateDynamicObject(979, -2089.476318, -246.521240, 35.160534, 0.0000, 0.0000, 236.2502);
	CreateDynamicObject(979, -2091.438232, -253.209930, 35.160534, 0.0000, 0.0000, 270.0002);
	CreateDynamicObject(979, -2089.708496, -260.077118, 35.160534, 0.0000, 0.0000, 292.5002);
	CreateDynamicObject(979, -2085.279541, -266.542236, 35.160534, 0.0000, 0.0000, 315.0002);
	CreateDynamicObject(978, -2025.257080, -173.428757, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2024.835205, -164.254044, 35.167614, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2024.407227, -154.921021, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2023.981445, -145.754074, 35.160534, 0.0000, 0.0000, 267.3803);
	CreateDynamicObject(978, -2026.924194, -137.840271, 35.131939, 0.0000, 0.0000, 312.3803);
	CreateDynamicObject(978, -2033.834839, -131.658234, 35.100506, 0.0000, 0.0000, 323.6303);
	CreateDynamicObject(978, -2041.155518, -126.296761, 35.087566, 0.0000, 0.0000, 323.6303);
	CreateDynamicObject(978, -2048.646484, -120.750809, 35.095257, 0.0000, 0.0000, 323.6303);
	CreateDynamicObject(978, -2054.202148, -115.677429, 35.138103, 0.0000, 0.0000, 312.3803);
	CreateDynamicObject(978, -2061.912598, -111.971786, 35.165665, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2071.080078, -111.556122, 35.170662, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2080.255615, -111.179161, 35.160534, 0.0000, 0.0000, 357.3803);
	CreateDynamicObject(978, -2085.082764, -110.984291, 35.160534, 0.0000, 0.0000, 357.3804);
	CreateDynamicObject(978, -2089.774658, -115.301666, 35.160534, 0.0000, 0.0000, 87.3804);
	CreateDynamicObject(978, -2088.431885, -124.177673, 35.160534, 0.0000, 0.0000, 109.8804);
	CreateDynamicObject(979, -2082.898926, -119.262718, 35.160534, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(979, -2095.680176, -122.864456, 35.267235, 0.0000, 0.0000, 275.0197);
	CreateDynamicObject(10838, -2052.518555, -240.729172, 51.872723, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(3819, -2058.966797, -203.654358, 35.318069, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(3819, -2050.634033, -200.281952, 35.325150, 0.0000, 0.0000, 123.7499);
	CreateDynamicObject(3819, -2067.519287, -199.619736, 35.318069, 0.0000, 0.0000, 348.7500);
	CreateDynamicObject(3819, -2065.743408, -189.760925, 35.318069, 0.0000, 0.0000, 348.7500);
	CreateDynamicObject(3819, -2061.842041, -163.556900, 35.318069, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(3819, -2075.864014, -161.308502, 35.318069, 0.0000, 0.0000, 33.7500);
	CreateDynamicObject(3819, -2062.066895, -115.823563, 35.323311, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(3819, -2072.790771, -115.612854, 35.326942, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(3819, -2083.018799, -115.419281, 35.318069, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(3819, -2078.625977, -148.534607, 35.318069, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(3819, -2078.630859, -137.508026, 35.318069, 0.0000, 0.0000, 348.7500);
	CreateDynamicObject(3819, -2044.629028, -219.461899, 35.318069, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(3819, -2036.229248, -256.749084, 35.318069, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(1231, -2078.175781, -143.341461, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2094.159668, -147.480270, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2080.095947, -154.049011, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2068.213379, -157.739120, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2067.657227, -163.024933, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2060.105469, -146.278595, 37.057785, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2055.401367, -147.373917, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2062.080566, -197.196533, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2070.170654, -180.556305, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2058.844238, -177.989792, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2047.673828, -185.100113, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2045.770996, -192.754395, 37.057785, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2037.878418, -172.800842, 37.057785, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2040.358765, -164.576492, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2039.282593, -151.865585, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2044.257202, -141.058197, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2038.892822, -138.732773, 37.047894, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2034.689209, -180.295593, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2034.239746, -185.980865, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2031.442383, -195.400894, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2034.965942, -209.727448, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2052.381104, -220.598541, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, -2061.431396, -229.395248, 37.050705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2070.280762, -132.083191, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2056.597412, -130.755600, 34.320213, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2014.852661, -125.748482, 34.245758, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2041.360962, -115.460854, 34.188873, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2039.871826, -171.026550, 34.321228, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2040.303711, -156.497055, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2047.343506, -137.371597, 34.312714, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2041.198242, -146.018890, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2035.971558, -232.760773, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2051.471436, -222.300446, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2033.563965, -187.710236, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2054.935791, -189.292679, 34.321228, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2061.869873, -195.132660, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2055.549072, -193.002930, 34.321228, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2095.325439, -156.502487, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2088.946045, -172.397964, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2093.539307, -175.889343, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2063.943848, -179.099289, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2080.286377, -215.965118, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2070.887695, -218.742264, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2075.662354, -231.537140, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2065.919434, -222.083130, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2057.892822, -219.725067, 34.321228, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2038.203247, -213.095474, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2033.984497, -224.548859, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2089.804932, -264.865051, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2078.155762, -273.049896, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2062.254395, -278.542145, 34.321228, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2055.460449, -266.878479, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2033.878174, -272.309692, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2073.499756, -250.779785, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2078.010742, -255.991425, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2069.641846, -255.782410, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -2025.642822, -178.189804, 34.323193, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -2081.413818, -184.502136, 34.510471, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -2082.821045, -184.510666, 34.323193, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -2082.074707, -184.222076, 34.323193, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(615, -2082.221924, -186.273743, 34.314148, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(10281, -2094.769531, -139.235382, 37.816933, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(10837, -2089.665283, -145.797974, 38.650078, 0.0000, 0.0000, 247.5000);
	CreateDynamicObject(1262, -2094.207275, -142.891022, 36.532459, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1262, -2094.349121, -142.886078, 36.838676, 0.0000, 0.0000, 337.5000);
	CreateDynamicObject(14826, -2014.663574, -146.964539, 35.084690, 0.0000, 0.0000, 90.0000);
    
    //San Fiero Nobel Autohaus - Map Niklas.B
    Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1158.94934, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1178.04736, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1154.05005, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1525.65759, 1154.05005, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1154.05005, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1158.94934, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1178.04736, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1528.21350, 1187.68335, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1166.88525, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1543.61829, 1166.89929, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1166.88525, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1154.05005, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.09912, 1154.04236, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1528.19556, 1149.31384, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1182.95203, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1182.95203, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1525.65759, 1182.95203, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1525.65759, 1182.95203, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1182.95605, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1182.95605, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1154.05005, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1166.88525, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1522.61755, 1182.95203, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1528.21350, 1187.68335, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1528.19556, 1149.31384, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1182.95605, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1178.04736, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1158.94934, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.09912, 1154.04236, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1533.11755, 1166.88525, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1174.29041, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19449, -1538.71155, 1174.29041, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1176.38623, 16.59320,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1543.61865, 1166.08923, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.97900, 1178.04272, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.97900, 1158.95068, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.97900, 1158.95068, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.60706, 1178.04675, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.60706, 1178.04675, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.97900, 1158.95068, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1543.61865, 1170.91125, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1543.61865, 1166.08923, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1543.62073, 1170.89331, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1543.61865, 1170.91125, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1172.88623, 16.59320,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1169.38623, 16.59320,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1165.88623, 16.59320,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.49902, 1162.40527, 16.59320,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1160.61719, 16.59120,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1178.04578, 14.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1178.04578, 11.25320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1178.04980, 7.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1158.95581, 14.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1158.95581, 11.25320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1158.95581, 7.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1176.38416, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1172.88623, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1169.38623, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1165.88623, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1162.38623, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22510, 1160.61621, 15.87920,   90.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1177.33423, 13.32720,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1177.33423, 9.82720,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1177.33423, 6.32720,   -0.00400, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1159.67017, 13.32720,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1159.67017, 9.82720,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1545.22314, 1159.67017, 6.32720,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1176.62183, 14.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1176.62183, 11.25320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1176.62183, 7.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1176.38416, 15.16720,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1172.88623, 15.16720,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1169.38623, 15.16720,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1165.88623, 15.16720,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.49902, 1162.40527, 15.16720,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50525, 1160.61719, 15.16920,   0.00000, 90.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1160.38477, 14.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1160.38477, 11.25320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1544.50842, 1160.38477, 7.75320,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.97900, 1174.28564, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.60706, 1174.28979, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.96338, 1164.18689, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1536.62744, 1164.18689, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1540.29944, 1164.18689, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1542.81946, 1164.18689, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1540.29944, 1164.18689, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1542.81946, 1164.18689, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1536.62744, 1164.18689, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19430, -1533.96338, 1164.18689, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1176.52991, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1160.47192, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1160.47192, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1176.52991, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1163.68091, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1173.31995, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1173.31995, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1176.52991, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1160.47192, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1163.68091, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1525.65759, 1176.52991, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1525.65759, 1173.31995, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1525.65759, 1163.68091, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1525.65759, 1160.47192, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1149.32007, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1165.19910, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1171.80115, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.12964, 1158.95215, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1160.46594, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11560, 1173.30591, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11365, 1176.51587, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1176.52991, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1160.47791, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.12964, 1178.04541, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61829, 1173.31995, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1160.46594, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1173.30591, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1176.51587, 11.43420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1149.32007, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1187.68408, 7.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1187.68408, 11.43420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1160.46594, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1176.51587, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1522.61755, 1173.30591, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1187.68408, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1524.13562, 1149.32007, 14.93420,   0.00000, 0.00000, 90.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1176.52991, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1160.47192, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11755, 1160.46594, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11365, 1176.51587, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1533.11560, 1173.30591, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1168.49585, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1173.31995, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1173.31885, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1163.68091, 14.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1543.61755, 1163.68188, 7.93420,   0.00000, 0.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1545.39111, 1166.78674, 9.77420,   0.00000, 90.00000, 0.00000));
	Wand_ASF(CreateDynamicObject(19357, -1545.39111, 1169.99866, 9.77420,   0.00000, 90.00000, 0.00000));

	//Dach
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1192.58887, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1202.21814, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1211.85291, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1192.58411, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1202.21814, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1211.85291, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1192.58887, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1202.21814, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1211.85291, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1144.41687, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1144.41687, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1144.41687, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1134.79102, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1134.79102, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1134.79102, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1125.15601, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1548.92676, 1125.15601, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1125.15601, 13.84060,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1182.95496, 16.59360,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1173.31787, 16.59360,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1163.68494, 16.59360,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1527.92676, 1154.05090, 16.59360,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1173.31787, 16.59360,   0.00000, 90.00000, 0.00000));
	Decke_ALV(CreateDynamicObject(19380, -1538.42676, 1163.68494, 16.59360,   0.00000, 90.00000, 0.00000));

	//Scheiben
	Scheiben(CreateDynamicObject(19325, -1535.25464, 1164.20227, 8.12120,   90.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1550.85706, 1149.23315, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1536.50598, 1149.23315, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1544.68909, 1120.33484, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1537.95410, 1120.33484, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1531.84009, 1120.33484, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1525.72205, 1120.33484, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1551.11414, 1120.33484, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1145.60669, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1138.38477, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1131.14465, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.17114, 1123.94507, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1123.94507, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1131.14465, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1138.38477, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1145.60669, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1152.24976, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1536.50598, 1149.23315, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1543.60803, 1149.23315, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1550.85706, 1149.23315, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1145.60669, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1138.38477, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1131.14465, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.17114, 1123.94507, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1551.11414, 1120.33484, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1544.68909, 1120.33484, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1537.95410, 1120.33484, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1531.84009, 1120.33484, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1525.72205, 1120.33484, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1123.94507, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1131.14465, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1138.38477, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1145.60669, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1152.24976, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1191.47766, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1198.64465, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1205.86475, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1213.01270, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1213.01270, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1205.86475, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1198.64465, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1191.47766, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1550.85706, 1187.77124, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1543.60803, 1187.77124, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1536.50598, 1187.77124, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1184.83472, 7.62120,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1551.09204, 1216.66675, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1544.68909, 1216.66675, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1537.95410, 1216.66675, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1531.84009, 1216.66675, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1525.72205, 1216.66675, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1191.47766, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1184.83472, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1198.64465, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1205.86475, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1522.67712, 1213.01270, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1525.72205, 1216.66675, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1531.84009, 1216.66675, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1537.95410, 1216.66675, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1544.68909, 1216.66675, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1551.09204, 1216.66675, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1213.01270, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1205.86475, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1198.64465, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1554.16882, 1191.47766, 11.74720,   0.00000, 0.00000, 0.00000));
	Scheiben(CreateDynamicObject(19325, -1550.85706, 1187.77124, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1543.60803, 1187.77124, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1536.50598, 1187.77124, 11.74720,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1543.60803, 1149.23315, 7.62120,   0.00000, 0.00000, 90.00000));
	Scheiben(CreateDynamicObject(19325, -1541.56287, 1164.19421, 8.12120,   90.00000, 0.00000, 90.00000));

	//Boden/Decke
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1173.31787, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1163.68494, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1163.68884, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1173.32190, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1154.05493, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1144.42285, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1144.41687, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1134.79102, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1134.78296, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1125.15198, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1125.15198, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92676, 1144.41687, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92676, 1134.78296, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92676, 1125.15198, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1182.95496, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1192.58887, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1202.22095, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1211.85291, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1192.58887, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42700, 1202.21814, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1211.85291, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92676, 1211.85291, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92700, 1202.21814, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1548.92676, 1192.58887, 6.10880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1173.31787, 9.60880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1163.68494, 9.60880,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1154.05090, 9.66180,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1163.69092, 11.22230,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1538.42676, 1173.31787, 11.22030,   0.00000, 90.00000, 0.00000));
	Boden_ASF(CreateDynamicObject(19379, -1527.92676, 1182.95496, 9.60880,   0.00000, 90.00000, 0.00000));

	CreateDynamicObject(3440, -1540.04431, 1149.21680, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.23828, 1149.21680, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.23828, 1149.21680, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.23828, 1120.37878, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1534.90234, 1120.37878, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1528.76013, 1120.37781, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.70325, 1120.37878, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.81335, 1120.37878, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1541.13135, 1120.37878, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.11243, 1127.52295, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.15369, 1141.99500, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1127.52295, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1134.75903, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1141.99500, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.23828, 1149.21680, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.15369, 1134.75903, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.23828, 1149.21680, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1540.04431, 1149.21680, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.15369, 1141.99500, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.15369, 1134.75903, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.11243, 1127.52295, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.23828, 1120.37878, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.81335, 1120.37878, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1541.13135, 1120.37878, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1534.90234, 1120.37878, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1528.76013, 1120.37781, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.72070, 1120.36902, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1127.52295, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1134.75903, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1141.99500, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1546.75854, 1171.03088, 7.46120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1195.05725, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1202.25330, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1209.42432, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1216.61035, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1216.61035, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1209.42432, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1202.25330, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1195.05725, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.23828, 1187.77124, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1540.04431, 1187.77124, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.81335, 1216.66675, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1541.13135, 1216.66675, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1534.90234, 1216.66675, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1528.76013, 1216.66675, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1187.85925, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.23828, 1187.77124, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1540.04431, 1187.77124, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1195.05725, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1202.25330, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1209.42432, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1216.61035, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1547.81335, 1216.66675, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1541.13135, 1216.66675, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1534.90234, 1216.66675, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1528.76013, 1216.66675, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1216.61035, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1209.42432, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1202.25330, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1522.67712, 1195.05725, 11.42120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, -1538.43823, 1182.95313, 6.11050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, -1538.43823, 1154.05310, 6.11050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, -1548.93823, 1182.95313, 6.11050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, -1548.93823, 1154.05310, 6.11050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, -1554.19067, 1180.72644, 6.68380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -1554.19067, 1185.79834, 6.68380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1361, -1554.01892, 1178.36292, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, -1554.01892, 1183.24292, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1551.45496, 1178.12842, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1546.45496, 1178.11841, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1542.30103, 1178.11438, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, -1548.99243, 1178.27246, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1554.13379, 1187.85925, 6.65720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1546.75854, 1165.68689, 7.46120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1546.45496, 1158.88440, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1542.38501, 1158.88440, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, -1549.00562, 1158.75781, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1551.45496, 1158.88440, 6.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, -1554.05798, 1158.92188, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1554.20093, 1156.40613, 6.68380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -1554.20093, 1151.26599, 6.68380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1361, -1554.10852, 1153.82129, 6.90960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(672, -1550.85400, 1155.35303, 6.98470,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(672, -1550.85400, 1155.35303, 6.98470,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(672, -1550.51685, 1181.91003, 6.98470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1536.92065, 1180.78247, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1537.21631, 1185.01770, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1540.32715, 1182.67505, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1543.12402, 1180.95544, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1549.75891, 1185.38794, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1543.54285, 1185.56384, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1548.04700, 1181.59534, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1551.45605, 1154.89636, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1551.18799, 1151.71167, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1546.39160, 1156.52759, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1546.03735, 1152.55737, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1540.73792, 1151.27844, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1543.46082, 1154.56970, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1539.26331, 1156.69812, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1536.35962, 1155.32715, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, -1536.64697, 1151.43164, 5.90860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, -1554.66211, 1213.05225, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1205.82727, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1198.62732, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1191.42725, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1145.56726, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1138.40625, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1131.13416, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1554.66211, 1123.89819, 6.85730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1544.09656, 1173.86853, 6.85640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, -1544.09656, 1163.17651, 6.85640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3440, -1533.12073, 1165.46399, 7.29920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1533.12073, 1171.96399, 7.29920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, -1533.16870, 1170.90784, 6.69120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, -1533.16870, 1166.51282, 6.69120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -1533.87756, 1162.59204, 6.19640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, -1534.94153, 1159.57642, 6.19640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2315, -1536.65857, 1161.06030, 6.15590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, -1536.65857, 1162.01636, 6.15590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -1542.89233, 1160.56531, 6.19640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -1539.96350, 1159.57642, 6.19640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2315, -1541.70654, 1161.06030, 6.15590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, -1541.70654, 1162.01636, 6.15590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1533.95496, 1159.55249, 6.11750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1543.09387, 1164.82288, 6.11750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19173, -1538.39282, 1159.06421, 8.71994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1540.63464, 1181.49231, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1550.84326, 1179.81982, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1551.24072, 1186.35144, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1546.36157, 1184.28650, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1543.83191, 1183.16516, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1539.45923, 1185.92847, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1535.28528, 1183.60229, 6.18130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1541.22485, 1151.32373, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1551.62610, 1157.26880, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1550.50232, 1151.91565, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1545.84424, 1151.11694, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1542.09961, 1157.34326, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1546.11719, 1154.04871, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1538.65894, 1153.68457, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1535.47449, 1157.30969, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, -1535.03687, 1151.17419, 6.18700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1542.97009, 1159.54187, 6.11750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1542.90942, 1173.59924, 6.11750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1533.65503, 1173.67615, 6.11750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1533.62317, 1164.78284, 6.11750,   0.00000, 0.00000, 0.00000);
	
	//Bushaltestellen - Map by Shirayama
	CreateDynamicObject(1257,1446.7002000,-2370.7002000,14.7000000,0.0000000,0.0000000,87.9950000); //object(bustopm) (1)
	CreateDynamicObject(1257,2845.2998000,-1905.0000000,11.3000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (2)
	CreateDynamicObject(1257,2273.3999000,-2312.5000000,13.8000000,0.0000000,0.0000000,316.0000000); //object(bustopm) (3)
	CreateDynamicObject(1257,2921.4004000,-1318.2002000,11.2500000,0.0000000,0.0000000,9.9980000); //object(bustopm) (4)
	CreateDynamicObject(1257,2343.9004000,-1147.5000000,27.4000000,0.0000000,0.0000000,91.9940000); //object(bustopm) (5)
	CreateDynamicObject(1257,1401.0000000,-931.5996100,35.1000000,0.0000000,0.0000000,82.5000000); //object(bustopm) (6)
	CreateDynamicObject(1257,763.7000100,-1041.2000000,24.2000000,0.0000000,0.0000000,101.9910000); //object(bustopm) (7)
	CreateDynamicObject(1257,446.7002000,-1306.0000000,15.4500000,0.0000000,0.0000000,125.9860000); //object(bustopm) (8)
	CreateDynamicObject(1257,165.9003900,-1516.0000000,12.5400000,0.0000000,0.0000000,149.9850000); //object(bustopm) (9)
	CreateDynamicObject(1257,444.5996100,-1726.7002000,10.2500000,0.0000000,0.0000000,261.9800000); //object(bustopm) (10)
	CreateDynamicObject(1257,1003.7998000,-1813.7998000,14.4000000,0.0000000,0.0000000,251.9770000); //object(bustopm) (11)
	CreateDynamicObject(1257,1397.0996000,-2293.3994000,13.7000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (12)
	CreateDynamicObject(1257,1433.5996000,-1739.5996000,13.7800000,0.0000000,0.0000000,270.0000000); //object(bustopm) (13)
	CreateDynamicObject(1257,1536.5000000,-1612.0000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (14)
	CreateDynamicObject(1257,1364.5000000,-1260.2998000,13.7500000,0.0000000,0.0000000,0.0000000); //object(bustopm) (15)
	CreateDynamicObject(1257,942.7002000,-1133.2998000,24.0800000,0.0000000,0.0000000,90.0000000); //object(bustopm) (16)
	CreateDynamicObject(1257,620.5000000,-1376.9004000,13.9000000,0.0000000,0.0000000,179.9950000); //object(bustopm) (17)
	CreateDynamicObject(1257,778.5996100,-1413.0000000,13.7800000,0.0000000,0.0000000,269.9950000); //object(bustopm) (18)
	CreateDynamicObject(1257,1158.7998000,-1412.7998000,13.8600000,0.0000000,0.0000000,269.9890000); //object(bustopm) (19)
	CreateDynamicObject(1257,421.5000000,-1574.4004000,26.3000000,0.0000000,0.0000000,89.9840000); //object(bustopm) (20)
	CreateDynamicObject(1257,612.5999800,-1683.8000000,16.4000000,0.0000000,0.0000000,263.9850000); //object(bustopm) (21)
	CreateDynamicObject(1257,1936.0000000,-2159.1001000,13.8000000,0.0000000,0.0000000,89.9790000); //object(bustopm) (22)
	CreateDynamicObject(1257,1319.7002000,-1826.0000000,13.7800000,0.0000000,0.0000000,359.9730000); //object(bustopm) (23)
	CreateDynamicObject(1257,1362.8000000,-1444.5000000,13.8000000,0.0000000,0.0000000,356.0000000); //object(bustopm) (24)
	CreateDynamicObject(1257,1068.5000000,-1874.2998000,13.7900000,0.0000000,0.0000000,0.0000000); //object(bustopm) (25)
	CreateDynamicObject(1257,1283.8000000,-1859.1000000,13.8000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (27)
	CreateDynamicObject(1257,1461.8000000,-1382.2000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (28)
	CreateDynamicObject(1257,1579.2002000,-1310.9004000,17.7000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (29)
	CreateDynamicObject(1257,1593.5996000,-1153.2998000,24.3800000,0.0000000,0.0000000,90.0000000); //object(bustopm) (30)
	CreateDynamicObject(1257,1430.4000000,-1026.9000000,24.1000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (31)
	CreateDynamicObject(1257,1183.2002000,-1032.4004000,32.2000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (33)
	CreateDynamicObject(1257,978.2998000,-1032.0000000,30.5900000,0.0000000,0.0000000,90.0000000); //object(bustopm) (34)
	CreateDynamicObject(1257,1219.7000000,-951.0999800,43.1000000,0.0000000,0.0000000,282.0000000); //object(bustopm) (35)
	CreateDynamicObject(1257,1459.7998000,-2202.5000000,13.9800000,0.0000000,0.0000000,269.9950000); //object(bustopm) (36)
	CreateDynamicObject(1257,1388.5000000,-2279.2998000,13.7600000,0.0000000,0.0000000,89.9890000); //object(bustopm) (37)
	CreateDynamicObject(1257,2254.2998000,-1150.4004000,26.7500000,0.0000000,0.0000000,255.9870000); //object(bustopm) (39)
	CreateDynamicObject(1257,2432.2002000,-1263.9004000,24.2500000,0.0000000,0.0000000,269.9840000); //object(bustopm) (40)
	CreateDynamicObject(1257,2504.2998000,-1428.9004000,28.8500000,0.0000000,0.0000000,179.9840000); //object(bustopm) (41)
	CreateDynamicObject(1257,2187.1006000,-1377.0996000,24.2500000,0.0000000,0.0000000,89.9840000); //object(bustopm) (42)
	CreateDynamicObject(1257,2009.2998000,-1333.5000000,24.2500000,0.0000000,0.0000000,89.9840000); //object(bustopm) (43)
	CreateDynamicObject(1257,2184.3999000,-1902.0000000,13.8000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (44)
	CreateDynamicObject(1257,2511.9004000,-1740.2002000,13.7800000,0.0000000,0.0000000,269.9730000); //object(bustopm) (45)
	CreateDynamicObject(1257,2441.7002000,-1925.0996000,13.8000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (46)
	CreateDynamicObject(1257,2706.6001000,-2024.4000000,13.8000000,0.0000000,0.0000000,179.9730000); //object(bustopm) (51)
	CreateDynamicObject(1257,2292.1001000,-2061.7000000,13.8000000,0.0000000,0.0000000,133.9730000); //object(bustopm) (52)
	CreateDynamicObject(1257,2150.7002000,-2203.0996000,13.7900000,0.0000000,0.0000000,133.9620000); //object(bustopm) (53)
	CreateDynamicObject(1257,2170.2000000,-2363.8000000,13.8000000,0.0000000,0.0000000,229.9670000); //object(bustopm) (54)
	
	//Garage - Map by Shirayama
	CreateObject(7245, 2389.59326, 2836.57544, -45.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(19457, 12601.39063, 5821.23975, -3171.08569,   0.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2823.59766, -47.50000,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2827.09741, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2820.09912, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2816.60669, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2813.07690, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2830.58008, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2406.46558, 2847.55127, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2844.50830, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2402.97949, 2847.57153, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2841.02515, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2837.52856, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2834.07446, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2401.12500, 2847.99390, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2409.95044, 2847.55127, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2413.41821, 2847.53687, -47.93960,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.39844, 2847.55127, -48.13660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2423.90063, 2847.55127, -47.85660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2420.40454, 2847.55127, -47.85660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2416.91626, 2847.55127, -47.85660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2837.52856, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2813.07690, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2816.58667, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2820.07910, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2823.57764, -47.50000,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2827.07739, -47.70300,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2830.56006, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2834.05444, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2841.02515, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2844.50830, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2427.50000, 2847.99390, -47.98530,   90.00000, 0.00000, 0.00000);
	CreateObject(19454, 2402.95923, 2815.00000, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2849.14966, -47.98530, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2406.45215, 2815.00000, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2409.95044, 2815.00000, -47.98530,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2420.40454, 2815.00000, -47.85660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2423.90063, 2815.00000, -47.85660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.39844, 2815.00000, -48.13660,   90.00000, 90.00000, 0.00000);
	CreateObject(19454, 2402.83398, 2819.90796, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2406.28247, 2819.90796, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2409.77563, 2819.94824, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2413.27319, 2819.90820, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2416.76147, 2819.90894, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2420.25439, 2819.90796, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2423.74878, 2819.90796, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.23462, 2819.90796, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.11987, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2423.63306, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2420.13330, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2416.63330, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2413.15259, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2409.65332, 2829.57397, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2406.17334, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2402.67358, 2829.53394, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2402.95532, 2839.15259, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2406.45703, 2839.15088, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2409.93579, 2839.15259, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2413.39575, 2839.15625, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2416.89526, 2839.15259, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2420.39697, 2839.15259, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2423.89795, 2839.15625, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2427.36816, 2839.13623, -43.80000,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2424.89136, 2845.70508, -43.80000,   0.00000, 90.00000, 90.00000);
	CreateObject(19454, 2415.27539, 2845.71021, -43.80000,   0.00000, 90.00000, 90.00000);
	CreateObject(19454, 2405.65649, 2845.70679, -43.80000,   0.00000, 90.00000, 90.00000);
	CreateObject(19461, 2418.49390, 2816.72583, -47.85660,   90.00000, 90.00000, 90.00000);
	CreateObject(19461, 2410.08447, 2816.70581, -47.85660,   90.00000, 90.00000, 90.00000);
	CreateObject(19442, 2417.84619, 2818.36255, -48.03660,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2417.57837, 2818.36255, -44.54000,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2410.83813, 2818.36255, -48.03660,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2411.17798, 2818.36255, -44.54000,   0.00000, 0.00000, 90.00000);
	CreateObject(3089, 2412.86475, 2818.44238, -47.66000,   0.00000, 0.00000, 0.00000);
	CreateObject(3089, 2415.85010, 2818.44238, -47.66000,   0.00000, 0.00000, 180.00000);
	CreateObject(19442, 2412.43872, 2818.36255, -48.03660,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2412.77881, 2818.36255, -44.54000,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2414.37866, 2818.36255, -44.54000,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2415.97876, 2818.36255, -44.54000,   0.00000, 0.00000, 90.00000);
	CreateObject(19442, 2416.25879, 2818.36255, -48.03660,   0.00000, 0.00000, 90.00000);
	CreateObject(0, 2418.43384, 2816.70581, -47.85660,   90.00000, 90.00000, 90.00000);
	CreateObject(19461, 2410.26440, 2816.70581, -47.85660,   90.00000, 90.00000, 90.00000);
	CreateObject(3785, 2427.30176, 2823.67896, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 2427.34204, 2828.11523, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 2427.30225, 2832.83887, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 2427.30225, 2837.39990, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 2427.30225, 2842.17993, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 2427.30225, 2846.69995, -45.29150,   0.00000, 0.00000, 180.00000);
	CreateObject(3785, 23.00000, 2846.69995, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2846.51245, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2842.17993, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2837.93994, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2833.29883, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2828.75513, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(3785, 2401.32007, 2823.67896, -45.29150,   0.00000, 0.00000, 0.00000);
	CreateObject(2886, 2412.52002, 2818.40015, -47.36740,   0.00000, 0.00000, 180.00000);
	CreateObject(19461, 2418.67383, 2816.72583, -47.85660,   90.00000, 90.00000, 90.00000);
	CreateObject(1650, 2426.37256, 2817.08789, -48.67750,   0.00000, 0.00000, 180.00000);
	CreateObject(2057, 2425.12622, 2816.87329, -48.82660,   0.00000, 0.00000, 60.00000);
	CreateObject(2062, 2425.92310, 2816.53052, -48.42750,   0.00000, 0.00000, 0.00000);
	CreateObject(1327, 2402.95361, 2815.56641, -46.00000,   90.00000, 90.00000, 0.00000);
	CreateObject(2690, 2427.28125, 2821.51245, -46.83670,   0.00000, 0.00000, 270.00000);
	CreateObject(923, 2404.16284, 2815.60132, -48.11380,   0.00000, 0.00000, 0.00000);
	CreateObject(942, 2422.04199, 2816.27148, -46.64570,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 2402.19995, 2815.54004, -48.24000,   0.00000, 0.00000, 180.00000);
	CreateObject(14600, 2427.17871, 2816.40210, -47.48800,   0.00000, 0.00000, 360.00000);
	CreateObject(1650, 2426.42310, 2817.43359, -48.67750,   0.00000, 0.00000, 270.00000);
	CreateObject(1650, 2425.99341, 2817.33667, -48.67750,   0.00000, 0.00000, 230.00000);
	CreateObject(1650, 2425.63135, 2815.88208, -48.67750,   0.00000, 0.00000, 180.00000);
	CreateObject(19899, 2408.14380, 2815.65942, -48.97010,   0.00000, 0.00000, 90.00000);
	CreateObject(19943, 2410.00000, 2818.48853, -50.28070,   0.00000, 0.00000, 0.00000);
	CreateObject(19943, 2418.63354, 2818.48853, -50.28070,   0.00000, 0.00000, 0.00000);
	CreateObject(19917, 2408.81055, 2817.45679, -48.97780,   0.00000, 0.00000, 60.00000);
	CreateObject(19903, 2406.03052, 2815.53955, -48.99410,   0.00000, 0.00000, 90.00000);
	CreateObject(1244, 2426.98901, 2821.50415, -48.19830,   0.00000, 0.00000, 0.00000);
	CreateObject(1080, 2416.24414, 2847.37378, -47.14780,   0.00000, 0.00000, 270.00000);
	CreateObject(1074, 2414.20020, 2847.37378, -46.49310,   0.00000, 0.00000, 270.00000);
	CreateObject(1077, 2410.43188, 2847.37378, -45.40390,   0.00000, 0.00000, 270.00000);
	CreateObject(1078, 2414.20020, 2847.37378, -45.40390,   0.00000, 0.00000, 270.00000);
	CreateObject(1079, 2412.15698, 2847.37378, -47.14780,   0.00000, 0.00000, 270.00000);
	CreateObject(1083, 2414.20020, 2847.37378, -47.57830,   0.00000, 0.00000, 270.00000);
	CreateObject(1084, 2417.82861, 2847.37378, -45.40390,   0.00000, 0.00000, 270.00000);
	CreateObject(1089, 2405.68384, 2815.54248, -43.92330,   90.00000, 90.00000, 90.00000);
	CreateObject(1097, 2411.21680, 2847.37378, -46.29540,   0.00000, 0.00000, 270.00000);
	CreateObject(1098, 2417.09668, 2847.37378, -46.29540,   0.00000, 0.00000, 270.00000);
	CreateObject(2254, 2409.95874, 2816.89746, -46.16000,   0.00000, 0.00000, 90270.00000);
	CreateObject(1893, 2413.81372, 2823.94385, -43.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(1893, 2413.81274, 2829.00000, -43.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(1893, 2413.81274, 2834.00000, -43.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(1893, 2413.81274, 2839.00000, -43.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(1893, 2413.81274, 2844.00000, -43.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(3790, 2425.91992, 2816.71021, -49.34130,   0.00000, 90.00000, 0.00000);
	CreateObject(3790, 2425.91992, 2816.37036, -49.34130,   0.00000, 90.00000, 0.00000);
	CreateObject(19454, 2412.70288, 2818.19360, -47.44630,   90.00000, 0.00000, 90.00000);
	CreateObject(19454, 2416.19727, 2818.19360, -47.44630,   90.00000, 0.00000, 90.00000);
	
	//Schwarzmarkt - Map by Shirayama
	CreateDynamicObject(14399,-1631.4004000,-2236.2998000,30.3000000,0.0000000,0.0000000,92.0000000); //object(bar2)(1)
	CreateDynamicObject(1252,-1631.9165000,-2236.2317000,31.7200000,270.0000000,0.0000000,310.0000000); //object(barrelexpos)(1)
	CreateDynamicObject(1575,-1633.1000000,-2242.3999000,31.6200000,0.0000000,0.0000000,0.0000000); //object(drug_white)(1)
	CreateDynamicObject(1575,-1633.1000000,-2242.8000000,31.6200000,0.0000000,0.0000000,0.0000000); //object(drug_white)(2)
	CreateDynamicObject(1575,-1633.1000000,-2243.2000000,31.6200000,0.0000000,0.0000000,0.0000000); //object(drug_white)(3)
	CreateDynamicObject(1575,-1633.1000000,-2243.6001000,31.6200000,0.0000000,0.0000000,0.0000000); //object(drug_white)(4)
	CreateDynamicObject(1654,-1632.9000000,-2236.3999000,31.7500000,270.0000000,0.0000000,309.9980000); //object(dynamite)(3)
	CreateDynamicObject(1654,-1632.7000000,-2236.7000000,31.7500000,270.0000000,0.0000000,279.9980000); //object(dynamite)(4)
	CreateDynamicObject(2035,-1633.2000000,-2237.8999000,31.7000000,0.0000000,0.0000000,300.0000000); //object(cj_m16)(1)
	CreateDynamicObject(2035,-1633.1000000,-2245.1001000,31.7000000,0.0000000,0.0000000,249.9980000); //object(cj_m16)(2)
	CreateDynamicObject(2036,-1633.2000000,-2239.8999000,31.7000000,0.0000000,0.0000000,110.0000000); //object(cj_psg1)(1)
	CreateDynamicObject(2044,-1633.2000000,-2238.6001000,31.7000000,0.0000000,0.0000000,20.0000000); //object(cj_mp5k)(1)
	CreateDynamicObject(2044,-1632.8000000,-2245.7000000,31.7000000,0.0000000,0.0000000,19.9950000); //object(cj_mp5k)(2)
	CreateDynamicObject(2057,-1631.6000000,-2235.6001000,30.6000000,0.0000000,0.0000000,10.0000000); //object(flame_tins)(1)
	CreateDynamicObject(2057,-1632.4000000,-2235.5000000,30.6000000,0.0000000,0.0000000,229.9980000); //object(flame_tins)(2)
	CreateDynamicObject(2060,-1628.8000000,-2247.5000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(cj_sandbag)(1)
	CreateDynamicObject(2690,-1628.8000000,-2235.6001000,30.8000000,0.0000000,0.0000000,60.0000000); //object(cj_fire_ext)(1)
	CreateDynamicObject(1550,-1632.1000000,-2237.0000000,30.9000000,0.0000000,0.0000000,310.0000000); //object(cj_money_bag)(1)
	CreateDynamicObject(1550,-1632.5000000,-2237.2000000,30.9000000,0.0000000,0.0000000,349.9960000); //object(cj_money_bag)(2)
	CreateDynamicObject(1279,-1632.9000000,-2247.5000000,31.7000000,0.0000000,0.0000000,0.0000000); //object(craigpackage)(1)
	CreateDynamicObject(1279,-1632.9004000,-2246.7998000,31.7000000,0.0000000,0.0000000,0.0000000); //object(craigpackage)(2)
	CreateDynamicObject(1242,-1633.0996000,-2238.8994000,31.8000000,0.0000000,0.0000000,0.0000000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1633.1000000,-2239.2000000,31.8000000,69.0000000,0.0000000,190.0000000); //object(bodyarmour)(2)
	CreateDynamicObject(1210,-1633.1000000,-2242.0000000,31.7600000,0.0000000,0.0000000,0.0000000); //object(briefcase)(1)
	CreateDynamicObject(1210,-1633.0996000,-2241.3994000,31.7700000,74.9980000,1.0000000,309.9960000); //object(briefcase)(2)
	CreateDynamicObject(1210,-1633.0996000,-2241.7998000,31.7500000,90.0000000,0.0000000,270.0000000); //object(briefcase)(3)
	CreateDynamicObject(1210,-1632.1000000,-2247.8000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(4)
	CreateDynamicObject(1210,-1632.1000000,-2247.7000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(5)
	CreateDynamicObject(1210,-1632.1000000,-2247.6001000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(6)
	CreateDynamicObject(1210,-1632.1000000,-2247.5000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(7)
	CreateDynamicObject(1210,-1632.1000000,-2247.3999000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(8)
	CreateDynamicObject(1210,-1632.1000000,-2247.3000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(briefcase)(9)
	CreateDynamicObject(3052,-1633.0000000,-2240.8999000,31.8000000,0.0000000,0.0000000,0.0000000); //object(db_ammo)(1)
	CreateDynamicObject(3015,-1629.0000000,-2236.8999000,30.5000000,0.0000000,0.0000000,0.0000000); //object(cr_cratestack)(1)
	CreateDynamicObject(3015,-1629.0000000,-2237.3000000,30.5000000,0.0000000,0.0000000,0.0000000); //object(cr_cratestack)(2)
	CreateDynamicObject(3015,-1629.0000000,-2237.7000000,30.5000000,0.0000000,0.0000000,0.0000000); //object(cr_cratestack)(3)
	CreateDynamicObject(2969,-1628.9000000,-2238.3000000,30.6000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(1)
	CreateDynamicObject(2969,-1628.9000000,-2239.0000000,30.6000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(2)
	CreateDynamicObject(2969,-1628.9000000,-2238.3000000,30.8000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(3)
	CreateDynamicObject(2969,-1628.9000000,-2239.7000000,30.6000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(4)
	CreateDynamicObject(2969,-1628.9000000,-2239.3000000,30.8000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(5)
	CreateDynamicObject(2969,-1628.9000000,-2240.3999000,30.6000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(6)
	CreateDynamicObject(2969,-1628.9000000,-2240.2000000,30.8000000,0.0000000,0.0000000,270.0000000); //object(level_ammobox)(7)
	CreateDynamicObject(2062,-1629.2000000,-2232.3000000,31.0000000,0.0000000,0.0000000,0.0000000); //object(cj_oildrum2)(1)
	CreateDynamicObject(2062,-1629.2000000,-2233.1001000,31.0000000,0.0000000,0.0000000,0.0000000); //object(cj_oildrum2)(2)
	CreateDynamicObject(2062,-1630.1000000,-2232.3000000,31.0000000,0.0000000,0.0000000,0.0000000); //object(cj_oildrum2)(3)
	CreateDynamicObject(930,-1629.0996000,-2234.3994000,31.0000000,0.0000000,0.0000000,270.0000000); //object(o2_bottles)(1)
	CreateDynamicObject(1348,-1637.3000000,-2232.7000000,31.2000000,0.0000000,0.0000000,2.0000000); //object(cj_o2tanks)(1)
	CreateDynamicObject(2359,-1633.2000000,-2237.1001000,31.8000000,0.0000000,0.0000000,290.0000000); //object(ammo_box_c5)(1)
	CreateDynamicObject(2041,-1632.3000000,-2236.0000000,31.8000000,0.0000000,0.0000000,272.0000000); //object(ammo_box_m2)(1)
	CreateDynamicObject(2040,-1632.4000000,-2236.3999000,31.7000000,0.0000000,0.0000000,0.0000000); //object(ammo_box_m1)(1)
	CreateDynamicObject(1829,-1631.4000000,-2247.1001000,30.9000000,0.0000000,0.0000000,182.0000000); //object(man_safenew)(1)
	CreateDynamicObject(2332,-1635.9000000,-2232.6001000,30.9000000,0.0000000,0.0000000,0.0000000); //object(kev_safe)(1)
	CreateDynamicObject(2577,-1634.2000000,-2232.5000000,31.2000000,0.0000000,0.0000000,90.0000000); //object(cj_sex_counter)(1)
	CreateDynamicObject(2578,-1632.6000000,-2232.2000000,31.5000000,0.0000000,0.0000000,0.0000000); //object(cj_sex_shelf_1)(1)
	CreateDynamicObject(2582,-1637.7000000,-2237.5000000,31.3000000,0.0000000,0.0000000,92.0000000); //object(cj_sex_video_1)(1)
	CreateDynamicObject(2586,-1637.7000000,-2235.3999000,31.0000000,0.0000000,0.0000000,92.0000000); //object(cj_sex_counter2)(1)
	CreateDynamicObject(1485,-1637.8000000,-2236.3000000,31.5000000,0.0000000,0.0000000,0.0000000); //object(cj_ciggy)(1)
	CreateDynamicObject(14666,-1628.6000000,-2239.6001000,32.2000000,0.0000000,0.0000000,0.0000000); //object(cj_sex_counter03)(1)
	CreateDynamicObject(2060,-1628.6000000,-2245.8999000,30.6000000,0.0000000,0.0000000,299.9980000); //object(cj_sandbag)(2)
	CreateDynamicObject(2060,-1629.0000000,-2246.8000000,30.6000000,0.0000000,0.0000000,49.9960000); //object(cj_sandbag)(3)
	CreateDynamicObject(1661,-1632.9000000,-2240.7000000,33.7000000,0.0000000,0.0000000,0.0000000); //object(htl_fan_rotate_dy)(1)
	CreateDynamicObject(3013,-1628.9000000,-2237.3000000,31.2000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(1)
	CreateDynamicObject(3013,-1628.9000000,-2237.7000000,31.2000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(2)
	CreateDynamicObject(3013,-1628.9000000,-2242.8000000,31.6000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(3)
	CreateDynamicObject(3013,-1630.7000000,-2247.6001000,30.6000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(4)
	CreateDynamicObject(3013,-1630.3000000,-2247.6001000,30.6000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(5)
	CreateDynamicObject(3013,-1630.7000000,-2247.2000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(6)
	CreateDynamicObject(3013,-1630.3000000,-2247.2000000,30.6000000,0.0000000,0.0000000,0.0000000); //object(cr_ammobox)(7)
	CreateDynamicObject(922,-1628.5996000,-2243.0000000,31.4000000,0.0000000,0.0000000,272.0000000); //object(packing_carates1)(1)
	CreateDynamicObject(2060,-1629.5000000,-2246.1001000,30.6000000,0.0000000,0.0000000,229.9910000); //object(cj_sandbag)(3)
	CreateDynamicObject(1242,-1629.8000000,-2247.2000000,30.6500000,0.0000000,0.0000000,34.0000000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1629.5000000,-2247.6001000,30.6500000,0.0000000,0.0000000,33.9990000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1628.3000000,-2247.2000000,31.8000000,0.0000000,0.0000000,93.9990000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1628.3000000,-2246.7000000,31.8000000,0.0000000,0.0000000,93.9990000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1628.3000000,-2246.2000000,31.8000000,0.0000000,0.0000000,93.9990000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1628.4000000,-2245.7000000,31.8000000,0.0000000,0.0000000,93.9990000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1628.4000000,-2245.1001000,31.8000000,0.0000000,0.0000000,93.9940000); //object(bodyarmour)(1)
	CreateDynamicObject(1242,-1630.0000000,-2247.6001000,30.6500000,0.0000000,0.0000000,333.9970000); //object(bodyarmour)(1)
	CreateDynamicObject(3014,-1631.8000000,-2232.3000000,30.7000000,0.0000000,0.0000000,0.0000000); //object(cr_guncrate)(1)
	CreateDynamicObject(3014,-1631.0000000,-2232.3000000,30.7000000,0.0000000,0.0000000,0.0000000); //object(cr_guncrate)(2)
	CreateDynamicObject(3014,-1631.5000000,-2232.3999000,31.2000000,0.0000000,0.0000000,0.0000000); //object(cr_guncrate)(3)
	CreateDynamicObject(2912,-1637.8000000,-2233.7000000,30.5000000,0.0000000,0.0000000,0.0000000); //object(temp_crate1)(1)
	CreateDynamicObject(2912,-1637.8000000,-2233.7000000,31.2000000,0.0000000,0.0000000,0.0000000); //object(temp_crate1)(2)
	CreateDynamicObject(925,-1639.2000000,-2247.1001000,31.5000000,0.0000000,0.0000000,272.0000000); //object(rack2)(1)
	CreateDynamicObject(1410,-1634.6000000,-2248.3000000,32.6000000,0.0000000,0.0000000,180.0000000); //object(dyn_f_r_wood_1b)(1)
	CreateDynamicObject(1410,-1636.5000000,-2231.7000000,32.6000000,0.0000000,0.0000000,2.0000000); //object(dyn_f_r_wood_1b)(2)
	CreateDynamicObject(1410,-1632.9004000,-2231.5000000,32.6000000,0.0000000,0.0000000,2.0000000); //object(dyn_f_r_wood_1b)(3)
	CreateDynamicObject(1410,-1638.3000000,-2235.0000000,32.6000000,0.0000000,0.0000000,272.0000000); //object(dyn_f_r_wood_1b)(4)
	CreateDynamicObject(1410,-1630.7000000,-2248.1001000,32.6000000,0.0000000,0.0000000,179.9950000); //object(dyn_f_r_wood_1b)(5)
	CreateDynamicObject(1410,-1628.0000000,-2244.5000000,32.6000000,0.0000000,0.0000000,270.0000000); //object(dyn_f_r_wood_1b)(6)
	CreateDynamicObject(1410,-1628.2998000,-2234.3994000,32.6000000,0.0000000,0.0000000,270.0000000); //object(dyn_f_r_wood_1b)(7)
	CreateDynamicObject(1410,-1637.8000000,-2245.0000000,32.6000000,0.0000000,0.0000000,272.0000000); //object(dyn_f_r_wood_1b)(8)
	CreateDynamicObject(1097,-1628.7000000,-2236.2000000,32.5000000,0.0000000,0.0000000,190.0000000); //object(wheel_gn4)(1)
	CreateDynamicObject(1083,-1628.6000000,-2237.7000000,32.5000000,0.0000000,0.0000000,180.0000000); //object(wheel_lr2)(1)
	CreateDynamicObject(1010,-1632.9000000,-2246.1001000,31.7000000,0.0000000,0.0000000,332.0000000); //object(nto_b_tw)(1)
	CreateDynamicObject(1009,-1632.6000000,-2245.1001000,31.7000000,0.0000000,0.0000000,90.0000000); //object(nto_b_s)(1)
	CreateDynamicObject(1362,-1639.4000000,-2232.8999000,31.1000000,0.0000000,0.0000000,0.0000000); //object(cj_firebin)(1)
	CreateDynamicObject(1362,-1639.4000000,-2233.8999000,31.1000000,0.0000000,0.0000000,0.0000000); //object(cj_firebin)(2)
	CreateDynamicObject(2041,-1633.3000000,-2238.2000000,31.9000000,0.0000000,0.0000000,30.0000000); //object(ammo_box_m2)(2)
	CreateDynamicObject(363,-1628.4000000,-2247.7000000,31.9000000,0.0000000,0.0000000,180.0000000); //object(1)
	CreateDynamicObject(363,-1628.7000000,-2247.7000000,31.9000000,0.0000000,0.0000000,179.9950000); //object(2)
	CreateDynamicObject(363,-1628.2000000,-2247.3999000,31.9000000,0.0000000,0.0000000,229.9950000); //object(3)
	CreateDynamicObject(363,-1628.2000000,-2247.3000000,32.5000000,0.0000000,0.0000000,239.9930000); //object(4)
	CreateDynamicObject(359,-1628.3000000,-2246.3000000,31.0000000,0.0000000,0.0000000,270.0000000); //object(5)
	CreateDynamicObject(348,-1628.2000000,-2246.8999000,32.4000000,0.0000000,0.0000000,270.0000000); //object(6)
	CreateDynamicObject(348,-1628.3000000,-2246.3999000,32.4000000,0.0000000,0.0000000,270.0000000); //object(7)
	CreateDynamicObject(348,-1628.3000000,-2245.8999000,32.4000000,0.0000000,0.0000000,270.0000000); //object(8)
	CreateDynamicObject(348,-1628.3000000,-2245.3999000,32.4000000,0.0000000,0.0000000,270.0000000); //object(9)
	CreateDynamicObject(349,-1628.2000000,-2246.8000000,32.9000000,0.0000000,0.0000000,274.0000000); //object(10)
	CreateDynamicObject(2901,-1632.3000000,-2238.7000000,30.9000000,0.0000000,0.0000000,270.0000000); //object(kmb_marijuana)(1)
	CreateDynamicObject(2901,-1628.2000000,-2245.7000000,33.0000000,0.0000000,0.0000000,270.0000000); //object(kmb_marijuana)(2)
	CreateDynamicObject(1933,-1632.7000000,-2243.8999000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(1)
	CreateDynamicObject(1933,-1632.9000000,-2243.8999000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(2)
	CreateDynamicObject(1933,-1633.1000000,-2243.8999000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(3)
	CreateDynamicObject(1933,-1633.0000000,-2244.0000000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(4)
	CreateDynamicObject(1933,-1632.8000000,-2244.0000000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(5)
	CreateDynamicObject(1933,-1632.9000000,-2244.1001000,31.7000000,0.0000000,0.0000000,0.0000000); //object(chip_stack16)(6)
	CreateDynamicObject(2901,-1628.2000000,-2247.1001000,33.0000000,0.0000000,0.0000000,270.0000000); //object(kmb_marijuana)(3)
	CreateDynamicObject(2901,-1629.3000000,-2247.6001000,32.4000000,0.0000000,0.0000000,180.0000000); //object(kmb_marijuana)(4)
	CreateDynamicObject(3026,-1629.1000000,-2247.8000000,31.8000000,0.0000000,0.0000000,174.0000000); //object(para_pack)(1)
	CreateDynamicObject(3026,-1629.7000000,-2247.8000000,31.8000000,0.0000000,0.0000000,173.9960000); //object(para_pack)(2)
	CreateDynamicObject(3111,-1631.8000000,-2246.2000000,30.5000000,0.0000000,0.0000000,182.0000000); //object(st_arch_plan)(1)
	CreateDynamicObject(363,-1634.7402300,-2246.1621100,31.1775900,0.0000000,0.0000000,0.0000000); //object(11)
	CreateDynamicObject(363,-1633.4000000,-2244.0000000,31.9000000,0.0000000,0.0000000,330.0000000); //object(12)
	CreateDynamicObject(363,-1633.2000000,-2244.3999000,31.9000000,0.0000000,0.0000000,9.9960000); //object(13)
	CreateDynamicObject(363,-1632.7000000,-2244.1001000,31.9000000,0.0000000,0.0000000,269.9920000); //object(14)
	CreateDynamicObject(363,-1633.3000000,-2244.5000000,31.9000000,0.0000000,0.0000000,269.9890000); //object(15)
	CreateDynamicObject(364,-1631.3000000,-2247.2000000,31.4000000,0.0000000,0.0000000,330.0000000); //object(16)
	CreateDynamicObject(2967,-1632.7000000,-2244.6001000,31.7000000,0.0000000,0.0000000,320.0000000); //object(mobile1993a)(1)
	CreateDynamicObject(2967,-1633.4000000,-2244.3999000,31.7000000,0.0000000,0.0000000,359.9990000); //object(mobile1993a)(2)
	CreateDynamicObject(2967,-1633.2000000,-2246.3000000,31.7000000,0.0000000,0.0000000,289.9950000); //object(mobile1993a)(3)
	CreateDynamicObject(2967,-1632.9000000,-2245.3999000,31.7000000,0.0000000,0.0000000,249.9900000); //object(mobile1993a)(4)
	CreateDynamicObject(2967,-1631.5000000,-2236.6001000,31.7000000,0.0000000,0.0000000,249.9880000); //object(mobile1993a)(5)
	CreateDynamicObject(2967,-1631.4000000,-2236.1001000,31.7000000,0.0000000,0.0000000,249.9880000); //object(mobile1993a)(6)
	CreateDynamicObject(2967,-1631.9000000,-2236.6001000,31.7000000,0.0000000,0.0000000,299.9880000); //object(mobile1993a)(7)
	CreateDynamicObject(2967,-1637.6000000,-2236.1001000,31.5000000,0.0000000,0.0000000,59.9870000); //object(mobile1993a)(8)
	CreateDynamicObject(2967,-1637.7000000,-2234.5000000,31.5000000,0.0000000,0.0000000,99.9850000); //object(mobile1993a)(9)
	CreateDynamicObject(2966,-1637.7000000,-2235.3000000,31.5000000,0.0000000,0.0000000,0.0000000); //object(mobile1993b)(1)
	CreateDynamicObject(2966,-1631.3000000,-2236.5000000,31.7000000,0.0000000,0.0000000,0.0000000); //object(mobile1993b)(2)
	CreateDynamicObject(2966,-1631.5000000,-2236.3999000,31.7000000,0.0000000,0.0000000,24.0000000); //object(mobile1993b)(3)
	CreateDynamicObject(1279,-1629.1000000,-2247.8000000,32.8000000,0.0000000,0.0000000,0.0000000); //object(craigpackage)(2)
	CreateDynamicObject(964,-1636.2000000,-2246.3000000,30.5000000,0.0000000,0.0000000,182.0000000); //object(cj_metal_crate)(1)
	CreateDynamicObject(964,-1634.7000000,-2246.2000000,30.5000000,0.0000000,0.0000000,184.0000000); //object(cj_metal_crate)(1)
	
	//PayNSpray - Map by Shirayama
	CreateDynamicObject(3055,2394.8000000,1483.4000000,12.0000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (2)
	CreateDynamicObject(3055,2389.8000000,1483.4000000,12.0000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (3)
	CreateDynamicObject(3055,-2427.5000000,1028.2000000,51.6000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (4)
	CreateDynamicObject(3055,-2422.5000000,1028.2000000,51.6000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (5)
	CreateDynamicObject(3055,-1901.9000000,277.7999900,42.2000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (6)
	CreateDynamicObject(3055,-99.9000000,1111.5000000,20.9000000,0.0000000,0.0000000,0.0000000); //object(kmb_shutter) (7)
	CreateDynamicObject(3055,-1906.9004000,277.7999900,42.2000000,0.0000000,90.0000000,0.0000000); //object(kmb_shutter) (8)
	CreateDynamicObject(3055,1968.5000000,2162.8000000,12.0000000,0.0000000,0.0000000,270.0000000); //object(kmb_shutter) (9)
	CreateDynamicObject(3055,-1420.8000000,2591.2000000,57.0000000,0.0000000,0.0000000,0.0000000); //object(kmb_shutter) (10)
	CreateDynamicObject(3051,-1421.4000000,2591.2000000,60.6000000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,-1423.7000000,2591.2000000,59.3600000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (2)
	CreateDynamicObject(3051,-1422.5000000,2591.2000000,59.3600000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (3)
	CreateDynamicObject(3051,-1420.2000000,2591.2000000,60.6000000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (4)
	CreateDynamicObject(3051,-1419.0000000,2591.2000000,60.6000000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (5)
	CreateDynamicObject(3051,-1417.8000000,2591.2000000,59.3600000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (6)
	CreateDynamicObject(3051,-1416.8000000,2591.2000000,59.3000000,0.0000000,0.0000000,136.5000000); //object(lift_dr) (7)
	CreateDynamicObject(3051,-103.6000000,1111.4000000,23.2780000,0.0000000,0.0000000,136.3500000); //object(lift_dr) (8)
	CreateDynamicObject(3051,-102.4000000,1111.4000000,23.2780000,0.0000000,0.0000000,136.3500000); //object(lift_dr) (9)
	CreateDynamicObject(3051,-101.2000000,1111.4000000,24.5000000,0.0000000,0.0000000,136.3460000); //object(lift_dr) (10)
	CreateDynamicObject(3051,-100.0000000,1111.4000000,24.5000000,0.0000000,0.0000000,136.3460000); //object(lift_dr) (11)
	CreateDynamicObject(3051,-98.8000000,1111.4000000,24.5000000,0.0000000,0.0000000,136.3460000); //object(lift_dr) (12)
	CreateDynamicObject(3051,-97.6000000,1111.4000000,23.2780000,0.0000000,0.0000000,136.3460000); //object(lift_dr) (13)
	CreateDynamicObject(3051,-96.4000000,1111.4000000,23.2780000,0.0000000,0.0000000,136.3460000); //object(lift_dr) (14)
	CreateDynamicObject(3055,2071.6001000,-1831.9000000,14.7000000,0.0000000,0.0000000,270.0000000); //object(kmb_shutter) (12)
	CreateDynamicObject(3055,1025.3000000,-1029.4000000,33.3000000,0.0000000,0.0000000,0.0000000); //object(kmb_shutter) (13)
	CreateDynamicObject(3055,488.3999900,-1735.2000000,12.3000000,0.0000000,359.0000000,352.0000000); //object(kmb_shutter) (14)
	CreateDynamicObject(3055,720.2000100,-462.3999900,16.8000000,0.0000000,0.0000000,0.0000000); //object(kmb_shutter) (15)
	
	//Parkplatz Zivispawn + Busfahrer Base - Map by Shirayama
	CreateDynamicObject(982, 1538.25000, -2309.30005, 13.20000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(982, 1525.40002, -2340.10010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1538.29004, -2328.50000, 13.16000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(983, 1538.30005, -2336.50000, 13.20000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(982, 1576.50000, -2368.25000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1550.90002, -2368.22998, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1525.30005, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1499.69995, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1484.37000, -2355.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1500.30005, -2340.19995, 13.20000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(983, 1487.59998, -2341.80005, 13.20000,   0.00000, 0.00000, 279.00000);
	CreateDynamicObject(983, 1493.90002, -2340.80005, 13.20000,   0.00000, 0.00000, 278.99799);
	CreateDynamicObject(983, 1511.00000, -2340.09961, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1506.20020, -2340.09961, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1488.50000, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1484.80005, -2368.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1484.40002, -2342.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.40002, -2340.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1562.90002, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1556.50000, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1566.09998, -2309.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.09998, -2323.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1579.00000, -2337.35010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1566.30005, -2337.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6296, 1526.59998, -2328.60010, 14.80000,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(10183, 1454.79395, -2446.03125, 12.46998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1535.00000, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1533.40002, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1529.90002, -2299.60010, 13.20000,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(983, 1529.30005, -2304.39990, 13.20000,   0.00000, 0.00000, 351.99600);
	CreateDynamicObject(983, 1527.80005, -2310.60010, 13.20000,   0.00000, 0.00000, 339.79999);
	CreateDynamicObject(984, 1504.30005, -2337.30005, 13.20000,   0.00000, 0.00000, 295.79999);
	CreateDynamicObject(983, 1512.50000, -2332.39990, 13.20000,   0.00000, 0.00000, 311.00000);
	CreateDynamicObject(983, 1526.69995, -2313.60010, 13.20000,   0.00000, 0.00000, 339.79999);
	CreateDynamicObject(1361, 1525.00000, -2317.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1515.40002, -2330.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1501.50000, -2339.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1515.19995, -2339.60010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1536.50000, -2338.69995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.30005, -2332.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1529.09998, -2339.39990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.50000, -2325.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.40002, -2318.60010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.00000, -2311.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.09998, -2304.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.30005, -2297.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1522.09998, -2339.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1508.59998, -2339.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1531.30005, -2297.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1518.50000, -2336.39990, 15.70000,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(9833, 1531.90002, -2319.69995, 15.70000,   0.00000, 0.00000, 337.99701);
	CreateDynamicObject(3660, 1535.09998, -2307.80005, 15.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.59998, -2299.19995, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.40002, -2304.69995, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.19995, -2310.39990, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.00000, -2316.00000, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1360, 1533.40002, -2302.00000, 13.30000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1360, 1533.19995, -2307.60010, 13.30000,   0.00000, 0.00000, 357.99500);
	CreateDynamicObject(1360, 1533.09998, -2313.19995, 13.30000,   0.00000, 0.00000, 357.99500);
	CreateDynamicObject(869, 1515.69995, -2333.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1511.09998, -2337.89990, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1517.30005, -2335.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1513.59998, -2334.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1515.90002, -2338.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1506.80005, -2338.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1515.59998, -2336.19995, 12.80000,   0.00000, 0.00000, 298.00000);
	CreateDynamicObject(870, 1508.30005, -2337.80005, 12.80000,   0.00000, 0.00000, 7.99900);
	CreateDynamicObject(870, 1512.19995, -2335.50000, 12.80000,   0.00000, 0.00000, 315.99799);
	CreateDynamicObject(859, 1513.59998, -2338.89990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1514.09998, -2336.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1515.69995, -2334.89990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1515.69995, -2332.10010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1510.59998, -2336.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1509.69995, -2336.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1507.09998, -2339.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1504.50000, -2339.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1510.19995, -2338.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1517.69995, -2334.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(817, 1513.90002, -2337.39990, 13.00000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(817, 1505.69995, -2338.19995, 13.00000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(817, 1517.69995, -2337.80005, 13.00000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(817, 1511.69995, -2335.39990, 13.00000,   0.00000, 0.00000, 259.99799);
	CreateDynamicObject(817, 1514.50000, -2333.19995, 13.00000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1509.80005, -2336.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1512.09998, -2334.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1515.19995, -2332.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1516.59998, -2330.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1503.50000, -2338.89990, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(871, 1513.59998, -2338.89990, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 1505.09998, -2338.89990, 12.80000,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(869, 1519.80005, -2337.39990, 13.00000,   0.00000, 0.00000, 328.50000);
	CreateDynamicObject(870, 1519.19995, -2335.39990, 12.80000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(871, 1517.80005, -2333.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1519.30005, -2338.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1521.50000, -2337.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1343, 1535.09998, -2297.50000, 13.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1566.12000, -2350.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1566.11951, -2361.50000, 13.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1566.09998, -2368.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1539.80005, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8843, 1545.02002, -2307.99121, 12.56130,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8843, 1551.16235, -2307.99121, 12.56130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1577.69995, -2342.19995, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1586.80005, -2353.19995, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1569.15002, -2352.89990, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1577.69995, -2364.00000, 15.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(983, 1574.69995, -2347.30005, 13.20000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(983, 1571.90002, -2352.10010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1571.90002, -2353.69995, 13.20000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(983, 1574.69995, -2358.50000, 13.20000,   0.00000, 0.00000, 59.99500);
	CreateDynamicObject(983, 1580.30005, -2347.30005, 13.20000,   0.00000, 0.00000, 59.99100);
	CreateDynamicObject(983, 1580.30005, -2358.50000, 13.20000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(983, 1583.09998, -2352.10010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1583.09998, -2353.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6965, 1577.69995, -2352.89990, 15.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1574.40002, -2350.30005, 13.00000,   0.00000, 0.00000, 352.00000);
	CreateDynamicObject(869, 1579.40002, -2356.69995, 13.00000,   0.00000, 0.00000, 21.99600);
	CreateDynamicObject(870, 1576.90002, -2347.80005, 12.80000,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(870, 1574.19995, -2353.00000, 12.80000,   0.00000, 0.00000, 309.99899);
	CreateDynamicObject(870, 1576.69995, -2357.30005, 12.80000,   0.00000, 0.00000, 39.99600);
	CreateDynamicObject(870, 1581.19995, -2355.00000, 12.80000,   0.00000, 0.00000, 79.99600);
	CreateDynamicObject(871, 1574.30005, -2355.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1581.90002, -2353.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1578.90002, -2348.60010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1580.69995, -2350.69995, 13.00000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(869, 1574.69995, -2355.60010, 13.00000,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(870, 1578.59998, -2348.80005, 12.80000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(759, 1577.00000, -2351.00000, 12.60000,   0.00000, 0.00000, 326.00000);
	CreateDynamicObject(759, 1577.09998, -2354.89990, 12.60000,   0.00000, 0.00000, 85.99700);
	CreateDynamicObject(759, 1579.69995, -2352.89990, 12.60000,   0.00000, 0.00000, 207.99500);
	CreateDynamicObject(759, 1575.59998, -2352.69995, 12.60000,   0.00000, 0.00000, 207.99300);
	CreateDynamicObject(759, 1579.09998, -2351.30005, 12.60000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(759, 1578.80005, -2354.60010, 12.60000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(673, 1582.50000, -2345.60010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1582.50000, -2360.39990, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1572.30005, -2345.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1572.40002, -2360.50000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1574.80005, -2348.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1575.80005, -2357.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1577.59998, -2358.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1581.80005, -2356.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1582.00000, -2350.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1574.09998, -2352.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1575.59998, -2350.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1581.50000, -2351.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1579.30005, -2356.39990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1577.09998, -2348.19995, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1574.59998, -2353.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1538.19995, -2263.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1538.19995, -2246.10010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1525.40002, -2232.60010, 13.20000,   0.00000, 0.00000, 88.90000);
	CreateDynamicObject(982, 1509.40002, -2232.30005, 13.20000,   0.00000, 0.00000, 88.89600);
	CreateDynamicObject(983, 1487.59998, -2231.00000, 13.20000,   0.00000, 0.00000, 262.00000);
	CreateDynamicObject(983, 1493.90002, -2231.80005, 13.20000,   0.00000, 0.00000, 261.99600);
	CreateDynamicObject(982, 1484.50000, -2217.60010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1497.30005, -2204.77002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1522.90002, -2204.77002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1548.50000, -2204.77002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1574.09998, -2204.77002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1590.09998, -2204.77002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1484.50000, -2230.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1484.59998, -2204.80005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.09998, -2233.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1535.00000, -2276.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1533.40002, -2276.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1566.09998, -2263.60010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.09961, -2238.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.09998, -2218.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1566.09998, -2205.39990, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1578.90002, -2237.10010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1562.90002, -2276.39990, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1536.59998, -2276.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1561.29980, -2276.39941, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1502.69995, -2234.69995, 13.20000,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(983, 1499.71497, -2233.55664, 13.20000,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(713, 1527.40002, -2243.19995, 12.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(673, 1496.59998, -2232.19995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1530.50000, -2276.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.80005, -2276.10010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.80005, -2264.69995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.80005, -2243.69995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.40039, -2233.89941, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1528.69995, -2233.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1518.30005, -2233.19995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.50000, -2253.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1508.00000, -2232.89990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 1547.59998, -2276.30005, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8041, 1548.79980, -2276.70020, 18.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(968, 1550.04004, -2276.30005, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1547.80005, -2276.30005, 12.60000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(966, 1549.90002, -2276.30005, 12.60000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(4641, 1548.90002, -2276.60010, 14.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(6965, 1577.00391, -2220.60376, 16.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1525.80005, -2234.89990, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1534.90002, -2265.50000, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1534.90002, -2245.89990, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1516.69995, -2235.50000, 15.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1361, 1506.30005, -2236.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1526.69995, -2243.39990, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1526.90002, -2241.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1527.19995, -2244.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1528.80005, -2244.19995, 12.80000,   0.00000, 0.00000, 328.00000);
	CreateDynamicObject(871, 1528.09998, -2241.60010, 12.80000,   0.00000, 0.00000, 337.99701);
	CreateDynamicObject(869, 1528.69995, -2242.80005, 13.00000,   0.00000, 0.00000, 252.00000);
	CreateDynamicObject(1368, 1510.40002, -2236.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1515.59998, -2236.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1520.50000, -2236.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1525.69995, -2236.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1531.19995, -2236.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1533.09998, -2239.89990, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2245.10010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2250.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2255.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2260.60010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2265.69995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 1533.09998, -2270.80005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1513.00000, -2236.69995, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1518.09998, -2236.69995, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1523.09998, -2236.60010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1528.40002, -2236.69995, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.19995, -2237.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.09998, -2242.60010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.00000, -2247.89990, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.09998, -2253.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.00000, -2258.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.00000, -2263.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.00000, -2268.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1533.00000, -2273.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1343, 1533.09998, -2274.69995, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1343, 1507.90002, -2236.60010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 1506.40002, -2236.69995, 12.50000,   0.00000, 0.00000, 326.00000);
	CreateDynamicObject(997, 1509.50000, -2238.80005, 12.50000,   0.00000, 0.00000, 325.99701);
	CreateDynamicObject(997, 1529.50000, -2273.10010, 12.50000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(997, 1528.90002, -2269.39990, 12.50000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(997, 1528.30005, -2265.69995, 12.50000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(870, 1570.59998, -2207.19995, 12.80000,   0.00000, 0.00000, 350.00000);
	CreateDynamicObject(870, 1569.09998, -2212.69995, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1574.59998, -2208.60010, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1581.80005, -2207.30005, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1585.50000, -2210.39990, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1568.80005, -2229.19995, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1570.80005, -2234.39990, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1576.30005, -2232.10010, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1581.80005, -2234.50000, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1584.59998, -2230.19995, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(870, 1587.40002, -2226.50000, 12.80000,   0.00000, 0.00000, 349.99701);
	CreateDynamicObject(869, 1572.59998, -2231.30005, 13.00000,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(869, 1581.00000, -2231.19995, 13.00000,   0.00000, 0.00000, 19.99900);
	CreateDynamicObject(869, 1576.59998, -2235.10010, 13.00000,   0.00000, 0.00000, 349.99500);
	CreateDynamicObject(869, 1578.09998, -2207.80005, 13.00000,   0.00000, 0.00000, 269.99100);
	CreateDynamicObject(869, 1571.50000, -2210.19995, 13.00000,   0.00000, 0.00000, 209.98900);
	CreateDynamicObject(869, 1585.09998, -2207.19995, 13.00000,   0.00000, 0.00000, 169.98700);
	CreateDynamicObject(869, 1586.80005, -2213.80005, 13.00000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(869, 1586.90002, -2229.39990, 13.00000,   0.00000, 0.00000, 89.98400);
	CreateDynamicObject(673, 1568.00000, -2206.60010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1568.19995, -2235.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1586.00000, -2206.50000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1585.90002, -2234.89990, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1568.19995, -2209.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1575.50000, -2206.60010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1573.19995, -2207.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1580.19995, -2209.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1580.19995, -2206.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1587.80005, -2209.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1582.00000, -2209.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1584.59998, -2209.39990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1586.50000, -2232.10010, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1583.40002, -2232.39990, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1578.40002, -2232.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1579.40002, -2235.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1583.40002, -2235.50000, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1573.30005, -2234.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.50000, -2232.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1567.90002, -2226.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1575.09998, -2231.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1570.40002, -2229.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1571.90002, -2232.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1574.50000, -2233.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1579.80005, -2233.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1585.00000, -2233.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1567.59998, -2232.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1567.50000, -2208.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1567.59998, -2214.00000, 12.80000,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(871, 1567.50000, -2230.10010, 12.80000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(871, 1587.40002, -2235.10010, 12.90000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(870, 1588.30005, -2216.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1588.30005, -2206.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1589.30005, -2223.60010, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1588.90002, -2234.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1588.80005, -2218.80005, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1589.09998, -2220.30005, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1588.90002, -2221.89990, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1583.40002, -2211.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1581.19995, -2210.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1578.59998, -2210.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1576.09998, -2210.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1573.09998, -2210.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1567.59998, -2224.39990, 12.80000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(870, 1568.50000, -2226.80005, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1570.28308, -2228.32886, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1572.08716, -2229.40063, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1568.21606, -2215.24585, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1567.31177, -2217.30859, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1567.15552, -2222.65894, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1577.72021, -2230.67065, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1580.82129, -2230.13745, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1583.06812, -2228.98877, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1584.90002, -2227.30005, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1586.28894, -2225.03442, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1586.80005, -2223.10010, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1587.50000, -2221.00000, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1587.69995, -2218.80005, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1587.19995, -2216.30005, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(870, 1584.88843, -2214.12158, 12.80000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(871, 1567.50000, -2211.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.80005, -2208.60010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.00000, -2206.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1572.19995, -2206.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.19995, -2233.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.09998, -2230.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.50000, -2227.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1567.69995, -2224.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1572.69995, -2229.60010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1577.50000, -2230.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1572.19995, -2236.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1569.90002, -2235.89990, 12.80000,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(871, 1567.40002, -2235.69995, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1585.69995, -2235.69995, 12.90000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1587.80005, -2217.60010, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1588.09998, -2220.60010, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1587.09998, -2225.50000, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1586.30005, -2226.89990, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1584.19995, -2212.89990, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1587.40002, -2211.50000, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1581.90002, -2211.60010, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1577.69995, -2210.50000, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1574.59998, -2210.30005, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1571.19995, -2211.80005, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1573.90002, -2206.00000, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1583.09998, -2206.10010, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1587.30005, -2205.89990, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1585.19995, -2205.80005, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1581.80005, -2233.19995, 12.80000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(1340, 1520.90002, -2246.50000, 13.70000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1341, 1526.19995, -2254.00000, 13.50000,   0.00000, 0.00000, 296.00000);
	CreateDynamicObject(1342, 1526.69995, -2255.89990, 13.60000,   0.00000, 0.00000, 204.00000);
	CreateDynamicObject(1341, 1520.19995, -2244.80005, 13.50000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(760, 1569.30005, -2210.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(760, 1583.00000, -2207.50000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(760, 1583.00000, -2233.89990, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(760, 1569.50000, -2234.19995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 1568.09998, -2207.10010, 12.60000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(759, 1586.40002, -2207.30005, 12.60000,   0.00000, 0.00000, 39.99600);
	CreateDynamicObject(759, 1585.59998, -2234.50000, 12.60000,   0.00000, 0.00000, 347.99600);
	CreateDynamicObject(759, 1568.40002, -2235.00000, 12.50000,   0.00000, 0.00000, 347.99200);
	CreateDynamicObject(8168, 1561.90002, -2273.30005, 14.50000,   0.00000, 0.00000, 196.50000);
	CreateDynamicObject(1244, 1563.30005, -2270.60010, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2942, 1564.90002, -2270.50000, 13.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8843, 1553.65613, -2263.66357, 12.55560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1544.02759, -2263.66357, 12.56130,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(871, 1567.16748, -2219.85205, 12.80000,   0.00000, 0.00000, -40.00000);
	
	//Garage Interior - Map by Shirayama
	CreateDynamicObject(9093,920.2999900,2588.2600000,-136.0500000,359.7000000,0.0000000,90.0000000); //object(cmdgrgdoor_lvs) (1)
	CreateDynamicObject(11292,920.2000100,2589.8301000,-132.5000000,90.0000000,0.0000000,0.0000000); //object(gasstatiohut) (1)
	CreateDynamicObject(11292,916.4000200,2589.8301000,-138.6000100,0.0000000,90.0000000,270.0000000); //object(gasstatiohut) (2)
	CreateDynamicObject(11292,929.4000200,2538.0000000,-132.5000000,270.0000000,180.0000000,180.0000000); //object(gasstatiohut) (3)
	CreateDynamicObject(11292,929.4003900,2538.0000000,-136.3000000,270.0000000,0.0000000,0.0000000); //object(gasstatiohut) (4)
	CreateDynamicObject(11292,926.2999900,2535.0000000,-136.3000000,90.0000000,0.0000000,270.0000000); //object(gasstatiohut) (5)
	CreateDynamicObject(11292,926.2999900,2535.0000000,-132.3000000,90.0000000,0.0000000,270.0000000); //object(gasstatiohut) (6)
	CreateDynamicObject(11292,926.2999900,2526.0000000,-136.3000000,90.0000000,0.0000000,270.0000000); //object(gasstatiohut) (7)
	CreateDynamicObject(11292,926.2999900,2526.0000000,-132.1000100,90.0000000,0.0000000,270.0000000); //object(gasstatiohut) (8)
	CreateDynamicObject(11292,920.2000100,2526.1001000,-136.3000000,270.0000000,180.0000000,180.0000000); //object(gasstatiohut) (9)
	CreateDynamicObject(11292,920.2000100,2526.1001000,-132.1000100,270.0000000,0.0000000,0.0000000); //object(gasstatiohut) (10)
	CreateDynamicObject(11292,911.2000100,2526.1001000,-132.1000100,270.0000000,180.0000000,180.0000000); //object(gasstatiohut) (11)
	CreateDynamicObject(11292,911.2000100,2526.1001000,-136.1000100,270.0000000,0.0000000,0.0000000); //object(gasstatiohut) (12)
	CreateDynamicObject(11292,902.2000100,2526.1001000,-136.1000100,270.0000000,180.0000000,180.0000000); //object(gasstatiohut) (13)
	CreateDynamicObject(11292,902.2000100,2526.1001000,-131.8999900,270.0000000,0.0000000,0.0000000); //object(gasstatiohut) (14)
	CreateDynamicObject(3498,924.7999900,2539.5000000,-133.2000000,0.0000000,0.0000000,0.0000000); //object(wdpillar01_lvs) (1)
	CreateDynamicObject(6387,916.7002000,2555.2998000,-134.2000000,0.0000000,0.0000000,0.0000000); //object(century03_law2) (2)
	
	//KFZ Tankstelle - Map by Shirayama
	CreateDynamicObject(3036, 1569.34424, -2156.86060, 12.96720,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(8947, 1571.63965, -2162.97534, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 1577.93616, -2172.75098, 12.54310,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2236, 1578.56384, -2171.38745, 12.54770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2855, 1578.07556, -2170.70435, 12.61150,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(2103, 1578.04272, -2170.91895, 13.05070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(941, 1565.45959, -2162.12720, 13.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18633, 1565.68518, -2162.37158, 13.51180,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18635, 1565.03613, -2162.54321, 13.47400,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(18634, 1565.62012, -2162.65918, 13.51390,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2601, 1565.02441, -2161.81641, 13.57430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2601, 1564.95422, -2162.94922, 13.57430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2601, 1565.21777, -2162.71875, 13.57430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1565.66016, -2160.63110, 12.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1565.26038, -2160.61182, 12.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1565.96277, -2173.00146, 12.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18452, 1540.91431, -2173.55005, 15.36000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1686, 1543.77039, -2173.57715, 12.60804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1686, 1538.17444, -2173.56787, 12.60804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10281, 1571.83936, -2176.12622, 17.62310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1559.01648, -2170.40479, 12.47840,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19385, 1558.58191, -2175.13892, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1555.37634, -2175.14063, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1564.98865, -2175.14478, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19401, 1553.83740, -2173.62354, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1553.84778, -2170.41187, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1553.84070, -2167.20605, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1555.37317, -2165.65088, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1558.58630, -2165.66138, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1561.79492, -2165.67285, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1563.92029, -2165.66943, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1553.82910, -2173.85303, 14.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2691, 1555.47705, -2175.03760, 14.57500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1562.65356, -2168.88916, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1560.26184, -2168.88110, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1554.31018, -2174.46118, 12.56480,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(19385, 1559.51440, -2167.35986, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2485, 1560.99341, -2169.37939, 13.64870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2655, 1553.98218, -2168.52930, 13.99920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2060, 1556.29822, -2166.04321, 12.66500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1561.02869, -2168.77222, 12.54630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1616, 1563.83838, -2174.67114, 15.73108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 1554.35144, -2166.15063, 15.73110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1885, 1559.81201, -2174.80225, 12.56631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2364, 1560.13660, -2175.53857, 12.54774,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 1565.37878, -2164.14990, 13.02560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2049, 1563.46277, -2174.99854, 13.77900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1650, 1560.31885, -2169.30225, 12.94000,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(1650, 1560.10718, -2169.55103, 12.92000,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1650, 1559.85999, -2169.25513, 12.92000,   0.00000, 0.00000, 9.00000);
	CreateDynamicObject(2385, 1553.90295, -2170.85010, 12.56350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1555.68579, -2175.58765, 12.94730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18635, 1553.99207, -2170.91650, 13.47400,   90.00000, 0.00000, 30.00000);
	CreateDynamicObject(18635, 1554.03491, -2169.42310, 13.47400,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(18633, 1554.21985, -2170.35400, 12.63550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18638, 1562.58289, -2169.20581, 13.68020,   0.00000, -90.00000, 230.00000);
	CreateDynamicObject(18645, 1561.66614, -2169.16968, 13.75090,   0.00000, 0.00000, -65.00000);
	CreateDynamicObject(18644, 1554.07178, -2170.35229, 13.50660,   90.00000, 0.00000, -30.00000);
	CreateDynamicObject(18641, 1561.59155, -2169.65430, 13.35050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 1561.79419, -2169.55737, 13.29050,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 1562.11182, -2169.55249, 13.29050,   -90.00000, 0.00000, 80.00000);
	CreateDynamicObject(1744, 1556.47192, -2165.61768, 13.91725,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19330, 1563.17224, -2169.24194, 13.71080,   0.00000, -90.00000, 140.00000);
	CreateDynamicObject(2690, 1554.17993, -2168.87842, 12.92650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2690, 1563.99597, -2172.39795, 12.92650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19308, 1556.50696, -2165.95850, 14.39660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19311, 1557.42151, -2165.96753, 14.39670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1559.02393, -2170.40381, 16.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19401, 1561.78467, -2175.15186, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1561.67822, -2175.13867, 14.62000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 1558.58203, -2175.32129, 15.49450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1557.77881, -2175.18066, 12.52300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19314, 1559.36047, -2167.35596, 15.26000,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(3633, 1565.98596, -2166.01709, 13.20560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2893, 1570.32886, -2162.50366, 11.70000,   -30.00000, 0.00000, 180.00000);
	CreateDynamicObject(2893, 1568.38831, -2162.50391, 11.70000,   -30.00000, 0.00000, 180.00000);
	CreateDynamicObject(1002, 1565.47888, -2164.14819, 13.49540,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(19371, 1573.78552, -2152.67773, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19417, 1573.78503, -2155.86938, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19398, 1575.30811, -2157.56323, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19444, 1577.70020, -2157.55103, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2972, 1565.40039, -2152.26099, 12.56550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2972, 1566.70093, -2152.24854, 12.56550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2972, 1566.01953, -2152.23999, 13.74550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1577.46045, -2153.07178, 12.94750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1573.88403, -2152.45703, 12.54720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2309, 1577.86292, -2154.33716, 12.54820,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19466, 1573.77002, -2155.99707, 15.06120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1712, 1578.05420, -2156.29663, 12.52790,   0.00000, 0.00000, -155.00000);
	CreateDynamicObject(1897, 1571.05762, -2156.72192, 13.68000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 1571.06128, -2152.12695, 13.68000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 1567.62561, -2156.76196, 13.68000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 1567.61914, -2152.15674, 13.68000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2254, 1577.25098, -2157.42871, 14.27690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2255, 1565.20862, -2153.97485, 13.72360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1244, 1571.91089, -2152.59009, 13.36000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1238, 1573.06030, -2152.67847, 12.86580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1573.08105, -2152.65918, 12.98580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1573.08093, -2152.65894, 13.16580,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19371, 1575.46484, -2155.86499, 15.96800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1575.46973, -2152.65698, 15.96800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19444, 1577.71338, -2155.87573, 15.97600,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19444, 1577.71460, -2152.44751, 15.97530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19121, 1576.18994, -2150.96045, 14.55500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1574.53870, -2157.57104, 12.53760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2074, 1576.42334, -2154.66016, 15.63650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 1578.33411, -2157.21631, 12.58890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.18396, -2170.43237, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.23901, -2168.24756, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.44702, -2165.10059, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1573.07654, -2171.14331, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1573.18091, -2168.98193, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1573.20532, -2166.90137, 18.18831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3785, 1564.85400, -2161.88745, 14.22000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(8948, 1571.63501, -2174.02148, 16.18000,   0.00000, 60.00000, 90.00000);
	CreateDynamicObject(3504, 1563.63269, -2164.66235, 13.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2607, 1562.86597, -2168.40747, 12.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1563.24438, -2167.39795, 12.56660,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2611, 1564.19165, -2167.41528, 14.03160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2368, 1561.03723, -2169.32178, 12.56530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 1553.79956, -2170.73755, 13.15090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1744, 1553.86499, -2170.73682, 12.73090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1744, 1553.86499, -2170.73682, 12.29090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2601, 1554.19006, -2171.12451, 13.17040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2601, 1554.17151, -2170.81982, 13.17040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2601, 1554.32166, -2170.90063, 13.17040,   0.00000, 0.00000, 199.00000);
	CreateDynamicObject(2583, 1554.20886, -2167.15063, 13.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2060, 1557.45947, -2166.02246, 12.66500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1556.86084, -2165.96167, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1563.82642, -2174.45264, 12.56545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1563.85522, -2169.43726, 12.56622,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 1554.01575, -2170.21313, 14.57010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2626, 1555.65527, -2173.88574, 13.08600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2059, 1554.57422, -2167.13086, 12.58460,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2059, 1554.23389, -2166.72266, 12.58460,   0.00000, 0.00000, 6.00000);
	CreateDynamicObject(617, 1518.21594, -2163.69849, 12.53791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1537.98999, -2176.60645, 13.16720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1543.71545, -2176.59058, 13.16720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 1563.83398, -2151.56592, 18.22810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 1553.33130, -2166.39673, 15.99080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1623, 1564.22986, -2153.22168, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1623, 1564.21362, -2155.88379, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2699, 1560.28992, -2172.04980, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1543.87061, -2172.72217, 12.96000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2690, 1538.28040, -2172.11206, 12.96000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7313, 1569.35132, -2151.06958, 16.38790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2654, 1578.26660, -2158.43726, 12.76390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(930, 1565.22961, -2172.53809, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(943, 1566.41943, -2173.76587, 13.32540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1650, 1565.83154, -2172.72803, 12.86000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(2893, 1568.39294, -2156.87036, 13.04000,   80.00000, 0.00000, 180.00000);
	CreateDynamicObject(2893, 1570.33276, -2156.86255, 13.04000,   80.00000, 0.00000, 180.00000);
	CreateDynamicObject(1744, 1575.43970, -2150.92310, 14.00260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1573.89050, -2154.75757, 12.57370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1549, 1574.17236, -2153.23145, 12.57360,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1786, 1573.89612, -2154.50342, 13.49750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1577.74524, -2151.70923, 13.03380,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2855, 1575.27625, -2151.28882, 14.34180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18638, 1575.66113, -2151.15601, 14.40190,   -5.00000, -90.00000, 60.00000);
	CreateDynamicObject(18631, 1573.70642, -2155.95776, 15.46850,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19171, 1578.54956, -2166.03735, 15.72090,   90.00000, -90.00000, 0.00000);
	CreateDynamicObject(19170, 1578.54504, -2164.54541, 15.72730,   90.00000, -90.00000, 0.00000);
	CreateDynamicObject(19169, 1578.54993, -2166.03711, 17.21540,   90.00000, -90.00000, 0.00000);
	CreateDynamicObject(19168, 1578.54993, -2164.53760, 17.21000,   90.00000, -90.00000, 0.00000);
	CreateDynamicObject(1499, 1562.51648, -2165.67017, 12.53760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19347, 1562.60425, -2168.21997, 13.38500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 1562.29968, -2168.27002, 13.40470,   90.00000, 0.00000, 30.00000);
	CreateDynamicObject(2190, 1563.25586, -2168.81567, 13.37920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2074, 1561.70679, -2167.42603, 15.66950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, 1559.46741, -2166.64307, 12.53610,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1549, 1559.79456, -2168.56519, 12.56690,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(18977, 1560.48682, -2172.08496, 13.98820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18978, 1560.20691, -2171.94678, 13.98840,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(18979, 1560.23035, -2172.26050, 13.98900,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(8843, 1549.52185, -2173.22754, 12.56390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1530.12085, -2172.66406, 12.56390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 1594.43835, -2160.83398, 12.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1584.19849, -2156.12061, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1594.50549, -2156.13550, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1583.95459, -2160.83813, 12.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1594.44019, -2170.44019, 12.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1583.95984, -2170.44116, 12.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1599.66370, -2161.30713, 14.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1599.68286, -2166.42578, 14.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1594.50403, -2175.24463, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1591.91846, -2175.23633, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1564.74951, -2166.59277, 15.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1579.55505, -2174.99902, 12.55150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(968, 1579.49268, -2175.02344, 13.30740,   0.00000, 6.00000, 0.00000);
	CreateDynamicObject(958, 1565.11157, -2169.23511, 13.42000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(959, 1565.08240, -2169.23145, 13.39380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2900, 1574.44751, -2152.08789, 16.05346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1575.31152, -2153.09790, 16.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1574.56555, -2153.02905, 16.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1574.95813, -2153.07104, 17.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2478, 1574.93127, -2154.11426, 16.33510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2694, 1574.29175, -2155.86401, 16.15450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2694, 1574.67944, -2155.88208, 16.15450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2694, 1575.04688, -2156.06079, 16.15450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2694, 1574.84814, -2156.02954, 16.39450,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2694, 1574.39722, -2156.01587, 16.39450,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1271, 1575.78223, -2156.78516, 16.40000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(2900, 1577.16760, -2153.29370, 16.05346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2900, 1577.27222, -2156.78418, 16.05346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4638, 1598.63184, -2173.40820, 14.26000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1537.87256, -2173.55957, 13.14670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1538.47522, -2173.55737, 13.14670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1543.43140, -2173.53125, 13.14670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1544.12488, -2173.62476, 13.14670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19360, 1577.03442, -2152.65063, 12.47620,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 1575.53650, -2152.65088, 12.47000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 1577.03271, -2155.86938, 12.47620,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 1575.58203, -2155.86401, 12.47000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8661, 1568.90967, -2164.78833, 12.55320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1548.92407, -2164.82007, 12.55320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1528.96375, -2164.88574, 12.55320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1576.85217, -2164.79248, 12.55000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1439, 1558.39624, -2152.13965, 12.55170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1330, 1565.20154, -2153.43774, 13.01340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 1598.66931, -2170.77490, 12.93110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1575.46753, -2151.00684, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1576.92749, -2150.99463, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19371, 1578.60022, -2152.58081, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1578.60461, -2155.80054, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1578.61365, -2155.98242, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3031, 1556.23779, -2171.58423, 17.66000,   0.00000, 0.00000, -150.00000);
	CreateDynamicObject(3042, 1579.01013, -2153.44458, 17.83510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2370, 1576.20642, -2164.97217, 12.55200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3111, 1576.50281, -2164.60693, 13.41590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3017, 1576.54932, -2165.10083, 12.83710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1576.86707, -2163.85742, 13.39680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18890, 1577.74036, -2157.77661, 13.40310,   -15.00000, 0.00000, 0.00000);
	CreateDynamicObject(19468, 1577.39429, -2157.83008, 12.63390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1577.52454, -2166.35352, 13.16000,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(1811, 1576.66321, -2162.68970, 13.16000,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1811, 1574.69446, -2165.01147, 13.16000,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1078, 1566.93799, -2152.45361, 14.24330,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(1077, 1565.97778, -2152.16235, 15.04330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1077, 1565.97778, -2152.16235, 15.26330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1008, 1565.01624, -2161.28540, 13.49440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1010, 1565.13574, -2169.96338, 14.30550,   0.00000, 0.00000, 75.00000);
	CreateDynamicObject(19166, 1564.24353, -2171.09692, 14.51260,   90.00000, -90.00000, 0.00000);
	CreateDynamicObject(19418, 1562.34497, -2168.64771, 13.38470,   90.00000, 0.00000, 60.00000);
	CreateDynamicObject(2161, 1563.15747, -2165.80054, 12.56590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1561.95667, -2168.29102, 14.32850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1775, 1563.76257, -2173.32104, 13.66000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2894, 1555.61426, -2173.47266, 13.61470,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(1424, 1580.12781, -2155.60840, 13.06780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1424, 1579.95374, -2154.65918, 13.06780,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1459, 1579.70361, -2152.11157, 13.14770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1459, 1583.55542, -2155.37524, 13.14770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1581.73181, -2155.46509, 12.86770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1581.73181, -2155.46509, 13.02770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1581.73181, -2155.46509, 13.24770,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1635, 1563.64954, -2170.48438, 16.92610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3036, 1557.53491, -2160.66431, 14.29070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10252, 1556.83728, -2161.89111, 14.16000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, 1557.51270, -2154.84912, 13.26930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, 1560.86816, -2151.53491, 13.26930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 1563.65125, -2162.96436, 13.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 1560.53516, -2152.03198, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1428, 1563.83215, -2153.30786, 13.98000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1264, 1558.78479, -2152.08032, 13.36058,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1558.09253, -2152.18945, 13.36060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1265, 1563.41553, -2152.12622, 12.95250,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(3015, 1559.58191, -2152.74072, 12.71220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 1560.31067, -2152.79053, 12.67390,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2969, 1560.31433, -2152.76245, 12.93390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3014, 1561.98022, -2152.06763, 12.77340,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(3014, 1561.94373, -2151.99463, 13.25340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 1564.01563, -2161.78857, 12.55305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 1564.18604, -2156.69067, 12.80740,   20.00000, 93.50000, 79.50000);
	
	//Busfahrer Base - Map by Shirayama
	//Bugfixes
	CreateDynamicObject(19454, 1553.33252, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1543.72412, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1534.37744, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1525.08948, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1515.62061, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1506.19702, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1496.68945, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1489.57141, -2363.35596, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1553.33252, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1543.70935, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1534.37744, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1525.08948, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1515.62061, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1506.19702, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1496.68945, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1489.57141, -2366.80005, 12.45800,   0.00000, 90.00000, 90.00000);
	//
	CreateDynamicObject(982, 1538.25000, -2309.30005, 13.20000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(982, 1525.40002, -2340.10010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1538.29004, -2328.50000, 13.16000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(983, 1538.30005, -2336.50000, 13.20000,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(982, 1576.50000, -2368.25000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1550.90002, -2368.22998, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1525.30005, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1499.69995, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1484.37000, -2355.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1500.30005, -2340.19995, 13.20000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(983, 1487.59998, -2341.80005, 13.20000,   0.00000, 0.00000, 279.00000);
	CreateDynamicObject(983, 1493.90002, -2340.80005, 13.20000,   0.00000, 0.00000, 278.99799);
	CreateDynamicObject(983, 1511.00000, -2340.09961, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1506.20020, -2340.09961, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1488.50000, -2368.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1484.80005, -2368.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1484.40002, -2342.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.40002, -2340.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1562.90002, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1556.50000, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(982, 1566.09998, -2309.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.09998, -2323.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1579.00000, -2337.35010, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1361, 1566.30005, -2337.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6296, 1526.59998, -2328.60010, 14.80000,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(10183, 1454.79395, -2446.03125, 12.46998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1535.00000, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1533.40002, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1529.90002, -2299.60010, 13.20000,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(983, 1529.30005, -2304.39990, 13.20000,   0.00000, 0.00000, 351.99600);
	CreateDynamicObject(983, 1527.80005, -2310.60010, 13.20000,   0.00000, 0.00000, 339.79999);
	CreateDynamicObject(984, 1504.30005, -2337.30005, 13.20000,   0.00000, 0.00000, 295.79999);
	CreateDynamicObject(983, 1512.50000, -2332.39990, 13.20000,   0.00000, 0.00000, 311.00000);
	CreateDynamicObject(983, 1526.69995, -2313.60010, 13.20000,   0.00000, 0.00000, 339.79999);
	CreateDynamicObject(1361, 1525.00000, -2317.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1515.40002, -2330.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1501.50000, -2339.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1515.19995, -2339.60010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1536.50000, -2338.69995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.30005, -2332.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1529.09998, -2339.39990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.50000, -2325.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.40002, -2318.60010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.00000, -2311.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.09998, -2304.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1537.30005, -2297.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1522.09998, -2339.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1508.59998, -2339.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1531.30005, -2297.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1518.50000, -2336.39990, 15.70000,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(9833, 1531.90002, -2319.69995, 15.70000,   0.00000, 0.00000, 337.99701);
	CreateDynamicObject(3660, 1535.09998, -2307.80005, 15.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.59998, -2299.19995, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.40002, -2304.69995, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.19995, -2310.39990, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1368, 1533.00000, -2316.00000, 13.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1360, 1533.40002, -2302.00000, 13.30000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1360, 1533.19995, -2307.60010, 13.30000,   0.00000, 0.00000, 357.99500);
	CreateDynamicObject(1360, 1533.09998, -2313.19995, 13.30000,   0.00000, 0.00000, 357.99500);
	CreateDynamicObject(869, 1515.69995, -2333.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1511.09998, -2337.89990, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1517.30005, -2335.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1513.59998, -2334.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1515.90002, -2338.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1506.80005, -2338.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1515.59998, -2336.19995, 12.80000,   0.00000, 0.00000, 298.00000);
	CreateDynamicObject(870, 1508.30005, -2337.80005, 12.80000,   0.00000, 0.00000, 7.99900);
	CreateDynamicObject(870, 1512.19995, -2335.50000, 12.80000,   0.00000, 0.00000, 315.99799);
	CreateDynamicObject(859, 1513.59998, -2338.89990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1514.09998, -2336.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1515.69995, -2334.89990, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1515.69995, -2332.10010, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1510.59998, -2336.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1509.69995, -2336.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1507.09998, -2339.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1504.50000, -2339.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1510.19995, -2338.00000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 1517.69995, -2334.30005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(817, 1513.90002, -2337.39990, 13.00000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(817, 1505.69995, -2338.19995, 13.00000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(817, 1517.69995, -2337.80005, 13.00000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(817, 1511.69995, -2335.39990, 13.00000,   0.00000, 0.00000, 259.99799);
	CreateDynamicObject(817, 1514.50000, -2333.19995, 13.00000,   0.00000, 0.00000, 259.99701);
	CreateDynamicObject(871, 1509.80005, -2336.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1512.09998, -2334.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1515.19995, -2332.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1516.59998, -2330.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1503.50000, -2338.89990, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(871, 1513.59998, -2338.89990, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 1505.09998, -2338.89990, 12.80000,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(869, 1519.80005, -2337.39990, 13.00000,   0.00000, 0.00000, 328.50000);
	CreateDynamicObject(870, 1519.19995, -2335.39990, 12.80000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(871, 1517.80005, -2333.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1519.30005, -2338.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1521.50000, -2337.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1343, 1535.09998, -2297.50000, 13.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1566.12000, -2350.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1566.11951, -2361.50000, 13.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1566.09998, -2368.10010, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1539.80005, -2296.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8843, 1545.00000, -2308.19995, 12.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3660, 1586.80005, -2353.19995, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1569.15002, -2352.89990, 15.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1577.69995, -2364.00000, 15.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(983, 1574.69995, -2347.30005, 13.20000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(983, 1571.90002, -2352.10010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1571.90002, -2353.69995, 13.20000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(983, 1574.69995, -2358.50000, 13.20000,   0.00000, 0.00000, 59.99500);
	CreateDynamicObject(983, 1580.30005, -2347.30005, 13.20000,   0.00000, 0.00000, 59.99100);
	CreateDynamicObject(983, 1580.30005, -2358.50000, 13.20000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(983, 1583.09998, -2352.10010, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1583.09998, -2353.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6965, 1577.69995, -2352.89990, 15.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1574.40002, -2350.30005, 13.00000,   0.00000, 0.00000, 352.00000);
	CreateDynamicObject(869, 1579.40002, -2356.69995, 13.00000,   0.00000, 0.00000, 21.99600);
	CreateDynamicObject(870, 1576.90002, -2347.80005, 12.80000,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(870, 1574.19995, -2353.00000, 12.80000,   0.00000, 0.00000, 309.99899);
	CreateDynamicObject(870, 1576.69995, -2357.30005, 12.80000,   0.00000, 0.00000, 39.99600);
	CreateDynamicObject(870, 1581.19995, -2355.00000, 12.80000,   0.00000, 0.00000, 79.99600);
	CreateDynamicObject(871, 1574.30005, -2355.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1581.90002, -2353.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1578.90002, -2348.60010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1580.69995, -2350.69995, 13.00000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(869, 1574.69995, -2355.60010, 13.00000,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(870, 1578.59998, -2348.80005, 12.80000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(759, 1577.00000, -2351.00000, 12.60000,   0.00000, 0.00000, 326.00000);
	CreateDynamicObject(759, 1577.09998, -2354.89990, 12.60000,   0.00000, 0.00000, 85.99700);
	CreateDynamicObject(759, 1579.69995, -2352.89990, 12.60000,   0.00000, 0.00000, 207.99500);
	CreateDynamicObject(759, 1575.59998, -2352.69995, 12.60000,   0.00000, 0.00000, 207.99300);
	CreateDynamicObject(759, 1579.09998, -2351.30005, 12.60000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(759, 1578.80005, -2354.60010, 12.60000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(673, 1582.50000, -2345.60010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1582.50000, -2360.39990, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1572.30005, -2345.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1572.40002, -2360.50000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1574.80005, -2348.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1575.80005, -2357.89990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1577.59998, -2358.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1581.80005, -2356.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1582.00000, -2350.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1574.09998, -2352.30005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1575.59998, -2350.10010, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1581.50000, -2351.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1579.30005, -2356.39990, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1577.09998, -2348.19995, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1574.59998, -2353.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	
	//Rollerverleih - Map by Daniel_LeMarc
	CreateDynamicObject(1571, 1681.32642, -2302.98633, 13.84100,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(2714, 1682.11523, -2303.22168, 15.42100,   0.00000, 0.00000, 61.00000);
	
	//LSPD Interior - Map by Daniel_LeMarc
	LSPDboden(CreateObject(19378, 1565.92297, -1673.52429, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1565.92297, -1663.89136, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1565.92297, -1654.26038, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1576.42297, -1673.52429, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1576.42297, -1663.89136, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1576.42297, -1654.26038, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1560.80554, -1664.33215, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1560.82544, -1654.70422, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1560.80554, -1673.96326, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1565.56921, -1677.92932, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1565.48413, -1650.50232, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1564.21985, -1659.31067, 1259.63660,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1564.21985, -1659.31067, 1264.24463,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19396, 1570.63879, -1659.31067, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1572.30017, -1659.62610, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19396, 1572.30017, -1666.04565, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1572.30017, -1672.46509, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1568.93872, -1677.95117, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1573.67090, -1673.22095, 1262.00061,   0.00000, 0.00000, 90.00000));
	CreateDynamicObject(18755, 1575.32471, -1675.13745, 1262.19495,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18756, 1575.34314, -1675.10229, 1262.16565,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18757, 1575.33899, -1675.10229, 1262.16565,   0.00000, 0.00000, -90.00000);
	LSPDwand(CreateDynamicObject(19460, 1578.40454, -1677.95166, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1583.03894, -1677.59583, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1583.03894, -1677.59583, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDboden(CreateObject(19378, 1586.92297, -1673.52429, 1256.66467,   0.00000, 90.00000, 0.00000));
	CreateDynamicObject(14414, 1583.80884, -1675.61328, 1256.92261,   0.00000, 0.00000, -90.00000);
	LSPDboden(CreateObject(19378, 1586.92297, -1663.89136, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1586.92297, -1654.26038, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1581.59021, -1673.04810, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1584.38879, -1673.64392, 1256.50061,   36.00000, 180.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1581.59021, -1663.41809, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1581.59021, -1653.78711, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1581.59021, -1653.78711, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1573.95911, -1654.88354, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1569.22717, -1650.15186, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1578.47034, -1654.85376, 1262.00061,   0.00000, 0.00000, 40.00000));
	LSPDboden(CreateObject(19378, 1597.42297, -1673.52429, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1597.42297, -1663.89136, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1592.66980, -1677.59583, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.29980, -1677.59583, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.39954, -1669.48950, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.39954, -1663.16541, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDzellboden(CreateObject(19380, 1597.42297, -1654.26038, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1596.97473, -1659.10022, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19396, 1592.24304, -1657.57947, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1597.01624, -1655.97754, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19396, 1592.24304, -1654.37048, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19396, 1592.24304, -1651.16455, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1597.04700, -1652.76807, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1597.47717, -1654.30518, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1593.55212, -1649.56433, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19396, 1587.13403, -1649.56433, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDzellboden(CreateObject(19380, 1586.92297, -1644.76038, 1256.68066,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1581.59021, -1644.15710, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1590.81421, -1644.71741, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1585.96497, -1643.67566, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDdecke(CreateDynamicObject(19377, 1565.92297, -1673.52429, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1565.92297, -1663.89136, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1565.92297, -1654.26038, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1576.42297, -1654.26038, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1576.42297, -1663.89136, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1576.42297, -1673.52429, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1586.92297, -1673.52429, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1597.42297, -1673.52429, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1597.42297, -1663.89136, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1586.92297, -1663.89136, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1586.92297, -1654.26038, 1263.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1592.66980, -1677.59583, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.29980, -1677.59583, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.39954, -1672.79639, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1602.39954, -1663.16541, 1262.00061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1603.19849, -1661.76477, 1258.50061,   0.00000, 0.00000, 45.00000));
	LSPDwand(CreateDynamicObject(19460, 1603.19849, -1661.76477, 1262.00061,   0.00000, 0.00000, 45.00000));
	LSPDwand(CreateDynamicObject(19460, 1596.97473, -1659.10022, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDdecke(CreateDynamicObject(19377, 1597.42297, -1654.26038, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1586.92297, -1644.76038, 1260.31665,   0.00000, 90.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1597.42297, -1663.89136, 1260.16467,   0.00000, 90.00000, 0.00000));
	CreateDynamicObject(14414, 1601.17798, -1670.85803, 1256.92261,   0.00000, 0.00000, 180.00000);
	LSPDwand(CreateDynamicObject(19460, 1598.98694, -1662.33325, 1258.50061,   0.00000, 0.00000, 0.00000));
	CreateDynamicObject(2774, 1592.98523, -1667.90771, 1258.63062,   0.00000, 0.00000, 0.00000);
	LSPDwand(CreateDynamicObject(19460, 1586.05212, -1649.56433, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1595.68213, -1649.56433, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1592.24304, -1654.36804, 1262.00061,   0.00000, 0.00000, 0.00000));
	CreateDynamicObject(2774, 1581.96667, -1672.93518, 1258.63062,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1592.23010, -1665.30701, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1595.75586, -1668.60120, 1260.73096,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2774, 1598.48523, -1667.90771, 1258.63062,   0.00000, 0.00000, 0.00000);
	LSPDwand(CreateDynamicObject(19460, 1599.19592, -1671.53943, 1256.50061,   36.00000, 180.00000, 0.00000));
	CreateDynamicObject(3850, 1581.58704, -1670.17310, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1581.58704, -1666.67310, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1581.58704, -1663.17310, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1581.58704, -1659.67310, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1592.23010, -1661.80701, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1592.23010, -1658.30701, 1260.73096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1587.22546, -1649.56287, 1258.00110,   0.00000, 0.00000, 180.00000); // Große Zelle zu
	CreateDynamicObject(19302, 1592.20129, -1651.05652, 1258.00110,   0.00000, 0.00000, -90.00000);	// Zelle 3 zu
	CreateDynamicObject(19302, 1592.20129, -1654.26855, 1258.00110,   0.00000, 0.00000, -90.00000);	// Zelle 2 zu
	CreateDynamicObject(19302, 1592.20129, -1657.47937, 1258.00110,   0.00000, 0.00000, -90.00000); // Zelle 1 zu
	CreateDynamicObject(3280, 1587.15808, -1644.44055, 1256.76013,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16644, 1583.84778, -1649.55127, 1258.35901,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16644, 1581.23181, -1649.55127, 1258.35901,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1569, 1560.87549, -1668.74182, 1260.24805,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1560.87146, -1665.74072, 1260.24805,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(632, 1562.58386, -1670.01941, 1260.68652,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1562.58386, -1664.51941, 1260.68652,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1592.65881, -1659.73206, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2166, 1582.17126, -1654.21729, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1581.68799, -1655.23425, 1256.74805,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1594.91162, -1659.18787, 1256.74414,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1597.15881, -1659.73206, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1597.15881, -1663.23206, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1592.65881, -1663.23206, 1256.75208,   0.00000, 0.00000, 0.00000);
	LSPDwand(CreateDynamicObject(19396, 1602.39954, -1675.90894, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1607.92297, -1673.52429, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19368, 1603.93652, -1673.82153, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1605.45874, -1669.08887, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDboden(CreateObject(19378, 1607.92297, -1663.89136, 1256.66467,   0.00000, 90.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1610.11304, -1665.93738, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1611.93079, -1677.59583, 1258.50061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1612.91821, -1673.34790, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDwand(CreateDynamicObject(19460, 1612.91821, -1663.71790, 1258.50061,   0.00000, 0.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1607.67700, -1673.52429, 1260.16467,   0.00000, 90.00000, 0.00000));
	LSPDdecke(CreateDynamicObject(19377, 1607.67700, -1663.89136, 1260.16467,   0.00000, 90.00000, 0.00000));
	CreateDynamicObject(2164, 1599.08911, -1669.48669, 1256.74414,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1599.13684, -1660.93665, 1258.25208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2000, 1590.39258, -1677.02136, 1256.74707,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1599.13684, -1664.55273, 1258.25208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2000, 1590.89258, -1677.02136, 1256.74707,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1591.39258, -1677.02136, 1256.74707,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1591.89258, -1677.02136, 1256.74707,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(631, 1589.59961, -1677.12146, 1257.65161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1598.70850, -1671.45569, 1257.65161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1598.54944, -1666.54333, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1591.85840, -1659.66772, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1591.93433, -1663.19568, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1595.73425, -1668.36707, 1257.44751,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19468, 1598.66541, -1663.70410, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19468, 1598.72681, -1660.20325, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19468, 1594.33008, -1659.89111, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19468, 1594.28564, -1663.43225, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1596.24182, -1667.35327, 1256.75208,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19468, 1594.43408, -1667.37720, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1595.25452, -1667.41016, 1260.05786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1597.25305, -1663.27380, 1260.05786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1597.25305, -1659.77380, 1260.05786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1592.75305, -1659.77380, 1260.05786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1592.75305, -1663.27380, 1260.05786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1582.22314, -1659.07227, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1582.22314, -1662.07227, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1582.22314, -1665.07227, 1256.75208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1582.22314, -1668.07227, 1256.75208,   0.00000, 0.00000, 0.00000);
	LSPDwand(CreateDynamicObject(19460, 1586.74121, -1663.47083, 1256.50061,   0.00000, 0.00000, 0.00000));
	CreateDynamicObject(632, 1587.63049, -1668.71716, 1257.19861,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1587.74072, -1673.04333, 1257.19861,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1581.67700, -1657.43140, 1256.74414,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1582.75159, -1672.80322, 1256.74805,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1582.29358, -1671.62061, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1587.62671, -1658.11792, 1257.19861,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1587.31982, -1663.72534, 1256.74475,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19468, 1587.18506, -1664.12451, 1256.84070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, 1586.98279, -1665.15771, 1256.74756,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1586.98694, -1666.17725, 1256.74756,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1586.98694, -1661.67725, 1256.74756,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1586.98694, -1659.67725, 1256.74756,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2725, 1587.40771, -1660.73035, 1257.15454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1594.29663, -1677.01489, 1256.74475,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1587.32825, -1667.07446, 1256.74707,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2000, 1587.32825, -1667.57446, 1256.74707,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1593.21875, -1663.77600, 1256.73950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1595.71399, -1666.46533, 1256.73950,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1806, 1598.23108, -1664.18152, 1256.73950,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1806, 1597.68323, -1660.46399, 1256.73950,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1806, 1593.28088, -1660.36621, 1256.73950,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1582.98730, -1659.80200, 1256.73950,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1582.99194, -1662.66443, 1256.73950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1582.87427, -1665.67676, 1256.73950,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(1806, 1582.95935, -1668.70422, 1256.73950,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1806, 1582.76794, -1654.13953, 1256.73950,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(945, 1586.93091, -1669.33398, 1268.73523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(945, 1586.93091, -1661.33398, 1268.73523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(945, 1586.93091, -1653.83398, 1268.73523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19165, 1596.04175, -1659.20642, 1261.97559,   90.00000, 90.00000, -90.00000);
	CreateDynamicObject(2310, 1596.92590, -1665.45569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1596.92590, -1663.95569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1595.92590, -1663.95569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1594.92590, -1663.95569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1593.92590, -1663.95569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1597.92590, -1663.95569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1597.92590, -1665.45569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1595.92590, -1665.45569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1594.92590, -1665.45569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2310, 1593.92590, -1665.45569, 1260.73572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2607, 1596.01550, -1661.38904, 1260.64746,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1593.26489, -1659.18933, 1260.24414,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1602.41821, -1662.14246, 1260.24597,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2167, 1602.41821, -1665.14246, 1260.24597,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(630, 1597.91711, -1659.59644, 1261.27563,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2310, 1601.89685, -1663.15247, 1260.73572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 1597.12170, -1677.50195, 1259.00159,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19173, 1591.12122, -1677.50049, 1259.00159,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19174, 1572.40100, -1669.67175, 1262.50159,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1572.63611, -1669.27405, 1260.24695,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1572.63611, -1670.27405, 1260.24695,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2195, 1572.85229, -1668.27405, 1260.86902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1602.42151, -1676.65918, 1256.73535,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14401, 1609.88745, -1670.90405, 1257.07593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1605.62598, -1672.72046, 1256.75195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1605.62598, -1669.72046, 1256.75195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1608.62366, -1666.12708, 1256.75195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1612.73071, -1668.76440, 1256.75195,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1612.73071, -1673.76440, 1256.75195,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1893, 1608.69690, -1669.29663, 1260.29187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1608.69690, -1672.79663, 1260.29187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 1605.47986, -1674.17358, 1256.73840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2843, 1611.37744, -1671.18945, 1256.74646,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18636, 1605.90002, -1672.88135, 1258.67639,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19099, 1608.28052, -1668.62988, 1257.46570,   -2.50000, -87.50000, 40.00000);
	CreateDynamicObject(630, 1606.22156, -1670.61206, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1612.39832, -1666.61902, 1257.77759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1576.24902, -1669.64197, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1576.24902, -1666.14197, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1576.24902, -1662.64197, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1576.24902, -1659.14197, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1562.75110, -1662.07361, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1562.75110, -1666.07361, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1562.75110, -1670.07361, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1562.75110, -1674.07361, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1566.75110, -1674.07361, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.15967, -1670.08215, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.15967, -1666.08215, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.15967, -1662.08215, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1568.58228, -1657.16443, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1564.08228, -1657.16443, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1564.08228, -1652.66443, 1263.84192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2112, 1575.37292, -1657.75671, 1260.63745,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1572.91467, -1658.56042, 1260.24841,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1574.03821, -1655.52856, 1260.24841,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1573.10486, -1655.62366, 1261.15161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1579.67712, -1657.07727, 1261.34485,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2195, 1578.76819, -1656.22583, 1260.86902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1581.09961, -1660.48657, 1260.87952,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1581.09961, -1666.98657, 1260.87952,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 1575.08826, -1655.47852, 1262.20544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2265, 1572.88586, -1657.58411, 1262.20544,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2611, 1572.16260, -1669.93811, 1261.90405,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2612, 1572.16260, -1662.43811, 1261.90405,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2614, 1560.93738, -1661.85266, 1262.40405,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1561.11414, -1662.60498, 1260.24866,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1561.11414, -1661.81897, 1260.24866,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, 1561.11414, -1661.04395, 1260.24866,   0.00000, 0.00000, -90.00000);
	LSPDwand(CreateDynamicObject(19460, 1557.42603, -1659.85229, 1262.00061,   0.00000, 0.00000, 90.00000));
	LSPDwand(CreateDynamicObject(19460, 1562.15686, -1655.12012, 1262.00061,   0.00000, 0.00000, 0.00000));
	CreateDynamicObject(2165, 1564.46936, -1658.71790, 1260.25134,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1567.57727, -1658.71790, 1260.25134,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1502, 1569.85315, -1659.33643, 1260.23535,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(1775, 1570.23425, -1672.66736, 1261.34485,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(631, 1571.50391, -1672.46411, 1261.15161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1571.74438, -1664.21704, 1260.86902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1562.27576, -1655.47998, 1260.24463,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2166, 1563.87842, -1652.58411, 1260.25134,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1568.61536, -1653.57043, 1260.25134,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2197, 1563.10950, -1657.64075, 1260.24463,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 1563.10950, -1656.64075, 1260.24463,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1563.94568, -1657.75610, 1260.24072,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(1806, 1566.79578, -1657.86523, 1260.24072,   0.00000, 0.00000, 2000.00000);
	CreateDynamicObject(1806, 1567.96069, -1653.09143, 1260.24072,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(1806, 1562.85596, -1652.42236, 1260.24072,   0.00000, 0.00000, -130.00000);
	CreateDynamicObject(2611, 1564.53577, -1650.63965, 1261.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1567.53577, -1650.63965, 1261.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1566.51685, -1677.84558, 1260.24805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1564.92932, -1677.28259, 1260.23987,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2195, 1561.71057, -1677.07996, 1260.86902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1561.46228, -1675.88989, 1260.23987,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2266, 1561.39624, -1674.99194, 1262.07703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2267, 1560.92615, -1672.34448, 1262.37195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2270, 1563.92468, -1677.34302, 1261.89685,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1893, 1595.41138, -1661.86292, 1263.74194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1595.41138, -1664.86292, 1263.74194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1589.91211, -1645.19702, 1257.37341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1589.91211, -1645.19702, 1258.43640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 1590.33704, -1648.77832, 1257.29041,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1368, 1583.87207, -1644.09534, 1257.43274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1596.06079, -1651.95471, 1257.37341,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1596.06079, -1655.18066, 1257.37341,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1596.06079, -1658.30066, 1257.37341,   0.00000, 0.00000, 90.00000);
	lspddoor = CreateObject(1495, 1572.32544, -1666.77991, 1260.23682,   0.00000, 0.00000, 90.00000); // Tür ist zu
	lspddoor2 = CreateObject(1495, -2458.99023, 513.31030, 24.0757,   0.00000, 0.00000, 180.00000); // zu
	//Tür Regierung
	lspddoor3 = CreateObject(1495, 1467.26086, -1808.37585, -42.96680,   0.00000, 0.00000, 90.00000);
	//CreateDynamicObjectEx(1495, -2458.99023, 513.31030, 24.0757,   0.00000, 0.00000, 90.00000, 150.0, 150.0);  //auf
	//CreateDynamicObject(1495, 1572.32544, -1666.77991, 1260.23682,   0.00000, 0.00000, 0.00000); // Tür ist auf
	CreateDynamicObject(2922, 1572.41479, -1664.87500, 1261.56433,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2922, 1572.18384, -1667.20996, 1261.56433,   0.00000, 0.00000, 90.00000);
	//CreateDynamicObject(19302, 1592.20129, -1656.17944, 1258.00110,   0.00000, 0.00000, -90.00000); // Zelle 1 auf
	//CreateDynamicObject(19302, 1592.20129, -1652.98865, 1258.00110,   0.00000, 0.00000, -90.00000);	// Zelle 2 auf
	//CreateDynamicObject(19302, 1592.20129, -1649.77649, 1258.00110,   0.00000, 0.00000, -90.00000); // Zelle 3 auf
	//CreateDynamicObject(19302, 1588.54553, -1649.56287, 1258.00110,   0.00000, 0.00000, 180.00000);	// Große Zelle auf
	
	//Zollstationen - Map by Daniel_LeMarc
	Zollboden(CreateDynamicObject(18766, 52.92030, -1531.75195, 3.87230,   90.00000, 0.00000, -8.50000));
	Zollwand(CreateDynamicObject(19362, 57.82330, -1531.64722, 6.11910,   0.00000, 0.00000, -8.50000));
	Zollwand(CreateDynamicObject(19435, 57.46840, -1534.02783, 6.11910,   0.00000, 0.00000, -8.50000));
	Zollwand(CreateDynamicObject(19362, 55.85970, -1534.51135, 6.11910,   0.00000, 0.00000, 81.50000));
	Zollwand(CreateDynamicObject(19408, 56.54610, -1529.91626, 6.11910,   0.00000, 0.00000, 81.50000));
	Zollwand(CreateDynamicObject(19362, 53.37150, -1529.44067, 6.11910,   0.00000, 0.00000, 81.50000));
	Zollwand(CreateDynamicObject(19362, 50.19600, -1528.96655, 6.11910,   0.00000, 0.00000, 81.50000));
	Zollwand(CreateDynamicObject(19391, 48.47030, -1530.24353, 6.11910,   0.00000, 0.00000, -8.50000));
	Zollwand(CreateDynamicObject(19435, 48.11450, -1532.62476, 6.11910,   0.00000, 0.00000, -8.50000));
	Zollwand(CreateDynamicObject(19362, 52.68380, -1534.03625, 6.11910,   0.00000, 0.00000, 81.50000));
	Zollwand(CreateDynamicObject(19408, 49.51240, -1533.55835, 6.11910,   0.00000, 0.00000, 81.50000));
	CreateDynamicObject(966, 55.66105, -1535.77344, 4.08410,   0.00000, 0.00000, 81.50000);
	CreateDynamicObject(966, 50.20954, -1527.86536, 4.02010,   0.00000, 0.00000, -98.50000);
	CreateDynamicObject(19466, 49.66439, -1533.53931, 6.85540,   0.00000, 0.00000, 81.50000);
	CreateDynamicObject(19466, 56.48126, -1529.93652, 6.85540,   0.00000, 0.00000, 81.50000);
	CreateDynamicObject(1495, 48.58050, -1529.47949, 4.35680,   0.00000, 0.00000, -98.50000);
	CreateDynamicObject(19273, 48.26450, -1531.24524, 5.48140,   0.00000, 0.00000, -98.50000);
	Zollbecken(CreateDynamicObject(2515, 49.36397, -1533.77515, 5.40870,   0.00000, 0.00000, -8.50000));
	Zollbecken(CreateDynamicObject(2515, 56.69300, -1529.70142, 5.40870,   0.00000, 0.00000, -188.50000));
	CreateDynamicObject(1999, 55.94430, -1530.41882, 4.36320,   0.00000, 0.00000, -8.50000);
	CreateDynamicObject(1999, 50.07789, -1533.07544, 4.36320,   0.00000, 0.00000, -188.50000);
	CreateDynamicObject(1663, 49.47076, -1531.88904, 4.79570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 56.26511, -1531.18140, 4.79570,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2199, 52.31107, -1529.40369, 4.36790,   0.00000, 0.00000, -8.50000);
	CreateDynamicObject(2608, 54.37058, -1533.98315, 5.08430,   0.00000, 0.00000, -188.50000);
	Zolldecke(CreateDynamicObject(19457, 53.15302, -1532.48096, 7.78750,   0.00000, 90.00000, 81.50000));
	Zolldecke(CreateDynamicObject(19457, 52.64160, -1532.40100, 7.78350,   0.00000, 90.00000, 81.50000));
	Zolldecke(CreateDynamicObject(19457, 53.39500, -1530.85681, 7.78150,   0.00000, 90.00000, 81.50000));
	Zolldecke(CreateDynamicObject(19457, 52.88640, -1530.78149, 7.78950,   0.00000, 90.00000, 81.50000));
	CreateDynamicObject(1237, 51.47913, -1520.33606, 4.15940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 54.53506, -1543.74219, 4.15940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 51.35996, -1533.85815, 6.70720,   0.00000, 6.50000, 78.50000);
	CreateDynamicObject(2921, 54.93110, -1529.59387, 6.70720,   0.00000, 6.50000, -98.50000);
	CreateDynamicObject(1495, 48.58050, -1529.47949, 4.35680,   0.00000, 0.00000, -8.50000);
	Zollboden(CreateDynamicObject(18765, 1750.99060, 513.50226, 25.00740,   0.00000, 0.00000, -19.00000));
	Zollboden(CreateDynamicObject(18765, 1723.27649, 522.91718, 25.00740,   0.00000, 0.00000, -19.00000));
	Zollboden(CreateDynamicObject(18764, 1721.71216, 526.08472, 28.50740,   0.00000, 0.00000, -19.00000));
	Zollboden(CreateDynamicObject(18764, 1752.83472, 510.21121, 28.50740,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19391, 1748.25049, 509.31189, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1747.30823, 511.24261, 29.25420,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(966, 1749.80640, 517.45148, 27.01540,   0.00000, 0.00000, -19.00000);
	Zollwand(CreateDynamicObject(19435, 1747.12488, 512.92737, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19408, 1746.94775, 514.61267, 29.25420,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19435, 1748.11975, 515.81427, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19435, 1749.03088, 516.26227, 29.25420,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19362, 1750.70435, 516.44519, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1753.74109, 515.39899, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1754.69348, 513.45538, 29.25420,   0.00000, 0.00000, -19.00000));
	Zolldecke(CreateDynamicObject(19377, 1750.47437, 511.68616, 31.04890,   0.00000, 90.00000, -19.00000));
	CreateDynamicObject(19425, 1742.62646, 511.61121, 27.45790,   0.00000, 0.00000, -19.00000);
	CreateDynamicObject(1214, 1745.01074, 510.60727, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1746.46045, 510.09912, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1745.37732, 511.73074, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1747.09827, 516.54199, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1747.44312, 517.50208, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1747.86426, 518.87604, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1745.79114, 512.97980, 27.05000,   0.00000, 0.00000, 0.00000);
	Zolldecke(CreateDynamicObject(19377, 1737.12073, 518.66125, 30.39090,   0.00000, 90.00000, -19.00000));
	Zollwand(CreateDynamicObject(19454, 1738.49976, 522.62018, 28.66130,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19454, 1741.43286, 516.60852, 28.66130,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19454, 1732.48792, 519.68713, 28.66130,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19454, 1735.42090, 513.67261, 28.66130,   0.00000, 0.00000, -109.00000));
	Zolldecke(CreateDynamicObject(19377, 1736.73645, 517.53412, 30.38690,   0.00000, 90.00000, -19.00000));
	Zollwand(CreateDynamicObject(19454, 1752.45569, 518.20209, 26.45330,   0.00000, 0.00000, -109.00000));
	Zollbecken(CreateDynamicObject(2515, 1746.70313, 514.65558, 28.56720,   0.00000, 0.00000, -109.00000));
	CreateDynamicObject(19466, 1746.90039, 514.47882, 30.16040,   0.00000, 0.00000, -19.00000);
	Zollwand(CreateDynamicObject(19391, 1726.23035, 527.04889, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1727.17395, 525.10950, 29.25420,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19435, 1727.35571, 523.43939, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19408, 1727.53625, 521.77002, 29.25420,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19435, 1726.36365, 520.56689, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19435, 1725.44788, 520.12372, 29.25420,   0.00000, 0.00000, -19.00000));
	Zollwand(CreateDynamicObject(19362, 1723.77686, 519.93927, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1720.74036, 520.98450, 29.25420,   0.00000, 0.00000, -109.00000));
	Zollwand(CreateDynamicObject(19362, 1719.80066, 522.91559, 29.25420,   0.00000, 0.00000, -19.00000));
	Zolldecke(CreateDynamicObject(19377, 1724.05481, 524.64081, 31.04890,   0.00000, 90.00000, -19.00000));
	Zollwand(CreateDynamicObject(19454, 1721.85474, 518.29382, 26.62130,   0.00000, 0.00000, -109.00000));
	CreateDynamicObject(966, 1724.28271, 518.72668, 27.41940,   0.00000, 0.00000, -199.00000);
	CreateDynamicObject(1214, 1726.35498, 517.39551, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1726.72302, 518.53705, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1727.13965, 519.72522, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1728.45764, 523.46124, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1729.27380, 525.85449, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1728.86194, 524.64044, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1728.06592, 526.25549, 27.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1727.55786, 521.69946, 30.16040,   0.00000, 0.00000, -19.00000);
	CreateDynamicObject(19425, 1731.57947, 524.66821, 26.95790,   0.00000, 0.00000, -19.00000);
	Zollbecken(CreateDynamicObject(2515, 1727.75439, 521.63232, 28.56720,   0.00000, 0.00000, -289.00000));
	CreateDynamicObject(1999, 1747.34143, 513.94055, 27.49710,   0.00000, 0.00000, -289.00000);
	CreateDynamicObject(1663, 1748.43958, 514.01422, 27.94610,   0.00000, 0.00000, -149.00000);
	Zollwand(CreateDynamicObject(19362, 1751.85291, 514.43903, 29.25420,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(2606, 1750.77441, 516.07288, 30.24570,   0.00000, 0.00000, -19.00000);
	CreateDynamicObject(2608, 1750.77441, 516.07690, 28.19270,   0.00000, 0.00000, -19.00000);
	CreateDynamicObject(957, 1749.47229, 513.58997, 30.94370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, 1747.54883, 509.53030, 27.49110,   0.00000, 0.00000, -19.00000);
	CreateDynamicObject(1495, 1747.54883, 509.53030, 27.49110,   0.00000, 0.00000, -289.00000);
	CreateDynamicObject(1999, 1727.13696, 522.41260, 27.49710,   0.00000, 0.00000, -109.00000);
	CreateDynamicObject(1663, 1726.11157, 522.16913, 27.94610,   0.00000, 0.00000, 39.00000);
	CreateDynamicObject(957, 1724.61267, 522.88324, 30.94370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 1723.84021, 520.25464, 28.19270,   0.00000, 0.00000, -199.00000);
	Zollwand(CreateDynamicObject(19362, 1722.82520, 522.02051, 29.25420,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(2606, 1723.97961, 520.25726, 30.24570,   0.00000, 0.00000, -199.00000);
	CreateDynamicObject(1495, 1726.96741, 526.81628, 27.49110,   0.00000, 0.00000, -199.00000);
	CreateDynamicObject(1495, 1726.96741, 526.81628, 27.49110,   0.00000, 0.00000, -109.00000);
	Zollwand(CreateDynamicObject(19435, 1727.94885, 527.39221, 25.76220,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(14416, 1726.55151, 529.73712, 24.30360,   0.00000, 0.00000, -199.00000);
	Zollwand(CreateDynamicObject(19435, 1724.02917, 528.53314, 25.76220,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(19273, 1725.28015, 527.45117, 28.68760,   0.00000, 0.00000, -199.00000);
	CreateDynamicObject(19273, 1749.32080, 508.89636, 28.68760,   0.00000, 0.00000, -19.00000);
	Zollboden(CreateDynamicObject(18765, 1724.41284, 526.20410, 24.45240,   0.00000, 0.00000, -19.00000));
	CreateDynamicObject(1214, 1728.66992, 529.68945, 26.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1726.79944, 530.34186, 26.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1724.96875, 530.93695, 26.55000,   0.00000, 0.00000, 0.00000);
	Zollboden(CreateDynamicObject(18766, 516.87604, 469.13684, 17.72110,   90.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19391, 518.95782, 464.82291, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19454, 514.99872, 467.82834, 19.96700,   0.00000, 0.00000, -145.00000));
	Zollwand(CreateDynamicObject(19362, 513.52972, 472.57419, 19.96700,   0.00000, 0.00000, -55.00000));
	CreateDynamicObject(966, 518.48480, 470.33939, 17.87020,   0.00000, 0.00000, 215.00000);
	Zollwand(CreateDynamicObject(19435, 520.93060, 466.20450, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19408, 520.64789, 467.86130, 19.96700,   0.00000, 0.00000, 35.00000));
	Zollwand(CreateDynamicObject(19435, 519.19031, 468.69580, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19435, 515.50092, 473.95309, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19408, 516.95892, 473.11841, 19.96700,   0.00000, 0.00000, 35.00000));
	Zollwand(CreateDynamicObject(19435, 517.24438, 471.46552, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19362, 517.63391, 469.67160, 19.96700,   0.00000, 0.00000, 35.00000));
	Zolldecke(CreateDynamicObject(19457, 515.91602, 469.40839, 21.76700,   0.00000, 90.00000, -145.00000));
	Zolldecke(CreateDynamicObject(19438, 516.17322, 473.32980, 21.76500,   0.00000, 90.00000, -55.00000));
	Zolldecke(CreateDynamicObject(19438, 516.66260, 472.63419, 21.76100,   0.00000, 90.00000, -55.00000));
	Zolldecke(CreateDynamicObject(19457, 516.69092, 468.30090, 21.76300,   0.00000, 90.00000, -145.00000));
	Zolldecke(CreateDynamicObject(19438, 520.46478, 467.20511, 21.76100,   0.00000, 90.00000, -55.00000));
	Zolldecke(CreateDynamicObject(19438, 520.13953, 467.66861, 21.75900,   0.00000, 90.00000, -55.00000));
	CreateDynamicObject(1999, 519.83795, 468.01044, 18.20760,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1999, 516.20630, 473.20541, 18.20760,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1663, 519.23694, 467.05167, 18.66150,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1663, 515.81000, 472.19720, 18.66150,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2199, 517.14618, 470.09402, 18.21440,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(630, 517.92078, 468.47089, 19.19600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 520.69891, 467.76926, 20.85290,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(19466, 517.00214, 473.07538, 20.85290,   0.00000, 0.00000, 35.00000);
	Zollbecken(CreateDynamicObject(2515, 520.84082, 468.02240, 19.26740,   0.00000, 0.00000, -235.00000));
	Zollbecken(CreateDynamicObject(2515, 517.22430, 473.20493, 19.26740,   0.00000, 0.00000, -235.00000));
	CreateDynamicObject(1495, 518.36603, 464.38879, 18.20390,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(1495, 518.36603, 464.38879, 18.20390,   0.00000, 0.00000, 125.00000);
	CreateDynamicObject(19273, 519.87170, 465.40497, 19.42420,   0.00000, 0.00000, 35.00000);
	Zollboden(CreateDynamicObject(18763, 525.92499, 475.83160, 17.22110,   90.00000, 0.00000, 35.00000));
	Zollwand(CreateDynamicObject(19362, 525.51721, 475.50140, 19.96700,   0.00000, 0.00000, 35.00000));
	Zollwand(CreateDynamicObject(19435, 525.23157, 477.15778, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19435, 526.97559, 474.66650, 19.96700,   0.00000, 0.00000, -55.00000));
	Zollwand(CreateDynamicObject(19362, 526.69513, 476.32990, 19.96700,   0.00000, 0.00000, 35.00000));
	Zolldecke(CreateDynamicObject(19438, 526.24591, 475.98697, 21.76100,   0.00000, 90.00000, -55.00000));
	Zolldecke(CreateDynamicObject(19438, 525.98993, 475.80310, 21.75700,   0.00000, 90.00000, -55.00000));
	CreateDynamicObject(1214, 525.10724, 475.03326, 18.16470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 515.41998, 473.97198, 20.90750,   0.50000, 0.00000, -55.00000);
	CreateDynamicObject(2921, 526.66138, 474.39551, 20.90750,   0.50000, 0.00000, 125.00000);
	Zollboden(CreateDynamicObject(18766, -173.36424, 366.60071, 10.80280,   90.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19454, -175.57600, 367.28571, 13.04780,   0.00000, 0.00000, -15.00000));
	Zollwand(CreateDynamicObject(19391, -175.33545, 362.32263, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19435, -173.00929, 361.69958, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19408, -171.96445, 362.98996, 13.04780,   0.00000, 0.00000, -15.00000));
	Zollwand(CreateDynamicObject(19435, -172.22520, 364.63620, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19362, -172.88670, 371.46219, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19435, -170.56160, 370.83850, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19408, -170.26450, 369.18839, 13.04780,   0.00000, 0.00000, -15.00000));
	Zollwand(CreateDynamicObject(19435, -171.34680, 367.90829, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19362, -172.47470, 366.45670, 13.04780,   0.00000, 0.00000, -15.00000));
	Zollboden(CreateDynamicObject(18763, -162.60617, 363.79514, 9.80280,   90.00000, 0.00000, -15.00000));
	CreateDynamicObject(966, -171.42410, 366.17340, 11.07510,   0.00000, 0.00000, 165.00000);
	Zollwand(CreateDynamicObject(19362, -162.92540, 363.79111, 13.04780,   0.00000, 0.00000, -15.00000));
	Zollwand(CreateDynamicObject(19435, -162.62737, 362.13867, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19435, -161.84109, 365.07239, 13.04780,   0.00000, 0.00000, 75.00000));
	Zollwand(CreateDynamicObject(19362, -161.54449, 363.42020, 13.04780,   0.00000, 0.00000, -15.00000));
	Zolldecke(CreateDynamicObject(19457, -174.08971, 366.73709, 14.77810,   0.00000, 90.00000, -15.00000));
	Zolldecke(CreateDynamicObject(19457, -174.01746, 366.99823, 14.77610,   0.00000, 90.00000, -15.00000));
	Zolldecke(CreateDynamicObject(19438, -172.41830, 363.11261, 14.77810,   0.00000, 90.00000, 75.00000));
	Zolldecke(CreateDynamicObject(19438, -170.75830, 369.30020, 14.77810,   0.00000, 90.00000, 75.00000));
	Zolldecke(CreateDynamicObject(19438, -162.33034, 363.66412, 14.77810,   0.00000, 90.00000, 75.00000));
	Zolldecke(CreateDynamicObject(19438, -162.05920, 363.59241, 14.77610,   0.00000, 90.00000, 75.00000));
	CreateDynamicObject(1214, -163.58279, 364.05911, 10.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -171.93660, 362.89841, 13.89690,   0.00000, 0.00000, -15.00000);
	CreateDynamicObject(19466, -170.20572, 369.14639, 13.89690,   0.00000, 0.00000, -15.00000);
	Zollbecken(CreateDynamicObject(2515, -171.68080, 362.89090, 12.29030,   0.00000, 0.00000, 75.00000));
	Zollbecken(CreateDynamicObject(2515, -170.00960, 369.15207, 12.29030,   0.00000, 0.00000, 75.00000));
	CreateDynamicObject(1495, -176.08321, 362.51569, 11.28400,   0.00000, 0.00000, -15.00000);
	CreateDynamicObject(1495, -176.08321, 362.51569, 11.28400,   0.00000, 0.00000, 75.00000);
	CreateDynamicObject(1999, -172.35770, 363.60550, 11.29140,   0.00000, 0.00000, -105.00000);
	CreateDynamicObject(1999, -170.72081, 369.85162, 11.29140,   0.00000, 0.00000, -105.00000);
	CreateDynamicObject(1663, -171.54460, 369.34039, 11.72820,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1663, -173.26628, 363.22928, 11.72820,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2199, -172.55705, 366.76340, 11.29670,   0.00000, 0.00000, -105.00000);
	CreateDynamicObject(2921, -162.86690, 362.10321, 14.32900,   0.00000, 4.00000, 75.00000);
	CreateDynamicObject(2921, -170.50450, 370.89548, 14.32900,   0.00000, 4.00000, -105.00000);
	CreateDynamicObject(19273, -174.35396, 362.00662, 12.50750,   0.00000, 0.00000, -15.00000);
	Zollboden(CreateDynamicObject(18766, -974.66705, -336.20856, 35.31840,   90.00000, 0.00000, 78.50000));
	Zollboden(CreateDynamicObject(18766, -959.81335, -338.97473, 35.17640,   90.00000, 0.00000, -11.50000));
	Zollwand(CreateDynamicObject(19454, -976.91858, -335.70230, 37.56500,   0.00000, 0.00000, -11.50000));
	Zollwand(CreateDynamicObject(19391, -976.37280, -340.64041, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19362, -974.48853, -331.37140, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19435, -974.01331, -341.12061, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19408, -973.01001, -339.77451, 37.56500,   0.00000, 0.00000, -11.50000));
	Zollwand(CreateDynamicObject(19362, -972.37048, -336.62741, 37.56500,   0.00000, 0.00000, -11.50000));
	Zollwand(CreateDynamicObject(19435, -972.12903, -331.85291, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19408, -971.73090, -333.48450, 37.56500,   0.00000, 0.00000, -11.50000));
	CreateDynamicObject(1999, -973.47626, -339.17471, 35.81080,   0.00000, 0.00000, -101.50000);
	CreateDynamicObject(1999, -972.19769, -332.90540, 35.81080,   0.00000, 0.00000, -101.50000);
	Zollbecken(CreateDynamicObject(2515, -971.47992, -333.52383, 36.82080,   0.00000, 0.00000, 78.50000));
	Zollbecken(CreateDynamicObject(2515, -972.75574, -339.83215, 36.82080,   0.00000, 0.00000, 78.50000));
	CreateDynamicObject(19466, -972.98792, -339.72421, 38.32690,   0.00000, 0.00000, -11.50000);
	CreateDynamicObject(19466, -971.69708, -333.33847, 38.32690,   0.00000, 0.00000, -11.50000);
	CreateDynamicObject(1663, -973.10815, -333.34943, 36.24370,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1663, -974.36328, -339.63544, 36.24370,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2199, -972.54590, -336.76410, 35.80940,   0.00000, 0.00000, -101.50000);
	CreateDynamicObject(2608, -976.79120, -336.64621, 36.52560,   0.00000, 0.00000, 78.50000);
	CreateDynamicObject(630, -975.76721, -333.32153, 36.81400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, -977.13330, -340.50540, 35.80170,   0.00000, 0.00000, -11.50000);
	CreateDynamicObject(1495, -977.13330, -340.50540, 35.80170,   0.00000, 0.00000, 78.50000);
	CreateDynamicObject(19273, -975.36432, -340.90356, 37.15080,   0.00000, 0.00000, -10.50000);
	CreateDynamicObject(966, -971.78973, -336.59103, 35.42310,   0.00000, 0.00000, 168.50000);
	Zolldecke(CreateDynamicObject(19457, -975.31787, -336.02841, 39.39720,   0.00000, 90.00000, -11.50000));
	Zolldecke(CreateDynamicObject(19457, -973.92908, -336.30911, 39.39320,   0.00000, 90.00000, -11.50000));
	Zollwand(CreateDynamicObject(19362, -963.40582, -338.22449, 37.56500,   0.00000, 0.00000, -11.50000));
	Zollwand(CreateDynamicObject(19362, -962.21979, -340.01569, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19362, -959.07300, -340.65634, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19362, -961.61560, -337.03790, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19362, -958.46887, -337.67780, 37.56500,   0.00000, 0.00000, 78.50000));
	Zollwand(CreateDynamicObject(19362, -957.28003, -339.46811, 37.56500,   0.00000, 0.00000, -11.50000));
	Zolldecke(CreateDynamicObject(19365, -961.81097, -338.55029, 39.39650,   0.00000, 90.00000, -11.50000));
	Zolldecke(CreateDynamicObject(19365, -958.54883, -339.21609, 39.39250,   0.00000, 90.00000, -11.50000));
	CreateDynamicObject(4521, -84.77370, -909.27240, 18.24220,   0.00000, 0.00000, 63.77800);
	CreateDynamicObject(2921, -961.92560, -340.11920, 38.74200,   0.00000, 0.00000, 78.50000);
	CreateDynamicObject(2921, -972.25665, -331.78943, 38.74200,   0.00000, 0.00000, -108.50000);
	CreateDynamicObject(2921, 1723.91797, 527.94208, 30.25760,   0.00000, 0.00000, -109.00000);
	CreateDynamicObject(2921, 1750.19995, 508.45242, 30.25760,   0.00000, 0.00000, 60.00000);
	Zollboden(CreateDynamicObject(18766, 31.71928, -1341.27124, 9.07390,   90.00000, 0.00000, 38.50000));
	Zollwand(CreateDynamicObject(19454, 33.15790, -1342.99658, 11.32260,   0.00000, 0.00000, -51.50000));
	Zollwand(CreateDynamicObject(19391, 35.91480, -1338.86499, 11.32260,   0.00000, 0.00000, 38.50000));
	Zollwand(CreateDynamicObject(19362, 33.78220, -1338.62195, 11.32260,   0.00000, 0.00000, -51.50000));
	Zollwand(CreateDynamicObject(19435, 32.01290, -1339.11853, 11.32260,   0.00000, 0.00000, 38.50000));
	Zollwand(CreateDynamicObject(19362, 30.37830, -1339.50684, 11.32260,   0.00000, 0.00000, -51.50000));
	Zollwand(CreateDynamicObject(19408, 27.86520, -1341.50513, 11.32260,   0.00000, 0.00000, -51.50000));
	Zollwand(CreateDynamicObject(19435, 27.12110, -1343.00928, 11.32260,   0.00000, 0.00000, 38.50000));
	Zollwand(CreateDynamicObject(19362, 28.51150, -1344.75366, 11.32260,   0.00000, 0.00000, 38.50000));
	Zolldecke(CreateDynamicObject(19457, 32.25947, -1341.72009, 13.15260,   0.00000, 90.00000, -51.50000));
	Zolldecke(CreateDynamicObject(19457, 32.11200, -1341.83496, 13.14860,   0.00000, 90.00000, -51.50000));
	Zolldecke(CreateDynamicObject(19365, 28.74640, -1342.76147, 13.14660,   0.00000, 90.00000, -51.50000));
	Zolldecke(CreateDynamicObject(19365, 31.24840, -1340.77258, 13.14860,   0.00000, 90.00000, -51.50000));
	Zolldecke(CreateDynamicObject(19365, 31.58210, -1340.51074, 13.14460,   0.00000, 90.00000, -51.50000));
	CreateDynamicObject(966, 32.84790, -1338.01099, 9.31660,   0.00000, 0.00000, -51.50000);
	CreateDynamicObject(19466, 27.74590, -1341.56287, 12.16120,   0.00000, 0.00000, -51.50000);
	Zollbecken(CreateDynamicObject(2515, 27.73319, -1341.31091, 10.61550,   0.00000, 0.00000, 219.50000));
	CreateDynamicObject(1999, 27.84870, -1342.26489, 9.55500,   0.00000, 0.00000, 38.50000);
	CreateDynamicObject(1663, 28.66440, -1342.75952, 10.01440,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(2199, 29.72510, -1340.24219, 9.56760,   0.00000, 0.00000, 38.50000);
	CreateDynamicObject(2608, 32.06470, -1343.44836, 10.25850,   0.00000, 0.00000, 219.50000);
	CreateDynamicObject(1495, 36.38460, -1339.42896, 9.55870,   0.00000, 0.00000, 128.50000);
	CreateDynamicObject(1495, 36.38460, -1339.42896, 9.55870,   0.00000, 0.00000, 219.50000);
	CreateDynamicObject(19273, 35.29561, -1338.01746, 10.92660,   0.00000, 0.00000, 128.50000);
	CreateDynamicObject(2921, 27.43460, -1343.53662, 12.50310,   0.00000, 4.50000, 38.50000);
	CreateDynamicObject(1237, 27.86490, -1331.77905, 9.32540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 26.77171, -1330.45117, 9.32540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 25.67905, -1329.18054, 9.32540,   0.00000, 0.00000, 0.00000);
	Zollboden(CreateDynamicObject(18766, -8.01161, -1321.06616, 9.96190,   90.00000, 0.00000, 40.00000));
	Zollwand(CreateDynamicObject(19362, -6.51370, -1322.85767, 12.20860,   0.00000, 0.00000, -50.00000));
	Zollwand(CreateDynamicObject(19408, -4.05540, -1320.79382, 12.20860,   0.00000, 0.00000, -50.00000));
	Zollwand(CreateDynamicObject(19435, -3.35100, -1319.27026, 12.20860,   0.00000, 0.00000, 40.00000));
	Zollwand(CreateDynamicObject(19454, -9.49430, -1319.30371, 12.20860,   0.00000, 0.00000, -50.00000));
	Zollwand(CreateDynamicObject(19362, -4.89620, -1317.42615, 12.20860,   0.00000, 0.00000, 40.00000));
	Zollwand(CreateDynamicObject(19435, -8.24590, -1323.15186, 12.20860,   0.00000, 0.00000, 40.00000));
	Zollwand(CreateDynamicObject(19391, -12.14250, -1323.50757, 12.20860,   0.00000, 0.00000, 40.00000));
	Zollwand(CreateDynamicObject(19362, -10.00250, -1323.69434, 12.20860,   0.00000, 0.00000, -50.00000));
	CreateDynamicObject(19466, -4.03170, -1320.82019, 12.96770,   0.00000, 0.00000, -50.00000);
	Zollbecken(CreateDynamicObject(2515, -3.88171, -1320.93640, 11.46090,   0.00000, 0.00000, 40.00000));
	CreateDynamicObject(1999, -3.99520, -1320.03809, 10.45550,   0.00000, 0.00000, -140.00000);
	CreateDynamicObject(2199, -5.81160, -1322.09058, 10.44720,   0.00000, 0.00000, -140.00000);
	CreateDynamicObject(2608, -8.46030, -1318.83911, 11.12630,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1495, -12.64600, -1322.92261, 10.44590,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1495, -12.62880, -1322.91248, 10.44590,   0.00000, 0.00000, 40.00000);
	Zolldecke(CreateDynamicObject(19457, -8.52957, -1320.52209, 14.01660,   0.00000, 90.00000, -50.00000));
	Zolldecke(CreateDynamicObject(19457, -8.36830, -1320.38489, 14.01260,   0.00000, 90.00000, -50.00000));
	Zolldecke(CreateDynamicObject(19365, -4.87930, -1319.54553, 14.01060,   0.00000, 90.00000, -50.00000));
	Zolldecke(CreateDynamicObject(19365, -7.05830, -1321.37317, 14.00660,   0.00000, 90.00000, -50.00000));
	Zolldecke(CreateDynamicObject(19365, -7.64000, -1321.85767, 14.01060,   0.00000, 90.00000, -50.00000));
	CreateDynamicObject(966, -9.00706, -1324.42029, 10.12420,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1237, -3.77880, -1330.58386, 10.12340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -2.87310, -1331.67847, 10.12340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1.77470, -1332.97534, 10.12340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, -4.31970, -1318.00610, 13.25190,   0.00000, 6.00000, -140.00000);
	
   	//LSPD Base - Map by Daniel_LeMarc
	CreateDynamicObject(3934, 1553.31677, -1643.95227, 27.38760,   0.00000, 0.00000, 0.00000); //Helipad
	CreateDynamicObject(3934, 1565.47815, -1654.70691, 27.38760,   0.00000, 0.00000, 0.00000); //Helipad
	CreateDynamicObject(3934, 1565.65540, -1694.36340, 27.38760,   0.00000, 0.00000, 0.00000); //Helipad
	CreateDynamicObject(3934, 1556.78821, -1708.24243, 27.38760,   0.00000, 0.00000, 0.00000); //Helipad
 	CreateDynamicObject(19325, 1553.52917, -1694.07495, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.52930, -1694.07495, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.52930, -1698.20105, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.52930, -1698.20105, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.52930, -1702.32703, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.52930, -1702.32703, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1680.58704, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1680.58704, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1684.71106, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1684.71106, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1688.83704, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1688.83704, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1652.19897, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1656.32495, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1660.45105, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1652.19897, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1656.32495, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1660.45105, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1670.72400, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1666.60205, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1662.48010, 16.43810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1662.48010, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1666.60205, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1553.53333, -1670.72400, 23.08010,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.66675, -1664.55627, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1546.65125, -1658.15637, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.75525, -1662.00952, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.48523, -1664.97205, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.59180, -1660.21484, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1546.10791, -1657.64209, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1546.06860, -1686.27686, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1546.18506, -1660.99182, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14400, 1547.38379, -1687.85168, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1546.26123, -1663.26917, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1545.91772, -1659.34009, 12.55710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.82458, -1649.02637, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1543.21851, -1644.97424, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1542.04004, -1638.19641, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1542.23999, -1642.00867, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.24475, -1647.43628, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.21436, -1644.37244, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1542.07935, -1639.86670, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.24451, -1637.97461, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.06714, -1641.95874, 13.14460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14400, 1541.46472, -1647.59534, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1541.64319, -1639.81042, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1541.21179, -1642.06848, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 1547.66602, -1686.16553, 13.10860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.34583, -1688.32312, 13.10860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.57935, -1689.81555, 13.10860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.56006, -1693.78894, 13.10860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.71826, -1692.55334, 13.10860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1546.95789, -1664.41895, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1545.98743, -1692.14294, 12.97080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1547.71606, -1688.58533, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1547.69739, -1693.54272, 13.00680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14400, 1547.26489, -1659.50562, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1546.86987, -1691.91553, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1546.15759, -1688.19043, 12.71310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.61279, -1701.86731, 13.27080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1541.55396, -1710.04395, 13.27080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1542.74768, -1705.84277, 13.27080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1541.55432, -1713.54541, 13.27080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1540.80725, -1707.79468, 13.19260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1540.82092, -1704.62219, 13.19260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.73560, -1701.89453, 13.19260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.47754, -1713.81921, 13.19260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.25293, -1710.68640, 13.19260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14400, 1541.59143, -1703.76953, 12.81110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1541.57166, -1708.52734, 12.78310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14400, 1541.72021, -1712.21179, 12.75510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1364, 1552.57776, -1665.91418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1364, 1552.57776, -1659.91418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1364, 1552.57776, -1653.91418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1364, 1552.57776, -1685.41418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1364, 1552.57776, -1691.41418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1364, 1552.57776, -1697.41418, 13.32320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(669, 1546.05176, -1661.47974, 12.62930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(669, 1546.34436, -1690.35645, 12.62930,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19466, 1544.26978, -1630.17480, 14.41000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1542.55615, -1621.15588, 15.01980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1545.92725, -1632.83875, 15.01980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1545.93298, -1638.08911, 15.01980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1546.27576, -1620.20984, 16.37890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1579.39221, -1617.59058, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1575.21582, -1617.59167, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1571.03894, -1617.59241, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1566.86267, -1617.59241, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1562.68689, -1617.59302, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1558.51270, -1617.59265, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1554.33557, -1617.59167, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1548.15393, -1617.63293, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8572, 1553.07544, -1616.72339, 14.64630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1581.48682, -1620.19312, 16.37890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1548.16968, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1550.26001, -1622.83447, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1554.33557, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1558.51270, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1562.68689, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1566.86267, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1571.03894, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1575.21582, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1579.39221, -1622.83362, 16.37890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1581.33301, -1622.55029, 15.70880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1214, 1581.34583, -1617.86365, 15.70880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1214, 1546.25378, -1617.88379, 15.70880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1214, 1546.26599, -1622.60083, 15.70880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1559.49744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1562.99744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1559.49744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1562.99744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1566.49744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1569.99744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1573.49744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1576.99744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1580.49744, -1615.80896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1566.49744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1569.99744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1573.49744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1576.99744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1580.49744, -1612.30896, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1589.49744, -1617.74500, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1592.99744, -1617.74500, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1596.49744, -1617.74500, 11.61940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1599.99744, -1617.74500, 11.65940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1603.49744, -1617.74500, 11.69940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1606.99744, -1617.74500, 11.74140,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1589.49744, -1614.24500, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1592.99744, -1614.24500, 11.58540,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1596.49744, -1614.24500, 11.61940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1599.99744, -1614.24500, 11.65940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1603.49744, -1614.24500, 11.69940,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1606.99744, -1614.24500, 11.74140,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1565.50769, -1637.50037, 13.22210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1554.74072, -1637.50037, 13.22210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1575.40405, -1637.73792, 13.22210,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1361, 1535.13123, -1638.18970, 13.20700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.16211, -1669.49683, 13.20700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.14929, -1675.88220, 13.20700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1538.14197, -1672.77881, 13.20700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1535.12219, -1721.61829, 13.20700,   0.00000, 0.00000, 0.00000);

	//Textur LSPD Exterior ------------------- Zaun -------------------------------

	Zaun(CreateDynamicObject(970, 1534.75439, -1683.72241, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75403, -1687.85034, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75342, -1692.00830, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75330, -1696.16724, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75305, -1700.30847, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75415, -1704.46912, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75537, -1708.63660, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75488, -1712.79639, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75464, -1716.95801, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.75598, -1719.04761, 13.03560,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.69446, -1640.95630, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.69653, -1645.11206, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.69836, -1649.28540, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.69995, -1653.44250, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.70422, -1661.69739, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1534.70068, -1657.59058, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1537.58704, -1666.00354, 13.03360,   0.00000, 0.00000, 90.00000));
	Zaun(CreateDynamicObject(970, 1537.58398, -1679.44043, 13.03360,   0.00000, 0.00000, 90.00000));

	//Textur LSPD Exterior ----------------- Scheiben -----------------------------


	Scheiben_LSPD(CreateDynamicObject(19378, 1553.60864, -1696.84131, 21.81360,   0.00000, 0.00000, 0.00000));
	Scheiben_LSPD(CreateDynamicObject(19458, 1553.61060, -1696.84033, 14.81390,   0.00000, 0.00000, 0.00000));
	Scheiben_LSPD(CreateDynamicObject(19378, 1553.62061, -1683.34326, 21.81360,   0.00000, 0.00000, 0.00000));
   	Scheiben_LSPD(CreateDynamicObject(19458, 1553.62061, -1683.34326, 14.81390,   0.00000, 0.00000, 0.00000));
	Scheiben_LSPD(CreateDynamicObject(19378, 1553.62061, -1667.84326, 21.81360,   0.00000, 0.00000, 0.00000));
   	Scheiben_LSPD(CreateDynamicObject(19378, 1553.62061, -1654.84326, 21.81360,   0.00000, 0.00000, 0.00000));
    Scheiben_LSPD(CreateDynamicObject(19458, 1553.62061, -1667.84326, 14.81390,   0.00000, -0.02600, 0.00000));
    Scheiben_LSPD(CreateDynamicObject(19458, 1553.62122, -1654.84326, 14.81390,   0.00000, -0.02600, 0.00000));

	//Textur LSPD Exterior ----------------- Mauer an Scheiben -----------------------------

	MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1678.47327, 24.67130,   0.00000, 0.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1678.47327, 21.17330,   0.00000, 0.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33044, -1678.47327, 17.67330,   0.00000, 0.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1678.47327, 14.17330,   0.00000, 0.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90894, -1686.99548, 12.85380,   0.00000, 90.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90894, -1684.72546, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90894, -1682.45447, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90894, -1679.45447, 12.85380,   0.00000, 90.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90088, -1693.16748, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90088, -1695.43848, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90088, -1697.70850, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90088, -1699.97852, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1672.72424, 14.17330,   0.00000, 0.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33044, -1672.72424, 17.67330,   0.00000, 0.00000, 90.00000));
  	MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1672.72424, 21.17330,   0.00000, 0.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(19433, 1554.33240, -1672.72424, 24.67130,   0.00000, 0.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.90894, -1670.95447, 12.85380,   0.00000, 90.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1667.95447, 12.85380,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1665.68250, 12.85380,   0.00000, 90.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1663.41052, 12.85580,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1658.41052, 12.85580,   0.00000, 90.00000, 90.00000));
   	MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1656.14050, 12.85580,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1653.87354, 12.85580,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1651.60449, 12.85580,   0.00000, 90.00000, 90.00000));
    MauerScheiben_LSPD(CreateDynamicObject(9131, 1553.91284, -1649.33350, 12.85580,   0.00000, 90.00000, 90.00000));

	//Textur LSPD Exterior ----------------- Mauer Garagen Eingang -----------------------------

    Mauer_LSPD(CreateDynamicObject(19357, 1543.00000, 7810.00000, -1619.00000,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1542.78308, -1619.45752, 14.13440,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1542.78308, -1622.66760, 14.13440,   0.00000, 0.00000, 0.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1544.47693, -1624.18250, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1546.16980, -1622.66711, 14.13440,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1546.16980, -1619.45752, 14.13440,   0.00000, 0.00000, 0.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1544.46375, -1622.66455, 15.79440,   0.00000, 90.00000, 0.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1544.50183, -1619.45349, 15.79440,   0.00000, 90.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1542.78308, -1631.74756, 14.13440,   0.00000, 0.00000, 0.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1544.47522, -1630.23035, 14.13440,   0.00000, 0.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1544.47717, -1633.26440, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1546.17224, -1631.74976, 14.13440,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1544.45166, -1631.74731, 15.79440,   0.00000, 90.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1541.16589, -1617.94556, 14.16840,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1546.17188, -1634.95898, 14.13440,   0.00000, 0.00000, 0.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1546.17102, -1638.16846, 14.13440,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19403, 1544.47778, -1630.23474, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1544.45166, -1631.75134, 13.48640,   0.00000, 90.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19449, 1539.57336, -1613.21594, 14.16840,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1539.57361, -1606.79358, 14.16840,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1539.57715, -1603.89380, 14.16840,   0.00000, 0.00000, 0.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1547.84485, -1622.77856, 14.13440,   0.00000, -0.35000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1551.05579, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1554.26575, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1557.47070, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1560.67871, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1563.88867, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1567.09875, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1570.30676, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1573.51685, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1576.72681, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1579.92883, -1622.77856, 14.13040,   0.00000, -0.35000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1579.92883, -1617.60388, 14.13040,   0.00000, 0.00000, 90.06300));
   	Mauer_LSPD(CreateDynamicObject(19357, 1573.51685, -1617.60986, 14.13040,   0.00000, 0.00000, 90.06300));
	Mauer_LSPD(CreateDynamicObject(19357, 1570.30676, -1617.61389, 14.13040,   0.00000, 0.00000, 90.06300));
    Mauer_LSPD(CreateDynamicObject(19357, 1576.72681, -1617.60596, 14.13040,   0.00000, 0.00000, 90.06300));
   	Mauer_LSPD(CreateDynamicObject(19357, 1567.09875, -1617.61792, 14.13040,   0.00000, 0.00000, 90.06300));
    Mauer_LSPD(CreateDynamicObject(19357, 1563.88867, -1617.61987, 14.13040,   0.00000, 0.00000, 90.06300));
    Mauer_LSPD(CreateDynamicObject(19357, 1557.47070, -1617.62805, 14.13040,   0.00000, 0.00000, 90.06300));
    Mauer_LSPD(CreateDynamicObject(19357, 1560.67871, -1617.62390, 14.13040,   0.00000, 0.00000, 90.06300));
 	Mauer_LSPD(CreateDynamicObject(19357, 1554.26575, -1617.63000, 14.13040,   0.00000, 0.00000, 90.06300));
   	Mauer_LSPD(CreateDynamicObject(19357, 1551.20337, -1617.63000, 14.13040,   0.00000, 0.00000, 90.06300));
    Mauer_LSPD(CreateDynamicObject(19357, 1581.44666, -1621.25134, 14.13040,   0.00000, 0.00000, 0.00000));
  	Mauer_LSPD(CreateDynamicObject(19430, 1581.44556, -1618.35425, 14.13040,   0.00000, 0.00000, 0.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1579.92761, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1579.92908, -1619.24463, 14.13040,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1579.92908, -1619.55762, 14.13040,   0.00000, 0.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19430, 1578.39014, -1619.43665, 14.13440,   0.00000, 0.00000, 0.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1579.92358, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1576.72681, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1573.51685, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1570.30676, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1567.09875, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1563.88867, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1560.67871, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1557.47070, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1554.26575, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1551.05579, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1547.84485, -1621.12695, 15.79840,   0.00000, 90.00000, 90.00000));
 	Mauer_LSPD(CreateDynamicObject(19357, 1576.72681, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1573.51685, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1570.31531, -1619.31995, 15.79640,   0.00000, 90.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1567.09875, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1563.88867, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1560.67871, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1557.47070, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1554.26575, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1551.05579, -1619.30188, 15.79640,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1547.84485, -1619.30400, 15.79640,   0.00000, 90.00000, 90.06000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1606.42883, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1603.21875, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1600.01880, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1596.81079, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1593.60083, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1590.39185, -1622.77856, 14.13440,   0.00000, 0.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1588.87610, -1621.08630, 14.13440,   0.00000, 0.00000, 0.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1590.39185, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1593.60083, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
	Mauer_LSPD(CreateDynamicObject(19357, 1596.81079, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1600.01880, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1603.21875, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1606.42883, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1590.39392, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1593.60083, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
   	Mauer_LSPD(CreateDynamicObject(19357, 1596.81079, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1596.81079, -1619.39563, 14.13440,   0.00000, 0.00000, 90.00000));
 	Mauer_LSPD(CreateDynamicObject(19357, 1600.01880, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
  	Mauer_LSPD(CreateDynamicObject(19357, 1603.21875, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
    Mauer_LSPD(CreateDynamicObject(19357, 1606.42883, -1621.07117, 15.79440,   0.00000, 90.00000, 90.00000));
    
    //FBI Interior - Map by Niklas.B
    
    //Decke

	Decke_FBI(CreateDynamicObject(19378, -2450.44092, 525.00781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2460.07495, 525.00781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2469.70703, 525.00781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2469.70703, 514.50781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2460.07495, 514.50781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2450.44092, 514.50781, 27.48350,   0.00000, 90.00000, 90.00000));
	Decke_FBI(CreateDynamicObject(19378, -2460.07495, 504.00781, 27.48350,   0.00000, 90.00000, 90.00000));


	//Boden

	Boden_FBI(CreateDynamicObject(19360, -2458.12109, 503.71909, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19360, -2458.12109, 507.21909, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19376, -2458.12012, 514.21942, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19376, -2458.12012, 524.71838, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19376, -2467.75024, 514.21942, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19376, -2467.74829, 524.71942, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19325, -2461.19434, 511.19958, 23.98610,   90.00000, 0.00000, 0.00000));
	Boden_FBI(CreateDynamicObject(19376, -2448.49316, 514.21942, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19376, -2448.49316, 524.71838, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19433, -2460.52930, 503.71851, 24.00840,   0.00000, 90.00000, 90.00000));
	Boden_FBI(CreateDynamicObject(19433, -2460.52319, 507.21851, 24.00840,   0.00000, 90.00000, 90.00000));


	//Wand

	Wand_FBI(CreateDynamicObject(19362, -2458.12183, 501.89240, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2456.60620, 503.58871, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2456.60620, 506.79871, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.24316, 503.58270, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.24316, 506.79269, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.24316, 511.60471, 23.41040,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.24316, 511.60471, 28.44240,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2456.60620, 511.60571, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2462.93530, 509.91159, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2464.45142, 511.60431, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2466.14526, 509.91159, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2469.35522, 509.91159, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 511.60431, 25.81840,   0.00000, 0.00000, 0.0000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 514.81531, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 518.02533, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2464.45337, 518.02533, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2466.14526, 521.14459, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2469.35522, 521.14459, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 522.83728, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 526.04730, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2470.87134, 529.25732, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2466.14526, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2469.35083, 530.04810, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2462.76318, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2459.55420, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.07056, 528.35217, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2461.07056, 521.93518, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2456.34814, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2453.14014, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2449.92017, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2451.42407, 520.43329, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2448.21411, 520.43329, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.52100, 521.95032, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.52100, 525.15833, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.52100, 528.36731, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.71216, 530.04260, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2452.94092, 518.73950, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2451.42407, 514.01129, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2448.21411, 514.01129, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.44092, 518.73950, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2446.44092, 515.52887, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19362, -2445.00415, 514.01129, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2454.91284, 513.29779, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2451.70288, 513.29779, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19362, -2452.94092, 515.53351, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2460.53003, 501.89371, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19435, -2461.24390, 509.19971, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2456.60620, 509.19971, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2464.45337, 520.43201, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2470.87134, 520.43201, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2464.45337, 523.93201, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2464.45337, 527.43201, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2464.45337, 530.43201, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19435, -2459.14502, 520.43329, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19435, -2456.48291, 520.43329, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19435, -2457.32007, 513.29938, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19435, -2453.82886, 520.43329, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19391, -2459.72632, 513.29993, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19391, -2462.93530, 513.29993, 25.81840,   0.00000, 0.00000, 90.00000));
	Wand_FBI(CreateDynamicObject(19391, -2464.45337, 514.81531, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19391, -2461.07056, 525.14032, 25.81840,   0.00000, 0.00000, 0.00000));
	Wand_FBI(CreateDynamicObject(19391, -2452.94141, 512.31787, 25.81840,   0.00000, 0.00000, 0.00000));

	//-------------------------------------------------------------------

	CreateDynamicObject(1533, -2456.71436, 504.10910, 23.95730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, -2456.71436, 505.60910, 23.95730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, -2464.39893, 521.53870, 24.98610,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, -2464.39893, 529.03870, 24.98610,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, -2457.73804, 520.36060, 25.54610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, -2463.72095, 513.27832, 24.08440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -2464.42554, 514.06671, 24.08440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, -2461.10034, 525.92603, 24.08440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2922, -2458.51587, 513.22302, 25.39180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, -2458.51587, 513.39899, 25.39180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, -2457.13208, 525.15411, 24.79630,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, -2457.13086, 526.66870, 23.10430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19168, -2457.87378, 524.42383, 24.90020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19171, -2456.37476, 525.92371, 24.89960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19170, -2456.37476, 524.42389, 24.89890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19169, -2457.87305, 525.92291, 24.90110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, -2457.13086, 523.63672, 23.10430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, -2455.47046, 525.15503, 23.13430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, -2458.79248, 525.15503, 23.13430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, -2453.63330, 525.19287, 24.79630,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, -2450.13306, 525.19287, 24.79630,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, -2448.47314, 525.19287, 22.95630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2454.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2453.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2452.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2451.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2450.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2449.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2449.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2450.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2451.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2452.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2453.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2454.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2455.04102, 526.70032, 24.08370,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2455.04102, 523.62628, 24.08370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2447.64404, 525.16431, 24.08370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, -2447.02344, 520.89569, 24.09503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2453.46167, 519.84937, 24.09503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2460.44629, 529.38330, 24.09503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2460.42651, 520.96210, 24.09503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -2466.83130, 521.70728, 24.08380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -2470.13965, 526.40570, 24.08380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, -2468.80859, 527.88507, 24.09631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, -2468.80859, 526.92908, 24.09630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -2469.09180, 529.51093, 24.08380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -2470.13965, 522.76569, 24.08380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, -2468.80859, 523.23810, 24.09630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, -2468.80859, 524.19708, 24.09630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2470.22437, 521.76404, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2470.14526, 529.49683, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2464.88940, 527.42535, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2464.89160, 523.88025, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, -2456.49854, 530.07684, 24.07500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, -2449.69629, 520.37262, 24.07500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, -2451.13037, 520.37262, 24.07500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, -2455.06250, 530.07678, 24.07500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -2446.64771, 525.19458, 26.29170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, -2470.34229, 511.90021, 23.96390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, -2465.99951, 513.00568, 24.04390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, -2464.98364, 516.17371, 24.04390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2193, -2469.34229, 517.56421, 23.96390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2197, -2469.53833, 515.05310, 24.06220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, -2469.53833, 514.37311, 24.06220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, -2469.53833, 513.69312, 24.06220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, -2469.53833, 515.73309, 24.06220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, -2470.23926, 517.77008, 24.07020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2465.61792, 517.20685, 24.07020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, -2465.30786, 511.98914, 24.07020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -2469.60083, 511.75952, 24.07020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, -2465.68701, 509.86374, 24.09610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, -2469.71973, 521.19391, 24.09610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, -2467.11304, 509.86371, 24.09610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, -2468.27979, 521.19391, 24.09610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, -2466.83984, 521.19391, 24.09610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2197, -2464.89038, 519.73260, 24.06220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2197, -2465.57031, 519.73260, 24.06220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, -2464.99585, 519.03766, 24.03970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2202, -2468.45264, 510.47552, 24.03970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, -2461.80591, 512.05353, 24.01650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, -2462.79688, 511.35547, 24.08340,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2614, -2464.32568, 511.57050, 25.61070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, -2470.27710, 510.58926, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2470.61499, 520.62494, 24.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -2453.06616, 516.82581, 26.29170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, -2447.03320, 529.45380, 24.09503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -2453.50195, 513.83386, 24.09503,   0.00000, 0.00000, 0.00000);
    
    //FBI Base - Map by Daniel_LeMarc
    CreateDynamicObject(7010, -2168.03247, 283.64639, 35.90300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10010, -2225.53516, 265.29721, 26.35300,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(6959, -2176.62671, 279.64761, 14.00000,   -90.00000, 42.00000, 0.00000);
	CreateDynamicObject(6959, -2208.03149, 238.05669, 34.36780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2221.38354, 238.02029, 34.36480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2221.39111, 263.99951, 34.36480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2221.38428, 290.55981, 34.35880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2207.64111, 277.64880, 34.36180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, -2157.93506, 310.29440, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2157.93506, 310.29141, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2161.13892, 310.29141, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2161.13892, 310.29440, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19355, -2162.59106, 308.58170, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2162.59277, 305.84381, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2162.59912, 303.35989, 39.38320,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2165.79321, 308.59271, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2165.79395, 305.79721, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2165.78052, 303.64529, 39.38320,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19369, -2164.13892, 310.29440, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2164.13892, 310.29141, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2167.13892, 310.29440, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2167.13892, 310.29141, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2170.13892, 310.29440, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2170.13892, 310.29141, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2173.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2173.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2193.01636, 308.77142, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, -2168.99536, 308.61090, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2172.17285, 308.57321, 39.39820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2175.38525, 308.58859, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2168.97632, 305.81470, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2172.16016, 305.81210, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2168.94238, 303.63269, 39.38320,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2172.12329, 303.63950, 39.38320,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2175.35059, 302.32031, 39.36820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19369, -2193.02002, 308.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 305.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01343, 305.77139, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01343, 302.77139, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 302.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 299.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01343, 299.78421, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 296.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01343, 296.78421, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 293.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01343, 293.78421, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, -2193.02002, 290.78421, 35.97590,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(19369, -2193.01050, 291.94519, 38.51690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, -2175.34082, 305.81830, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2178.59668, 308.60251, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2178.54492, 305.85239, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2178.55957, 302.34039, 39.37720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2181.80786, 308.60785, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2185.01221, 308.59320, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.17529, 308.57709, 39.39520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.31836, 308.59171, 39.39820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19369, -2176.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2176.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2179.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2179.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2182.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2182.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2185.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2185.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2188.13892, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, -2188.13892, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2191.34521, 310.29141, 35.97590,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19369, -2191.33911, 310.28839, 38.51690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6959, -2211.92505, 290.41931, 34.35580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, -2181.77344, 305.86554, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2184.97241, 305.86282, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.19043, 305.88019, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.39941, 305.89688, 39.38920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2181.74512, 302.38116, 39.37720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2184.94971, 302.41010, 39.37720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.16528, 302.43884, 39.37720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.32813, 302.44702, 39.37720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.40601, 298.96591, 39.36820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.40283, 295.50000, 39.36220,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2191.40210, 292.01431, 39.36220,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.20581, 298.99319, 39.37420,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.20264, 295.50851, 39.36820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2188.21655, 292.02502, 39.37120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2185.00781, 298.96469, 39.37420,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2185.04614, 295.54111, 39.36820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2181.80664, 298.95590, 39.37120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2181.84473, 295.47141, 39.37120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2178.63818, 298.95840, 39.37120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19355, -2192.07153, 302.24045, 34.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, -2192.07153, 299.24039, 34.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, -2192.07153, 296.24039, 34.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, -2192.07153, 293.24039, 34.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2177.22510, 238.03740, 34.36180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, -2177.15625, 254.82120, 34.34680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8168, -2158.90161, 269.38251, 36.09000,   0.00000, 0.00000, 107.00000);
	CreateDynamicObject(8210, -2214.17969, 218.04730, 34.36450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8210, -2241.72705, 245.46780, 37.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8210, -2241.72559, 282.52399, 37.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8210, -2214.10864, 309.96121, 37.40000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8210, -2184.12305, 218.04201, 34.36450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, -2156.82007, 218.15440, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.81006, 233.16493, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.81006, 230.16074, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.76172, 253.98466, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.63184, 245.08615, 34.25530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, -2168.49097, 254.02400, 34.25530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, -2156.62061, 273.04581, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.66870, 285.00681, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, -2156.66870, 296.87601, 34.25530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4564, -2224.10303, 248.55206, 143.55800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17070, -2177.40771, 229.75751, 34.38300,   0.00000, 0.00000, 2.30000);
	CreateDynamicObject(1294, -2156.73901, 252.74974, 38.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1294, -2168.18701, 252.71762, 38.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1294, -2168.15771, 246.28860, 38.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1294, -2156.93848, 246.40604, 38.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1294, -2155.37036, 265.50632, 38.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, -2155.37256, 273.28375, 38.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, -2175.45483, 288.87234, 36.80000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1294, -2171.14917, 282.65295, 36.80000,   0.00000, 0.00000, 215.00000);
	CreateDynamicObject(1294, -2169.37183, 274.66486, 38.80000,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(19355, -2177.00122, 293.37531, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(19355, -2177.12036, 293.46899, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(19355, -2177.19067, 293.50708, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(19355, -2175.45776, 296.51904, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(19355, -2175.33911, 296.45413, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(19355, -2175.25342, 296.40717, 37.20000,   90.00000, 181.00000, 149.00000);
	CreateDynamicObject(1689, -2175.48242, 294.46777, 37.30450,   84.00000, 0.00000, 60.00000);
	CreateDynamicObject(4003, -2199.63062, 228.00049, 43.50940,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(4003, -2199.63940, 240.98601, 43.50940,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3928, -2165.55176, 306.36511, 39.48620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, -2176.82764, 306.38281, 39.48620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, -2188.66113, 301.33307, 39.47420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, -2159.75928, 310.33990, 38.31830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2166.38208, 310.34161, 38.31830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2173.00073, 310.33319, 38.31830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2179.61182, 310.32941, 38.31830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2186.30957, 310.30200, 39.21830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2189.61035, 310.33789, 40.62830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2156.45093, 306.97070, 39.35830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, -2156.45728, 300.31870, 39.35830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -2164.56958, 218.79253, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2188.20679, 218.67500, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2184.86597, 218.69160, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2181.35034, 218.70906, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2178.11157, 218.72520, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2174.66479, 218.74232, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2171.33179, 218.75890, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2167.89282, 218.77600, 35.05860,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(638, -2157.87866, 228.99863, 35.05860,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(638, -2158.31641, 239.13573, 35.05860,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(638, -2158.16187, 235.77650, 35.05860,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(638, -2158.02197, 232.43336, 35.05860,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(638, -2196.14526, 238.57814, 35.05860,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(638, -2196.63745, 228.49348, 35.05860,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(638, -2196.47583, 231.80342, 35.05860,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(638, -2196.31006, 235.20370, 35.05860,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(638, -2190.38037, 223.42609, 35.05860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, -2190.38037, 220.59113, 35.05860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, -2191.99487, 226.07188, 35.05860,   0.00000, 0.00000, 87.70000);
	CreateDynamicObject(638, -2194.88281, 226.19284, 35.05860,   0.00000, 0.00000, 87.70000);
	CreateDynamicObject(638, -2194.16235, 240.67940, 35.05860,   0.00000, 0.00000, 87.70000);
	CreateDynamicObject(638, -2191.31689, 240.59949, 35.05860,   0.00000, 0.00000, 87.70000);
	CreateDynamicObject(638, -2162.35620, 223.64917, 35.05860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, -2162.35596, 220.56122, 35.05860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, -2160.32056, 241.25162, 35.05860,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(638, -2163.40430, 241.14055, 35.05860,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(638, -2159.70776, 226.67656, 35.05860,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(1360, -2169.40869, 244.73727, 34.95700,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(1360, -2169.88501, 242.14243, 34.95700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1360, -2170.00854, 256.75763, 34.95700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1360, -2169.45142, 254.16554, 34.95700,   0.00000, 0.00000, 221.00000);
	CreateDynamicObject(1682, -2202.41382, 300.07544, 40.60000,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(649, -2191.06592, 275.73541, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.68579, 245.17490, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45068, 245.16756, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45874, 244.40443, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.65894, 253.99229, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.65894, 253.99229, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42578, 253.98621, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42578, 253.98621, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42773, 254.67670, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42773, 254.67670, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.65894, 253.99234, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42578, 253.98619, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.42773, 254.67674, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.68579, 245.17490, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45068, 245.16760, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45874, 244.40440, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2167.68579, 245.17490, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45068, 245.16760, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2168.45874, 244.40440, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.85571, 253.90231, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.90039, 245.20927, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.90039, 245.20930, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.85571, 253.90230, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.85571, 253.90230, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2157.90039, 245.20930, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2172.59985, 275.68961, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2186.49390, 275.72406, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2200.02734, 275.75763, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2195.95508, 275.74756, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2176.85425, 275.70013, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2182.04272, 275.71301, 34.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2186.82861, 281.60864, 36.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2192.32666, 281.53171, 3.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2193.02783, 281.59616, 36.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2193.02783, 281.59619, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2184.74438, 281.60739, 40.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2193.02783, 281.59619, 40.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2186.82861, 281.60861, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2185.76099, 281.60889, 40.88900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, -2192.25073, 281.59711, 38.88900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, -2191.55005, 281.58740, 40.88900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, -2185.76099, 281.60889, 36.10000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, -2186.82764, 281.60870, 40.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2178.89453, 281.63062, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2178.89453, 281.63065, 36.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2185.76099, 281.60889, 38.60000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, -2184.74438, 281.60739, 36.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2184.74438, 281.60739, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2178.89453, 281.63062, 40.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2190.31177, 281.66037, 35.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2181.77930, 281.63062, 35.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, -2188.53198, 281.43246, 36.32640,   26.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, -2183.08691, 281.17700, 36.32640,   -26.00000, 0.00000, 180.00000);
	CreateDynamicObject(8623, -2181.00537, 281.18839, 36.32640,   26.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, -2190.30103, 280.73334, 36.32640,   -26.00000, 0.00000, 180.00000);
	CreateDynamicObject(8990, -2186.37256, 288.47849, 39.50000,   28.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.72217, 245.27165, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.72217, 245.27170, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.56323, 217.98340, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.87622, 253.91728, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.87622, 253.91730, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.87622, 253.91730, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.72217, 245.27170, 38.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.56323, 217.98340, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.56323, 218.00340, 39.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.00220, 217.56868, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.00220, 217.56870, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.05591, 310.26645, 35.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.05591, 310.26639, 37.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.05591, 310.26639, 39.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2242.05591, 310.26639, 40.39400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2156.43359, 293.63577, 39.35830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, -2156.40820, 286.95209, 38.35830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, -2156.35986, 280.28519, 37.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(974, -2156.39526, 276.28711, 35.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3506, -2159.48315, 296.65524, 37.93750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3506, -2159.13477, 290.56851, 36.13750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3506, -2158.07471, 284.20651, 35.13750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2179.31641, 291.62256, 39.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2177.27075, 295.31097, 39.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2181.75684, 290.24500, 39.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(649, -2185.68311, 290.29587, 39.38430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, -2165.54248, 300.81339, 39.36800,   28.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2195.05054, 239.66739, 34.80000,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(1294, -2195.41040, 227.47275, 34.80000,   0.00000, 0.00000, 215.00000);
	CreateDynamicObject(1294, -2188.86426, 219.66689, 34.80000,   0.00000, 0.00000, 215.00000);
	CreateDynamicObject(1294, -2163.93457, 219.64612, 34.80000,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(1294, -2159.13330, 227.96826, 34.80000,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(1294, -2159.47461, 239.90417, 34.80000,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(9131, -2156.81763, 272.76071, 38.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -2156.80420, 266.17599, 38.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, -2156.64111, 269.67599, 38.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, -2156.39526, 276.28711, 37.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1689, -2158.81006, 269.49930, 38.34050,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3928, -2193.42773, 264.76895, 34.36480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, -2228.61694, 292.46301, 29.98120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8613, -2208.12744, 285.05069, 38.67900,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(19457, -2215.28394, 288.45349, 41.96860,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19279, -2179.15039, 277.81628, 35.08388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, -2185.54834, 277.81979, 35.08388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, -2192.51001, 277.82178, 35.08388,   0.00000, 0.00000, 0.00000);
    
    //Russen Mafia - Map by Blacktrax
    static RussenMafia;
	RussenMafia = CreateDynamicObject(18762,318.729,-1189.765,77.431,0.000,0.000,40.000);
	SetDynamicObjectMaterial(RussenMafia, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	RussenMafia = CreateDynamicObject(18762,323.646,-1185.938,77.431,0.000,0.000,40.000);
	SetDynamicObjectMaterial(RussenMafia, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	RussenMafia = CreateDynamicObject(3607,293.758,-1144.004,85.830,0.000,0.000,42.894);
	SetDynamicObjectMaterial(RussenMafia, 2, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 4, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetDynamicObjectMaterial(RussenMafia, 5, 10101, "2notherbuildsfe", "flatdoor01_law", 0);
	SetDynamicObjectMaterial(RussenMafia, 6, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetDynamicObjectMaterial(RussenMafia, 7, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetDynamicObjectMaterial(RussenMafia, 8, 4828, "airport3_las", "mirrwind1_LAn", 0);
	SetDynamicObjectMaterial(RussenMafia, 9, 4828, "airport3_las", "mirrwind1_LAn", 0);
	RussenMafia = CreateDynamicObject(3604,323.399,-1149.623,82.214,0.000,0.000,0.000);
	SetDynamicObjectMaterial(RussenMafia, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	SetDynamicObjectMaterial(RussenMafia, 1, 4828, "airport3_las", "mirrwind1_LAn", 0);
	SetDynamicObjectMaterial(RussenMafia, 2, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 5, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetDynamicObjectMaterial(RussenMafia, 7, 10101, "2notherbuildsfe", "flatdoor01_law", 0);
	RussenMafia = CreateDynamicObject(3604,297.837,-1174.926,82.214,0.000,0.000,90.000);
	SetDynamicObjectMaterial(RussenMafia, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	SetDynamicObjectMaterial(RussenMafia, 1, 4828, "airport3_las", "mirrwind1_LAn", 0);
	SetDynamicObjectMaterial(RussenMafia, 2, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 4, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(RussenMafia, 5, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	RussenMafia = CreateDynamicObject(13692,252.234,-1211.929,64.960,0.000,0.000,0.000);
	SetDynamicObjectMaterial(RussenMafia, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	SetDynamicObjectMaterial(RussenMafia, 1, 849, "junkpiles", "ws_oldredbrick", 0);
	SetDynamicObjectMaterial(RussenMafia, 2, 849, "junkpiles", "ws_oldredbrick", 0);
	SetDynamicObjectMaterial(RussenMafia, 8, 849, "junkpiles", "ws_oldredbrick", 0);

	RussenMafia = CreateDynamicObject(1232,323.669,-1185.935,78.201,0.000,0.000,0.000);
	RussenMafia = CreateDynamicObject(1232,318.766,-1189.786,78.201,0.000,0.000,0.000);
	RussenMafia = CreateDynamicObject(3934,307.285,-1124.530,79.902,0.000,0.000,43.227);
	RussenMafia = CreateDynamicObject(3934,317.263,-1134.639,79.902,0.000,0.000,43.227);
	RussenMafia = CreateDynamicObject(700,293.593,-1112.204,79.589,0.000,0.000,0.000);
	RussenMafia = CreateDynamicObject(700,302.838,-1111.846,79.589,0.000,0.000,0.000);
	RussenMafia = CreateDynamicObject(700,301.826,-1119.617,78.868,0.000,0.000,0.000);
	RussenMafia = CreateDynamicObject(1232,312.609,-1129.437,81.696,0.000,0.000,0.000);
    
    //Los Santos Biker Autohaus - Map by Blacktrax
    static Bike;
	Bike = CreateDynamicObject(19123,1826.848,-1390.350,12.889,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19123,1816.478,-1390.350,12.889,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19123,1837.044,-1390.350,12.889,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19449,1832.016,-1406.274,13.930,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Bike = CreateDynamicObject(19449,1822.426,-1406.297,13.930,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Bike = CreateDynamicObject(19449,1812.160,-1403.119,13.930,0.000,0.000,60.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19449,1808.163,-1396.145,13.930,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19449,1820.427,-1407.916,13.930,0.000,0.000,60.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19449,1817.550,-1401.647,13.930,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19388,1817.563,-1395.281,13.930,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19428,1817.563,-1392.895,13.930,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19428,1817.563,-1392.077,13.930,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	Bike = CreateDynamicObject(19449,1812.741,-1391.409,13.930,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 10430, "hashblock1z_sfs", "ws_ed_shop13", 0);
	Bike = CreateDynamicObject(19380,1813.717,-1394.816,15.689,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(19380,1803.237,-1394.822,15.689,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(19380,1813.744,-1404.460,15.689,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(19380,1803.321,-1404.445,15.689,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(19380,1812.518,-1412.607,11.731,0.000,40.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(8417,1816.312,-1409.676,12.524,0.000,180.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "sjmlahus25", 0);
	SetDynamicObjectMaterial(Bike, 1, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(Bike, 2, 10430, "hashblock1z_sfs", "ws_apartmentblue1", 0);
	Bike = CreateDynamicObject(19379,1836.291,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1834.651,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1832.685,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1830.056,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1827.916,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1825.491,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1823.546,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1821.346,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19379,1819.324,-1408.159,7.330,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(1491,1817.611,-1396.030,12.289,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 4830, "airport2", "sanairtex3", 0);
	Bike = CreateDynamicObject(1723,1814.564,-1392.339,12.551,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(1723,1809.330,-1392.339,12.551,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(2024,1815.181,-1394.279,12.550,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 4830, "airport2", "sanairtex3", 0);
	Bike = CreateDynamicObject(2024,1809.811,-1394.279,12.550,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 4830, "airport2", "sanairtex3", 0);
	Bike = CreateDynamicObject(2356,1815.506,-1403.199,12.548,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(2356,1810.142,-1399.922,12.551,0.000,0.000,-40.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(2608,1808.522,-1396.128,13.363,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(12957,1815.523,-1393.135,16.406,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Bike, 0, 3603, "bevmans01_la", "genroof01_128", 0);
	Bike = CreateDynamicObject(19452,1813.002,-1398.489,12.511,0.000,90.000,30.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(19452,1812.445,-1396.955,12.531,0.000,90.000,120.000);
	SetDynamicObjectMaterial(Bike, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	Bike = CreateDynamicObject(1597,1832.040,-1390.399,15.034,0.000,0.000,90.000);
	Bike = CreateDynamicObject(1597,1821.786,-1390.392,15.034,0.000,0.000,90.000);
	Bike = CreateDynamicObject(1597,1811.339,-1390.392,15.034,0.000,0.000,90.000);
	Bike = CreateDynamicObject(19379,1830.615,-1389.351,7.290,0.000,0.000,0.000);
	Bike = CreateDynamicObject(1661,1814.940,-1398.648,15.176,0.000,0.000,0.000);
	Bike = CreateDynamicObject(1661,1814.838,-1393.214,15.176,0.000,0.000,0.000);
	Bike = CreateDynamicObject(1661,1809.743,-1395.990,15.176,0.000,0.000,0.000);
	Bike = CreateDynamicObject(910,1818.215,-1392.611,13.668,0.000,0.000,90.000);
	Bike = CreateDynamicObject(2607,1815.271,-1402.505,12.956,0.000,0.000,210.000);
	Bike = CreateDynamicObject(2607,1810.571,-1399.404,12.956,0.000,0.000,490.000);
	Bike = CreateDynamicObject(19174,1815.657,-1391.510,14.358,0.000,0.000,0.000);
	Bike = CreateDynamicObject(19172,1810.240,-1391.504,14.547,0.000,0.000,0.000);
	Bike = CreateDynamicObject(630,1812.967,-1392.400,13.670,0.000,0.000,0.479);
	Bike = CreateDynamicObject(18075,1812.922,-1396.906,15.576,0.000,0.000,0.000);
    
    //Los Santos Rettungsdienst - Map by Blacktrax
    static Krankenhaus2;
	Krankenhaus2 = CreateDynamicObject(16564,1648.141,-1245.390,13.860,0.000,0.000,-90.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 1, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 2, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 4, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 7, 10101, "2notherbuildsfe", "flatdoor01_law", 0);
	SetDynamicObjectMaterial(Krankenhaus2, 8, 10101, "2notherbuildsfe", "flatdoor01_law", 0);
	Krankenhaus2 = CreateDynamicObject(967,1659.084,-1287.679,13.648,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
	Krankenhaus2 = CreateDynamicObject(966,1660.049,-1288.150,13.665,0.000,0.000,180.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1672.016,-1287.885,11.411,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1682.024,-1287.885,11.411,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1691.931,-1287.885,11.411,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1699.774,-1287.885,11.411,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1704.270,-1282.417,11.411,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1704.270,-1272.484,11.411,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1704.270,-1262.562,11.411,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1704.270,-1252.542,11.411,0.000,0.000,90.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1653.323,-1287.963,13.470,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1643.412,-1287.979,14.490,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(18766,1633.560,-1287.954,16.023,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1655.034,-1261.426,15.120,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1655.034,-1280.236,15.120,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1677.466,-1280.155,14.308,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1677.453,-1266.430,14.308,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1677.474,-1238.963,14.308,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1677.466,-1225.255,14.308,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1677.473,-1211.479,14.308,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1682.716,-1283.129,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1693.091,-1283.084,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1700.038,-1282.558,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1702.916,-1282.562,13.674,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1698.961,-1273.001,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1698.845,-1263.362,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1698.572,-1253.745,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19375,1698.949,-1244.124,13.694,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1703.434,-1239.287,13.897,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1703.421,-1229.706,13.897,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1703.472,-1220.083,13.897,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1703.497,-1210.483,13.897,0.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1684.590,-1283.216,14.308,0.000,0.000,319.816);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1694.859,-1283.299,14.308,0.000,0.000,319.816);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1661.876,-1224.360,15.120,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(4100,1661.876,-1204.064,15.120,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19452,1703.319,-1248.240,11.520,30.000,90.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 10403, "golf_sfs", "golf_greengrass", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1695.795,-1279.547,8.559,0.000,0.000,40.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1696.959,-1273.934,8.559,0.000,0.000,40.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1696.783,-1266.104,8.559,0.000,0.000,40.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1698.260,-1259.300,8.559,0.000,0.000,40.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1698.434,-1243.092,8.740,0.000,0.000,140.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1697.935,-1235.068,8.740,0.000,0.000,140.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1697.358,-1226.719,8.740,0.000,0.000,140.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1696.544,-1218.098,8.740,0.000,0.000,140.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1693.929,-1212.164,8.740,0.000,0.000,140.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1687.475,-1214.769,8.740,0.000,0.000,180.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1683.783,-1214.782,8.740,0.000,0.000,180.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1691.550,-1278.321,8.559,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1686.100,-1278.249,8.559,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1680.196,-1277.960,8.559,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19388,1681.878,-1228.469,12.238,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19388,1680.869,-1232.283,12.238,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19388,1680.764,-1237.099,12.238,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19388,1680.799,-1242.058,12.238,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19388,1679.947,-1246.865,12.238,0.000,0.000,50.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(1361,1655.618,-1251.496,14.564,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(1361,1655.709,-1244.857,14.564,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(966,1660.070,-1288.138,14.138,-178.000,4.000,180.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1648.710,-1264.370,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1635.035,-1258.214,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1636.201,-1286.240,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1641.056,-1286.240,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1645.521,-1286.240,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	Krankenhaus2 = CreateDynamicObject(19379,1650.460,-1286.240,8.740,0.000,0.000,0.000);
	SetDynamicObjectMaterial(Krankenhaus2, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);

	Krankenhaus2 = CreateDynamicObject(968,1660.011,-1288.172,14.519,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(18766,1704.249,-1242.607,11.411,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(717,1702.978,-1239.525,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1702.888,-1256.191,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1702.487,-1270.056,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1702.929,-1283.256,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1693.670,-1285.567,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1681.563,-1285.346,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1276.221,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1262.489,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1248.776,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1235.063,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1221.370,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1701.399,-1207.637,14.308,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(4100,1643.417,-1217.477,15.120,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3934,1652.731,-1216.016,13.842,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(3934,1652.798,-1230.471,20.253,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.262,-1211.302,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.245,-1216.436,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.317,-1221.558,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.343,-1226.346,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.448,-1231.707,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.193,-1237.419,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.127,-1241.661,14.022,0.000,0.000,30.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.946,-1247.119,14.022,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.127,-1252.824,14.022,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1703.015,-1258.516,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.812,-1262.864,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.934,-1268.169,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.986,-1272.205,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.831,-1276.335,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.855,-1280.795,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1702.535,-1284.658,13.527,0.000,0.000,20.000);
	Krankenhaus2 = CreateDynamicObject(3520,1699.393,-1284.984,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3520,1695.347,-1285.262,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3520,1691.243,-1285.416,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3520,1687.672,-1285.347,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3520,1683.875,-1285.350,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(3520,1679.832,-1285.180,13.527,0.000,0.000,50.000);
	Krankenhaus2 = CreateDynamicObject(717,1703.101,-1224.110,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(717,1702.947,-1210.542,13.782,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1686.437,-1286.043,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1698.688,-1285.861,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1702.913,-1275.453,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1703.199,-1262.199,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1703.030,-1248.237,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1702.973,-1231.579,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1703.325,-1217.361,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1214.818,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1231.504,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1246.139,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1259.829,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1273.607,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1677.084,-1287.168,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1628.578,-1260.796,16.445,356.858,0.000,3.141);
	Krankenhaus2 = CreateDynamicObject(1232,1654.601,-1263.021,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1654.709,-1287.181,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(19388,1675.062,-1228.191,12.238,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(19388,1674.921,-1218.788,12.238,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(19388,1679.062,-1261.699,12.238,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(19388,1679.020,-1268.647,12.238,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(1232,1661.481,-1208.115,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1232,1643.985,-1224.192,14.729,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(1361,1655.802,-1240.098,14.564,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(8843,1665.142,-1264.107,13.817,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(8843,1685.723,-1253.307,13.817,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(2942,1653.526,-1251.785,15.074,0.000,0.000,90.000);
	Krankenhaus2 = CreateDynamicObject(11245,1657.240,-1258.297,20.191,0.000,0.000,0.000);
	Krankenhaus2 = CreateDynamicObject(3934,1649.003,-1258.184,20.253,0.000,0.000,0.000);

    //Los Santos Airport Tankstelle - Map by Blacktrax
    static AirPortTanke;
	AirPortTanke = CreateObject(11417,1852.352,-2395.712,17.008,0.000,0.000,0.000);
	SetObjectMaterial(AirPortTanke, 0, 849, "junkpiles", "ws_oldredbrick", 0);
	SetObjectMaterial(AirPortTanke, 1, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 2, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 4, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 5, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 6, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	AirPortTanke = CreateObject(3287,1866.174,-2372.999,16.556,0.000,0.000,0.000);
	SetObjectMaterial(AirPortTanke, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 1, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	AirPortTanke = CreateObject(3287,1847.377,-2389.329,16.556,0.000,0.000,90.000);
	SetObjectMaterial(AirPortTanke, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 1, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	AirPortTanke = CreateObject(9361,1875.991,-2374.722,15.011,0.000,0.000,0.000);
	SetObjectMaterial(AirPortTanke, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 1, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 2, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 3, 3603, "bevmans01_la", "genroof01_128", 0);
	SetObjectMaterial(AirPortTanke, 4, 849, "junkpiles", "ws_oldredbrick", 0);
	SetObjectMaterial(AirPortTanke, 5, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	SetObjectMaterial(AirPortTanke, 6, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 7, 4830, "airport2", "sanairtex1", 0);
	SetObjectMaterial(AirPortTanke, 8, 4828, "airport3_las", "mirrwind1_LAn", 0);
	AirPortTanke = CreateObject(2607,1874.282,-2376.641,13.025,0.000,0.000,180.000);
	SetObjectMaterial(AirPortTanke, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 2, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 3, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	AirPortTanke = CreateObject(2356,1874.389,-2377.734,12.635,0.000,0.000,0.000);
	SetObjectMaterial(AirPortTanke, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 1, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	AirPortTanke = CreateObject(2607,1876.606,-2371.628,13.028,0.000,0.000,0.000);
	SetObjectMaterial(AirPortTanke, 0, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 2, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 8, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	AirPortTanke = CreateObject(2356,1876.674,-2370.685,12.660,0.000,0.000,180.000);
	SetObjectMaterial(AirPortTanke, 0, 1826, "kbmiscfrn1", "wee_blak_32", 0);
	SetObjectMaterial(AirPortTanke, 1, 10355, "haight1_sfs", "ws_apartmentwhite2", 0);
	SetObjectMaterial(AirPortTanke, 3, 1706, "kbcouch1", "kb_sofa555c", 0);

	AirPortTanke = CreateObject(11417,1872.010,-2378.766,17.008,0.000,0.000,0.000);
	AirPortTanke = CreateObject(3934,1863.109,-2387.403,12.633,0.000,0.000,-47.000);
	AirPortTanke = CreateObject(1676,1871.287,-2379.297,14.354,0.000,0.000,317.850);
	AirPortTanke = CreateObject(1676,1852.876,-2395.200,14.354,0.000,0.000,317.850);
	AirPortTanke = CreateObject(3850,1870.825,-2379.635,12.988,0.000,0.000,47.000);
	AirPortTanke = CreateObject(3850,1853.094,-2394.708,12.988,0.000,0.000,47.000);
	AirPortTanke = CreateObject(19123,1872.199,-2380.167,13.051,0.000,0.000,0.000);
	AirPortTanke = CreateObject(19123,1870.488,-2378.501,13.051,0.000,0.000,0.000);
	AirPortTanke = CreateObject(19123,1853.854,-2396.111,13.051,0.000,0.000,0.000);
	AirPortTanke = CreateObject(19123,1851.912,-2394.409,13.051,0.000,0.000,0.000);
	CreateObject(1569, 1876.52466, -2376.37744, 12.22666,   0.00000, 0.00000, 45.83398);
	CreateObject(1569, 1878.57446, -2374.27075, 12.22670,   0.00000, 0.00000, 225.26511);
	
	//Los Santos - Offroad Autohaus
	static tmpobjid;
	tmpobjid = CreateDynamicObject(18980,1901.8973,-1596.5008,19.4396,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1868.3242,-1583.2447,21.3267,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1871.7353,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1867.2465,-1599.0867,13.7944,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1913.9062,-1584.4792,19.4389,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1900.9212,-1577.6973,19.4400,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1906.6433,-1584.4989,19.4395,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1867.0081,-1601.7120,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6737,-1601.6882,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1867.0086,-1589.7141,19.4389,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1877.3793,-1596.5062,19.4395,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6760,-1589.6932,19.4395,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1872.7022,-1596.5089,19.4389,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1875.9342,-1577.6954,19.4395,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1872.7365,-1577.6949,19.4395,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1913.8966,-1577.8385,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1906.6433,-1577.7362,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6759,-1577.6943,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1867.0908,-1577.7181,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1867.1068,-1596.4987,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1860.5946,-1599.1782,13.7043,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6765,-1596.5804,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19439,1860.6529,-1597.1567,13.7159,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.6529,-1597.1567,17.2093,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.6057,-1601.1068,13.7159,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.6057,-1601.1068,17.2073,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1866.3482,-1596.4719,10.6158,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1884.7650,-1596.4675,10.6159,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1882.2932,-1596.4916,10.6158,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1900.2873,-1596.4931,10.6159,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1897.6834,-1596.4512,10.6158,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1869.5456,-1596.6064,13.7643,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1873.5266,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1877.5134,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1881.5159,-1596.6064,13.7843,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1885.4940,-1596.6064,13.7643,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1889.4775,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1893.4833,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1897.4658,-1596.6064,13.6243,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1901.4523,-1596.6071,13.5943,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1905.4456,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1913.9141,-1596.5024,7.4387,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19378,1875.5987,-1596.5405,12.4642,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19378,1891.2869,-1596.5184,12.4642,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19378,1906.9418,-1596.5266,12.4642,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1915.6191,-1596.4989,10.6159,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1908.3660,-1596.6064,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1912.2913,-1596.6064,13.8343,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19378,1914.1643,-1587.2005,12.4642,45.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1913.9060,-1579.1877,10.6159,0.0000,135.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1913.8796,-1595.8426,10.6159,0.0000,45.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1868.3315,-1590.9079,21.3267,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1905.0268,-1590.5502,21.3267,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18762,1868.5759,-1596.4602,21.1433,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1873.1145,-1596.4749,17.3279,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1876.7852,-1596.4848,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1882.4885,-1596.4580,22.7525,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1888.0985,-1596.4848,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1898.1491,-1596.4843,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18762,1905.1077,-1596.4790,21.1313,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1891.2083,-1596.4749,22.7525,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1906.6905,-1596.5456,17.3279,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1867.2792,-1601.1068,17.2073,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1867.2789,-1601.1068,13.7159,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1867.2719,-1597.1567,17.2094,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1867.2756,-1597.1567,13.7159,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(3851,1863.8386,-1595.7282,19.8073,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7482,-1599.6621,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8840,-1599.6145,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.5187,-1601.7319,17.7523,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1866.0683,-1601.7403,17.7523,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1866.0661,-1601.7427,14.2653,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.5032,-1601.7291,14.2774,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18762,1862.7087,-1601.6735,19.4337,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1864.9943,-1601.6911,19.4335,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1914.0903,-1594.1999,13.7743,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1914.0903,-1590.2128,14.1744,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1914.0899,-1587.2843,14.1744,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1914.0903,-1583.3367,13.6243,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1914.0903,-1579.3486,13.5943,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19378,1898.7932,-1577.8311,12.4642,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1907.3936,-1577.6976,10.6159,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1889.5393,-1577.6993,10.6158,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1904.1988,-1577.8970,13.7543,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1900.1959,-1577.8780,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1897.4658,-1577.8970,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1893.4833,-1577.8970,13.6643,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1885.4940,-1577.8970,13.7243,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1889.4895,-1577.8970,13.6943,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1877.5134,-1577.8970,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1881.5159,-1577.8970,13.7043,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1869.5456,-1577.8970,13.9643,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1873.5266,-1577.8970,14.1744,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19378,1875.5791,-1577.8145,12.4642,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1866.2869,-1577.7030,10.6158,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1884.6992,-1577.6987,10.6159,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1868.5759,-1577.7542,21.1434,0.0000,45.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1882.4833,-1577.7608,22.7525,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1905.1077,-1577.7017,21.1313,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1891.1939,-1577.7117,22.7525,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1905.0180,-1582.9807,21.3267,0.0000,135.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1873.1923,-1577.8719,17.3279,45.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1876.7852,-1577.8729,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1888.0985,-1577.8729,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1898.1491,-1577.8719,21.1828,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1900.9866,-1577.8891,17.3279,135.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1875.7249,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1879.7172,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1883.7071,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1887.7060,-1583.2592,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1891.6964,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1895.6888,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1899.6871,-1583.2591,22.7404,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1901.6113,-1583.2596,22.7399,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1871.7500,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1875.7457,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1879.7436,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1883.7432,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1887.7327,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1891.7232,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1895.7165,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1899.7109,-1591.1931,22.7409,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1901.6092,-1591.1931,22.7395,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1882.2432,-1585.8875,22.7520,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1882.2254,-1589.0183,22.7520,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1869.5244,-1579.7717,22.7525,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1869.5244,-1584.7705,22.7525,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1869.5244,-1589.7680,22.7525,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1869.5240,-1594.4573,22.7520,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1890.9033,-1589.0114,22.7530,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1903.8829,-1579.7135,22.7520,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1903.8818,-1584.7036,22.7520,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1903.8818,-1589.6976,22.7520,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1903.8858,-1594.4683,22.7530,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1890.8929,-1585.8857,22.7530,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19378,1908.8349,-1582.7104,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19378,1908.8452,-1591.5861,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19378,1898.3505,-1591.5861,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19378,1887.8493,-1591.5861,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19378,1877.3465,-1591.5861,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19378,1866.8465,-1591.5861,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19378,1898.3439,-1582.7054,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19378,1887.8422,-1582.7054,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19378,1877.3442,-1582.7054,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19378,1866.8491,-1582.7054,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(18980,1856.0772,-1581.2492,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1856.1402,-1591.2838,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1845.5012,-1581.2492,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1845.5097,-1591.2584,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19378,1856.3598,-1585.9975,12.5361,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(3851,1853.7517,-1591.5771,13.7684,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1847.9630,-1591.5715,13.7684,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1845.5607,-1589.2230,13.7683,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1845.5571,-1583.2468,13.6435,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1864.0029,-1577.6387,13.9043,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1866.1573,-1577.6834,14.2653,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.4750,-1577.6744,14.2653,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.4750,-1577.6744,17.7623,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1866.1573,-1577.6834,17.7623,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.2689,-1572.2780,14.2653,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1913.4683,-1572.3041,14.2653,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1911.9277,-1572.2856,17.7451,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1908.7249,-1572.2871,17.7451,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(18980,1913.9094,-1572.4656,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18980,1906.6416,-1572.4656,7.0720,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1913.8460,-1575.1524,13.6743,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1913.8719,-1573.4000,14.2653,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1913.8359,-1576.9202,14.2653,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1913.8359,-1576.9202,17.7658,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1913.8719,-1573.4000,17.7658,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(3851,1906.5362,-1574.9841,13.6744,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1906.5443,-1573.1695,14.2653,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1906.5114,-1576.8320,14.2653,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1906.5443,-1573.1695,17.7658,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1906.5114,-1576.8320,17.7658,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1908.2852,-1576.2967,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1911.7847,-1576.2883,12.5242,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1908.2954,-1573.9239,12.5200,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1911.7905,-1573.9371,12.5200,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1912.0986,-1573.8861,12.5150,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1912.0963,-1577.0904,12.5150,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(3851,1858.5710,-1581.1812,13.8243,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18762,1858.6716,-1581.2443,19.4473,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1860.5604,-1579.2031,13.8143,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6693,-1581.2053,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19366,1865.4943,-1598.0026,12.5248,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19366,1862.3549,-1598.0021,12.5240,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1865.4956,-1600.0208,12.5240,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1862.3553,-1600.0191,12.5229,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19366,1862.6499,-1594.7952,12.5229,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1862.6551,-1591.5870,12.5229,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1862.3249,-1579.5657,12.5249,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19366,1862.3671,-1579.2393,12.5260,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19366,1865.8635,-1579.2468,12.5260,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "citywall1", 0);
	tmpobjid = CreateDynamicObject(19366,1859.1622,-1589.6295,12.5260,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1855.6802,-1589.6329,12.5260,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(18980,1860.6497,-1591.2890,7.4200,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1858.6364,-1591.2937,19.4473,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1860.9071,-1593.8734,13.7243,90.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1910.3410,-1590.4816,19.8432,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1910.3223,-1579.1875,19.8432,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18762,1908.6505,-1572.4801,19.4389,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1911.8934,-1572.4735,19.4395,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(19439,1912.0437,-1573.0644,19.8432,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1908.5454,-1573.0667,19.8432,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.7103,-1575.6174,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.8013,-1575.6091,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.7337,-1579.9174,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.7369,-1583.4083,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.7360,-1586.8983,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.7402,-1590.3981,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1912.7347,-1593.8951,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1911.6993,-1595.7100,19.8430,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1908.2554,-1595.7038,19.8430,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.5629,-1593.3905,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.5659,-1589.8984,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.5709,-1586.4008,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.5682,-1582.9086,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1907.5755,-1579.4091,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.8431,-1595.8930,14.2709,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.8898,-1591.8587,14.2709,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.8898,-1591.8587,17.7623,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1860.8431,-1595.8930,17.7623,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19378,1850.8718,-1586.7465,12.5439,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(3851,1848.0908,-1581.1427,13.7684,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(3851,1854.0717,-1581.1414,13.7684,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19366,1845.5640,-1586.2152,14.2355,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1845.5640,-1586.2152,17.6895,0.0000,0.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19378,1850.8226,-1585.9614,12.5459,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "man_cellarfloor128", 0);
	tmpobjid = CreateDynamicObject(19366,1850.8449,-1591.5548,14.2355,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1850.8449,-1591.5548,17.6895,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1850.9312,-1581.1204,14.2355,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1850.9312,-1581.1204,17.6895,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(3851,1858.3564,-1591.2452,13.7143,90.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(18762,1853.6706,-1581.2443,19.4473,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1848.6728,-1581.2443,19.4473,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1847.5095,-1581.2440,19.4470,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1845.5108,-1584.2401,19.4470,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1845.5108,-1589.2406,19.4470,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1848.6431,-1591.2937,19.4470,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1853.6391,-1591.2937,19.4470,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(18762,1847.5189,-1591.2929,19.4477,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0);
	tmpobjid = CreateDynamicObject(3851,1853.0793,-1586.5042,19.8432,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7424,-1596.1964,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8801,-1596.1372,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8745,-1592.6392,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7374,-1592.7117,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7359,-1589.2196,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(3851,1863.8476,-1584.4147,19.8073,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 3905, "libertyhi2", "bankdoor_64a", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7313,-1585.7270,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8741,-1589.1480,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8703,-1585.6551,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8660,-1582.1575,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1861.8741,-1578.9825,19.7488,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7259,-1582.2304,19.7483,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1865.7290,-1579.1450,19.7488,0.0000,90.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19439,1863.8614,-1578.9583,19.7495,0.0000,90.0000,0.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1863.7882,-1601.7344,17.2358,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1863.7882,-1601.7340,16.7677,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1911.9277,-1572.2860,16.8638,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);
	tmpobjid = CreateDynamicObject(19366,1908.7249,-1572.2860,16.8638,0.0000,0.0000,90.0000,-1,-1,-100);
	SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0);

	tmpobjid = CreateDynamicObject(700,1870.6423,-1599.9730,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1912.3061,-1600.0859,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1898.9667,-1599.8847,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1886.0118,-1600.2359,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1921.5128,-1543.2319,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1930.6984,-1543.4008,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1913.9464,-1550.6911,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1907.0008,-1551.4351,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1898.5217,-1551.5513,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1892.9857,-1559.5080,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1886.5522,-1561.0198,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1875.7659,-1560.9647,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1865.1584,-1561.4880,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1855.9735,-1566.2141,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1847.1906,-1573.0163,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1840.2396,-1581.3269,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1835.7192,-1590.2166,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1833.3651,-1598.6740,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1841.3415,-1601.2642,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1852.1300,-1601.2154,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1930.5052,-1578.4857,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1930.7558,-1559.7917,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1930.5308,-1589.7265,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1930.6790,-1600.2683,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(700,1922.1772,-1600.4927,12.9921,356.8583,0.0000,-1.5707,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19454,1926.8197,-1567.8153,12.5143,0.0000,90.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19454,1917.8602,-1567.8035,12.5263,0.0000,90.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19454,1913.4556,-1567.7996,12.5299,0.0000,90.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19454,1910.3968,-1567.4356,12.5279,0.0000,90.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(13188,1910.4039,-1572.2983,13.8098,0.0000,0.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19458,1853.7254,-1582.8635,19.7993,0.0000,90.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19458,1853.6330,-1589.8721,19.7993,0.0000,90.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19458,1847.6358,-1585.9888,19.7999,0.0000,90.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(19458,1858.5455,-1586.0341,19.7999,0.0000,90.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(11420,1921.6048,-1555.9298,12.4320,0.0000,0.0000,129.9251,-1,-1,-100);
	tmpobjid = CreateDynamicObject(3763,1922.1943,-1556.3414,43.9861,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(3876,1851.8885,-1570.6771,-11.3847,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2165,1865.8735,-1599.4998,12.6099,0.0000,0.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2356,1866.8066,-1598.8063,12.6131,0.0000,0.0000,90.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1502,1865.2847,-1601.7053,12.5386,0.0000,0.0000,180.0601,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1502,1862.2641,-1601.7705,12.5233,0.0000,0.0000,360.7197,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1868.2254,-1590.4045,13.1158,0.0000,0.0000,-60.0600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1870.8986,-1595.7547,13.1153,0.0000,0.0000,-60.0600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1876.4696,-1591.2604,13.1158,0.0000,0.0000,-60.0600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1878.9636,-1595.5678,13.1158,0.0000,0.0000,-60.0600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1884.3909,-1590.2590,13.1158,0.0000,0.0000,-59.7000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1878.9636,-1595.5678,13.1158,0.0000,0.0000,-60.0600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1887.4125,-1595.1804,13.1158,0.0000,0.0000,-59.7000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1893.3764,-1589.5999,13.1158,0.0000,0.0000,-59.1599,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1896.8342,-1595.4459,13.1158,0.0000,0.0000,-59.1599,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1901.5072,-1589.0097,13.1158,0.0000,0.0000,-52.4999,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1905.7703,-1594.4266,13.1158,0.0000,0.0000,-52.4999,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1901.1341,-1584.1721,13.1158,0.0000,0.0000,-77.5799,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1899.7679,-1578.2603,13.1158,0.0000,0.0000,-79.9799,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1890.2733,-1579.0633,13.1158,0.0000,0.0000,-68.6399,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1882.8016,-1584.5811,13.1158,0.0000,0.0000,-68.6399,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1880.5874,-1578.8051,13.1158,0.0000,0.0000,-68.6399,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1874.7587,-1584.8710,13.1158,0.0000,0.0000,-68.6399,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1872.1690,-1578.5231,13.1158,0.0000,0.0000,-68.6399,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1859.6370,-1585.4525,13.1358,0.0000,0.0000,11.7600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1847.7603,-1588.1879,13.1358,0.0000,0.0000,14.1600,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2773,1892.4381,-1584.6463,13.1158,0.0000,0.0000,-68.5799,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1703,1864.8006,-1579.4555,12.5925,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2118,1865.2589,-1581.2840,12.5701,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1703,1866.7709,-1583.0317,12.5925,0.0000,0.0000,180.1199,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1704,1868.0767,-1581.7215,12.5686,0.0000,0.0000,246.4200,-1,-1,-100);
	tmpobjid = CreateDynamicObject(1704,1867.7457,-1580.0100,12.5686,0.0000,0.0000,294.2402,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1867.6032,-1579.3560,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1867.5426,-1583.1571,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1865.7069,-1602.2065,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1861.9454,-1602.1741,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1846.1975,-1590.5952,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1846.2459,-1581.9079,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1907.6749,-1572.7941,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1913.0784,-1572.8200,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1861.4882,-1601.0671,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);
	tmpobjid = CreateDynamicObject(2010,1913.1794,-1595.1342,12.6110,0.0000,0.0000,0.0000,-1,-1,-100);

	//Los Santos - PNS + Firmengebäude
	CreateDynamicObject(11319, 2115.36865, -1742.34131, 9.65427,   0.00000, 0.00000, -90.12003);
	CreateDynamicObject(19486, 2158.51514, -1733.28491, 15.05593,   0.00000, 0.00000, -179.57990);
	CreateDynamicObject(3294, 2169.74194, -1741.34058, 9.57247,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19376, 2159.97534, -1736.33411, 12.47650,   0.00000, 90.00000, 0.24000);
	CreateDynamicObject(19376, 2149.49976, -1736.39343, 12.47650,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19376, 2159.94751, -1729.84729, 12.47550,   0.00000, 90.00000, 0.24000);
	CreateDynamicObject(19376, 2149.47778, -1729.88330, 12.47450,   0.00000, 90.00000, 0.24000);
	CreateDynamicObject(19376, 2147.89722, -1736.39673, 12.47550,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19376, 2147.93628, -1730.03552, 12.47600,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(1723, 2164.54419, -1727.65454, 12.56266,   0.00000, 0.00000, -88.31995);
	CreateDynamicObject(1724, 2163.19507, -1726.02039, 12.56189,   0.00000, 0.00000, -32.21999);
	CreateDynamicObject(1723, 2160.14795, -1725.91443, 12.56266,   0.00000, 0.00000, -0.05994);
	CreateDynamicObject(2008, 2163.60229, -1735.45667, 12.56297,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19397, 2165.32568, -1733.28577, 14.29387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, 2166.25464, -1731.96875, 16.46170,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1846, 2166.27417, -1734.74878, 16.46170,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19415, 2163.62720, -1731.75403, 14.29485,   0.00000, 0.00000, -90.21999);
	CreateDynamicObject(19397, 2160.42944, -1731.73328, 14.29390,   0.00000, 0.00000, -90.56000);
	CreateDynamicObject(19369, 2158.71069, -1726.98987, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2158.68823, -1730.19299, 14.29490,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19369, 2158.70996, -1726.76990, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2163.64282, -1734.82764, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2160.44287, -1734.82764, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2157.23242, -1734.83716, 14.29390,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(2191, 2164.73022, -1738.06287, 12.48610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2187, 2163.36670, -1735.59241, 12.54480,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2008, 2161.21729, -1735.45715, 12.56300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2187, 2160.95068, -1735.46436, 12.54480,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2008, 2158.79224, -1735.45007, 12.56300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2187, 2158.60840, -1735.45715, 12.54480,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2163, 2162.64648, -1738.28052, 12.56430,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 2161.84009, -1738.33191, 12.56430,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2163, 2160.08008, -1738.33191, 12.56430,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2163, 2160.88647, -1738.28052, 12.56430,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 2160.93652, -1741.10974, 12.56480,   0.00000, 0.00000, 180.12000);
	CreateDynamicObject(19415, 2155.71509, -1736.52991, 14.29490,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19369, 2155.71436, -1739.70569, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2067, 2155.89575, -1739.87805, 12.56420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2067, 2155.89575, -1739.29810, 12.56420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2067, 2155.89575, -1738.71814, 12.56420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2011, 2164.71899, -1740.71509, 12.56340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2194, 2162.63013, -1738.30127, 13.77158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2254, 2155.81470, -1739.32520, 14.87760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2247, 2160.02563, -1738.26050, 13.81726,   0.00000, 0.00000, -47.10001);
	CreateDynamicObject(646, 2156.63770, -1740.47913, 13.91466,   0.00000, 0.00000, 39.41999);
	CreateDynamicObject(1714, 2159.78394, -1736.66626, 12.56460,   0.00000, 0.00000, 184.37981);
	CreateDynamicObject(1714, 2162.34424, -1736.64270, 12.56464,   0.00000, 0.00000, 184.37982);
	CreateDynamicObject(1714, 2164.70239, -1736.65955, 12.56460,   0.00000, 0.00000, 184.37981);
	CreateDynamicObject(1502, 2165.24487, -1732.49683, 12.52420,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(1502, 2159.66968, -1731.73828, 12.54480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2156.47852, -1734.89185, 12.54480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, 2154.74927, -1736.46045, 14.44930,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 2157.75659, -1730.06116, 14.44930,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 2163.62036, -1730.79980, 14.44930,   90.00000, 0.00000, 0.24000);
	CreateDynamicObject(2894, 2158.98853, -1735.35046, 13.37538,   0.00000, 0.00000, 12.36000);
	CreateDynamicObject(2261, 2159.04175, -1735.42615, 13.86480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, 2161.74194, -1734.92554, 14.25060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, 2164.04541, -1734.92590, 14.24650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2828, 2161.37231, -1735.15198, 13.36802,   0.00000, 0.00000, -188.64006);
	CreateDynamicObject(2826, 2163.79736, -1735.36047, 13.36946,   0.00000, 0.00000, 28.67999);
	CreateDynamicObject(2266, 2163.57373, -1734.23608, 13.87770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2261, 2161.98145, -1734.21997, 14.26120,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(2256, 2160.06665, -1734.71887, 14.71960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2011, 2164.54297, -1726.73376, 12.56340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 2159.39136, -1725.60217, 13.91466,   0.00000, 0.00000, -58.55995);
	CreateDynamicObject(2118, 2161.84448, -1727.76086, 12.53678,   0.00000, 0.00000, -33.53999);
	CreateDynamicObject(2071, 2164.69775, -1725.32336, 13.82649,   0.00000, 0.00000, -30.06000);
	CreateDynamicObject(1510, 2162.73584, -1728.25781, 13.34715,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3028, 2158.79126, -1727.93909, 14.07610,   180.00000, -30.00000, 76.92010);
	CreateDynamicObject(3028, 2158.82739, -1727.24634, 14.07610,   180.00000, -30.00000, -96.58020);
	CreateDynamicObject(2011, 2164.60718, -1731.03088, 12.56340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2163.65479, -1733.29126, 15.94530,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 2160.41479, -1733.29089, 15.94560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1714, 2143.60889, -1738.18933, 12.52410,   0.00000, 0.00000, 90.66000);
	CreateDynamicObject(2207, 2145.56738, -1739.09119, 12.52406,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(1808, 2161.93579, -1731.48120, 12.56279,   0.00000, 0.00000, 179.88007);
	CreateDynamicObject(1828, 2146.41919, -1738.20874, 12.54366,   0.00000, 0.00000, -92.33990);
	CreateDynamicObject(1841, 2143.08594, -1741.01697, 14.84810,   0.00000, -20.00000, 227.45990);
	CreateDynamicObject(1841, 2143.12427, -1735.32727, 14.84810,   0.00000, -20.00000, 137.04021);
	CreateDynamicObject(2101, 2144.38721, -1740.93835, 13.06851,   0.00000, 0.00000, 179.82007);
	CreateDynamicObject(2314, 2145.11646, -1741.05286, 12.57162,   0.00000, 0.00000, -179.69968);
	CreateDynamicObject(1670, 2145.14355, -1740.91943, 13.10496,   0.00000, 0.00000, -19.44011);
	CreateDynamicObject(1727, 2147.57813, -1738.61365, 12.47289,   0.00000, 0.00000, -105.89999);
	CreateDynamicObject(1727, 2147.33398, -1736.64697, 12.47289,   0.00000, 0.00000, -73.91997);
	CreateDynamicObject(1786, 2142.56250, -1739.66077, 13.13880,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(2190, 2145.15137, -1739.39893, 13.28799,   0.00000, 0.00000, -150.60011);
	CreateDynamicObject(2332, 2143.22778, -1735.48608, 12.96358,   0.00000, 0.00000, 90.17995);
	CreateDynamicObject(2344, 2143.74780, -1740.95166, 13.07660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2835, 2144.41553, -1738.73425, 12.55580,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(1665, 2144.79126, -1737.53064, 13.31889,   0.00000, 0.00000, 279.06000);
	CreateDynamicObject(1484, 2144.68335, -1737.28223, 13.48765,   -10.00000, 30.00000, 0.00000);
	CreateDynamicObject(2614, 2145.52881, -1735.09961, 15.13813,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(2255, 2143.37988, -1739.39099, 14.37490,   0.00000, 0.00000, 91.32000);
	CreateDynamicObject(3017, 2145.38403, -1738.03479, 13.31526,   0.00000, 0.00000, 95.22001);
	CreateDynamicObject(19369, 2154.06323, -1734.83911, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2147.63721, -1734.84656, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2150.85034, -1734.84509, 14.29390,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(19369, 2147.99683, -1733.39136, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2147.99634, -1732.93140, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2150.62720, -1731.67395, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2153.83276, -1731.67346, 14.29490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2157.04272, -1731.68896, 14.29390,   0.00000, 0.00000, -90.56000);
	CreateDynamicObject(19369, 2147.41528, -1731.67395, 14.29400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2150.11255, -1734.85400, 12.54480,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(1502, 2156.29785, -1731.71094, 12.54480,   0.00000, 0.00000, -0.60000);
	CreateDynamicObject(19369, 2147.99512, -1729.73108, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2147.99512, -1726.53113, 14.29490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, 2154.57324, -1730.20764, 12.56328,   0.00000, 0.00000, -88.92000);
	CreateDynamicObject(2186, 2152.23218, -1730.27466, 12.56328,   0.00000, 0.00000, -88.92000);
	CreateDynamicObject(2186, 2149.95044, -1730.28162, 12.56328,   0.00000, 0.00000, -88.92000);
	CreateDynamicObject(2002, 2149.05371, -1735.44800, 12.56428,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 2150.43115, -1725.15906, 12.56420,   0.00000, 0.00000, 1.50000);
	CreateDynamicObject(2164, 2153.71265, -1725.09888, 12.56420,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(2164, 2156.87061, -1725.11353, 12.56420,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(2162, 2148.08862, -1728.28931, 12.56324,   0.00000, 0.00000, 90.11998);
	CreateDynamicObject(631, 2148.74731, -1725.84094, 13.42060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 2152.47607, -1725.66016, 13.42060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 2155.64258, -1725.58545, 13.42060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, 2158.57471, -1727.18909, 14.49157,   0.00000, 0.00000, -90.12003);
	CreateDynamicObject(2239, 2143.15674, -1736.16040, 12.54591,   0.00000, 0.00000, 74.46001);
	CreateDynamicObject(1726, 2154.93188, -1736.30896, 12.56374,   0.00000, 0.00000, -89.04002);
	CreateDynamicObject(1727, 2151.94507, -1739.46802, 12.52779,   0.00000, 0.00000, 141.89987);
	CreateDynamicObject(1726, 2152.10254, -1735.53723, 12.56374,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(2031, 2152.32324, -1737.33984, 12.46558,   0.00000, 0.00000, -35.70000);
	CreateDynamicObject(2011, 2155.11963, -1735.46899, 12.56340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1962, 2148.11499, -1733.24500, 14.33725,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2284, 2155.59570, -1734.27515, 14.01790,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2286, 2154.08472, -1734.73425, 14.83270,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(2287, 2152.46948, -1734.27844, 13.97710,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2276, 2158.80054, -1732.31628, 13.94860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2261, 2154.40601, -1732.26208, 13.98840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2262, 2152.70752, -1732.24365, 13.73234,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 2150.89502, -1732.26563, 13.93160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 2148.46118, -1732.16284, 12.56345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, 2155.59937, -1739.25781, 14.70430,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19369, 2157.23438, -1733.27100, 15.94530,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 2154.01978, -1733.30725, 15.94560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 2150.78589, -1733.23755, 15.94530,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 2147.56152, -1733.20642, 15.94560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19466, 2155.75464, -1739.88477, 16.66722,   0.00000, 0.00000, 0.54000);
	CreateDynamicObject(19466, 2155.75122, -1737.64807, 16.66720,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19466, 2158.72168, -1730.61951, 16.66720,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19466, 2155.76270, -1735.41760, 16.82720,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19466, 2154.63086, -1734.80383, 16.66720,   0.00000, 0.00000, 89.03999);
	CreateDynamicObject(19466, 2152.39893, -1734.78381, 16.66720,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19466, 2150.18896, -1734.77344, 16.66720,   0.00000, 0.00000, 89.64001);
	CreateDynamicObject(19466, 2147.95190, -1734.81274, 16.66720,   0.00000, 0.00000, 92.51996);
	CreateDynamicObject(19466, 2156.86084, -1734.83960, 16.66720,   0.00000, 0.00000, 88.85999);
	CreateDynamicObject(19466, 2159.08716, -1734.85193, 16.66720,   0.00000, 0.00000, 90.41998);
	CreateDynamicObject(19466, 2161.31006, -1734.83398, 16.66720,   0.00000, 0.00000, 90.41998);
	CreateDynamicObject(19466, 2163.53247, -1734.81177, 16.66720,   0.00000, 0.00000, 90.41998);
	CreateDynamicObject(19466, 2164.19312, -1734.80530, 16.66720,   0.00000, 0.00000, 90.42000);
	CreateDynamicObject(19466, 2158.74707, -1728.38940, 16.66720,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19466, 2158.74707, -1726.14941, 16.66720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2164.17212, -1731.67944, 16.66720,   0.00000, 0.00000, 89.15999);
	CreateDynamicObject(19466, 2159.85181, -1731.67688, 16.66720,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(19466, 2164.18604, -1731.70422, 16.66720,   0.00000, 0.00000, 89.04000);
	CreateDynamicObject(19466, 2162.07202, -1731.67944, 16.66720,   0.00000, 0.00000, 90.54002);
	CreateDynamicObject(19466, 2157.63794, -1731.65771, 16.66720,   0.00000, 0.00000, 89.28000);
	CreateDynamicObject(19466, 2155.39722, -1731.62903, 16.66720,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(19466, 2153.17725, -1731.60901, 16.66720,   0.00000, 0.00000, 89.28000);
	CreateDynamicObject(19466, 2150.97729, -1731.60901, 16.66720,   0.00000, 0.00000, 90.59998);
	CreateDynamicObject(19466, 2148.73730, -1731.62903, 16.66720,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(19466, 2148.03394, -1730.49646, 16.66720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 2148.03394, -1728.25647, 16.62720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 2148.01416, -1726.03345, 16.62720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 2139.78394, -1741.85583, 14.12920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 2134.61084, -1741.86377, 14.12920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 2124.91211, -1741.84692, 14.12920,   0.00000, 0.00000, 181.32001);
	CreateDynamicObject(1414, 2136.65894, -1741.72961, 13.70390,   0.00000, 0.00000, 179.58014);
	CreateDynamicObject(19425, 2129.78076, -1741.47937, 12.56271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 2124.56372, -1728.07715, 13.78480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(849, 2125.87744, -1724.46082, 12.82889,   0.00000, 0.00000, 44.45999);
	CreateDynamicObject(1358, 2133.02173, -1723.90393, 13.69799,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1349, 2130.26172, -1724.26477, 13.10900,   0.00000, 0.00000, -52.79999);
	CreateDynamicObject(1349, 2128.62012, -1723.84839, 13.10900,   0.00000, 0.00000, 14.03999);
	CreateDynamicObject(1349, 2129.39526, -1724.90381, 13.10723,   0.00000, 0.00000, -181.43987);
	CreateDynamicObject(1265, 2135.39795, -1723.79907, 12.92864,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2135.16748, -1724.70935, 12.92864,   0.00000, 0.00000, 120.24004);


	//Los Santos - PNS + Cluckinbell
	CreateDynamicObject(6959, 1397.63074, -1900.62866, 12.54166,   0.00000, 0.00000, -1.62000);
	CreateDynamicObject(6959, 1379.16858, -1901.12671, 12.51771,   0.00000, 0.00000, -6.12000);
	CreateDynamicObject(19447, 1411.76172, -1901.96545, 14.22211,   0.00000, 0.00000, -86.03994);
	CreateDynamicObject(19447, 1402.15442, -1902.51282, 14.23940,   0.00000, 0.00000, -87.41994);
	CreateDynamicObject(19447, 1392.52686, -1902.62244, 14.23954,   0.00000, 0.00000, -91.31994);
	CreateDynamicObject(19447, 1382.90161, -1902.46179, 14.24140,   0.00000, 0.00000, -90.65990);
	CreateDynamicObject(19447, 1373.27515, -1902.34363, 14.23940,   0.00000, 0.00000, -90.65990);
	CreateDynamicObject(19447, 1363.69373, -1902.22717, 14.23991,   0.00000, 0.00000, -90.65990);
	CreateDynamicObject(910, 1376.86646, -1901.73523, 13.68479,   0.00000, 0.00000, 179.88016);
	CreateDynamicObject(1372, 1378.83008, -1898.04517, 12.54303,   0.00000, 0.00000, -179.69989);
	CreateDynamicObject(1358, 1368.03503, -1899.85413, 13.79982,   0.00000, 0.00000, -39.72001);
	CreateDynamicObject(1299, 1373.18872, -1901.06567, 12.92066,   0.00000, 0.00000, -24.24000);
	CreateDynamicObject(1349, 1371.57129, -1901.38806, 13.07146,   0.00000, 0.00000, -61.02002);
	CreateDynamicObject(1349, 1370.89917, -1900.12195, 13.07146,   0.00000, 0.00000, -145.02005);
	CreateDynamicObject(1327, 1379.14746, -1901.60291, 13.29855,   25.02001, 31.92002, -59.69999);
	CreateDynamicObject(3012, 1368.70667, -1899.85986, 13.57699,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3011, 1367.23865, -1899.77588, 13.54057,   5.88001, 107.88002, -50.76000);
	CreateDynamicObject(11319, 1388.48572, -1882.34521, 9.59509,   0.00000, 0.00000, -89.93999);
	CreateDynamicObject(16767, 1408.96399, -1903.96033, 18.49650,   0.00000, 0.00000, 91.32000);
	CreateDynamicObject(1569, 1412.44763, -1886.81836, 12.50270,   0.00000, 0.00000, 1.44000);
	CreateDynamicObject(1569, 1415.44666, -1886.74573, 12.50270,   0.00000, 0.00000, 181.32001);
	CreateDynamicObject(644, 1415.64587, -1883.32446, 12.79097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1412.29443, -1883.37573, 13.10240,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(638, 1407.43652, -1883.31287, 13.07425,   0.00000, 0.00000, 88.92005);
	CreateDynamicObject(1432, 1410.81396, -1886.07251, 12.61545,   0.00000, 0.00000, -55.02002);
	CreateDynamicObject(1432, 1407.67346, -1886.18506, 12.61247,   0.00000, 0.00000, 61.74000);
	CreateDynamicObject(1432, 1399.72253, -1885.50720, 12.61370,   0.00000, 0.00000, -5.99997);
	CreateDynamicObject(1432, 1402.98328, -1885.48547, 12.61166,   0.00000, 0.00000, 50.88002);
	CreateDynamicObject(640, 1401.07837, -1883.15234, 13.10240,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(627, 1415.82739, -1885.99438, 14.29842,   0.00000, 0.00000, 41.39999);
	CreateDynamicObject(1411, 1397.24146, -1890.10413, 14.05027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1372, 1397.71387, -1893.84338, 12.54303,   0.00000, 0.00000, -88.07985);
	CreateDynamicObject(3035, 1389.68567, -1892.61536, 13.26531,   0.00000, 0.00000, 89.93992);
	CreateDynamicObject(1450, 1397.61877, -1892.37500, 13.10384,   0.00000, 0.00000, -83.93999);
	CreateDynamicObject(1449, 1396.73450, -1890.51575, 12.96734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 1396.85901, -1901.15344, 13.02787,   0.00000, 0.00000, 34.44001);
	CreateDynamicObject(1370, 1394.12915, -1893.83398, 13.02887,   0.00000, 0.00000, 73.91998);
	CreateDynamicObject(1370, 1393.32349, -1894.45007, 13.00906,   0.00000, 0.00000, 22.31998);
	CreateDynamicObject(1235, 1404.09875, -1883.15393, 13.02887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1394.06165, -1894.90759, 12.90888,   177.11992, 176.64017, -52.08000);
	CreateDynamicObject(2676, 1395.97327, -1896.51721, 12.62328,   0.00000, 0.00000, 113.09999);
	CreateDynamicObject(2674, 1394.70129, -1892.80774, 12.55020,   0.00000, 0.00000, -36.12001);
	CreateDynamicObject(1369, 1394.45752, -1901.67529, 13.06502,   0.00000, 0.00000, 153.29999);
	CreateDynamicObject(1369, 1393.31226, -1902.03442, 13.10779,   0.00000, 0.00000, 102.71997);
	CreateDynamicObject(2971, 1388.95203, -1901.06458, 12.45954,   0.00000, 0.00000, -18.66000);
	CreateDynamicObject(910, 1390.46252, -1898.00867, 13.74840,   0.00000, 0.00000, 0.78000);
	CreateDynamicObject(2671, 1391.80322, -1899.60425, 12.51161,   0.00000, 0.00000, -42.72000);
	CreateDynamicObject(2670, 1395.15259, -1899.61682, 12.59004,   0.00000, 0.00000, -298.68011);
	CreateDynamicObject(18664, 1398.24963, -1897.76404, 13.89163,   0.00000, 0.00000, 0.96000);
	CreateDynamicObject(1215, 1409.00818, -1882.58643, 13.05515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1412.55054, -1882.64124, 13.05515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1416.11255, -1882.69824, 13.05515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1416.13770, -1886.49768, 13.05510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1416.16992, -1884.55994, 8.34877,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1414.30811, -1882.65320, 8.34880,   90.00000, 0.00000, 88.98000);
	CreateDynamicObject(19463, 1410.74597, -1882.59741, 8.34880,   90.00000, 0.00000, 88.98000);
	CreateDynamicObject(19463, 1407.20557, -1882.53418, 8.34880,   90.00000, 0.00000, 88.98000);
	CreateDynamicObject(19463, 1402.58240, -1882.47205, 8.34880,   90.00000, 0.00000, 88.98000);
	CreateDynamicObject(19463, 1399.63586, -1882.41895, 8.34800,   90.00000, 0.00000, 88.92002);
	CreateDynamicObject(19463, 1398.10913, -1887.13562, 8.34800,   90.00000, 0.00000, 181.56004);
	CreateDynamicObject(19463, 1398.02661, -1884.07434, 8.34750,   90.00000, 0.00000, 181.56000);
	CreateDynamicObject(1412, 1377.22339, -1882.12903, 13.72320,   0.00000, 0.00000, -6.78000);
	CreateDynamicObject(1412, 1368.25696, -1880.94775, 13.72320,   0.00000, 0.00000, -7.86000);
	CreateDynamicObject(1283, 1379.39355, -1874.92554, 15.62500,   356.85840, 0.00000, -91.18353);

	//Los Santos - PNS nähe BSN
	CreateDynamicObject(11319, 1213.59460, -1060.83521, 27.40499,   -0.12000, 2.28000, 269.51996);
	CreateDynamicObject(5728, 1210.76636, -1080.78088, 17.83690,   2.46000, -0.24000, 0.90000);
	CreateDynamicObject(5728, 1216.24255, -1080.75110, 17.87050,   2.46000, -0.30000, 0.72000);
	CreateDynamicObject(3684, 1230.02722, -1013.35693, 34.58529,   0.38159, 0.72000, 94.31992);
	CreateDynamicObject(19447, 1225.95764, -1060.98865, 30.12260,   0.00000, 0.00000, 0.78000);
	CreateDynamicObject(19447, 1226.08875, -1070.59924, 30.12260,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1226.17676, -1077.29456, 30.12260,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1221.50061, -1082.19019, 30.12256,   0.00000, 0.00000, 90.30005);
	CreateDynamicObject(19447, 1221.50061, -1082.19019, 26.62939,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19447, 1226.17676, -1077.29456, 26.63240,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1226.08875, -1070.59924, 26.62308,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1225.95764, -1060.98865, 26.65079,   0.00000, 0.00000, 0.78000);
	CreateDynamicObject(19447, 1211.87390, -1082.23706, 30.12256,   0.00000, 0.00000, 90.30005);
	CreateDynamicObject(19447, 1211.87390, -1082.23706, 26.62393,   0.00000, 0.00000, 90.30005);
	CreateDynamicObject(19447, 1204.87366, -1082.27295, 30.12260,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19447, 1200.08191, -1077.39063, 30.12260,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1204.87366, -1082.27295, 26.62484,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19447, 1200.08191, -1077.39063, 26.63728,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19447, 1199.94946, -1067.77075, 30.12260,   0.00000, 0.00000, 0.84000);
	CreateDynamicObject(19447, 1199.94946, -1067.77075, 26.64251,   0.00000, 0.00000, 0.84000);
	CreateDynamicObject(19447, 1199.84143, -1061.00610, 30.12260,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(3532, 1226.79614, -1064.34399, 28.79569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 1226.82385, -1068.70947, 28.79569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 1226.66687, -1073.14441, 28.79569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 1226.54126, -1076.69177, 28.79569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 1226.80237, -1060.43958, 29.69479,   12.90001, 5.88000, 0.00000);
	CreateDynamicObject(3532, 1226.73279, -1080.61951, 28.48354,   12.90000, 7.37999, 5.28001);
	CreateDynamicObject(3920, 1219.50330, -1082.78027, 30.99400,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(3920, 1206.87744, -1082.82227, 30.99400,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(3532, 1199.44238, -1080.34509, 28.18829,   12.90000, 7.37999, 3.90001);
	CreateDynamicObject(3532, 1199.44202, -1076.62524, 28.68037,   3.36001, 15.05999, 3.90001);
	CreateDynamicObject(3532, 1199.19263, -1072.63171, 28.68037,   3.36001, 15.05999, 3.90001);
	CreateDynamicObject(3532, 1199.28699, -1069.01685, 28.64070,   3.36001, 15.05999, 2.64002);
	CreateDynamicObject(3532, 1199.11328, -1065.11584, 28.64070,   3.36001, 15.05999, 3.90001);
	CreateDynamicObject(3532, 1198.98938, -1061.15881, 29.34658,   14.46001, 14.51999, 3.90001);
	CreateDynamicObject(3532, 1199.04956, -1058.34705, 30.39692,   20.40002, 14.63999, 3.90001);
	CreateDynamicObject(19463, 1223.37634, -1065.44385, 30.13980,   -2.46000, 90.00000, 179.64003);
	CreateDynamicObject(19463, 1219.86316, -1074.92603, 29.73190,   -2.46000, 90.00000, 179.82001);
	CreateDynamicObject(19463, 1223.33362, -1075.05591, 29.73190,   -2.46000, 90.00000, 179.82001);
	CreateDynamicObject(19463, 1224.39136, -1075.04651, 29.73140,   -2.40000, 90.48000, 179.82001);
	CreateDynamicObject(19463, 1221.33093, -1080.39429, 29.51000,   0.18000, 92.34000, 270.42001);
	CreateDynamicObject(19463, 1217.39771, -1077.51587, 29.61100,   0.12000, 92.34000, 270.42001);
	CreateDynamicObject(19463, 1212.18982, -1080.48987, 29.47007,   0.18000, 92.34000, 270.42001);
	CreateDynamicObject(19463, 1204.95837, -1080.48193, 29.43010,   0.18000, 92.34000, 270.42001);
	CreateDynamicObject(19463, 1201.79016, -1073.97351, 29.67918,   -2.46000, 90.00000, 180.59998);
	CreateDynamicObject(19463, 1203.15491, -1073.97375, 29.67920,   -2.46000, 90.24000, 180.60001);
	CreateDynamicObject(19463, 1201.67419, -1065.43677, 30.09500,   -2.46000, 90.00000, 180.78000);
	CreateDynamicObject(19463, 1203.25183, -1065.41602, 30.09540,   -2.46000, 90.00000, 180.78000);
	CreateDynamicObject(1408, 1223.19153, -1061.49683, 30.97887,   0.00000, 0.00000, 180.06010);
	CreateDynamicObject(640, 1223.18445, -1060.96619, 31.11637,   0.00000, 0.00000, 89.87999);
	CreateDynamicObject(640, 1220.89233, -1060.94397, 31.11600,   0.00000, 0.00000, 89.46001);
	CreateDynamicObject(1408, 1220.78992, -1061.49744, 30.97890,   0.00000, 0.00000, 180.06010);
	CreateDynamicObject(1408, 1202.60559, -1061.41223, 30.92430,   0.00000, 0.00000, 180.06010);
	CreateDynamicObject(640, 1202.47083, -1060.95422, 30.99440,   -0.12000, -0.36000, 90.30000);
	CreateDynamicObject(870, 1219.89258, -1064.54346, 30.53120,   2.88000, -1.50000, 0.00000);
	CreateDynamicObject(870, 1223.01184, -1068.80933, 30.33319,   0.00000, 0.00000, 37.32000);
	CreateDynamicObject(870, 1220.35535, -1072.28040, 30.11477,   0.00000, 0.00000, 9.77999);
	CreateDynamicObject(870, 1222.84521, -1075.56177, 29.99478,   0.00000, 0.00000, -13.98001);
	CreateDynamicObject(870, 1218.75391, -1078.97888, 30.04116,   0.00000, 0.00000, -59.10002);
	CreateDynamicObject(870, 1214.21521, -1079.42737, 29.77480,   0.00000, 0.00000, -34.62002);
	CreateDynamicObject(759, 1224.56982, -1080.82825, 29.42770,   0.00000, 0.00000, -31.56000);
	CreateDynamicObject(759, 1219.85083, -1068.07019, 30.04560,   0.00000, 0.00000, 13.44001);
	CreateDynamicObject(759, 1213.87561, -1077.56055, 29.52230,   0.00000, 0.00000, -38.93999);
	CreateDynamicObject(859, 1220.22656, -1076.07312, 29.71460,   0.00000, 0.00000, -24.42000);
	CreateDynamicObject(859, 1223.61975, -1071.97046, 29.91757,   0.00000, 0.00000, 25.32000);
	CreateDynamicObject(859, 1220.89746, -1069.61450, 30.01906,   0.00000, 0.00000, 25.32000);
	CreateDynamicObject(859, 1222.86279, -1065.93298, 30.11729,   0.00000, 0.00000, 68.63999);
	CreateDynamicObject(859, 1224.69934, -1062.43982, 30.35674,   0.00000, 0.00000, 81.35998);
	CreateDynamicObject(2936, 1223.66589, -1065.70142, 30.29126,   0.00000, 0.00000, 33.90000);
	CreateDynamicObject(2936, 1221.83423, -1070.33716, 30.08461,   0.00000, 0.00000, 104.52003);
	CreateDynamicObject(749, 1216.26086, -1080.46887, 26.08940,   0.00000, 0.00000, 21.24000);
	CreateDynamicObject(905, 1220.18872, -1076.72571, 29.94323,   0.00000, 0.00000, -60.89999);
	CreateDynamicObject(3929, 1224.69922, -1077.85376, 30.08308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3929, 1218.88318, -1062.30212, 30.57350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1220.52637, -1072.44507, 27.10657,   0.00000, 0.00000, 144.53998);
	CreateDynamicObject(673, 1221.21838, -1062.85718, 27.48343,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1223.17249, -1069.04199, 27.85681,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1222.97375, -1075.71228, 27.10657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1210.94104, -1080.53967, 27.10657,   0.00000, 0.00000, 39.11999);
	CreateDynamicObject(673, 1218.71118, -1079.04456, 27.10657,   0.00000, 0.00000, 77.87999);
	CreateDynamicObject(870, 1210.83398, -1080.47424, 29.77480,   0.00000, 0.00000, -90.42002);
	CreateDynamicObject(870, 1206.49487, -1080.79541, 29.79400,   0.00000, 0.00000, -136.85999);
	CreateDynamicObject(870, 1202.86353, -1075.65625, 29.88044,   0.00000, 0.00000, -164.63998);
	CreateDynamicObject(870, 1202.38953, -1069.64917, 30.16823,   0.00000, 0.00000, -151.31976);
	CreateDynamicObject(870, 1203.65991, -1063.76672, 30.50576,   0.00000, 0.00000, -164.63998);
	CreateDynamicObject(749, 1201.10400, -1063.10229, 26.08940,   0.00000, 0.00000, 124.74001);
	CreateDynamicObject(759, 1209.63184, -1080.82813, 29.42770,   0.00000, 0.00000, -31.56000);
	CreateDynamicObject(759, 1202.10583, -1080.44690, 29.65071,   0.00000, 0.00000, 189.47993);
	CreateDynamicObject(3929, 1200.99109, -1081.72729, 29.81133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3929, 1204.30151, -1066.23279, 30.27499,   0.00000, 0.00000, 32.33999);
	CreateDynamicObject(2936, 1200.60657, -1070.57910, 30.08461,   0.00000, 0.00000, 28.44003);
	CreateDynamicObject(673, 1202.74719, -1075.53882, 27.10657,   0.00000, 0.00000, 86.70000);
	CreateDynamicObject(673, 1201.94287, -1069.73999, 27.18037,   0.00000, 0.00000, 86.70000);
	CreateDynamicObject(1215, 1225.78015, -1056.02698, 31.22980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1199.97754, -1056.16174, 31.14480,   0.00000, 0.00000, -31.98000);
	CreateDynamicObject(19373, 1219.44971, -1062.87793, 30.23780,   -0.18000, 87.84000, 90.00000);
	CreateDynamicObject(19373, 1222.51587, -1062.87280, 30.25080,   0.06000, 87.54000, 90.00000);
	CreateDynamicObject(19373, 1224.42151, -1062.84790, 30.26590,   -0.45000, 87.48000, 90.00000);
	CreateDynamicObject(19373, 1224.37427, -1066.27991, 30.11700,   -0.39000, 87.53990, 89.16000);
	CreateDynamicObject(19373, 1221.19446, -1066.35498, 30.09790,   -0.39000, 87.53990, 90.18000);
	CreateDynamicObject(19373, 1219.45776, -1066.37720, 30.08600,   -0.39000, 87.53990, 90.18000);
	CreateDynamicObject(19373, 1219.43567, -1069.75232, 29.96600,   -0.57000, 88.49970, 94.31995);
	CreateDynamicObject(19373, 1222.57166, -1069.74146, 29.99100,   -0.45000, 88.49980, 93.11990);
	CreateDynamicObject(19373, 1224.40308, -1069.65125, 30.00090,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1224.45459, -1073.00134, 29.91000,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1221.37805, -1073.05261, 29.88999,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1219.60132, -1072.93689, 29.88999,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1219.63208, -1076.35461, 29.80100,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1222.68652, -1076.28125, 29.80800,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1224.50464, -1076.12024, 29.82500,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1224.67529, -1079.60291, 29.73300,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1224.68726, -1080.33179, 29.71500,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1221.61792, -1079.77869, 29.72100,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1221.62366, -1080.40186, 29.70420,   -0.45000, 88.49980, 90.47990);
	CreateDynamicObject(19373, 1218.49023, -1079.85999, 29.70300,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1218.40723, -1080.44812, 29.68500,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1216.47327, -1077.56311, 29.74700,   -0.45000, 88.49980, 89.45990);
	CreateDynamicObject(19373, 1214.26404, -1077.58264, 29.72700,   -0.45000, 88.49980, 89.45990);
	CreateDynamicObject(19373, 1215.26904, -1080.53113, 29.65900,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1212.10046, -1080.50171, 29.63700,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1209.00549, -1080.41882, 29.61700,   -0.45000, 88.49980, 91.01990);
	CreateDynamicObject(19373, 1205.82385, -1080.45190, 29.59700,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1202.71838, -1080.45935, 29.57300,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1201.78760, -1080.45801, 29.56300,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1203.28381, -1077.29102, 29.65940,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1201.68567, -1076.96765, 29.65340,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1201.57874, -1073.78296, 29.73130,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1203.23621, -1074.20154, 29.74045,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1203.82532, -1070.74841, 29.84106,   -0.45000, 88.49980, 89.93990);
	CreateDynamicObject(19373, 1201.64319, -1070.75610, 29.82750,   -0.27400, 87.65980, 89.93990);
	CreateDynamicObject(19373, 1201.73291, -1068.65918, 29.92885,   -1.23000, 89.99966, 180.90001);
	CreateDynamicObject(19373, 1201.69568, -1068.37891, 29.98620,   -2.79000, 90.23970, 180.89999);
	CreateDynamicObject(19373, 1203.29565, -1065.26294, 30.14250,   -2.79000, 90.23970, 180.12000);
	CreateDynamicObject(19373, 1201.66724, -1065.29749, 30.14250,   -2.79000, 90.23970, 180.12000);
	CreateDynamicObject(19373, 1201.55701, -1062.74146, 30.26500,   -2.79000, 90.23970, 180.12000);
	CreateDynamicObject(19373, 1203.22388, -1062.83765, 30.25900,   -2.79000, 90.23970, 180.12000);
	CreateDynamicObject(12978, 1213.43848, -1068.43860, 30.05480,   0.00000, 180.00000, 180.00000);
 	
 	//LSStraßen Breit
 	CreateDynamicObject(713, 1304.77148, -1711.17346, 12.43750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19371, 1304.95691, -1724.74121, 12.54304,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1304.95691, -1727.94360, 12.54300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1304.95691, -1731.15198, 12.54300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19371, 1304.95691, -1734.34155, 12.54300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19121, 1306.49414, -1722.89819, 13.08192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1306.49414, -1736.22070, 13.08190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1303.37354, -1736.20447, 13.08190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1303.37354, -1722.91821, 13.08190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.73328, -1749.37170, 13.23214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.73328, -1774.97046, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.73328, -1800.57434, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1306.73328, -1819.78882, 13.18710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1306.73328, -1832.57874, 13.18710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1303.19849, -1832.44653, 13.18710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1303.19849, -1819.65662, 13.18710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1303.19849, -1800.44214, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1303.19849, -1774.83826, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1303.19849, -1749.23950, 13.23214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1303.19849, -1709.75562, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.69031, -1709.75562, 13.23210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1306.69531, -1690.56177, 13.17810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1303.18726, -1690.56177, 13.17810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, 1304.11169, -1553.07007, 13.05177,   0.00000, 0.00000, -10.26001);
	CreateDynamicObject(1319, 1304.89075, -1547.16565, 13.05180,   0.00000, 0.00000, -10.26000);
	CreateDynamicObject(1319, 1305.67078, -1541.58496, 13.05180,   0.00000, 0.00000, -10.26000);
	CreateDynamicObject(1319, 1307.90137, -1534.59900, 13.05180,   0.00000, 0.00000, -21.95999);
	CreateDynamicObject(1319, 1310.51050, -1527.59558, 13.05180,   0.00000, 0.00000, -21.95999);
	CreateDynamicObject(1319, 1313.16968, -1520.72095, 13.05180,   0.00000, 0.00000, -21.95999);
	CreateDynamicObject(1319, 1317.15369, -1513.84058, 13.05180,   0.00000, 0.00000, -29.69999);
	CreateDynamicObject(1319, 1322.19922, -1506.47168, 13.05180,   0.00000, 0.00000, -29.69999);
	CreateDynamicObject(1319, 1326.44067, -1500.20959, 13.05180,   0.00000, 0.00000, -29.69999);
	CreateDynamicObject(1319, 1330.68665, -1492.59460, 13.05180,   0.00000, 0.00000, -22.43998);
	CreateDynamicObject(1319, 1334.33997, -1485.61182, 13.05180,   0.00000, 0.00000, -22.43998);
	CreateDynamicObject(1319, 1337.39380, -1479.84363, 13.05180,   0.00000, 0.00000, -22.43998);
	CreateDynamicObject(1319, 1339.93445, -1473.47778, 13.05180,   0.00000, 0.00000, -11.33998);
	CreateDynamicObject(1319, 1341.59412, -1466.06226, 13.05180,   0.00000, 0.00000, -11.33998);
	CreateDynamicObject(1319, 1343.25024, -1458.76050, 13.05180,   0.00000, 0.00000, -11.33998);
	CreateDynamicObject(1319, 1344.92273, -1451.26477, 13.05180,   0.00000, 0.00000, -11.33998);
	CreateDynamicObject(1319, 1346.06079, -1443.26123, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1346.53821, -1435.66370, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1347.11707, -1428.02295, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1347.70764, -1419.94568, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1352.00000, -1420.28430, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1351.45227, -1428.27625, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1350.95923, -1435.88037, 13.05180,   0.00000, 0.00000, -1.97998);
	CreateDynamicObject(1319, 1350.43628, -1443.58496, 13.05180,   0.00000, 0.00000, -6.83998);
	CreateDynamicObject(1319, 1349.25854, -1452.14600, 13.05180,   0.00000, 0.00000, -11.87998);
	CreateDynamicObject(1319, 1347.46692, -1459.76465, 13.05180,   0.00000, 0.00000, -11.87998);
	CreateDynamicObject(1319, 1345.81653, -1466.89832, 13.05180,   0.00000, 0.00000, -11.87998);
	CreateDynamicObject(1319, 1344.03284, -1474.61133, 13.05180,   0.00000, 0.00000, -11.87998);
	CreateDynamicObject(1319, 1341.33667, -1481.45813, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1338.09058, -1487.83374, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1334.81543, -1494.35754, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1330.33032, -1502.23413, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1325.83496, -1508.68250, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1320.64014, -1516.42407, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1317.22205, -1522.17126, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1314.52368, -1528.87256, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1311.82361, -1536.15320, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1309.93652, -1542.07764, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1309.23718, -1547.64661, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(1319, 1308.48596, -1552.88379, 13.05180,   0.00000, 0.00000, -23.99998);
	CreateDynamicObject(19425, 1354.30664, -1416.20081, 12.50720,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(19425, 1357.60535, -1416.33081, 12.50720,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(19425, 1360.90515, -1416.46069, 12.50720,   0.00000, 0.00000, -2.16000);
	CreateDynamicObject(19425, 1332.36169, -1402.55627, 12.43320,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(19425, 1332.36230, -1405.85706, 12.43320,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(19425, 1332.36304, -1409.15710, 12.43320,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(19425, 1339.31750, -1384.83557, 12.58120,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1342.61926, -1384.83569, 12.58120,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1345.91797, -1384.82800, 12.58120,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1353.26172, -1291.99634, 12.32220,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1356.55969, -1291.97437, 12.32220,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1359.86804, -1291.97449, 12.32220,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1363.16431, -1291.94836, 12.32220,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1346.01929, -1269.98047, 12.47020,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1342.73413, -1269.98254, 12.47020,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(19425, 1339.40967, -1269.96863, 12.47020,   0.00000, 0.00000, 1080.11987);
	CreateDynamicObject(713, 1306.90125, -1550.53174, 12.43750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(713, 1317.99170, -1517.07275, 12.43750,   0.00000, 0.00000, 21.12000);
	CreateDynamicObject(713, 1337.41553, -1485.59229, 12.43750,   0.00000, 0.00000, 68.27999);
	CreateDynamicObject(713, 1348.17615, -1450.05945, 12.43750,   0.00000, 0.00000, 68.27999);
	CreateDynamicObject(713, 1350.24109, -1420.28809, 12.43750,   0.00000, 0.00000, 68.27999);
	
	//Motorradhaus - Los Santos
	CreateDynamicObject(6959, 2053.08667, -1903.68469, 12.56880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1920.70544, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1917.50085, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1914.29468, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1911.09033, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1907.89600, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1904.68689, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1901.48547, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1898.28296, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1895.09485, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.78955, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2042.99451, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2046.19263, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2049.40259, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2052.60693, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2055.81030, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2059.00562, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2062.19995, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2065.40601, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2068.60986, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2070.29565, -1894.92017, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1898.11792, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1901.31970, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1904.51831, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1907.71936, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1910.92468, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1914.13074, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1917.33582, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1920.53174, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2068.77954, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2065.57666, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2062.37720, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2059.17969, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2055.97656, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2052.79248, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2049.59277, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2046.39856, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2043.20020, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2039.99048, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2056.06934, -1922.25269, 14.33488,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2049.59961, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2043.12915, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2068.82959, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2068.58911, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2062.15259, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2055.83398, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2049.21533, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2042.94214, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2039.01550, -1898.29700, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1904.61987, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1910.99023, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1917.46558, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1917.33459, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1910.79797, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1904.52454, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1898.10168, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2061.58325, -1922.23230, 12.54428,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1898.13708, 16.09923,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1907.75732, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.66260, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1907.74121, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1898.14648, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.68408, -1907.75037, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.62524, -1898.13708, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1687, 2043.16040, -1919.28516, 16.96870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2043.14587, -1917.83154, 17.17393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1690, 2044.45471, -1904.27966, 16.86857,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 2050.06812, -1898.01953, 16.66393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1696, 2048.01172, -1910.97400, 17.20899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 2059.00586, -1915.67114, 17.00679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 2061.54126, -1897.05090, 17.35462,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1687, 2062.97339, -1908.69604, 16.99440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2062.96436, -1907.12427, 17.13713,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2057.09863, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2054.88379, -1920.39417, 13.07195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2050.81812, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2048.42407, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2044.48633, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2041.95959, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2040.93127, -1912.32642, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1909.88586, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1906.00427, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1903.48047, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1899.56470, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1897.02356, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 2068.75781, -1907.04016, 12.53520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 2068.75781, -1908.98645, 12.53520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2256, 2070.18213, -1901.23706, 14.45880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19168, 2061.27441, -1898.87305, 13.40521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19169, 2062.75635, -1898.87305, 13.40520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19170, 2061.27441, -1900.36633, 13.40520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19171, 2062.75635, -1900.35132, 13.40520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 2060.83862, -1900.81738, 12.23561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 2063.21460, -1900.81738, 12.23560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 2063.21460, -1898.40393, 12.23560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 2060.83862, -1898.40393, 12.23560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 2058.91748, -1893.53223, 14.57413,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2266, 2059.29980, -1921.63440, 14.29534,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2773, 2050.78027, -1900.09143, 13.03494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2051.78271, -1898.63269, 13.03490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2051.78271, -1901.58142, 13.03490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2052.70679, -1900.09143, 13.03490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 2053.08667, -1903.68469, 12.56880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1920.70544, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1917.50085, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1914.29468, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1911.09033, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1907.89600, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1904.68689, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1901.48547, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2039.01453, -1898.28296, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.01453, -1895.09485, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2039.78955, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2042.99451, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2046.19263, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2049.40259, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2052.60693, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2055.81030, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2059.00562, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2062.19995, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2065.40601, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2068.60986, -1893.40637, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2070.29565, -1894.92017, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1898.11792, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1901.31970, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1904.51831, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1907.71936, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1910.92468, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1914.13074, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2070.29565, -1917.33582, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2070.29565, -1920.53174, 14.27820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2068.77954, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2065.57666, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2062.37720, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2059.17969, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2055.97656, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2052.79248, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2049.59277, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2046.39856, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2043.20020, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2039.99048, -1922.22754, 14.27820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2056.06934, -1922.25269, 14.33488,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2049.59961, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2043.12915, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2068.82959, -1922.25269, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2068.58911, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2062.15259, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2055.83398, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2049.21533, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2042.94214, -1893.40466, 14.33490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2039.01550, -1898.29700, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1904.61987, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1910.99023, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2039.01550, -1917.46558, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1917.33459, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1910.79797, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1904.52454, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2070.27661, -1898.10168, 14.33490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2061.58325, -1922.23230, 12.54428,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1898.13708, 16.09923,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1907.75732, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2065.13086, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.66260, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1917.37268, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1907.74121, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2044.18030, -1898.14648, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.68408, -1907.75037, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2054.62524, -1898.13708, 16.09920,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1687, 2043.16040, -1919.28516, 16.96870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2043.14587, -1917.83154, 17.17393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1690, 2044.45471, -1904.27966, 16.86857,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 2050.06812, -1898.01953, 16.66393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1696, 2048.01172, -1910.97400, 17.20899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 2059.00586, -1915.67114, 17.00679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 2061.54126, -1897.05090, 17.35462,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1687, 2062.97339, -1908.69604, 16.99440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 2062.96436, -1907.12427, 17.13713,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2057.09863, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2054.88379, -1920.39417, 13.07195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2050.81812, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2048.42407, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2044.48633, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2041.95959, -1920.39417, 13.07200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2040.93127, -1912.32642, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1909.88586, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1906.00427, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1903.48047, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1899.56470, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 2040.93127, -1897.02356, 13.07200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1233, 2063.21484, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2052.99951, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2043.38098, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2034.01221, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2024.51294, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2012.95349, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2002.21045, -1942.77319, 13.41540,   0.00000, 0.00000, 180.00000);
 	
	//Krankenhaus Interior
    CreateDynamicObject(14671,2037.498,-2173.931,-327.473,0.0,0.0,0.0);
	CreateDynamicObject(2146,1159.953,-1330.178,-1.381,0.0,0.0,0.0);
	CreateDynamicObject(2842,1939.128,-2117.918,-20.328,0.0,0.0,0.0);
	CreateDynamicObject(2596,1144.126,-1334.952,0.995,0.0,0.0,-180.000);
	CreateDynamicObject(2842,1939.164,-2114.378,-20.328,0.0,0.0,0.0);
	CreateDynamicObject(2842,1939.084,-2121.369,-20.328,0.0,0.0,0.0);
	CreateDynamicObject(1998,1169.087,-1334.863,-1.867,0.0,0.0,-90.000);
	CreateDynamicObject(18084,1939.069,-2112.719,-16.949,0.0,0.0,-180.000);
	CreateDynamicObject(18084,1942.699,-2112.763,-16.026,0.0,0.0,-180.000);
	CreateDynamicObject(2007,1165.102,-1335.826,-1.871,0.0,0.0,-180.000);
	CreateDynamicObject(2163,1168.615,-1336.654,-0.267,0.0,0.0,-180.000);
	CreateDynamicObject(2008,1167.058,-1334.885,-1.867,0.0,0.0,0.0);
	CreateDynamicObject(1806,1169.290,-1335.995,-1.847,0.0,0.0,-90.000);
	CreateDynamicObject(2008,1147.731,-1315.746,-1.860,0.0,0.0,-90.000);
	CreateDynamicObject(2371,1150.863,-1314.208,-0.598,0.0,-84.225,-270.001);
	CreateDynamicObject(2381,1150.264,-1315.317,-0.429,0.0,0.0,0.0);
	CreateDynamicObject(2394,1150.238,-1315.311,-1.152,0.0,0.0,0.0);
	CreateDynamicObject(1726,1161.378,-1325.811,-1.874,0.0,0.0,-270.001);
	CreateDynamicObject(2762,1163.457,-1324.102,-1.455,0.0,0.0,-89.381);
	CreateDynamicObject(2164,1164.710,-1314.997,-1.873,0.0,0.0,0.0);
	CreateDynamicObject(2162,1165.580,-1314.992,-0.023,0.0,0.0,0.0);
	CreateDynamicObject(2816,1939.097,-2106.794,-19.488,0.0,0.0,0.0);
	CreateDynamicObject(2813,1938.396,-2107.639,-19.488,0.0,0.0,0.0);
	CreateDynamicObject(2826,1935.881,-2105.390,-19.488,0.0,0.0,0.0);
	CreateDynamicObject(2827,1165.274,-1324.607,-1.023,0.0,0.0,-173.606);
	CreateDynamicObject(2829,1942.881,-2108.283,-19.488,0.0,0.0,-22.500);
	CreateDynamicObject(2853,1163.462,-1323.601,-1.037,0.0,0.0,175.325);
	CreateDynamicObject(2855,1166.380,-1326.594,-1.354,0.0,0.0,-22.500);
	CreateDynamicObject(18084,1936.491,-2112.776,-17.061,0.0,0.0,-180.000);
	CreateDynamicObject(18084,1935.039,-2112.786,-17.064,0.0,0.0,-180.000);
	CreateDynamicObject(18084,1933.684,-2110.610,-17.011,0.0,0.0,-90.000);
	CreateDynamicObject(18084,1931.040,-2113.303,-16.951,0.0,0.0,-90.000);
	CreateDynamicObject(7191,1171.660,-1331.668,-0.169,0.0,0.0,0.0);
	CreateDynamicObject(7191,1171.674,-1324.462,1.157,0.0,0.0,0.0);
	CreateDynamicObject(7191,1162.634,-1336.267,-0.893,0.0,0.0,-92.819);
	CreateDynamicObject(7191,1160.952,-1336.205,1.459,0.0,0.0,-92.819);
	CreateDynamicObject(7191,1141.308,-1333.862,-1.682,0.0,1.719,179.623);
	CreateDynamicObject(7191,1141.285,-1326.360,0.231,0.0,1.719,179.623);
	CreateDynamicObject(7191,1160.512,-1314.790,-1.158,0.0,0.0,89.381);
	CreateDynamicObject(7191,1151.812,-1314.720,1.795,0.0,0.0,89.381);
	CreateDynamicObject(14671,1146.455,-1323.209,0.122,0.0,0.0,0.0);
	CreateDynamicObject(7191,1146.434,-1326.575,-0.119,0.0,0.0,-92.819);
	CreateDynamicObject(7191,1158.542,-1327.153,2.535,0.0,0.0,-92.819);
	CreateDynamicObject(1491,1171.529,-1327.812,-1.910,0.0,0.0,-181.341);
	CreateDynamicObject(1491,1168.492,-1327.728,-1.922,0.0,0.0,-1.719);
	CreateDynamicObject(7191,1160.587,-1310.262,-0.284,0.0,0.0,0.0);
	CreateDynamicObject(7191,1160.575,-1310.254,2.506,0.0,0.0,0.0);
	CreateDynamicObject(7191,1160.792,-1311.028,0.024,0.0,1.719,179.623);
	CreateDynamicObject(7191,1160.727,-1315.525,2.481,0.0,1.719,179.623);
	CreateDynamicObject(1491,1160.729,-1333.115,-1.944,0.0,0.0,-91.100);
	CreateDynamicObject(1491,1160.711,-1336.129,-1.948,0.0,0.0,-269.863);
	CreateDynamicObject(7191,1160.576,-1355.268,2.483,0.0,0.0,0.0);
	CreateDynamicObject(7191,1152.090,-1326.938,2.531,0.0,0.0,86.803);
	CreateDynamicObject(7191,1145.720,-1326.618,-1.319,0.0,0.0,86.803);
	CreateDynamicObject(1506,1171.562,-1323.066,-1.947,0.0,0.0,-90.000);
	CreateDynamicObject(1506,1171.603,-1323.097,-1.954,0.0,0.0,90.482);
	CreateDynamicObject(1569,1160.880,-1318.180,-1.865,0.0,0.0,90.000);
	CreateDynamicObject(1569,1160.862,-1315.178,-1.874,0.0,0.0,269.622);
	CreateDynamicObject(1569,1160.526,-1315.120,-1.887,0.0,0.0,269.622);
	CreateDynamicObject(1569,1160.515,-1318.099,-1.877,0.0,0.0,89.244);
	CreateDynamicObject(14455,1146.982,-1314.742,-0.180,0.0,0.0,-180.000);
	CreateDynamicObject(14455,1141.478,-1315.766,-0.199,0.0,0.0,-90.618);
	CreateDynamicObject(1801,1143.806,-1330.160,-1.863,0.0,0.0,-361.100);
	CreateDynamicObject(1801,1147.622,-1330.359,-1.839,0.0,0.0,-361.100);
	CreateDynamicObject(1801,1151.417,-1330.543,-1.839,0.0,0.0,-361.100);
	CreateDynamicObject(1801,1155.146,-1330.783,-1.814,0.0,0.0,-361.100);
	CreateDynamicObject(2225,1143.254,-1326.523,-1.867,0.0,0.0,-360.001);
	CreateDynamicObject(2225,1147.115,-1326.783,-1.806,0.0,0.0,-360.001);
	CreateDynamicObject(2225,1150.896,-1326.950,-1.817,0.0,0.0,-360.001);
	CreateDynamicObject(2225,1154.620,-1327.215,-1.835,0.0,0.0,-360.001);
	CreateDynamicObject(2190,1143.355,-1326.533,-1.119,0.0,0.0,-361.960);
	CreateDynamicObject(2190,1147.200,-1326.780,-1.071,0.0,0.0,-361.960);
	CreateDynamicObject(2190,1150.982,-1326.957,-1.096,0.0,0.0,-361.960);
	CreateDynamicObject(2190,1154.699,-1327.203,-1.098,0.0,0.0,-361.960);
	CreateDynamicObject(2596,1147.715,-1335.116,1.007,0.0,0.0,-180.000);
	CreateDynamicObject(2596,1152.365,-1335.364,1.183,0.0,0.0,-180.000);
	CreateDynamicObject(2596,1155.961,-1335.535,1.284,0.0,0.0,-180.000);
	CreateDynamicObject(2576,1147.254,-1334.875,-1.878,0.0,0.0,-180.000);
	CreateDynamicObject(2576,1151.635,-1335.039,-1.877,0.0,0.0,-180.000);
	CreateDynamicObject(2576,1155.865,-1335.327,-1.879,0.0,0.0,-180.000);
	CreateDynamicObject(1789,1141.801,-1333.096,-1.285,0.0,0.0,-90.000);
	CreateDynamicObject(2146,1141.857,-1330.641,-1.381,0.0,0.0,0.0);
	CreateDynamicObject(1806,1168.077,-1335.853,-1.885,0.0,0.0,0.0);
	CreateDynamicObject(2007,1164.134,-1335.827,-1.873,0.0,0.0,-180.000);
	CreateDynamicObject(2146,1161.324,-1329.818,-1.381,0.0,0.0,0.0);
	CreateDynamicObject(2161,1171.563,-1331.923,-1.852,0.0,0.0,-90.000);
	CreateDynamicObject(2164,1171.498,-1330.158,-1.873,0.0,0.0,-90.000);
	CreateDynamicObject(2161,1171.568,-1331.915,-0.524,0.0,0.0,-90.000);
	CreateDynamicObject(2199,1165.902,-1327.989,-1.887,0.0,0.0,0.0);
	CreateDynamicObject(2200,1163.568,-1327.937,-1.867,0.0,0.0,0.0);
	CreateDynamicObject(2164,1166.477,-1314.988,-1.873,0.0,0.0,0.0);
	CreateDynamicObject(1726,1161.348,-1323.385,-1.887,0.0,0.0,-270.001);
	CreateDynamicObject(1726,1164.292,-1326.695,-1.888,0.0,0.0,-180.619);
	CreateDynamicObject(1726,1166.718,-1326.684,-1.874,0.0,0.0,-180.619);
	CreateDynamicObject(949,1161.209,-1320.814,-1.230,0.0,0.0,0.0);
	CreateDynamicObject(949,1167.235,-1326.807,-1.230,0.0,0.0,0.0);
	CreateDynamicObject(949,1161.507,-1326.589,-1.223,0.0,0.0,0.0);
	CreateDynamicObject(2762,1165.065,-1324.585,-1.455,0.0,0.0,-179.381);
	CreateDynamicObject(1775,1171.044,-1318.319,-0.763,0.0,0.0,-90.000);
	CreateDynamicObject(1776,1171.136,-1319.605,-0.785,0.0,0.0,-90.000);
	CreateDynamicObject(949,1170.895,-1315.673,-1.223,0.0,0.0,0.0);
	CreateDynamicObject(2008,1147.742,-1317.795,-1.861,0.0,0.0,-90.000);
	CreateDynamicObject(1806,1146.837,-1318.697,-1.840,0.0,0.0,-90.000);
	CreateDynamicObject(1806,1146.819,-1316.684,-1.848,0.0,0.0,-90.000);
	CreateDynamicObject(2164,1143.592,-1326.237,-1.862,0.0,0.0,-180.000);
	CreateDynamicObject(2164,1145.356,-1326.260,-1.876,0.0,0.0,-180.000);
	CreateDynamicObject(914,1159.876,-1322.763,-1.096,0.0,0.0,0.0);
	CreateDynamicObject(914,1159.861,-1322.754,0.417,0.0,0.0,0.0);
	CreateDynamicObject(914,1159.873,-1322.746,1.939,0.0,0.0,0.0);
	CreateDynamicObject(3384,1155.504,-1326.401,-0.417,0.0,0.0,-90.000);
	CreateDynamicObject(914,1157.142,-1326.455,-1.153,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.142,-1326.471,0.367,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.129,-1326.466,1.868,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.130,-1325.284,-1.162,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.155,-1325.285,0.388,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.146,-1325.281,1.893,0.0,0.0,90.241);
	CreateDynamicObject(958,1158.790,-1326.740,-1.061,0.0,0.0,-0.859);
	CreateDynamicObject(927,1160.440,-1324.814,-0.548,0.0,0.0,-90.000);
	CreateDynamicObject(914,1157.139,-1324.114,-1.117,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.139,-1324.125,0.408,0.0,0.0,90.241);
	CreateDynamicObject(914,1157.151,-1324.125,1.945,0.0,0.0,90.241);
	CreateDynamicObject(914,1158.705,-1322.779,-1.119,0.0,0.0,0.0);
	CreateDynamicObject(914,1158.698,-1322.770,0.390,0.0,0.0,0.0);
	CreateDynamicObject(914,1158.689,-1322.737,1.916,0.0,0.0,0.0);
	CreateDynamicObject(914,1157.660,-1323.035,1.903,0.0,0.0,30.003);
	CreateDynamicObject(914,1157.195,-1323.604,1.916,0.0,0.0,65.317);
	CreateDynamicObject(983,1157.610,-1323.203,-1.176,89.381,0.0,-54.144);

   	//Fahrschule Map - Mapping by GangstaSunny (16 Objecte)
	CreateDynamicObject(10829,1024.5000000,-1348.6999500,12.7000000,0.0000000,0.0000000,0.0000000); //object(gatehouse1_sfse) (1)
	CreateDynamicObject(996,989.9000200,-1383.5000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier1) (1)
	CreateDynamicObject(737,1023.6992200,-1337.6992200,13.0000000,0.0000000,0.0000000,0.0000000); //object(aw_streettree3) (1)
	CreateDynamicObject(996,988.5000000,-1332.9000200,13.1000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier1) (2)
	CreateDynamicObject(996,1007.5996100,-1332.6992200,13.1000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier1) (3)
	CreateDynamicObject(1215,1015.5999800,-1332.6999500,13.0000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,987.0000000,-1332.9000200,12.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,996.5999800,-1332.9000200,12.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1006.4000200,-1332.6999500,12.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1022.0999800,-1353.5000000,16.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1022.0999800,-1343.8000500,16.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1028.4000200,-1343.9000200,16.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (7)
	CreateDynamicObject(1215,1028.4000200,-1353.5999800,16.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (
	CreateDynamicObject(1257,980.0999800,-1335.6999500,13.8000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (1)
	CreateDynamicObject(8614,1026.1999500,-1342.8000500,15.0000000,0.0000000,0.0000000,179.9950000); //object(vgssstairs01_lvs) (2)
	CreateDynamicObject(970,1028.0000000,-1360.1999500,13.3000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1025.9000200,-1360.1999500,13.3000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (2)

	//Interior 2 Türen (Ordnungsamt Interior)
	CreateDynamicObject(1555, 321.43503, 310.11249, 998.14832,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 321.44571, 301.95190, 998.14838,   0.00000, 0.00000, 0.00000);

	//German Samplife - Tankstellen in Los Santos - Mapping by GangstaSunny (34 Objects)
	CreateDynamicObject(2943,1928.6999500,-1771.3000500,13.3000000,0.0000000,0.0000000,90.0000000); //object(kmb_atm2) (1)
	CreateDynamicObject(1886,1937.5000000,-1780.9000200,18.1000000,12.0000000,0.0000000,180.0000000); //object(shop_sec_cam) (1)
	CreateDynamicObject(1886,1944.5000000,-1766.0000000,18.2000000,16.0000000,0.0000000,0.0000000); //object(shop_sec_cam) (2)
	CreateDynamicObject(3578,1941.6999500,-1762.0999800,11.6000000,0.0000000,0.0000000,0.0000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,1951.5999800,-1787.3000500,11.6000000,0.0000000,0.0000000,270.0000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(1424,1911.1999500,-1772.1999500,12.9000000,0.0000000,0.0000000,0.0000000); //object(dyn_roadbarrier_2) (1)
	CreateDynamicObject(1424,1911.3000500,-1780.8000500,12.9000000,0.0000000,0.0000000,0.0000000); //object(dyn_roadbarrier_2) (2)
	CreateDynamicObject(1237,1909.5999800,-1780.9000200,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (1)
	CreateDynamicObject(1237,1913.0999800,-1780.9000200,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (2)
	CreateDynamicObject(1237,1909.4000200,-1772.0000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (3)
	CreateDynamicObject(1237,1913.0000000,-1772.0000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (4)
	CreateDynamicObject(984,1942.1999500,-1772.9000200,13.3000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,1941.0999800,-1772.9000200,13.3000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (2)
	CreateDynamicObject(1251,1932.1999500,-1794.5999800,12.5000000,0.0000000,0.0000000,320.0000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1927.5999800,-1794.5999800,12.5000000,0.0000000,0.0000000,319.9990000); //object(smashbar) (2)
	CreateDynamicObject(1251,1922.9000200,-1794.5999800,12.5000000,0.0000000,0.0000000,319.9990000); //object(smashbar) (3)
	CreateDynamicObject(1251,1918.0000000,-1794.6999500,12.5000000,0.0000000,0.0000000,319.9990000); //object(smashbar) (4)
	CreateDynamicObject(984,1902.1999500,-1780.9000200,13.2000000,0.0000000,0.0000000,270.0000000); //object(fenceshit2) (3)
	CreateDynamicObject(984,1902.0999800,-1771.6999500,13.2000000,0.0000000,0.0000000,270.0000000); //object(fenceshit2) (4)
	CreateDynamicObject(1215,1941.5999800,-1764.9000200,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1941.5999800,-1780.8000500,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1676,998.5000000,-937.5999800,42.8000000,0.0000000,0.0000000,8.0000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1001.7999900,-937.2000100,42.8000000,0.0000000,0.0000000,7.9980000); //object(washgaspump) (2)
	CreateDynamicObject(1676,1005.5999800,-936.7000100,42.8000000,0.0000000,0.0000000,7.9980000); //object(washgaspump) (3)
	CreateDynamicObject(1676,1009.2999900,-936.2000100,42.8000000,0.0000000,0.0000000,7.9980000); //object(washgaspump) (4)
	CreateDynamicObject(2885,1015.7999900,-922.2999900,44.8000000,0.0000000,0.0000000,8.0000000); //object(xref_garagedoor) (1)
	CreateDynamicObject(2885,1014.5000000,-913.7000100,45.6000000,0.0000000,0.0000000,187.9980000); //object(xref_garagedoor) (2)
	CreateDynamicObject(984,1004.0999800,-937.4000200,41.9000000,0.0000000,0.0000000,278.0000000); //object(fenceshit2) (5)
	CreateDynamicObject(984,1003.9000200,-936.2999900,41.9000000,0.0000000,0.0000000,277.9980000); //object(fenceshit2) (6)
	CreateDynamicObject(1215,996.0999800,-938.0000000,41.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1011.7999900,-935.7000100,41.9000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(2714,1000.5999800,-918.5000000,43.2000000,0.0000000,0.0000000,280.0000000); //object(cj_open_sign_2) (1)

	//German Samplife - staatliches Casino - Mapping by GangstaSunny (50 Objects)
	CreateDynamicObject(7288,1774.0999800,-1660.1999500,25.5000000,0.0000000,0.0000000,35.5000000); //object(vgs_fmtcasgn) (1)
	CreateDynamicObject(7231,1761.9000200,-1643.5999800,35.2000000,0.0000000,0.00000000000,0.00000000000); //object(clwnpocksgn_d) (1)
	CreateDynamicObject(7230,1762.0000000,-1643.5000000,35.2000000,0.0000000,0.00000000000,0.00000000000); //object(clwnpocksgn_n) (1)
	CreateDynamicObject(870,1762.3000500,-1652.5000000,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(870,1760.5999800,-1651.9000200,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(870,1762.4000200,-1650.9000200,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (3)
	CreateDynamicObject(870,1775.0000000,-1674.6999500,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (4)
	CreateDynamicObject(870,1775.0000000,-1676.5000000,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (5)
	CreateDynamicObject(870,1777.0000000,-1675.5999800,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (6)
	CreateDynamicObject(870,1776.4000200,-1673.4000200,14.1000000,0.0000000,0.0000000,310.0000000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,1778.5999800,-1673.5000000,14.1000000,0.0000000,0.0000000,320.0000000); //object(veg_pflowers2wee) (8)
	CreateDynamicObject(870,1775.8000500,-1678.0000000,14.1000000,0.0000000,0.0000000,309.9960000); //object(veg_pflowers2wee) (9)
	CreateDynamicObject(870,1779.4000200,-1675.5999800,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (10)
	CreateDynamicObject(870,1776.5999800,-1678.9000200,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (11)
	CreateDynamicObject(870,1778.1999500,-1678.9000200,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (12)
	CreateDynamicObject(870,1779.5999800,-1677.8000500,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (13)
	CreateDynamicObject(870,1780.6999500,-1676.1999500,14.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (14)
	CreateDynamicObject(2773,1777.5000000,-1662.1999500,14.0000000,0.0000000,0.0000000,310.0000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,1775.9000200,-1661.6999500,14.0000000,0.0000000,0.0000000,213.9960000); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,1779.0999800,-1664.5000000,14.0000000,0.0000000,0.0000000,309.9960000); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,1779.1999500,-1666.3000500,14.0000000,0.0000000,0.0000000,37.9960000); //object(cj_airprt_bar) (4)
	CreateDynamicObject(5992,1781.6999500,-1653.3000500,16.6000000,0.0000000,0.0000000,36.7500000); //object(ltsreg01_lawn) (1)
	CreateDynamicObject(5992,1787.6999500,-1661.6999500,16.6000000,0.0000000,0.0000000,35.2490000); //object(ltsreg01_lawn) (2)
	CreateDynamicObject(2987,1779.3000500,-1662.5999800,14.6000000,0.0000000,0.0000000,308.0000000); //object(lxr_motel_doorsim) (1)
	CreateDynamicObject(1368,1772.5000000,-1678.9000200,14.1000000,0.0000000,0.00000000000,0.00000000000); //object(cj_blocker_bench) (1)
	CreateDynamicObject(1368,1772.5999800,-1673.4000200,14.1000000,0.0000000,0.0000000,239.9980000); //object(cj_blocker_bench) (2)
	CreateDynamicObject(1368,1764.6999500,-1653.4000200,14.1000000,0.0000000,0.0000000,59.9960000); //object(cj_blocker_bench) (3)
	CreateDynamicObject(970,1762.0000000,-1682.1999500,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1756.9000200,-1682.1999500,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1754.8000500,-1680.0999800,13.1000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1754.8000500,-1675.9000200,13.1000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1754.8000500,-1671.6999500,13.1000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1754.8000500,-1661.3000500,13.1000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (6)
	CreateDynamicObject(1251,1754.6999500,-1666.5000000,12.5000000,0.0000000,0.0000000,0.2500000); //object(smashbar) (1)
	CreateDynamicObject(970,1757.0000000,-1659.1999500,13.1000000,0.0000000,0.0000000,180.0000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1762.0000000,-1659.1999500,13.1000000,0.0000000,0.0000000,179.9950000); //object(fencesmallb) (8)
	CreateDynamicObject(970,1764.0999800,-1661.3000500,13.1000000,0.0000000,0.0000000,89.9950000); //object(fencesmallb) (9)
	CreateDynamicObject(970,1764.0999800,-1665.5000000,13.1000000,0.0000000,0.0000000,89.9950000); //object(fencesmallb) (10)
	CreateDynamicObject(970,1764.0999800,-1669.6999500,13.1000000,0.0000000,0.0000000,89.9950000); //object(fencesmallb) (11)
	CreateDynamicObject(970,1764.0999800,-1680.0999800,13.1000000,0.0000000,0.0000000,89.9950000); //object(fencesmallb) (12)
	CreateDynamicObject(970,1764.0999800,-1675.9000200,13.1000000,0.0000000,0.0000000,89.9950000); //object(fencesmallb) (13)
	CreateDynamicObject(738,1759.5000000,-1682.3000500,12.6000000,0.0000000,0.0000000,270.0000000); //object(aw_streettree2) (1)
	CreateDynamicObject(1257,1758.0000000,-1654.1999500,14.7000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (1)
	CreateDynamicObject(1215,1754.8000500,-1663.5999800,13.1000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1754.8000500,-1669.4000200,13.1000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(8843,1752.0000000,-1665.4000200,12.4000000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1751.9000200,-1696.3000500,12.4000000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (2)
	CreateDynamicObject(8843,1747.4000200,-1689.4000200,12.4000000,0.0000000,0.0000000,180.0000000); //object(arrows01_lvs) (3)
	CreateDynamicObject(8843,1747.4000200,-1658.5000000,12.4000000,0.0000000,0.0000000,180.0000000); //object(arrows01_lvs) (4)
	CreateDynamicObject(7315,1785.9000200,-1652.8000500,28.2000000,0.0000000,0.0000000,34.0000000); //object(vgsn_blucasign) (1)

	//Krankenhaus Map - Mapping by GangstaSunny (10 Objecte)
	CreateDynamicObject(970,1183.0000000,-1329.0000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1183.0000000,-1318.4000200,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1185.5000000,-1323.5999800,13.1000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (3)
	CreateDynamicObject(19127,1185.5999800,-1342.3000500,13.8000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(19127,1185.5000000,-1305.0999800,13.8000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(19127,1185.4000200,-1318.4000200,13.1000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(19127,1185.4000200,-1329.0000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(19127,1180.4000200,-1335.5000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (5)
	CreateDynamicObject(19127,1180.4000200,-1311.9000200,13.8000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (6)
	CreateDynamicObject(1257,1187.0000000,-1355.0999800,13.8000000,0.0000000,0.0000000,180.0000000); //object(bustopm) (1)

	//Los Santos Police Gefängnis
	CreateDynamicObject(19303, 266.36670, 78.46580, 1001.28967,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19303, 266.37381, 76.70620, 1001.28967,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19303, 266.36670, 82.96580, 1001.28967,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19303, 266.37381, 81.20620, 1001.28967,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19303, 266.36670, 87.46580, 1001.28967,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19303, 266.37381, 85.70620, 1001.28967,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1886, 270.16669, 92.46620, 1003.89618,   10.00000, 0.00000, 340.46201);

	//Rampe für die Einfahrt der Appartments in Los Santos by Tobi_DeKey
	CreateDynamicObject(5152, 1268.46985, -916.17151, 41.42190,   0.00000, 15.00000, 100.24420);
	CreateDynamicObject(5152, 1270.53760, -915.82166, 41.42190,   0.00000, 15.00000, 100.24420);
	CreateDynamicObject(5152, 1271.41345, -915.69135, 41.42190,   0.00000, 15.00000, 100.24420);
	
	//Kehrmaschinen Base - Los Santos by Tobi_DeKey
    CreateDynamicObject(984, 1413.01318, -1652.65686, 13.18320,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1400.21326, -1652.65686, 13.18320,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1387.41333, -1652.67688, 13.18320,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1381.03235, -1652.66675, 13.24320,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19127, 1377.72046, -1652.82104, 13.10300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1419.53857, -1652.74695, 13.11620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1419.53857, -1644.53687, 13.11620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1386.42358, -1650.71289, 12.39320,   0.00000, 0.00000, 270.71317);
	CreateDynamicObject(8843, 1410.65344, -1646.71472, 12.39320,   0.00000, 0.00000, 89.49599);
	CreateDynamicObject(8843, 1410.24011, -1650.55054, 12.39320,   0.00000, 0.00000, 270.71320);
	CreateDynamicObject(8843, 1386.42358, -1646.53247, 12.39320,   0.00000, 0.00000, 89.49600);

	//Los Santos Bank
	tmpobjid = CreateDynamicObject(8661,1764.545,-1707.245,12.543,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_carparkmanky1", 0);
	tmpobjid = CreateDynamicObject(8661,1764.545,-1702.258,12.539,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_carparkmanky1", 0);
	tmpobjid = CreateDynamicObject(8661,1784.525,-1702.498,12.539,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_carparkmanky1", 0);
	tmpobjid = CreateDynamicObject(8661,1802.156,-1707.249,12.543,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_carparkmanky1", 0);
	tmpobjid = CreateDynamicObject(8661,1804.495,-1702.258,12.539,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10388, "scum2_sfs", "ws_carparkmanky1", 0);
	tmpobjid = CreateDynamicObject(19456,1788.175,-1716.235,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1809.251,-1709.160,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1805.901,-1717.284,14.036,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1804.744,-1713.709,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1808.137,-1715.050,14.036,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1809.251,-1702.744,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1806.275,-1693.472,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1804.744,-1704.079,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1804.744,-1695.004,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1804.748,-1697.929,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1804.744,-1713.709,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1808.137,-1715.050,17.533,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1805.901,-1717.284,17.533,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1809.251,-1709.160,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1809.251,-1702.744,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1804.744,-1695.004,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1804.744,-1704.079,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1804.748,-1697.929,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1794.429,-1713.789,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1793.310,-1717.389,17.533,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1788.175,-1716.235,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1793.310,-1717.389,14.036,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1794.429,-1713.789,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1794.429,-1704.160,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19437,1793.896,-1698.842,14.036,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1788.582,-1698.298,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1778.956,-1698.298,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1769.335,-1698.298,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1761.232,-1703.680,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1763.765,-1697.525,14.036,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1761.578,-1697.489,14.036,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1761.558,-1699.644,14.036,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1772.369,-1716.235,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19437,1777.943,-1716.288,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(1491,1778.012,-1716.250,12.500,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "sanairtex3", 0);
	tmpobjid = CreateDynamicObject(1491,1781.026,-1716.232,12.500,0.000,0.000,180.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "sanairtex3", 0);
	tmpobjid = CreateDynamicObject(19437,1781.094,-1716.288,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19437,1784.279,-1716.288,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1782.681,-1716.990,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1776.275,-1716.990,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19437,1774.738,-1716.288,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19437,1781.094,-1716.288,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1782.681,-1716.990,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19437,1784.279,-1716.288,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19437,1774.738,-1716.288,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1772.369,-1716.235,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19437,1777.943,-1716.288,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1776.275,-1716.990,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1779.563,-1716.218,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19366,1779.501,-1718.028,15.722,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(3498,1782.880,-1719.434,11.289,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14569, "traidman", "darkgrey_carpet_256", 0);
	tmpobjid = CreateDynamicObject(3498,1776.269,-1719.480,11.289,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14569, "traidman", "darkgrey_carpet_256", 0);
	tmpobjid = CreateDynamicObject(19456,1794.429,-1704.160,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1761.232,-1703.680,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1761.578,-1697.489,17.533,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1761.558,-1699.644,17.533,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1763.765,-1697.525,17.533,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1761.236,-1711.504,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1763.048,-1716.982,14.036,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1760.886,-1714.813,14.036,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1760.899,-1716.967,14.036,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1765.945,-1716.235,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1762.742,-1716.235,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1761.236,-1711.504,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1760.886,-1714.813,17.533,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1763.048,-1716.982,17.533,0.000,0.000,-45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1760.899,-1716.947,17.533,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1765.945,-1716.235,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1762.742,-1716.235,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(3660,1808.610,-1692.264,15.091,0.000,0.000,-90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(3660,1799.520,-1681.261,15.091,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(3660,1779.908,-1681.261,15.091,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(3660,1764.355,-1681.263,15.093,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(19437,1793.896,-1698.842,17.533,0.000,0.000,45.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1788.582,-1698.298,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1778.956,-1698.298,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19456,1769.335,-1698.298,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1796.114,-1718.486,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1799.594,-1718.486,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1803.074,-1718.486,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1796.114,-1699.417,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1799.594,-1699.417,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19442,1803.074,-1699.417,18.459,90.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1789.098,-1711.403,12.463,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19375,1778.603,-1711.403,12.463,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1768.097,-1711.155,12.463,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19375,1767.170,-1703.077,12.465,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14710, "vgshm3int2", "HSV_3carpet2", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1777.664,-1703.077,12.465,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1788.158,-1703.077,12.465,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19366,1781.598,-1718.028,15.726,0.000,90.000,89.940);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19366,1777.530,-1718.028,15.726,0.000,90.000,89.940);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19370,1776.276,-1714.084,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19370,1772.788,-1714.084,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19370,1776.276,-1708.512,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19370,1772.788,-1708.512,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19370,1782.752,-1714.728,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19370,1782.766,-1709.132,12.467,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile9", 0);
	tmpobjid = CreateDynamicObject(19360,1776.434,-1714.671,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19360,1773.207,-1714.657,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1777.957,-1715.379,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1781.082,-1715.365,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19360,1782.627,-1714.651,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1789.050,-1714.651,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1793.735,-1709.838,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19452,1766.810,-1714.651,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1765.355,-1710.959,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1793.166,-1703.184,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19452,1788.763,-1698.553,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1779.117,-1698.553,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19452,1769.497,-1698.553,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19383,1787.744,-1711.967,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19426,1787.744,-1714.376,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1789.296,-1708.000,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19426,1787.744,-1709.560,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1792.501,-1708.000,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19383,1787.744,-1705.546,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19426,1787.744,-1707.955,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1792.903,-1701.235,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1787.744,-1702.337,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19426,1791.390,-1700.501,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19426,1787.730,-1699.945,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1789.263,-1699.991,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1792.472,-1699.991,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19452,1768.010,-1708.020,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19360,1772.748,-1706.500,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19429,1784.626,-1711.916,12.475,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1785.828,-1711.916,12.477,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1785.988,-1711.936,12.472,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1785.835,-1708.421,12.477,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1785.828,-1704.926,12.477,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1784.626,-1704.926,12.475,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1784.626,-1708.421,12.475,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1785.988,-1705.526,12.472,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19450,1779.850,-1703.088,11.727,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19429,1778.838,-1704.903,12.475,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1780.217,-1704.903,12.477,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1780.217,-1708.393,12.477,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19429,1778.838,-1708.393,12.475,0.000,90.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	tmpobjid = CreateDynamicObject(19358,1773.780,-1704.693,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19431,1775.297,-1703.814,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19360,1772.748,-1703.299,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19431,1786.950,-1703.088,11.727,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(1491,1784.643,-1703.114,10.967,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 17588, "lae2coast_alpha", "plainglass", 0);
	tmpobjid = CreateDynamicObject(19431,1775.117,-1703.814,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19456,1809.261,-1698.208,14.036,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(19364,1807.706,-1693.485,14.036,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1807.706,-1693.485,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19364,1806.275,-1693.472,17.533,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6871, "vegascourtbld", "marbletilewal1_256", 0);
	tmpobjid = CreateDynamicObject(19456,1809.261,-1698.208,17.533,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "buildblk55", "sl_plazatile01", 0);
	tmpobjid = CreateDynamicObject(1724,1771.668,-1708.622,12.550,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1770.266,-1708.622,12.550,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1772.698,-1714.039,12.550,0.000,0.000,180.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1771.291,-1714.039,12.550,0.000,0.000,180.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(19429,1765.568,-1709.544,13.409,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 1975, "texttest", "kb_blue", 0);
	tmpobjid = CreateDynamicObject(19429,1765.568,-1711.175,13.409,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 1975, "texttest", "kb_blue", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(19429,1765.568,-1712.837,13.409,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 1975, "texttest", "kb_blue", 0);
	tmpobjid = CreateDynamicObject(19431,1775.822,-1703.098,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(1723,1786.232,-1714.048,12.550,0.000,0.000,180.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(19360,1772.628,-1700.188,16.892,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(2773,1780.995,-1704.219,12.985,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(2773,1779.475,-1704.219,12.985,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(2773,1778.031,-1704.219,12.985,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(19433,1786.526,-1699.203,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1787.222,-1699.974,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1787.564,-1699.930,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19360,1787.564,-1702.337,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19386,1787.564,-1705.546,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1787.564,-1707.955,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1787.564,-1709.560,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19386,1787.564,-1711.962,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19433,1787.564,-1714.368,14.272,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13694, "lahillstxd1a", "glasswindow2_256", 0);
	tmpobjid = CreateDynamicObject(19353,1789.296,-1714.496,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(19353,1792.510,-1714.478,14.272,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	tmpobjid = CreateDynamicObject(1491,1787.695,-1712.710,12.520,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3484, "vegashse5", "vegashousewal1_256", 0);
	tmpobjid = CreateDynamicObject(1491,1787.695,-1706.290,12.520,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3484, "vegashse5", "vegashousewal1_256", 0);
	tmpobjid = CreateDynamicObject(1723,1773.383,-1708.626,12.550,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(1723,1786.963,-1707.730,12.550,0.000,0.000,-90.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightblue2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1789.958,-1709.813,12.551,0.000,0.000,78.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightyellow2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1790.587,-1712.478,12.551,0.000,0.000,124.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightgreen2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1789.726,-1703.971,12.551,0.000,0.000,25.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightyellow2_32", 0);
	tmpobjid = CreateDynamicObject(1724,1791.720,-1703.443,12.551,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightgreen2_32", 0);
	tmpobjid = CreateDynamicObject(1723,1788.558,-1700.625,12.550,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7650, "vgnusedcar", "lightpurple2_32", 0);
	tmpobjid = CreateDynamicObject(3578,1804.872,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1800.477,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1796.338,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1792.094,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1788.045,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1783.809,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1779.748,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1775.467,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1771.082,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1766.789,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1762.365,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1757.988,-1683.996,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1759.385,-1700.394,11.764,0.000,0.000,40.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1760.227,-1703.940,11.764,0.000,0.000,40.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1760.050,-1708.439,11.764,0.000,0.000,40.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1760.007,-1713.319,11.764,0.000,0.000,40.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(19435,1772.870,-1716.558,12.584,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19435,1769.376,-1716.558,12.584,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19435,1765.887,-1716.558,12.584,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19435,1762.966,-1716.558,12.587,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19366,1785.859,-1717.392,10.937,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(19366,1789.056,-1717.392,10.937,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(19366,1792.259,-1717.392,10.937,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(19439,1784.269,-1716.691,10.931,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4821, "union_las", "lasunion995", 0);
	tmpobjid = CreateDynamicObject(19435,1786.059,-1716.558,12.584,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19435,1789.556,-1716.558,12.584,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(19435,1792.744,-1716.558,12.587,0.000,90.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4829, "airport_las", "sjmlahus28", 0);
	tmpobjid = CreateDynamicObject(3578,1799.534,-1713.359,11.762,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1799.532,-1718.241,11.764,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_carparkwall2", 0);
	tmpobjid = CreateDynamicObject(3578,1799.534,-1704.580,11.764,0.000,0.000,90.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	tmpobjid = CreateDynamicObject(3578,1799.568,-1699.623,11.762,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_carparkwall2", 0);
	tmpobjid = CreateDynamicObject(3578,1799.532,-1727.092,11.770,0.000,0.000,0.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_carparkwall2", 0);

	CreateDynamicObject(19364,1809.2510000,-1699.5350000,17.5330000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1799.6100000,-1713.7730000,17.5940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19364,1776.2750000,-1715.5560000,14.0360000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,1782.6810000,-1715.5560000,14.0360000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,1782.6810000,-1715.5560000,17.5330000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19364,1776.2750000,-1715.5560000,17.5330000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19442,1779.5440000,-1716.2130000,15.7950000,90.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19459,1754.6410000,-1687.0580000,10.7960000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,1754.6410000,-1696.6910000,10.7960000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,1754.6410000,-1706.3130000,10.7960000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,1754.6410000,-1715.9420000,10.7960000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1799.6100000,-1704.1390000,17.5940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1799.6100000,-1704.1390000,19.2140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1799.6200000,-1713.7550000,19.2140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19452,1764.9860000,-1703.0370000,14.0360000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19360,1763.4070000,-1707.5830000,14.0360000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19451,1765.9350000,-1703.0420000,14.2720000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19451,1767.7490000,-1698.5710000,14.2720000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19451,1767.9650000,-1706.9940000,14.2720000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19359,1772.1480000,-1703.2990000,14.2720000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19359,1772.1480000,-1706.4900000,14.2720000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1804.0810000,-1704.1390000,19.2170000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1804.0810000,-1709.1500000,19.2070000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1806.9070000,-1713.8750000,19.1940000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,1804.8280000,-1716.0220000,19.1740000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,1807.5890000,-1695.0130000,19.2140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1807.5890000,-1698.2150000,19.2140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1806.4100000,-1695.0130000,19.2160000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1806.4100000,-1698.2150000,19.2160000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2634,1772.4470000,-1699.5130000,13.8070000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2634,1772.5390000,-1701.5130000,13.8460000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2634,1772.3080000,-1701.4750000,13.8460000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19359,1772.4480000,-1700.1880000,16.8920000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19359,1772.2680000,-1700.1880000,16.8920000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1768.0970000,-1711.1550000,15.9410000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1767.1700000,-1703.0770000,15.9430000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1777.6640000,-1703.0770000,15.9430000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1778.6030000,-1711.4030000,15.9410000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1786.0610000,-1703.1190000,15.9450000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3280,1792.0970000,-1706.2310000,15.9460000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,1792.1080000,-1700.2110000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1792.1080000,-1703.6590000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1792.1080000,-1708.7340000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19377,1786.0610000,-1711.4030000,15.9430000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(3280,1792.0970000,-1711.3080000,15.9460000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,1792.1080000,-1713.8400000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1793.7110000,-1712.8570000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1793.7110000,-1709.3760000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1793.7110000,-1705.8740000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19435,1793.7110000,-1702.3690000,15.9410000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(2008,1778.7940000,-1702.4670000,12.5340000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2008,1780.7830000,-1702.4670000,12.5340000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1671,1780.6470000,-1701.4620000,13.0500000,0.0000000,0.0000000,-8.0000000); //
	CreateDynamicObject(1671,1777.9660000,-1701.4470000,13.0500000,0.0000000,0.0000000,26.0000000); //
	CreateDynamicObject(2186,1774.4290000,-1704.0730000,12.5530000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2000,1786.1740000,-1699.1540000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1785.6740000,-1699.1540000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1785.1540000,-1699.1540000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2002,1784.3910000,-1699.0800000,12.5530000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1786.9550000,-1700.3110000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2000,1786.9550000,-1700.8310000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2000,1786.9550000,-1701.3510000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2000,1786.9550000,-1701.8710000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2333,1782.3900000,-1699.8660000,12.3700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2333,1780.4920000,-1699.8660000,12.3700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2886,1772.6580000,-1700.7890000,13.9950000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2921,1787.7240000,-1702.6140000,14.9060000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2921,1775.1380000,-1703.1350000,14.9060000,0.0000000,0.0000000,-10.0000000); //
	CreateDynamicObject(2921,1772.8830000,-1706.1540000,14.9060000,0.0000000,6.0000000,158.0000000); //
	CreateDynamicObject(2921,1787.5730000,-1714.0860000,14.9060000,0.0000000,12.0000000,-19.0000000); //
	CreateDynamicObject(631,1773.2120000,-1705.2140000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2194,1783.1050000,-1698.9000000,13.5920000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2196,1780.8330000,-1698.6470000,13.3300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2257,1778.7770000,-1698.6610000,14.3310000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2258,1785.2470000,-1714.5220000,14.6750000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2261,1776.1510000,-1714.0830000,14.1380000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2262,1769.4670000,-1714.0810000,14.6340000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2267,1768.8350000,-1708.1270000,14.8210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2256,1787.4680000,-1708.7790000,14.4910000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(631,1775.8920000,-1703.7210000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(631,1787.1150000,-1703.6640000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,1793.2650000,-1710.5260000,12.5510000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2165,1791.9490000,-1711.1010000,12.5520000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2000,1793.1180000,-1714.1280000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2000,1793.1180000,-1713.6480000,12.5520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(631,1788.3670000,-1713.9860000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(632,1789.4600000,-1709.0170000,12.8510000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2264,1793.1430000,-1712.2320000,14.4510000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2265,1793.1500000,-1711.2910000,14.8310000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2165,1791.4420000,-1705.5930000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,1792.1510000,-1706.8610000,12.5510000,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(631,1788.3260000,-1707.4600000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(630,1792.8340000,-1701.7340000,13.4450000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1789.1460000,-1707.4200000,12.5520000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2000,1789.6550000,-1707.4200000,12.5520000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2269,1792.5960000,-1705.9280000,14.5580000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2271,1791.7310000,-1707.4260000,14.5580000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2270,1789.5740000,-1700.5730000,14.5980000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2003,1771.5910000,-1706.5750000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1771.5910000,-1706.5750000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1771.5910000,-1706.5750000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1829,1770.7400000,-1706.3550000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1769.8810000,-1706.5750000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1769.0200000,-1706.5750000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1768.1780000,-1706.5750000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1767.3200000,-1706.5750000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1766.4470000,-1706.5760000,12.9980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1770.7400000,-1706.5750000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1769.8810000,-1706.5750000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1769.0200000,-1706.5750000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1829,1768.1780000,-1706.3550000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1767.3200000,-1706.5750000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1766.4470000,-1706.5760000,13.9120000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1829,1769.8810000,-1706.3550000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1770.7400000,-1706.5750000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1769.0200000,-1706.5750000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1768.1780000,-1706.5750000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1829,1767.3200000,-1706.3550000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2332,1766.4470000,-1706.5760000,14.7920000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2003,1766.4580000,-1699.0920000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1699.8990000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1700.7380000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1701.5410000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2003,1766.4580000,-1702.3620000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1703.1640000,12.9980000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2003,1766.4580000,-1703.1640000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1702.3620000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1701.5410000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1829,1766.5780000,-1700.7380000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1829,1766.5780000,-1699.9260000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1699.0920000,13.9120000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1703.1640000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1829,1766.5780000,-1702.3620000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4580000,-1701.5410000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1829,1766.5780000,-1700.7380000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2332,1766.4670000,-1699.9260000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1829,1766.5970000,-1699.0850000,14.7920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19457,1789.6580000,-1705.2350000,17.6130000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19457,1789.6580000,-1707.1410000,17.6130000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19457,1782.4650000,-1704.2430000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19365,1784.7520000,-1703.7170000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19365,1784.7520000,-1700.5060000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19365,1783.6890000,-1699.8780000,17.6130000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19457,1789.6580000,-1710.2440000,17.6130000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19457,1789.6580000,-1712.4480000,17.6130000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19365,1784.7520000,-1708.6880000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19365,1782.4450000,-1710.6850000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19365,1783.6280000,-1712.1980000,17.6130000,0.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(3280,1783.6420000,-1700.7830000,19.3470000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1785.9470000,-1706.3860000,19.3540000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1789.7010000,-1704.1500000,19.3140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1789.2490000,-1711.5000000,19.2940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1778.7600000,-1711.4820000,19.3140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1777.6230000,-1703.1650000,19.3340000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1767.2400000,-1703.1650000,19.3340000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1768.2800000,-1711.4900000,19.3140000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1766.4130000,-1704.1660000,19.2740000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1766.3970000,-1711.4890000,19.2940000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1762.0950000,-1715.7850000,19.3220000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,1762.5940000,-1698.5670000,19.3220000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,1776.3200000,-1715.4840000,19.3220000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1782.6750000,-1715.5000000,19.3220000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1794.4990000,-1716.2440000,19.3220000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19362,1793.2830000,-1700.5930000,19.3220000,0.0000000,90.0000000,45.0000000); //
	CreateDynamicObject(19454,1789.2770000,-1700.1430000,19.2740000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(2921,1793.9140000,-1698.5500000,19.2600000,0.0000000,-18.0000000,-55.0000000); //
	CreateDynamicObject(19435,1783.9880000,-1699.1620000,19.3080000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(934,1788.7050000,-1704.2340000,20.7200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1420,1779.5940000,-1700.6170000,19.3780000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1420,1778.0690000,-1700.6170000,19.3780000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1420,1776.5010000,-1700.6170000,19.3780000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(943,1785.4440000,-1713.1220000,20.1680000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(929,1769.8380000,-1711.3520000,20.1680000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(943,1770.6930000,-1703.6050000,20.1680000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(929,1806.4130000,-1707.8160000,20.1680000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1420,1806.6330000,-1696.4910000,19.3780000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1420,1806.6330000,-1698.4680000,19.3780000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1420,1806.6330000,-1700.7440000,19.3780000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1687,1764.2720000,-1707.5990000,20.0180000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1687,1792.2280000,-1712.6960000,20.0180000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1687,1805.1790000,-1714.3110000,19.9580000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1783.6250000,-1699.3330000,19.8920000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1781.5540000,-1701.3640000,19.8920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,1785.6850000,-1701.3850000,19.8920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19458,1766.6930000,-1717.3920000,10.9370000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19366,1773.1100000,-1717.3920000,10.9370000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19439,1774.6390000,-1716.6750000,10.9310000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(860,1764.8570000,-1716.8000000,12.6180000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(861,1766.6200000,-1716.8810000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(860,1768.4810000,-1716.8610000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(859,1771.9840000,-1716.7810000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(862,1770.3640000,-1716.8410000,12.6240000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(861,1773.6260000,-1716.8130000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(859,1785.5000000,-1716.7750000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(859,1788.3240000,-1716.7840000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(859,1791.4320000,-1716.7270000,12.6430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(861,1789.8650000,-1716.8710000,12.6030000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(862,1786.8540000,-1716.8000000,12.5430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.2040000,-1684.1610000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.2390000,-1688.3510000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.2270000,-1692.9000000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.3840000,-1697.6470000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.5650000,-1702.3790000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.5440000,-1707.8760000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,1810.6980000,-1713.7580000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(868,1810.0980000,-1716.9330000,12.6230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,1791.2460000,-1716.0740000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(867,1807.7260000,-1720.5950000,12.5430000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,1773.0690000,-1716.0630000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1789.6310000,-1716.1370000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1786.8500000,-1716.1950000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1789.6310000,-1716.1370000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1770.8100000,-1716.1490000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1767.9670000,-1716.1970000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(869,1765.4260000,-1716.2210000,12.6030000,0.0000000,0.0000000,-20.0000000); //
	CreateDynamicObject(647,1809.1590000,-1719.8020000,12.9940000,356.8580000,0.0000000,-0.8720000); //
	CreateDynamicObject(2000,1776.9870000,-1699.1530000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1776.4860000,-1699.1530000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2000,1775.9950000,-1699.1530000,12.5520000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19457,1794.1970000,-1707.6030000,17.6130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,1754.6410000,-1722.4390000,10.7990000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,1759.3730000,-1727.2010000,10.7960000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(700,1755.3030000,-1726.3920000,12.7290000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1756.7150000,-1727.2170000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1754.6300000,-1725.0960000,13.0230000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,1765.1450000,-1727.1520000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1772.9420000,-1727.1520000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1780.1560000,-1727.1520000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1787.5410000,-1727.1520000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1809.6250000,-1722.3720000,13.0230000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,1811.7020000,-1720.2670000,13.0230000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,1754.6190000,-1684.7040000,13.0230000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,1754.6190000,-1688.8310000,13.0230000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3934,1799.6120000,-1708.2780000,19.2960000,0.0000000,0.0000000,90.0000000); //

	//San NewsReporter 
	CreateDynamicObject(1569, 732.08728, -1350.03113, 12.49790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 732.07648, -1347.04688, 12.49790,   0.00000, 0.00000, 270.00000);

	CreateDynamicObject(18850, 741.99017, -1372.31665, 13.72956,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8615, 734.46820, -1354.97131, 24.21728,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11472, 731.83655, -1360.13940, 22.95908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8615, 735.85132, -1354.96338, 23.22300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3763, 656.97498, -1340.86707, 53.89742,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1595, 698.31934, -1373.17908, 32.59095,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1595, 676.57965, -1366.41931, 32.61595,   0.00000, 0.00000, 294.49500);
	CreateDynamicObject(1595, 721.37964, -1342.30176, 32.71595,   0.00000, 0.00000, 164.75232);
	//San NewsReporter Interory
	setJackpotScreen();
    CreateDynamicObject(2957, 671.43652, -1353.18799, 1692.76819,   0.00000, 0.00000, 90.22101);
    CreateDynamicObject(14594, 692.83105, -1364.94824, 1694.39539,   0.00000, 0.00000, 359.93958);
    CreateDynamicObject(1703, 656.42413, -1348.65076, 1694.40369,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14393, 662.57971, -1352.45142, 1696.63806,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14391, 664.29999, -1353.36243, 1695.36487,   0.00000, 0.00000, 0.01199);
    CreateDynamicObject(18070, 716.23547, -1381.02966, 1694.69922,   0.00000, 0.00000, 260.88965);
    CreateDynamicObject(8378, 633.10529, -1357.64087, 1690.76038,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2140, 671.04437, -1354.57544, 1693.88574,   180.06290, 90.00000, 90.00000);
    CreateDynamicObject(14680, 658.65369, -1355.22534, 1696.36694,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2604, 680.28290, -1388.54675, 1694.86414,   0.00000, 0.00000, 269.89490);
    CreateDynamicObject(2604, 687.82153, -1388.56763, 1694.86414,   0.00000, 0.00000, 269.89014);
    CreateDynamicObject(2604, 696.09296, -1388.52881, 1694.86414,   0.00000, 0.00000, 269.89490);
    CreateDynamicObject(2604, 697.15564, -1387.02966, 1694.86414,   0.00000, 0.00000, 89.87012);
    CreateDynamicObject(2604, 688.88507, -1387.07104, 1694.86255,   0.00000, 0.00000, 89.86816);
    CreateDynamicObject(2604, 681.34302, -1387.05212, 1694.86414,   0.00000, 0.00000, 89.86816);
    CreateDynamicObject(1671, 689.84375, -1387.90564, 1694.87122,   0.00000, 0.00000, 249.06799);
    CreateDynamicObject(1671, 686.73865, -1388.12170, 1694.87122,   0.00000, 0.00000, 94.23550);
    CreateDynamicObject(1671, 682.40417, -1387.62231, 1694.87122,   0.00000, 0.00000, 271.88367);
    CreateDynamicObject(1671, 679.30341, -1387.85315, 1694.87122,   0.00000, 0.00000, 77.34869);
    CreateDynamicObject(1671, 694.92896, -1388.13257, 1694.87122,   0.00000, 0.00000, 135.20380);
    CreateDynamicObject(1671, 698.79822, -1387.85254, 1694.87122,   0.00000, 0.00000, 264.22821);
    CreateDynamicObject(14532, 685.16913, -1378.80920, 1695.38586,   0.00000, 0.00000, 179.84351);
    CreateDynamicObject(14813, 704.03357, -1380.56287, 1694.81396,   0.00000, 0.00000, 269.80164);
    CreateDynamicObject(14720, 689.25446, -1356.40454, 1694.38367,   0.00000, 0.00000, 359.92801);
    CreateDynamicObject(2534, 694.64355, -1350.39209, 1694.41101,   0.00000, 0.00000, 269.94568);
    CreateDynamicObject(2534, 694.64117, -1351.38123, 1694.41101,   0.00000, 0.00000, 269.94507);
    CreateDynamicObject(1825, 690.56677, -1350.10889, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2165, 710.49097, -1348.73877, 1694.41101,   0.00000, 0.00000, 179.99463);
    CreateDynamicObject(1998, 710.16699, -1342.71680, 1694.41101,   0.00000, 0.00000, 90.00549);
    CreateDynamicObject(1806, 710.25714, -1341.74780, 1694.41101,   0.00000, 0.00000, 170.70996);
    CreateDynamicObject(1806, 709.86920, -1348.12573, 1694.41101,   0.00000, 0.00000, 178.64557);
    CreateDynamicObject(1811, 710.54272, -1344.14526, 1695.03735,   0.00000, 0.00000, 279.32800);
    CreateDynamicObject(1811, 709.09406, -1344.10657, 1695.03735,   0.00000, 0.00000, 253.52258);
    CreateDynamicObject(2172, 704.10431, -1387.05969, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2172, 702.18604, -1387.05920, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2172, 705.11450, -1386.13660, 1694.41101,   0.00000, 0.00000, 179.99365);
    CreateDynamicObject(2172, 703.19507, -1386.13574, 1694.41101,   0.00000, 0.00000, 179.98901);
    CreateDynamicObject(1806, 704.55994, -1385.44775, 1694.41101,   0.00000, 0.00000, 170.70557);
    CreateDynamicObject(1806, 702.52155, -1385.45911, 1694.41101,   0.00000, 0.00000, 180.63062);
    CreateDynamicObject(1806, 703.01111, -1387.92444, 1694.41101,   0.00000, 0.00000, 29.76617);
    CreateDynamicObject(1806, 704.82507, -1387.77856, 1694.41101,   0.00000, 0.00000, 5.94196);
    CreateDynamicObject(1724, 690.35901, -1360.48438, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1724, 687.65820, -1360.45081, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 667.26044, -1360.44043, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 665.86401, -1363.93250, 1694.41101,   0.00000, 0.00000, 89.96704);
    CreateDynamicObject(1714, 716.65240, -1381.35315, 1694.41101,   0.00000, 0.00000, 242.88495);
    CreateDynamicObject(1708, 707.92761, -1384.16162, 1694.41101,   0.00000, 0.00000, 110.41113);
    CreateDynamicObject(1708, 707.66071, -1381.43115, 1694.41101,   0.00000, 0.00000, 67.48615);
    CreateDynamicObject(1663, 713.18054, -1379.07300, 1694.87122,   0.00000, 0.00000, 73.62500);
    CreateDynamicObject(1663, 712.76569, -1381.46997, 1694.87122,   0.00000, 0.00000, 87.51987);
    CreateDynamicObject(14806, 717.37646, -1372.60132, 1695.49707,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14527, 716.23224, -1381.12122, 1696.10815,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2836, 716.31311, -1375.82922, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2828, 714.17316, -1383.40125, 1695.20959,   0.00000, 0.00000, 282.71698);
    CreateDynamicObject(2700, 707.08856, -1383.57080, 1697.15308,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2700, 707.08893, -1382.94775, 1697.15308,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2700, 707.09070, -1382.32751, 1697.15308,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2700, 707.08948, -1381.70776, 1697.15308,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2700, 707.08960, -1381.08289, 1697.15308,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2186, 706.69391, -1360.45789, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2186, 708.72260, -1360.46143, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2002, 689.31659, -1352.66052, 1694.41101,   0.00000, 0.00000, 89.80200);
    CreateDynamicObject(1808, 693.79382, -1360.12939, 1694.41101,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14819, 731.88049, -1347.74231, 13.66522,   0.00000, 0.00000, 90.29782);
    CreateDynamicObject(14819, 732.15869, -1347.73804, 13.66522,   0.00000, 0.00000, 270.46387);
    CreateDynamicObject(14455, 720.52905, -1383.87085, 1696.08276,   0.00000, 0.00000, 89.92023);
    CreateDynamicObject(2610, 707.07135, -1372.21350, 1695.23645,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 707.56744, -1372.21228, 1695.23645,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 686.90680, -1378.80042, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 687.40179, -1378.80237, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 687.89612, -1378.80151, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 688.38824, -1378.79944, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 688.88208, -1378.79797, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2610, 689.37622, -1378.79968, 1695.22864,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2608, 681.85779, -1378.66406, 1695.12244,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2199, 673.78552, -1388.73962, 1694.41101,   0.00000, 0.00000, 89.93225);
    CreateDynamicObject(2199, 673.78693, -1387.36633, 1694.41101,   0.00000, 0.00000, 89.92859);
    CreateDynamicObject(2261, 689.49353, -1360.44788, 1696.66882,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2266, 668.30292, -1360.40637, 1696.61572,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2267, 665.38568, -1362.96643, 1697.02637,   0.00000, 0.00000, 89.94189);
    CreateDynamicObject(2265, 710.71497, -1384.90002, 1696.86145,   0.00000, 0.00000, 180.03612);
    CreateDynamicObject(2264, 717.26544, -1384.89331, 1696.81653,   0.00000, 0.00000, 179.99274);
    CreateDynamicObject(2262, 720.24872, -1375.91699, 1696.82678,   0.00000, 0.00000, 269.86606);
    CreateDynamicObject(2263, 711.51233, -1372.35181, 1696.97754,   0.00000, 0.00000, 359.88000);
    CreateDynamicObject(15038, 689.49878, -1360.43787, 1695.02039,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18014, 677.17871, -1352.87793, 1694.84326,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2011, 691.84174, -1369.27356, 1694.38391,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2011, 666.06866, -1360.71777, 1694.38391,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(644, 672.77588, -1376.93689, 1694.69312,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2140, 670.87878, -1351.73792, 1694.34766,   0.00000, 0.00000, 269.95999);

    CreateTuningGarage();
	return 1;
}

public OnGameModeExit()
{
	DestroyDynamicActor(BotEmilio);
	DestroyDynamicActor(BotMichelle);
	DestroyDynamicActor(BotTracy);
	DestroyDynamicActor(BotTyler);
	GameTextForAll("~r~"SERV_NAME"~w~startet neu",5000,4);
	SaveAll();
	ServerRestartFolgt = 1;
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))return 1;
	if(GetPVarInt(playerid,"LoggedIn") == 0)
	{
		TogglePlayerControllable(playerid, false);
		//SpawnPlayerEx(playerid);
		SetTimerEx("SetConnect",100,false,"i",playerid);
	}
	return 1;
}

public SetConnect(playerid)
{
    if(IsPlayerNPC(playerid))return 1;
    new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
    new Camera = mysql_GetInt("accounts", "icpCamera", "Name", name);
 	TogglePlayerSpectating(playerid,true);
	SetTimerEx("CheckedAccount",5000,false,"i",playerid);
    GameTextForPlayer(playerid,"~w~Rosalife wird geladen...",2500,4);
    
    if(Camera == 1)
    {
	    SetPVarInt(playerid,"CamFahrt",1);
	    CamFahrten[playerid] = SetTimerEx("CameraFahrten",5000,true,"i",playerid);
	    InterpolateCameraPos(playerid, -2118.856201, 334.437530, 92.006568, -2138.267822, 191.594757, 72.065650, 5000);
		InterpolateCameraLookAt(playerid, -2122.397216, 331.727752, 94.268913, -2140.997314, 195.449249, 70.424758, 5000);
	}
	else
 	{
 	    SetPlayerCameraPos(playerid,1480.9349,-1714.2311,41.8807);
 	}
    return 1;
}

public CheckedAccount(playerid)
{
    new query[128];
    GetPlayerName(playerid, SpielerInfo[playerid][sName], MAX_PLAYER_NAME);
    new Beta = mysql_GetInt("config", "ValueInt", "Config", "Beta");
    
    if(Beta == 0)
    {
        beta_start:
		mysql_format(sqlHandle, query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Name` = '%e' LIMIT 1", SpielerInfo[playerid][sName]);
		mysql_tquery(sqlHandle, query, "onCheckPlayerAccount", "i", playerid);
	}
	else
	{
 		if(mysql_CheckBeta(playerid) == 0)
		{
		    SendClientMessage(playerid,COLOR_SORRY,"Dieser Account besitzt kein Beta Zugang.");
		    KickPlayer(playerid,"");
		}
		else
		{
		    new aktiviert = mysql_GetInt("beta", "Aktiviert", "Name", SpielerInfo[playerid][sName]);
		    if(aktiviert == 1)
		    {
			    SendClientMessage(playerid,COLOR_SUPER,"Dieser Account besitzt ein gültigen Beta Zugang.");
			    goto beta_start;
			}
			else if(aktiviert == 0)
			{
			    ShowPlayerDialog(playerid,DIALOG_BETA_KEY,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Beta Key","{FFFFFF}Bitte gib unten dein gültigen Beta Key an.","Weiter","Abbrechen");
			}
		}
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	new string[144], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	GetPlayerIp(playerid, SpielerInfo[playerid][sIPAdresse], 16);
	PlayerFireTimer[playerid][2] = -1;
    if(IsPlayerNPC(playerid))
	{
		new botname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, botname, sizeof(botname));
		if(!strcmp(botname, "C4_Transporter", true))
		{
			new Text3D:label = Create3DTextLabel("Transporteur\n{FFFFFF}Hoffentlich kein Überfall...", COLOR_SORRY, 30.0, 40.0, 50.0, 40.0, 0);
			Attach3DTextLabelToPlayer(label, playerid, 0.0, 0.0, 0.0);
            SetPVarInt(playerid,"LoggedIn",1);
            return 1;
	    }
		return 1;
	}
    SendClientMessage(playerid,COLOR_BLUE,"Die Verbindung zum Gameserver wird hergestellt...");
	GlobalVars[AktuellClients]++;
	PlayAudioStreamForPlayer(playerid,"https://rosalife.de/sounds/intro.mp3");
	if(GlobalVars[AktuellClients] > GlobalVars[Rekord])
	{
		format(string,128,""SERV_NAME" hat einen neuen Rekord: %d Spieler online!",GlobalVars[AktuellClients]);
		SendICPMessage(string);
		GlobalVars[Rekord] = GlobalVars[AktuellClients];
		mysql_SetInt("allgemein", "Rekord", GlobalVars[Rekord], "ServerID", "1");
	}
 	if(ServerRestartFolgt > 0)
    {
        SendClientMessage(playerid,COLOR_SORRY,"Der Server wird neugestartet. Bitte versuche es in ein paar Sekunden erneut.");
        KickPlayer(playerid,"");
    }
   	if(ServerLadenStatus > 0)
    {
        SendClientMessage(playerid,COLOR_SORRY,"Der Server wird geladen. Bitte versuche es in ein paar Sekunden erneut.");
        KickPlayer(playerid,"");
    }
	TextDrawShowForPlayer(playerid, Statusleiste[0]);
	TextDrawShowForPlayer(playerid, Statusleiste[1]);
	TextDrawShowForPlayer(playerid, Statusleiste[2]);
	TextDrawShowForPlayer(playerid, StatusWerbung);

	//Holzfäller - John_Doq
    RemoveBuildingForPlayer(playerid, 785, 1091.6094, -250.0078, 71.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 694, 1045.8438, -270.9453, 75.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 791, 1091.6094, -250.0078, 71.0391, 0.25);

	//Spawn - John_Doq
	RemoveBuildingForPlayer(playerid, 5932, 997.695, -1177.812, 15.867, 0.250);
	RemoveBuildingForPlayer(playerid, 5939, 1037.726, -1167.406, 26.570, 0.250);
	RemoveBuildingForPlayer(playerid, 5940, 1013.734, -1167.367, 35.039, 0.250);
	RemoveBuildingForPlayer(playerid, 5941, 982.335, -1169.601, 32.820, 0.250);
	RemoveBuildingForPlayer(playerid, 5958, 1036.328, -1193.085, 20.976, 0.250);
	RemoveBuildingForPlayer(playerid, 5968, 962.390, -1187.062, 25.226, 0.250);
	RemoveBuildingForPlayer(playerid, 5990, 1003.585, -1156.726, 38.070, 0.250);
	RemoveBuildingForPlayer(playerid, 5719, 962.390, -1187.062, 25.226, 0.250);
	RemoveBuildingForPlayer(playerid, 5764, 1065.140, -1270.578, 25.710, 0.250);
	RemoveBuildingForPlayer(playerid, 5734, 1036.328, -1193.085, 20.976, 0.250);
	RemoveBuildingForPlayer(playerid, 1307, 1043.054, -1190.812, 19.804, 0.250);
	RemoveBuildingForPlayer(playerid, 5763, 997.695, -1177.812, 15.867, 0.250);
	RemoveBuildingForPlayer(playerid, 5720, 982.335, -1169.601, 32.820, 0.250);
	RemoveBuildingForPlayer(playerid, 5721, 1037.726, -1167.406, 26.570, 0.250);
	RemoveBuildingForPlayer(playerid, 5724, 1013.734, -1167.367, 35.039, 0.250);
	RemoveBuildingForPlayer(playerid, 1285, 960.210, -1159.468, 23.335, 0.250);
	RemoveBuildingForPlayer(playerid, 1289, 966.835, -1159.429, 23.343, 0.250);
	
	//Freizeit - Ray_Krieger
	RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17733, 2307.9219, -1434.0391, 21.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 2369.2422, -1403.8672, 41.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2283.8438, -1471.3750, 23.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2291.1406, -1473.9922, 23.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2285.8984, -1473.9922, 23.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2285.0625, -1466.2813, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2301.6563, -1473.9141, 23.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2296.3828, -1473.9922, 23.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2318.4688, -1474.2344, 23.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2327.7188, -1474.0000, 24.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2322.4766, -1474.0000, 24.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2317.2344, -1474.0000, 23.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2331.3281, -1471.5078, 24.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2332.2422, -1466.3750, 24.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2291.4453, -1423.1953, 24.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2291.0625, -1428.4844, 24.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 17563, 2307.9219, -1434.0391, 21.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2292.2188, -1412.6719, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2291.8203, -1417.9141, 24.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2292.5391, -1407.4063, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2333.1641, -1428.9297, 23.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2295.4141, -1394.1641, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2292.8750, -1396.8984, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2292.7734, -1402.1484, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2300.6797, -1394.1641, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2305.9375, -1394.1641, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2309.9531, -1393.8203, 23.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2311.2031, -1394.1641, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2316.4688, -1394.1641, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2321.7109, -1394.2031, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2326.2656, -1396.0547, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 2347.1406, -1434.1250, 26.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 17504, 2378.6719, -1455.2578, 26.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2369.2422, -1403.8672, 41.0391, 0.25);
	
	//Fahrschule - Ray_Krieger
	RemoveBuildingForPlayer(playerid, 4092, 1587.4688, -1418.1875, 19.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 4089, 1587.4688, -1418.1875, 19.0938, 0.25);
	
	//Werbetafeln
	RemoveBuildingForPlayer(playerid,1266,1475.6016,-990.9453,55.6250,0.25);
    RemoveBuildingForPlayer(playerid,1260,1475.6016,-990.9453,55.6250,0.25);
    RemoveBuildingForPlayer(playerid,4229,1597.9063,-1699.7500,30.2109,0.25);
    RemoveBuildingForPlayer(playerid,4230,1597.9063,-1699.7500,30.2109,0.25);
    RemoveBuildingForPlayer(playerid,4239,1407.9063,-1407.3984,33.9844,0.25);
    RemoveBuildingForPlayer(playerid,4753,1451.6172,-966.3828,57.4453,0.25);
    RemoveBuildingForPlayer(playerid,4757,1404.1406,-1309.1328,43.2891,0.25);
    RemoveBuildingForPlayer(playerid,4736,1404.1406,-1309.1328,43.2891,0.25);
    RemoveBuildingForPlayer(playerid,4734,1451.6172,-966.3828,57.4453,0.25);
    RemoveBuildingForPlayer(playerid,5854,992.5313,-962.7344,60.7813,0.25);
    RemoveBuildingForPlayer(playerid,6004,1351.8359,-914.4375,46.9922,0.25);
    RemoveBuildingForPlayer(playerid,5846,1351.8359,-914.4375,46.9922,0.25);
    RemoveBuildingForPlayer(playerid,6349,426.6875,-1360.1484,37.8906,0.25);
    RemoveBuildingForPlayer(playerid,13890,790.1328,-963.3281,59.4766,0.25);
    RemoveBuildingForPlayer(playerid,17916,2366.8125,-1537.5391,39.4688,0.25);
    RemoveBuildingForPlayer(playerid, 785, 2303.3281, -612.6953, 127.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 785, 2431.3750, -657.0859, 119.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 791, 2303.3281, -612.6953, 127.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 693, 2309.4063, -564.2969, 132.9375, 0.25);
    RemoveBuildingForPlayer(playerid, 694, 2358.8984, -616.1172, 130.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 790, 2357.9141, -559.9063, 122.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 696, 2373.8750, -740.6172, 130.1328, 0.25);
    RemoveBuildingForPlayer(playerid, 696, 2375.3047, -666.7266, 131.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 696, 2387.2656, -581.7813, 123.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 790, 2389.1172, -728.3281, 126.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 693, 2408.1172, -556.9141, 111.0391, 0.25);
    RemoveBuildingForPlayer(playerid, 791, 2431.3750, -657.0859, 119.6094, 0.25);
	
	//OBI Baumarkt - Map by Rocky_Balboa
	RemoveBuildingForPlayer(playerid, 17863, 2467.4609, -1538.2500, 27.6016, 0.25);
	
	//Parkplatz Zivispawn + Busfahrer Base - Map by Shirayama
	RemoveBuildingForPlayer(playerid, 712, 1568.5781, -2364.1484, 21.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1569.3125, -2342.1094, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1530.8906, -2251.4219, 12.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1531.0859, -2250.3828, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1531.0859, -2329.1406, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1534.2344, -2273.9375, 21.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1533.6406, -2301.7188, 21.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1569.8359, -2234.6016, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1570.5625, -2213.3359, 21.6484, 0.25);
	
	//Zoll Schranken - by Daniel_LeMarc
	RemoveBuildingForPlayer(playerid, 4521, -84.6797, -909.3438, 18.2422, 0.25);
	
	//San Fiero Nobel Autohaus - Map Niklas.B
	RemoveBuildingForPlayer(playerid, 9965, -1535.4219, 1168.6641, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1567.0547, 1125.5781, 8.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1567.0547, 1153.6641, 8.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3875, -1588.9531, 1205.9141, 13.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1552.7578, 1231.6094, 8.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 9951, -1535.4219, 1168.6641, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1507.7656, 1179.3047, 8.8047, 0.25);
	
	//LSPD Base - Map by Daniel_LeMarc
 	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.4453, -1713.3047, 14.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.2969, -1702.6016, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1687.1016, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 646, 1545.5234, -1678.8438, 14.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1677.7266, 16.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1673.4609, 16.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 646, 1545.5625, -1672.2188, 14.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.4766, -1648.4531, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
	
	//FBI Base - Map by Daniel_LeMarc
	RemoveBuildingForPlayer(playerid, 11025, -2199.3281, 264.3281, 42.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 11402, -2199.3281, 252.0078, 53.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -2245.7734, 305.9141, 34.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -2229.4688, 314.2500, 34.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -2245.7891, 236.8984, 34.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -2245.4219, 265.6875, 34.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 956, -2229.1875, 286.4141, 34.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -2197.0547, 214.2656, 34.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 10973, -2199.3281, 264.3281, 42.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 10974, -2199.3281, 252.0078, 53.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16660, 215.9219, 1865.1797, 13.0234, 0.25);
	
	//Russen Mafia - Map by Blacktrax
	RemoveBuildingForPlayer(playerid, 706, 301.085, -1115.375, 79.914, 0.250);
	RemoveBuildingForPlayer(playerid, 708, 287.953, -1206.726, 79.289, 0.250);
	RemoveBuildingForPlayer(playerid, 13692, 252.234, -1211.929, 64.960, 0.250);
	RemoveBuildingForPlayer(playerid, 13766, 252.234, -1211.929, 64.960, 0.250);
	RemoveBuildingForPlayer(playerid, 3733, 310.617, -1145.523, 85.875, 0.250);
	RemoveBuildingForPlayer(playerid, 3737, 279.132, -1152.226, 82.414, 0.250);
	RemoveBuildingForPlayer(playerid, 3604, 279.132, -1152.226, 82.414, 0.250);
	RemoveBuildingForPlayer(playerid, 3607, 310.617, -1145.523, 85.875, 0.250);
	RemoveBuildingForPlayer(playerid, 762, 337.414, -1163.718, 83.804, 0.250);

	//Los Santos Rettungsdienst - Map by Blacktrax
	RemoveBuildingForPlayer(playerid, 4579, 1666.492, -1246.179, 123.085, 0.250);
	RemoveBuildingForPlayer(playerid, 1525, 1687.226, -1239.125, 15.812, 0.250);
	RemoveBuildingForPlayer(playerid, 4717, 1666.492, -1246.179, 123.085, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, 1628.578, -1260.796, 16.445, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1670.695, -1282.117, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1681.718, -1282.117, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1691.859, -1282.117, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, 1646.101, -1259.578, 16.445, 0.250);
	RemoveBuildingForPlayer(playerid, 4564, 1666.492, -1246.179, 123.085, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, 1646.101, -1233.320, 16.445, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1700.718, -1282.117, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1698.195, -1270.359, 13.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1700.718, -1270.398, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1698.648, -1258.359, 13.968, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1698.789, -1246.359, 14.265, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1698.757, -1233.820, 14.265, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1698.757, -1221.351, 14.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1700.718, -1258.414, 14.343, 0.250);
	RemoveBuildingForPlayer(playerid, 1215, 1700.718, -1246.570, 14.343, 0.250);
	
	//Los Santos Airport Tankstelle - Map by Blacktrax
	RemoveBuildingForPlayer(playerid, 3663, 1882.265, -2395.781, 14.468, 0.250);
	
	//Los Santos - Pay#N Spray Weg machen
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 0.25);
	
	//Los Santos - Busstation
	RemoveBuildingForPlayer(playerid, 712, 1568.5781, -2364.1484, 21.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1569.3125, -2342.1094, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1531.0859, -2329.1406, 11.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1533.6406, -2301.7188, 21.6484, 0.25);
	
	//LSStraßen Breit
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1729.9375, 12.4375, 0.25);
	
	//San News
	RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);
	
	//Los Santos - Offroad Autohaus
	RemoveBuildingForPlayer(playerid, 5517, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5634, 1931.3125, -1574.8438, 16.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 740, 1887.1953, -1565.8984, 9.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 740, 1863.3125, -1568.6484, 11.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1832.8203, -1622.0000, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1891.9688, -1622.0000, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1857.5469, -1608.1172, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1870.2578, -1602.8047, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1883.8203, -1616.4297, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1908.2813, -1608.1172, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1943.8672, -1602.8047, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1831.8906, -1600.3125, 12.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1835.1406, -1600.1797, 12.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1842.4219, -1569.4609, 12.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 5476, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5630, 1928.4922, -1575.9688, 20.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1931.7422, -1569.8828, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1951.5391, -1616.5078, 12.7813, 0.25);
	
	//Los Santos - PNS + Firmengebäude
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);

	//Los Santos - PNS + Cluckinbell
	RemoveBuildingForPlayer(playerid, 1283, 1373.4609, -1872.2266, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4901, 1391.5703, -1891.5859, 18.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 5058, 1457.5625, -1895.9297, 22.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 4880, 1391.5703, -1891.5859, 18.5234, 0.25);

	//Los Santos - PNS nähe BSN
	RemoveBuildingForPlayer(playerid, 3685, 1230.5859, -1013.5859, 34.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 727, 1213.5469, -1075.0000, 29.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 732, 1212.9063, -1065.9063, 29.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3684, 1230.5859, -1013.5859, 34.7656, 0.25);
	
	//Motorradhaus - Los Santos
	RemoveBuildingForPlayer(playerid, 5134, 2045.4922, -1903.6172, 16.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2065.4375, -1897.2344, 13.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 5321, 2045.4922, -1903.6172, 16.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 5374, 2085.2813, -1909.7109, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
	
	//LSPD Gefängnis Türen
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);

	//Los Santos - Bank
	RemoveBuildingForPlayer(playerid, 4075, 1791.796, -1716.984, 12.523, 0.250);
	RemoveBuildingForPlayer(playerid, 4076, 1783.101, -1702.304, 14.351, 0.250);
	RemoveBuildingForPlayer(playerid, 1531, 1799.132, -1708.765, 14.101, 0.250);
	RemoveBuildingForPlayer(playerid, 1266, 1805.023, -1692.445, 25.148, 0.250);
	RemoveBuildingForPlayer(playerid, 4018, 1791.796, -1716.984, 12.523, 0.250);
	RemoveBuildingForPlayer(playerid, 4027, 1783.101, -1702.304, 14.351, 0.250);
	RemoveBuildingForPlayer(playerid, 1260, 1805.023, -1692.445, 25.148, 0.250);

	//Triaden Base (Krimskrams entfernt)
	RemoveBuildingForPlayer(playerid, 1570, -2198.9766, 636.7109, 49.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1570, -2195.4063, 636.7109, 49.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1349, -2191.9766, 637.7891, 49.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1570, -2189.5547, 636.7109, 49.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1570, -2183.7813, 636.7109, 49.6953, 0.25);
	
	//Zerhaecksler - by John_Doq
	Schreinerei[playerid][0] = CreatePlayerTextDraw(playerid, 228.000015, 205.174102, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][0], 0.000000, 11.666872);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][0], 134.000030, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][0], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][0], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][0], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][0], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][1] = CreatePlayerTextDraw(playerid, 227.666671, 191.899993, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][1], 0.000000, 1.032717);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][1], 134.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][1], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][1], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][1], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][2] = CreatePlayerTextDraw(playerid, 148.333312, 190.814819, "Zerhaecksler");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][2], 0.311000, 1.172740);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][2], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][2], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][2], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][2], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][2], true);

	Schreinerei[playerid][3] = CreatePlayerTextDraw(playerid, 188.666687, 214.300018, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][3], 0.000000, 4.568927);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][3], 134.000015, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][3], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][3], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][3], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][3], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][4] = CreatePlayerTextDraw(playerid, 179.333374, 288.137115, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][4], 0.000000, 2.080039);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][4], 136.666717, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][4], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][4], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][4], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][4], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][5] = CreatePlayerTextDraw(playerid, 224.666625, 288.136871, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][5], 0.000000, 2.122427);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][5], 181.999908, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][5], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][5], 255);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][5], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][5], 0);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][5], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][5], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][6] = CreatePlayerTextDraw(playerid, 138.000015, 213.214797, "Status:");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][6], 0.174333, 1.081481);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][6], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][6], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][6], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][6], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][6], true);

	Schreinerei[playerid][7] = CreatePlayerTextDraw(playerid, 137.999984, 231.881515, "Motor");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][7], 0.160666, 0.911407);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][7], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][7], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][7], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][7], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][7], true);

	Schreinerei[playerid][8] = CreatePlayerTextDraw(playerid, 137.999984, 242.251953, "Band");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][8], 0.160666, 0.911406);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][8], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][8], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][8], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][8], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][8], true);

	Schreinerei[playerid][9] = CreatePlayerTextDraw(playerid, 132.666748, 219.851882, "-");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][9], 3.915999, 1.027555);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][9], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][9], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][9], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][9], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][9], true);

	Schreinerei[playerid][10] = CreatePlayerTextDraw(playerid, 169.333374, 231.881484, "i.O.");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][10], 0.160666, 0.911406);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][10], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][10], 8388863);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][10], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][10], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][10], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][10], true);

	Schreinerei[playerid][11] = CreatePlayerTextDraw(playerid, 169.333328, 242.251876, "i.o.");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][11], 0.160666, 0.911406);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][11], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][11], 8388863);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][11], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][11], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][11], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][11], true);

	Schreinerei[playerid][12] = CreatePlayerTextDraw(playerid, 144.333297, 292.444488, "STARTEN");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][12], 0.140665, 1.015110);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][12], 176.333328, 88.770439);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][12], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][12], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][12], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][12], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][12], true);
	PlayerTextDrawSetSelectable(playerid, Schreinerei[playerid][12], true);

	Schreinerei[playerid][13] = CreatePlayerTextDraw(playerid, 189.999954, 292.444549, "STOPPEN");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][13], 0.140665, 1.015110);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][13], 221.333374, 38.992568);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][13], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][13], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][13], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][13], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][13], true);
	PlayerTextDrawSetSelectable(playerid, Schreinerei[playerid][13], true);

	Schreinerei[playerid][14] = CreatePlayerTextDraw(playerid, 173.999984, 181.529617, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][14], 0.000000, 0.697323);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][14], 133.666671, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][14], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][14], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][14], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][14], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][14], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][14], TEXT_DRAW_FONT_0);

	Schreinerei[playerid][15] = CreatePlayerTextDraw(playerid, 140.000000, 180.859268, "BOSCH");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][15], 0.254333, 0.986073);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][15], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][15], -16776961);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][15], 1);
	PlayerTextDrawBackgroundColour(playerid, Schreinerei[playerid][15], 255);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][15], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, Schreinerei[playerid][15], true);

	Schreinerei[playerid][16] = CreatePlayerTextDraw(playerid, 227.999938, 314.270355, "usebox");
	PlayerTextDrawLetterSize(playerid, Schreinerei[playerid][16], 0.000000, 0.020783);
	PlayerTextDrawTextSize(playerid, Schreinerei[playerid][16], 134.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, Schreinerei[playerid][16], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Schreinerei[playerid][16], 0);
	PlayerTextDrawUseBox(playerid, Schreinerei[playerid][16], true);
	PlayerTextDrawBoxColour(playerid, Schreinerei[playerid][16], 255);
	PlayerTextDrawSetShadow(playerid, Schreinerei[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, Schreinerei[playerid][16], 0);
	PlayerTextDrawFont(playerid, Schreinerei[playerid][16], TEXT_DRAW_FONT_0);

	//Quest System - by Tobi_DeKey
	QuestTextdraw[playerid][0] = CreatePlayerTextDraw(playerid, 152.666687, 264.077880, "~r~");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][0], 0.000000, 5.487449);
	PlayerTextDrawTextSize(playerid, QuestTextdraw[playerid][0], 18.666677, 0.000000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][0], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, QuestTextdraw[playerid][0], true);
	PlayerTextDrawBoxColour(playerid, QuestTextdraw[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][0], 0);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][0], TEXT_DRAW_FONT_0);

	QuestTextdraw[playerid][1] = CreatePlayerTextDraw(playerid, 152.666702, 252.048187, "~r~");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][1], 0.000000, 0.870986);
	PlayerTextDrawTextSize(playerid, QuestTextdraw[playerid][1], 18.666675, 0.000000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, QuestTextdraw[playerid][1], true);
	PlayerTextDrawBoxColour(playerid, QuestTextdraw[playerid][1], 102);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][1], 0);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][1], TEXT_DRAW_FONT_0);

	QuestTextdraw[playerid][2] = CreatePlayerTextDraw(playerid, 83.333259, 262.992706, "Hallo ~b~Sheno");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][2], 0.230000, 1.100000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][2], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][2], 1);
	PlayerTextDrawBackgroundColour(playerid, QuestTextdraw[playerid][2], 51);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][2], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, QuestTextdraw[playerid][2], true);

	QuestTextdraw[playerid][3] = CreatePlayerTextDraw(playerid, 152.667022, 276.937042, "~r~");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][3], 0.000000, 0.028187);
	PlayerTextDrawTextSize(playerid, QuestTextdraw[playerid][3], 18.666683, 0.000000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][3], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, QuestTextdraw[playerid][3], true);
	PlayerTextDrawBoxColour(playerid, QuestTextdraw[playerid][3], -7143219);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][3], 0);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][3], TEXT_DRAW_FONT_0);

	QuestTextdraw[playerid][4] = CreatePlayerTextDraw(playerid, 86.000015, 279.999847, "Willkommen auf German Rosalife");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][4], 0.150000, 1.200000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][4], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][4], 1);
	PlayerTextDrawBackgroundColour(playerid, QuestTextdraw[playerid][4], 51);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][4], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, QuestTextdraw[playerid][4], true);

	QuestTextdraw[playerid][5] = CreatePlayerTextDraw(playerid, 85.666717, 290.370330, "Um den Server besser kennenzulernen, gibt");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][5], 0.150000, 1.200000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][5], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][5], 1);
	PlayerTextDrawBackgroundColour(playerid, QuestTextdraw[playerid][5], 51);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][5], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, QuestTextdraw[playerid][5], true);

	QuestTextdraw[playerid][6] = CreatePlayerTextDraw(playerid, 85.333374, 300.740570, "es hier das sogenannte ~b~Quest System");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][6], 0.159997, 1.200000);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][6], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][6], 1);
	PlayerTextDrawBackgroundColour(playerid, QuestTextdraw[playerid][6], 51);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][6], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, QuestTextdraw[playerid][6], true);

	QuestTextdraw[playerid][7] = CreatePlayerTextDraw(playerid, 24.000064, 250.133163, "~b~Quest 1: ~w~Miete dir beim Rollerverleih einen Roller");
	PlayerTextDrawLetterSize(playerid, QuestTextdraw[playerid][7], 0.143665, 1.191702);
	PlayerTextDrawAlignment(playerid, QuestTextdraw[playerid][7], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, QuestTextdraw[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, QuestTextdraw[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, QuestTextdraw[playerid][7], 1);
	PlayerTextDrawBackgroundColour(playerid, QuestTextdraw[playerid][7], 51);
	PlayerTextDrawFont(playerid, QuestTextdraw[playerid][7], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, QuestTextdraw[playerid][7], true);

	//Lotto Textdraw by TottyTurtle
	PLottoSchein[playerid] = CreatePlayerTextDraw(playerid,273.000000, 214.000000, "Losnummer~n~00 - 00 - 00~n~~n~Betrag:~t~120$");
	PlayerTextDrawBackgroundColour(playerid,PLottoSchein[playerid], 255);
	PlayerTextDrawFont(playerid,PLottoSchein[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,PLottoSchein[playerid], 0.250000, 0.899999);
	PlayerTextDrawColour(playerid,PLottoSchein[playerid], 255);
	PlayerTextDrawSetOutline(playerid,PLottoSchein[playerid], 0);
	PlayerTextDrawSetProportional(playerid,PLottoSchein[playerid], true);
	PlayerTextDrawSetShadow(playerid,PLottoSchein[playerid], 0);
	
	//Stats Textdraw by GangstaStunny
	StatsDraw[playerid][0] = CreatePlayerTextDraw(playerid,500.000000, 126.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,StatsDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,StatsDraw[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,StatsDraw[playerid][0], 0.500000, 13.000000);
	PlayerTextDrawColour(playerid,StatsDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,StatsDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,StatsDraw[playerid][0], true);
	PlayerTextDrawSetShadow(playerid,StatsDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,StatsDraw[playerid][0], true);
	PlayerTextDrawBoxColour(playerid,StatsDraw[playerid][0], 16843133);
	PlayerTextDrawTextSize(playerid,StatsDraw[playerid][0], 140.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,StatsDraw[playerid][0], false);

	StatsDraw[playerid][1] = CreatePlayerTextDraw(playerid,150.000000, 150.000000, "Skin");
	PlayerTextDrawBackgroundColour(playerid,StatsDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,StatsDraw[playerid][1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawLetterSize(playerid,StatsDraw[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid,StatsDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,StatsDraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,StatsDraw[playerid][1], true);
	PlayerTextDrawSetShadow(playerid,StatsDraw[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,StatsDraw[playerid][1], true);
	PlayerTextDrawBoxColour(playerid,StatsDraw[playerid][1], -1);
	PlayerTextDrawTextSize(playerid,StatsDraw[playerid][1], 60.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, StatsDraw[playerid][1], 26);
	PlayerTextDrawSetPreviewRot(playerid, StatsDraw[playerid][1], 0.000000, 0.000000, 20.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,StatsDraw[playerid][1], false);

	StatsDraw[playerid][2] = CreatePlayerTextDraw(playerid,259.000000, 126.000000, "Statistiken");
	PlayerTextDrawBackgroundColour(playerid,StatsDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid,StatsDraw[playerid][2], TEXT_DRAW_FONT_0);
	PlayerTextDrawLetterSize(playerid,StatsDraw[playerid][2], 1.000000, 2.000000);
	PlayerTextDrawColour(playerid,StatsDraw[playerid][2], -4980481);
	PlayerTextDrawSetOutline(playerid,StatsDraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid,StatsDraw[playerid][2], true);
	PlayerTextDrawSetSelectable(playerid,StatsDraw[playerid][2], false);

	StatsDraw[playerid][3] = CreatePlayerTextDraw(playerid,220.000000, 157.000000, "Name: GangstaSunny ~n~Level: 5 - 125/1048 EXP - ~n~Noch 16 Minuten bis zum Payday ~n~~n~Verwarnungen: 0 ~n~Kills: 124 - Tode: 79");
	PlayerTextDrawBackgroundColour(playerid,StatsDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid,StatsDraw[playerid][3], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,StatsDraw[playerid][3], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid,StatsDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,StatsDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,StatsDraw[playerid][3], true);
	PlayerTextDrawSetShadow(playerid,StatsDraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,StatsDraw[playerid][3], false);

	StatsDraw[playerid][4] = CreatePlayerTextDraw(playerid,491.000000, 157.000000, "Fraktion: L.S Police Dep. ~n~Rank: Trainee ~n~Gehalt: 2500$ ~n~Fraksperre: ~g~Nein");
	PlayerTextDrawAlignment(playerid,StatsDraw[playerid][4], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid,StatsDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid,StatsDraw[playerid][4], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,StatsDraw[playerid][4], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid,StatsDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,StatsDraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,StatsDraw[playerid][4], true);
	PlayerTextDrawSetShadow(playerid,StatsDraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid,StatsDraw[playerid][4], false);

 	//Robbar Textdraw
    RobBar[playerid][0] = CreatePlayerTextDraw(playerid,211.000000, 390.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,RobBar[playerid][0], 255);
	PlayerTextDrawFont(playerid,RobBar[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,RobBar[playerid][0], 0.670000, 1.900000);
	PlayerTextDrawColour(playerid,RobBar[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,RobBar[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,RobBar[playerid][0], true);
	PlayerTextDrawSetShadow(playerid,RobBar[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,RobBar[playerid][0], true);
	PlayerTextDrawBoxColour(playerid,RobBar[playerid][0], 16843108);
	PlayerTextDrawTextSize(playerid,RobBar[playerid][0], 409.000000, -1.000000);
	PlayerTextDrawSetSelectable(playerid,RobBar[playerid][0], false);

	RobBar[playerid][1] = CreatePlayerTextDraw(playerid,211.000000, 390.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,RobBar[playerid][1], 255);
	PlayerTextDrawFont(playerid,RobBar[playerid][1], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,RobBar[playerid][1], 0.670000, 1.900000);
	PlayerTextDrawColour(playerid,RobBar[playerid][1], 65381);
	PlayerTextDrawSetOutline(playerid,RobBar[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,RobBar[playerid][1], true);
	PlayerTextDrawSetShadow(playerid,RobBar[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,RobBar[playerid][1], true);
	PlayerTextDrawBoxColour(playerid,RobBar[playerid][1], 8585061);
	PlayerTextDrawTextSize(playerid,RobBar[playerid][1], 409.000000, -1.000000);
	PlayerTextDrawSetSelectable(playerid,RobBar[playerid][1], false);

	RobBar[playerid][2] = CreatePlayerTextDraw(playerid,311.000000, 392.000000, "Raub in Prozess");
	PlayerTextDrawAlignment(playerid,RobBar[playerid][2], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,RobBar[playerid][2], 255);
	PlayerTextDrawFont(playerid,RobBar[playerid][2], TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid,RobBar[playerid][2], 0.539999, 1.500000);
	PlayerTextDrawColour(playerid,RobBar[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,RobBar[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid,RobBar[playerid][2], true);
	PlayerTextDrawSetSelectable(playerid,RobBar[playerid][2], false);

	//Bankrob Textdraw
	BankraubTD[playerid][0] = CreatePlayerTextDraw(playerid,609.000000, 240.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][0], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][0], 0.500000, 5.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][0], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,BankraubTD[playerid][0], true);
	PlayerTextDrawBoxColour(playerid,BankraubTD[playerid][0], 16843133);
	PlayerTextDrawTextSize(playerid,BankraubTD[playerid][0], 493.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][0], false);

	BankraubTD[playerid][1] = CreatePlayerTextDraw(playerid,490.000000, 230.000000, "LD_CHAT:badchat");
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][1], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][1], TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][1], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,BankraubTD[playerid][1], true);
	PlayerTextDrawBoxColour(playerid,BankraubTD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid,BankraubTD[playerid][1], 20.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][1], false);

	BankraubTD[playerid][2] = CreatePlayerTextDraw(playerid,510.000000, 237.000000, "ld_shtr:cbarm");
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][2], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][2], TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][2], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,BankraubTD[playerid][2], true);
	PlayerTextDrawBoxColour(playerid,BankraubTD[playerid][2], 255);
	PlayerTextDrawTextSize(playerid,BankraubTD[playerid][2], 98.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][2], false);

	BankraubTD[playerid][3] = CreatePlayerTextDraw(playerid,550.000000, 250.000000, "~w~ GELD IM VAN: ~b~ 13000$");
	PlayerTextDrawAlignment(playerid,BankraubTD[playerid][3], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][3], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][3], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][3], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][3], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][3], false);

	BankraubTD[playerid][4] = CreatePlayerTextDraw(playerid,550.000000, 260.000000, "~w~ GELDBEUTEL IN DER BANK: ~b~ 5");
	PlayerTextDrawAlignment(playerid,BankraubTD[playerid][4], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][4], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][4], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][4], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][4], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][4], false);

	BankraubTD[playerid][5] = CreatePlayerTextDraw(playerid,550.000000, 272.000000, "~w~ NOCH ~b~ 16 Sekunden ~w~ BIS ZUM NEUEN GELDBEUTEL");
	PlayerTextDrawAlignment(playerid,BankraubTD[playerid][5], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,BankraubTD[playerid][5], 255);
	PlayerTextDrawFont(playerid,BankraubTD[playerid][5], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,BankraubTD[playerid][5], 0.100000, 1.000000);
	PlayerTextDrawColour(playerid,BankraubTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,BankraubTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,BankraubTD[playerid][5], true);
	PlayerTextDrawSetShadow(playerid,BankraubTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid,BankraubTD[playerid][5], false);

    //Ingame Control Panel
    ICPBox[playerid] = CreatePlayerTextDraw(playerid, 510.000000, 120.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid, ICPBox[playerid], 255);
	PlayerTextDrawFont(playerid, ICPBox[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPBox[playerid], 0.500000, 20.000000);
	PlayerTextDrawColour(playerid, ICPBox[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPBox[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPBox[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPBox[playerid], 1);
	PlayerTextDrawUseBox(playerid, ICPBox[playerid], true);
	PlayerTextDrawBoxColour(playerid, ICPBox[playerid], 16843108);
	PlayerTextDrawTextSize(playerid, ICPBox[playerid], 120.000000, 0.000000);

	ICPTitel[playerid] = CreatePlayerTextDraw(playerid, 240.000000, 118.000000, "Ingame Control Panel");
	PlayerTextDrawBackgroundColour(playerid, ICPTitel[playerid], 255);
	PlayerTextDrawFont(playerid, ICPTitel[playerid], TEXT_DRAW_FONT_0);
	PlayerTextDrawLetterSize(playerid, ICPTitel[playerid], 0.600000, 2.000000);
	PlayerTextDrawColour(playerid, ICPTitel[playerid], -23449857);
	PlayerTextDrawSetOutline(playerid, ICPTitel[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPTitel[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPTitel[playerid], 1);

    ICPMessage[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 140.000000, "~r~Allgemeine Nachrichten~n~~w~Zeigt zum Beispiel an ob ein Spieler gemutet, gestellt oder verwarnt wurde.");
	PlayerTextDrawBackgroundColour(playerid, ICPMessage[playerid], 255);
	PlayerTextDrawFont(playerid, ICPMessage[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPMessage[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPMessage[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPMessage[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPMessage[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPMessage[playerid], 1);

	ICPMessageEdit[playerid] = CreatePlayerTextDraw(playerid, 426.000000, 149.000000, "~g~] Aktiviert");
	PlayerTextDrawBackgroundColour(playerid, ICPMessageEdit[playerid], 255);
	PlayerTextDrawFont(playerid, ICPMessageEdit[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ICPMessageEdit[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPMessageEdit[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPMessageEdit[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPMessageEdit[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPMessageEdit[playerid], 1);

	ICPHitsound[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 164.000000, "~r~Hitsound~n~~w~Sobald du getroffen wirst, oder du jemanden triffst bekommst du einen Ton.");
	PlayerTextDrawBackgroundColour(playerid, ICPHitsound[playerid], 255);
	PlayerTextDrawFont(playerid, ICPHitsound[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPHitsound[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPHitsound[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPHitsound[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPHitsound[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPHitsound[playerid], 1);

	ICPHitsoundEdit[playerid] = CreatePlayerTextDraw(playerid, 426.000000, 172.000000, "~r~] Deaktiviert");
	PlayerTextDrawBackgroundColour(playerid, ICPHitsoundEdit[playerid], 255);
	PlayerTextDrawFont(playerid, ICPHitsoundEdit[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ICPHitsoundEdit[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPHitsoundEdit[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPHitsoundEdit[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPHitsoundEdit[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPHitsoundEdit[playerid], 1);

	ICPSave[playerid] = CreatePlayerTextDraw(playerid, 270.000000, 286.000000, "Speichern & Verlassen");
	PlayerTextDrawBackgroundColour(playerid, ICPSave[playerid], 255);
	PlayerTextDrawFont(playerid, ICPSave[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPSave[playerid], 0.300000, 1.000000);
	PlayerTextDrawColour(playerid, ICPSave[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPSave[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPSave[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPSave[playerid], 1);
	
	ICPOChat[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 188.000000, "~r~Out of Character Chat~n~~w~Du bekommst alle Nachrichten aus dem OOC beziehungsweise O-Chat.");
	PlayerTextDrawBackgroundColour(playerid, ICPOChat[playerid], 255);
	PlayerTextDrawFont(playerid, ICPOChat[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPOChat[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPOChat[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPOChat[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPOChat[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPOChat[playerid], 1);

	ICPOChatEdit[playerid] = CreatePlayerTextDraw(playerid, 426.000000, 195.000000, "~g~] Aktiviert");
	PlayerTextDrawBackgroundColour(playerid, ICPOChatEdit[playerid], 255);
	PlayerTextDrawFont(playerid, ICPOChatEdit[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ICPOChatEdit[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPOChatEdit[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPOChatEdit[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPOChatEdit[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPOChatEdit[playerid], 1);
	
	ICPCamera[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 212.000000, "~r~Kamerafahrten~n~~w~Schwenkende Kamera durch San Andreas beim Login.");
	PlayerTextDrawBackgroundColour(playerid, ICPCamera[playerid], 255);
	PlayerTextDrawFont(playerid, ICPCamera[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPCamera[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPCamera[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPCamera[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPCamera[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPCamera[playerid], 1);

	ICPCameraEdit[playerid] = CreatePlayerTextDraw(playerid, 426.000000, 218.000000, "~r~] Deaktiviert");
	PlayerTextDrawBackgroundColour(playerid, ICPCameraEdit[playerid], 255);
	PlayerTextDrawFont(playerid, ICPCameraEdit[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ICPCameraEdit[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPCameraEdit[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPCameraEdit[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPCameraEdit[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPCameraEdit[playerid], 1);
	
	ICPHandy[playerid] = CreatePlayerTextDraw(playerid, 130.000000, 236.000000, "~r~Handy Status~n~~w~Keine nervigen Anrufe oder SMS mehr. Zu dem ist keine Ortung mehr moeglich.");
	PlayerTextDrawBackgroundColour(playerid, ICPHandy[playerid], 255);
	PlayerTextDrawFont(playerid, ICPHandy[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ICPHandy[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPHandy[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPHandy[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPHandy[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPHandy[playerid], 1);

	ICPHandyEdit[playerid] = CreatePlayerTextDraw(playerid, 426.000000, 241.000000, "~r~] Ausgeschaltet");
	PlayerTextDrawBackgroundColour(playerid, ICPHandyEdit[playerid], 255);
	PlayerTextDrawFont(playerid, ICPHandyEdit[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ICPHandyEdit[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, ICPHandyEdit[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ICPHandyEdit[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ICPHandyEdit[playerid], true);
	PlayerTextDrawSetShadow(playerid, ICPHandyEdit[playerid], 1);
	
	//Freeze Button
	Freeze[playerid] = CreatePlayerTextDraw(playerid, 0, 0, " ");
	
	//EXP Informationen & Levelup
	LevelUP[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 410.000000, ">> LEVEL UP <<");
	PlayerTextDrawAlignment(playerid, LevelUP[playerid], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, LevelUP[playerid], 255);
	PlayerTextDrawFont(playerid, LevelUP[playerid], TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, LevelUP[playerid], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid, LevelUP[playerid], 16711935);
	PlayerTextDrawSetOutline(playerid, LevelUP[playerid], 1);
	PlayerTextDrawSetProportional(playerid, LevelUP[playerid], true);
	PlayerTextDrawSetSelectable(playerid, LevelUP[playerid], false);
	
	//Tacho by GangstaSunny
	Tacho[playerid][0] = CreatePlayerTextDraw(playerid, 630.000000, 353.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][0], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][0], 0.500000, 7.299999);
	PlayerTextDrawColour(playerid, Tacho[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][0], true);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][0], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][0], 85);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][0], 480.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][0], false);

	Tacho[playerid][1] = CreatePlayerTextDraw(playerid, 479.000000, 332.000000, "400");
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][1], 0);
	PlayerTextDrawFont(playerid, Tacho[playerid][1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid, Tacho[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][1], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][1], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][1], -2004318055);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][1], 80.000000, 70.000000);
	PlayerTextDrawSetPreviewModel(playerid, Tacho[playerid][1], 560);
	PlayerTextDrawSetPreviewRot(playerid, Tacho[playerid][1], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][1], false);

	Tacho[playerid][2] = CreatePlayerTextDraw(playerid, 625.000000, 364.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][2], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][2], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][2], 0.500000, 0.699999);
	PlayerTextDrawColour(playerid, Tacho[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][2], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][2], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][2], -5636067);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][2], 553.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][2], false);

	Tacho[playerid][3] = CreatePlayerTextDraw(playerid, 589.000000, 362.000000, "Kraftstoff 78%");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][3], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][3], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][3], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][3], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid, Tacho[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][3], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][3], false);

	Tacho[playerid][4] = CreatePlayerTextDraw(playerid, 625.000000, 384.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][4], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][4], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][4], 0.500000, 0.699999);
	PlayerTextDrawColour(playerid, Tacho[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][4], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][4], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][4], -5636067);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][4], 553.000000, -3.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][4], false);

	Tacho[playerid][5] = CreatePlayerTextDraw(playerid, 589.000000, 382.000000, "Schaden 100%");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][5], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][5], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][5], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][5], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid, Tacho[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][5], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][5], false);

	Tacho[playerid][6] = CreatePlayerTextDraw(playerid, 518.000000, 382.000000, "~y~121");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][6], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][6], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][6], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][6], 0.560000, 2.000000);
	PlayerTextDrawColour(playerid, Tacho[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][6], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][6], false);

	Tacho[playerid][7] = CreatePlayerTextDraw(playerid, 518.000000, 398.000000, "KM/H");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][7], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][7], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][7], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][7], 0.260000, 1.200000);
	PlayerTextDrawColour(playerid, Tacho[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][7], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][7], false);

	Tacho[playerid][8] = CreatePlayerTextDraw(playerid, 625.000000, 404.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][8], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][8], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][8], 0.500000, 0.699999);
	PlayerTextDrawColour(playerid, Tacho[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][8], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][8], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][8], -5636067);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][8], 553.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][8], false);

	Tacho[playerid][9] = CreatePlayerTextDraw(playerid, 589.000000, 402.000000, "7.329 Kilometer");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][9], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][9], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][9], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][9], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid, Tacho[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][9], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][9], false);

	Tacho[playerid][10] = CreatePlayerTextDraw(playerid, 508.000000, 411.000000, "LD_NONE:ship2");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][10], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][10], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][10], TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][10], 0.170000, 0.899999);
	PlayerTextDrawColour(playerid, Tacho[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][10], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][10], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][10], 255);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][10], 8.000000, 6.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][10], false);

	Tacho[playerid][11] = CreatePlayerTextDraw(playerid, 519.000000, 411.000000, "LD_NONE:ship3");
	PlayerTextDrawAlignment(playerid, Tacho[playerid][11], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid, Tacho[playerid][11], 255);
	PlayerTextDrawFont(playerid, Tacho[playerid][11], TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid, Tacho[playerid][11], 0.170000, 0.899999);
	PlayerTextDrawColour(playerid, Tacho[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, Tacho[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, Tacho[playerid][11], true);
	PlayerTextDrawSetShadow(playerid, Tacho[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, Tacho[playerid][11], true);
	PlayerTextDrawBoxColour(playerid, Tacho[playerid][11], 255);
	PlayerTextDrawTextSize(playerid, Tacho[playerid][11], 8.000000, 6.000000);
	PlayerTextDrawSetSelectable(playerid, Tacho[playerid][11], false);
	
	//Countdown Textdraw - by Tobi_DeKey
	CountdownDraw[playerid][0] = CreatePlayerTextDraw(playerid,502.000000, 297.000000, "ld_grav:timer");
	PlayerTextDrawBackgroundColour(playerid,CountdownDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,CountdownDraw[playerid][0], TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid,CountdownDraw[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid,CountdownDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,CountdownDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,CountdownDraw[playerid][0], true);
	PlayerTextDrawSetShadow(playerid,CountdownDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,CountdownDraw[playerid][0], true);
	PlayerTextDrawBoxColour(playerid,CountdownDraw[playerid][0], 255);
	PlayerTextDrawTextSize(playerid,CountdownDraw[playerid][0], 19.000000, 14.000000);
	PlayerTextDrawSetSelectable(playerid,CountdownDraw[playerid][0], false);
	
	CountdownDraw[playerid][1] = CreatePlayerTextDraw(playerid,606.000000, 296.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,CountdownDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,CountdownDraw[playerid][1], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,CountdownDraw[playerid][1], 0.469999, 4.099997);
	PlayerTextDrawColour(playerid,CountdownDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,CountdownDraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,CountdownDraw[playerid][1], true);
	PlayerTextDrawSetShadow(playerid,CountdownDraw[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,CountdownDraw[playerid][1], true);
	PlayerTextDrawBoxColour(playerid,CountdownDraw[playerid][1], 112);
	PlayerTextDrawTextSize(playerid,CountdownDraw[playerid][1], 498.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,CountdownDraw[playerid][1], false);

	CountdownDraw[playerid][2] = CreatePlayerTextDraw(playerid,550.000000, 299.000000, "HEADLINE");
	PlayerTextDrawAlignment(playerid,CountdownDraw[playerid][2], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,CountdownDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid,CountdownDraw[playerid][2], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,CountdownDraw[playerid][2], 0.259999, 1.100000);
	PlayerTextDrawColour(playerid,CountdownDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,CountdownDraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,CountdownDraw[playerid][2], true);
	PlayerTextDrawSetShadow(playerid,CountdownDraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,CountdownDraw[playerid][2], false);

	CountdownDraw[playerid][3] = CreatePlayerTextDraw(playerid,550.000000, 314.000000, "60 Sekunden");
	PlayerTextDrawAlignment(playerid,CountdownDraw[playerid][3], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,CountdownDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid,CountdownDraw[playerid][3], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,CountdownDraw[playerid][3], 0.259999, 1.100000);
	PlayerTextDrawColour(playerid,CountdownDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,CountdownDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,CountdownDraw[playerid][3], true);
	PlayerTextDrawSetShadow(playerid,CountdownDraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,CountdownDraw[playerid][3], false);
	
	//Wantedtextraw by GangstaSunny
	WantedDraw[playerid] = CreatePlayerTextDraw(playerid,547.000000, 26.000000, "12 ]");
	PlayerTextDrawBackgroundColour(playerid,WantedDraw[playerid], 255);
	PlayerTextDrawFont(playerid,WantedDraw[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,WantedDraw[playerid], 0.500000, 1.000000);
	PlayerTextDrawColour(playerid,WantedDraw[playerid], 0xFFB400FF);
	PlayerTextDrawSetOutline(playerid,WantedDraw[playerid], 0);
	PlayerTextDrawSetProportional(playerid,WantedDraw[playerid], true);
	PlayerTextDrawSetShadow(playerid,WantedDraw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,WantedDraw[playerid], false);
	
	//TankenTextdraws by GangstaSunny
	TankenDraw[playerid][0] = CreatePlayerTextDraw(playerid,320.000000, 343.000000, "~r~");
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][0], 0.400000, 5.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][0], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,TankenDraw[playerid][0], true);
	PlayerTextDrawBoxColour(playerid,TankenDraw[playerid][0], 16843133);
	PlayerTextDrawTextSize(playerid,TankenDraw[playerid][0], 140.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][0], false);

	TankenDraw[playerid][1] = CreatePlayerTextDraw(playerid,149.000000, 336.000000, "Tankstelle");
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][1], TEXT_DRAW_FONT_0);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][1], 0.800000, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][1], true);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][1], false);

	TankenDraw[playerid][2] = CreatePlayerTextDraw(playerid,199.000000, 346.000000, "Aktuelle Liter: ~r~20L");
	PlayerTextDrawAlignment(playerid,TankenDraw[playerid][2], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][2], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][2], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][2], false);

	TankenDraw[playerid][3] = CreatePlayerTextDraw(playerid,199.000000, 356.000000, "Aktueller Preis: ~r~2000$");
	PlayerTextDrawAlignment(playerid,TankenDraw[playerid][3], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][3], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][3], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][3], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][3], false);

	TankenDraw[playerid][4] = CreatePlayerTextDraw(playerid,200.000000, 376.000000, "Preis pro Liter: ~r~6$");
	PlayerTextDrawAlignment(playerid,TankenDraw[playerid][4], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][4], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][4], 0.159999, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][4], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][4], false);

	TankenDraw[playerid][5] = CreatePlayerTextDraw(playerid,281.000000, 351.000000, "BETANKEN");
	PlayerTextDrawAlignment(playerid,TankenDraw[playerid][5], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][5], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][5], 0.259999, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][5], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][5], true);

	TankenDraw[playerid][6] = CreatePlayerTextDraw(playerid,281.000000, 371.000000, "BEENDEN");
	PlayerTextDrawAlignment(playerid,TankenDraw[playerid][6], TEXT_DRAW_ALIGN_CENTER);
	PlayerTextDrawBackgroundColour(playerid,TankenDraw[playerid][6], 255);
	PlayerTextDrawFont(playerid,TankenDraw[playerid][6], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,TankenDraw[playerid][6], 0.259999, 1.000000);
	PlayerTextDrawColour(playerid,TankenDraw[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,TankenDraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,TankenDraw[playerid][6], true);
	PlayerTextDrawSetShadow(playerid,TankenDraw[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid,TankenDraw[playerid][6], true);
	DestroyVars(playerid);
	return 1;
}

stock KEY:Pressing(playerid)
{
	new KEY:keys, KEY:updown, KEY:leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	return keys;
}

public OnPlayerDisconnect(playerid, reason)
{
	new string[264];
	format(string,sizeof(string),"UPDATE `accounts` SET `Online`='0' WHERE `Name`='%s'", SpielerInfo[playerid][sName]);
	mysql_tquery(sqlHandle, string);
	
	SaveAccount(playerid);
    SavePrivatCar(playerid);
   	SavePlayerWeapons(playerid);
    DestroyFire(playerid);
    DestroyDynamic3DTextLabel(aDuty[playerid]);
	if(GetPVarInt(playerid, "IsOnFire") && !CanPlayerBurn(playerid, 1))
	{
		TogglePlayerBurning(playerid, false);
	}
    if(!IsPlayerNPC(playerid))
	{
	 	switch(reason)
	    {
	        case 0: format(string,sizeof string,"%s %s hat den Server verlassen. (Timeout)",AdminName(playerid),SpielerInfo[playerid][sName]);
	        case 1: format(string,sizeof string,"%s %s hat den Server verlassen. (Verlassen)",AdminName(playerid),SpielerInfo[playerid][sName]);
	        case 2: format(string,sizeof string,"%s %s hat den Server verlassen. (Kick/Ban)",AdminName(playerid),SpielerInfo[playerid][sName]);
	    }
	}
	if(SpielerInfo[playerid][sC4RobState] == true)
	{
		SendClientMessage(playerid,COLOR_SORRY,"Ihr seid am C4-Raub gescheitert.");
		KillTimer(C4robTimer);
		robc4sec = 0;
		SpielerInfo[playerid][sC4RobState] = true;
		pRobC4BackwardTime = 0;
		pRobC4TimeNearVehicle = 0;
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(SpielerInfo[i][sC4RobState] == true) SpielerInfo[i][sC4RobState] = false;
				SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DER ÜBERFALL AUF DEN C4-TRANSPORTER WAR NICHT ERFOLGREICH.");
			}
		}
	}
    SendICPMessage(string);
    DestroyVars(playerid);
    GlobalVars[AktuellClients]--;
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		new botname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, botname, sizeof(botname));
		if(!strcmp(botname, "C4_Transporter", true))
		{
            SetPlayerSkin(playerid,287);
            PutPlayerInVehicle(playerid, C4Transporter, 0);
            return 1;
		}
		return 1;
  	}
	if(GetPVarInt(playerid,"LoggedIn") == 0)
	{
	    SendClientMessage(playerid,COLOR_SORRY,"Du wurdest vom Server gekickt. Grund: Bitte logge dich vor dem Spawnen ein.");
	    KickPlayer(playerid,"");
	    return 1;
	}
    SetPVarInt(playerid,"PDEquipt",0);
    
    //Gangfightsystem
    UpdateGangZones(playerid);
	if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19){StartGangfight(playerid);}
	
	if(SpielerInfo[playerid][sKnast] > 1)
	{
        SetPlayerSkin(playerid,mysql_GetInt("accounts", "KnastSkin", "Name", SpielerInfo[playerid][sName]));
	    if(SpielerInfo[playerid][sZelle] == 1)
	    {
	        KillTimer(KnastTimer[playerid]);
		    KnastTimer[playerid] = SetTimerEx("TimeToKnast",60000,true,"i",playerid);
			new rand = random(4);
			if(rand == 0)//LSPD Zelle 1
			{
		        SetPlayerPos(playerid,1584.9369,-1646.2644,1257.7666);
			    SetPlayerFacingAngle(playerid, 179.6315);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 1)//LSPD Zelle 2
			{
		        SetPlayerPos(playerid,1593.6317,-1651.1718,1257.7506);
			    SetPlayerFacingAngle(playerid, 86.2573);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 2)//LSPD Zelle 3
			{
		        SetPlayerPos(playerid,1593.7892,-1654.3257,1257.7506);
			    SetPlayerFacingAngle(playerid, 86.2573);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 3)//LSPD Zelle 4
			{
		        SetPlayerPos(playerid,1593.4448,-1657.6255,1257.7506);
			    SetPlayerFacingAngle(playerid, 86.2573);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		else if(SpielerInfo[playerid][sZelle] == 2)
	    {
	        KillTimer(KnastTimer[playerid]);
		    KnastTimer[playerid] = SetTimerEx("TimeToKnast",60000,true,"i",playerid);
			new rand = random(4);
			if(rand == 0)//SFPD Zelle 1
			{
	   			SetPlayerPos(playerid,227.3958,110.5813,999.0156);
			    SetPlayerFacingAngle(playerid, 1.2726);
			    SetPlayerInterior(playerid,10);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 1)//SFPD Zelle 2
			{
	   			SetPlayerPos(playerid,223.5220,110.3741,999.0156);
			    SetPlayerFacingAngle(playerid, 357.1993);
			    SetPlayerInterior(playerid,10);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 2)//SFPD Zelle 3
			{
	   			SetPlayerPos(playerid,219.6080,110.3946,999.0156);
			    SetPlayerFacingAngle(playerid, 359.7059);
			    SetPlayerInterior(playerid,10);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 3)//SFPD Zelle 4
			{
	   			SetPlayerPos(playerid,215.5116,110.2950,999.0156);
			    SetPlayerFacingAngle(playerid, 357.8259);
			    SetPlayerInterior(playerid,10);
			    SetCameraBehindPlayer(playerid);
			}
		}
		else if(SpielerInfo[playerid][sZelle] == 3)
	    {
	        KillTimer(KnastTimer[playerid]);
			KnastTimer[playerid] = SetTimerEx("TimeToKnast",60000,true,"i",playerid);
			new rand = random(3);
			if(rand == 0)//LVPD Zelle 1
			{
	   			SetPlayerPos(playerid,197.4640,174.8574,1003.0234);
			    SetPlayerFacingAngle(playerid, 1.3199);
			    SetPlayerInterior(playerid,3);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 1)//LVPD Zelle 2
			{
	   			SetPlayerPos(playerid,193.0342,175.1850,1003.0234);
			    SetPlayerFacingAngle(playerid, 358.4999);
			    SetPlayerInterior(playerid,3);
			    SetCameraBehindPlayer(playerid);
			}
			else if(rand == 2)//LVPD Zelle 3
			{
  				SetPlayerPos(playerid,198.7635,161.6028,1003.0300);
		    	SetPlayerFacingAngle(playerid, 177.6814);
		    	SetPlayerInterior(playerid,3);
		    	SetCameraBehindPlayer(playerid);
			}
		}
		return 1;
	}
	else if(SpielerInfo[playerid][sKrankenhaus] == 1)
	{
		/*GetPlayerPos(playerid,x,y,z);
	    ClearChat(playerid,10);
		SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir haben dich schwer verletzt auf dem Boden gefunden.");
		SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir werden alles geben, damit du wieder Gesund wirst.");
		SetPlayerPos(playerid,1157.0767,-1333.8702,-0.8598);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		TogglePlayerControllable(playerid, false);
		InterpolateCameraPos(playerid, 1218.753417, -1390.132690, 27.705785, 1213.214477, -1286.707763, 21.138881, 60000);
		InterpolateCameraLookAt(playerid, 1215.090942, -1387.057373, 26.246854, 1209.218261, -1289.590820, 20.291431, 60000);
		KrankenhausTimer[playerid] = SetTimerEx("Krankenhaus",60000,false,"i",playerid);*/
		SpielerInfo[playerid][sKrankenhaus] = 0;
		SpawnPlayerEx(playerid);
		return 1;
	}
	else if(SpielerInfo[playerid][sWiederbeleben] == 1)
	{
	    if(MedicDuty > 0)
	    {
   			if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19 && SpielerInfo[playerid][sFraktion] != 20)//Gang
			{
				new skinid[3], string[25];
				format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
				format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
			}
			else if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)//Zivilist oder Hitman
	  		{
	  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
			}
	        SetPlayerHealth(playerid,100);
  			SendClientMessage(playerid, COLOR_SORRY, "Du hast dein Bewusstsein verloren. Warte auf den Notarzt.");
			TogglePlayerControllable(playerid, false);
			ApplyAnimationEx(playerid,"PED","KO_skid_front",4.1,false,false,false,true,0);
			SetPlayerPos(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]);
			SetPlayerInterior(playerid, Tot_Int[playerid]);
			SetPlayerVirtualWorld(playerid, Tot_World[playerid]);
			ApplyAnimationEx(playerid,"PED","KO_skid_front",4.1,false,true,true,true,0);
			SetPlayerCameraPos(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]+5);
			SetPlayerCameraLookAt(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]);
			FallPlayerTimer[playerid] = SetTimerEx("FallPlayer", 5000, false, "d", playerid);
			DeadTimer[playerid] = SetTimerEx("DeadCountdown", 120000, false, "d", playerid);
	    }
	    else
	    {
	        SpielerInfo[playerid][sWiederbeleben] = 0;
	        SpawnPlayerEx(playerid);
	        /*SpielerInfo[playerid][sKrankenhaus] = 1;
    	    ClearChat(playerid,10);
			SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir haben dich schwer verletzt auf dem Boden gefunden.");
			SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir werden alles geben, damit du wieder Gesund wirst.");
			SetPlayerPos(playerid,1157.0767,-1333.8702,-0.8598);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			TogglePlayerControllable(playerid, false);
			InterpolateCameraPos(playerid, 1218.753417, -1390.132690, 27.705785, 1213.214477, -1286.707763, 21.138881, 60000);
			InterpolateCameraLookAt(playerid, 1215.090942, -1387.057373, 26.246854, 1209.218261, -1289.590820, 20.291431, 60000);
			KrankenhausTimer[playerid] = SetTimerEx("Krankenhaus",60000,false,"i",playerid);*/
		}
		return 1;
	}
	else if(GetPVarInt(playerid,"Paintball") >= 1)
	{
	    GivePlayerMoneyEx(playerid,100);
 		if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19)//Gang
		{
			new skinid[3], string[25];
			format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
			format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
			SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
		}
		else if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)//Zivilist oder Hitman
  		{
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		if(GetPVarInt(playerid,"Paintball") == 1){
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
		SetPlayerArmour(playerid,0);
		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,1);
	    SetPlayerVirtualWorld(playerid,1);}
   		else if(GetPVarInt(playerid,"Paintball") == 2){
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
		GivePlayerWeapon(playerid,WEAPON_SHOTGUN,200);
		SetPlayerArmour(playerid,0);
		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,1);
	    SetPlayerVirtualWorld(playerid,2);}
   		else if(GetPVarInt(playerid,"Paintball") == 3){
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
		SetPlayerArmour(playerid,0);
  		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,1);
	    SetPlayerVirtualWorld(playerid,3);}
   		else if(GetPVarInt(playerid,"Paintball") == 4){
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
		SetPlayerArmour(playerid,0);
  		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,1);
	    SetPlayerVirtualWorld(playerid,4);}
   		else if(GetPVarInt(playerid,"Paintball") == 5){
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
		SetPlayerArmour(playerid,0);
  		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,1);
	    SetPlayerVirtualWorld(playerid,5);}

		new rand = random(8);
		if(rand == 0)//Position 1
		{
			SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
		}
		else if(rand == 1)//Position 2
		{
		    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
		    SetPlayerFacingAngle(playerid,356.6723);
		}
		else if(rand == 2)//Position 3
		{
			SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
		    SetPlayerFacingAngle(playerid,54.3028);
		}
		else if(rand == 3)//Position 4
		{
			SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
		    SetPlayerFacingAngle(playerid,353.1789);
		}
		else if(rand == 4)//Position 5
		{
		    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
		    SetPlayerFacingAngle(playerid,268.2413);
		}
		else if(rand == 5)//Position 6
		{
		    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
		    SetPlayerFacingAngle(playerid,98.4130);
		}
		else if(rand == 6)//Position 7
		{
		    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
		    SetPlayerFacingAngle(playerid,356.2654);
		}
		else if(rand == 7)//Position 8
		{
		    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
		    SetPlayerFacingAngle(playerid,358.4588);
		}
		return 1;
	}
    else if(SpielerInfo[playerid][sSpawn] == 0)//Zivispawn
	{
		if(SpielerInfo[playerid][sTutorial] == 0)
		{
 			TextDrawShowForPlayer(playerid, Statusleiste[0]);
			TextDrawShowForPlayer(playerid, Statusleiste[1]);
			TextDrawShowForPlayer(playerid, Statusleiste[2]);
			TextDrawShowForPlayer(playerid, StatusWerbung);
			TextDrawShowForPlayer(playerid, Time);
			TextDrawShowForPlayer(playerid, Time2);
   			SelectTextDraw(playerid, 0xFFFFFFFF);
		    PlayerTextDrawSetSelectable(playerid, ICPMessageEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPHitsoundEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPOChatEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPCameraEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPHandyEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPSave[playerid], true);

		    PlayerTextDrawShow(playerid, ICPBox[playerid]);
	        PlayerTextDrawShow(playerid, ICPTitel[playerid]);
	        PlayerTextDrawShow(playerid, ICPMessage[playerid]);
	        PlayerTextDrawShow(playerid, ICPHitsound[playerid]);
	        PlayerTextDrawShow(playerid, ICPOChat[playerid]);
	        PlayerTextDrawShow(playerid, ICPCamera[playerid]);
	        PlayerTextDrawShow(playerid, ICPHandy[playerid]);
		    PlayerTextDrawShow(playerid, ICPSave[playerid]);

		    if(SpielerInfo[playerid][icpNachrichten] == 1){PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpHitsound] == 1){PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpOChat] == 1){PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpCamera] == 1){PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpHandy] == 1){PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~g~] Angeschaltet");}
		    else PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~r~] Ausgeschaltet");

		    PlayerTextDrawShow(playerid, ICPMessageEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPHitsoundEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPOChatEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPCameraEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPHandyEdit[playerid]);
		    SetPVarInt(playerid,"ICPEdit",1);
			
		    SetPlayerVirtualWorld(playerid,0);
		    GivePlayerMoneyEx(playerid,3000);
		    SpielerInfo[playerid][sTutorial] = 1;
		}
		if(SpielerInfo[playerid][sQuest] == 0)
		{
		    new string[128];
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);
		    format(string,sizeof(string),"Hallo ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Willkommen auf ~b~German Rosalife");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Um den Server besser kennenzulernen, gibt");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "es hier das sogenannte ~b~Quest System");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 1: ~w~Miete dir beim Rollerverleih einen Roller");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);
		    SetPlayerCheckpoint(playerid,1025.5607,-1169.8518,18.7379,2.5);
		}
		else if(SpielerInfo[playerid][sQuest] == 1)
  		{
   			new string[128];
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
            PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);
            
		    format(string,sizeof(string),"Willkommen zurueck ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 1 und 2 bereits ~g~erfolgreich ~w~absolviert.");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Begib dich nun zur ~b~Fahrschule~w~ (roter Marker)");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "und absolviere dort deinen ~b~Autoschein");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 2: ~w~Absolviere deinen Autoschein");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

			SetPlayerCheckpoint(playerid,1021.5202,-1349.9446,13.5506,2.5);
  		}
  		else if(SpielerInfo[playerid][sQuest] == 2)
  		{
			new string[128];
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
            PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);

		    format(string,sizeof(string),"Willkommen zurueck ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 1 bis 3 ~g~erfolgreich ~w~absolviert.");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Begib dich nun zur ~b~Bank~w~ (roter Marker)");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "und beantrage ein ~b~Bankkonto");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 4: ~w~Beantrage ein Bankkonto");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

			SetPlayerCheckpoint(playerid,1779.5182,-1721.6906,13.5390,2.5);
  		}
  		else if(SpielerInfo[playerid][sQuest] == 3)
  		{
			new string[128];
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);
			
		    format(string,sizeof(string),"Willkommen zurueck ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

            PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 1 bis 4 ~g~erfolgreich ~w~absolviert.");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Fahr nun zur ~b~Stadthalle~w~ (roter Marker) und");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "besorge dir dort einen ~b~Nebenjob");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 5: ~w~Besorge dir dein ersten Nebenjob");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

			SetPlayerCheckpoint(playerid,1480.9746,-1771.4373,18.7958,2.5);
  		}
    	else if(SpielerInfo[playerid][sQuest] == 4)
        {
			new string[128];
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
			PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);
			
		    format(string,sizeof(string),"Hey ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);
		    
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 1 bis 5 ~g~erfolgreich ~w~absolviert.");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Fahr nun zum ~b~24/7~w~ (roter Marker) und");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "besorge dir dort ein ~b~Handy ~w~und ein ~b~Telefonbuch");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 6: ~w~Besorge dir ein Handy und ein Telefonbuch");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

			SetPlayerCheckpoint(playerid,1352.2795,-1758.5804,13.5078,2.5);
        }
        if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19)//Gang
		{
			new skinid[3], string[25];
			format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
			format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
			SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
		}
		else if(SpielerInfo[playerid][sFraktion] == 19)//Hitman
  		{
			GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		else if(SpielerInfo[playerid][sFraktion] == 20)//Terroristen
  		{
			GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
	   	if(SpielerInfo[playerid][sStadt] == 1)//LS
	 	{

			SetPlayerPos(playerid,1024.2393,-1163.2672,18.7379);
			SetPlayerFacingAngle(playerid,179.2605);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("Unfreeze",3000,false,"i",playerid);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetCameraBehindPlayer(playerid);
			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
  		}
   		else if(SpielerInfo[playerid][sStadt] == 2)//SF
	 	{
			SetPlayerPos(playerid,1024.2393,-1163.2672,18.7379);
			SetPlayerFacingAngle(playerid,179.2605);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("Unfreeze",3000,false,"i",playerid);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetCameraBehindPlayer(playerid);
			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		else if(SpielerInfo[playerid][sStadt] == 3)//LV
	 	{
			SetPlayerPos(playerid,1024.2393,-1163.2672,18.7379);
			SetPlayerFacingAngle(playerid,179.2605);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("Unfreeze",3000,false,"i",playerid);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetCameraBehindPlayer(playerid);
			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		return 1;
	}
	else if(SpielerInfo[playerid][sSpawn] == 1)//Fraktion
	{
	    if(GetPVarInt(playerid,"CopDuty") == 1)
		{
		    DeletePVar(playerid,"CopDuty");
		    CopDuty--;
   			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
			KillTimer(PDEquiptTimer[playerid]);
		}
  		if(GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    DeletePVar(playerid,"FBIDuty");
		    FBIDuty--;
   			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
			KillTimer(PDEquiptTimer[playerid]);
		}
 		if(GetPVarInt(playerid,"MedicDuty") == 1)
		{
			DeletePVar(playerid,"MedicDuty");
			MedicDuty--;
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
		}
		if(GetPVarInt(playerid,"FireDuty") == 1)
		{
			DeletePVar(playerid,"FireDuty");
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
		}
	 	if(SpielerInfo[playerid][sFraktion] == 2)//San Andreas Police Department
   		{
   		    TogglePlayerControllable(playerid, false);
   		    SetPlayerPos(playerid,1500.1927,-1674.4917,28.3956);
   		    SetPlayerFacingAngle(playerid,268.5943);
   		    SetPlayerCameraPos(playerid,1510.4510,-1674.7996,28.3956);
   		    SetPlayerCameraLookAt(playerid,1510.4510,-1674.7996,28.3956,CAMERA_CUT);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
   		    ShowPlayerDialog(playerid,DIALOG_BASE_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Base Auswahl","Los Santos\nSan Fiero\nLas Venturas\nDillimore","Auswählen","");
		}
	 	else if(SpielerInfo[playerid][sFraktion] == 5)//SA Rettungsdienst
   		{
   		    SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
   		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
			SetPlayerPos(playerid,1164.8658,-1334.5321,-0.8598);
			SetPlayerFacingAngle(playerid, 358.7958);
			SetPlayerInterior(playerid,0);
			SetCameraBehindPlayer(playerid);
		}
 		else if(SpielerInfo[playerid][sFraktion] == 6)//Federal Bureau of Investigation
   		{
   		    SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
   		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
			SetPlayerPos(playerid,-2467.6692,518.4586,25.0943);
			SetPlayerFacingAngle(playerid, 178.5482);
			SetPlayerInterior(playerid,0);
			SetCameraBehindPlayer(playerid);
		}
	 	else if(SpielerInfo[playerid][sFraktion] == 8)//San News
   		{
	        SetPlayerPos(playerid,756.0400,-1358.3099,13.5139);
		    SetPlayerFacingAngle(playerid, 262.0459);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
   		}
		else if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)//Gang
  		{
			new skinid[3], string[25];
			format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
			format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
			SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
            SetPlayerPos(playerid,2496.0493,-1709.2268,1014.7422);
		    SetPlayerFacingAngle(playerid, 359.7148);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, SpielerInfo[playerid][sFraktion]);
		}
		else if(SpielerInfo[playerid][sFraktion] == 19)//International Contract Agency
  		{
 			GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
            SetPlayerPos(playerid,-2158.6267,642.4954,1052.3750);
		    SetPlayerFacingAngle(playerid, 179.2799);
		    SetPlayerInterior(playerid,1);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 1);
		}
		else if(SpielerInfo[playerid][sFraktion] == 20)//Terroristen
  		{
 			GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
            SetPlayerPos(playerid,1024.2393,-1163.2672,18.7379);
		    SetPlayerFacingAngle(playerid, 179.2605);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		}
		return 1;
	}
	else if(SpielerInfo[playerid][sSpawn] == 2)//PrivatHaus
	{
	    if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)//Gang
		{
			new skinid[3], string[25];
			format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
			format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
			SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
		}
		else if(SpielerInfo[playerid][sFraktion] == 19)//International Contract Agency
  		{
  		    GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
  		}
  		else if(SpielerInfo[playerid][sFraktion] == 20)//Terroristen
  		{
  		    GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
  		}
		else if(SpielerInfo[playerid][sFraktion] < 9)//Zivilist
  		{
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		new hs = GetHausID(playerid);
		SetPlayerPos(playerid,HausInfo[hs][hsIPos_X],HausInfo[hs][hsIPos_Y],HausInfo[hs][hsIPos_Z]);
		SetPlayerInterior(playerid,HausInfo[hs][hsInterior]);
		SetPlayerVirtualWorld(playerid,hs);
		SetCameraBehindPlayer(playerid);
		SetPVarInt(playerid,"HausID",hs);
		SetPVarInt(playerid,"InHaus",1);
	}
	else if(SpielerInfo[playerid][sSpawn] == 3)//GruppenHaus
	{
	    if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)//Gang
		{
			new skinid[3], string[25];
			format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
			format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
			SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
		}
		else if(SpielerInfo[playerid][sFraktion] == 19)//International Contract Agency
  		{
  		    GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
  		}
  		else if(SpielerInfo[playerid][sFraktion] == 20)//Terroristen
  		{
  		    GivePlayerWeapon(playerid,WEAPON_DEAGLE,100);
			GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
			GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
  		}
		else if(SpielerInfo[playerid][sFraktion] < 9)//Zivilist
  		{
  		    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		}
		new hs = GetHausID(playerid);
		SetPlayerPos(playerid,HausInfo[hs][hsIPos_X],HausInfo[hs][hsIPos_Y],HausInfo[hs][hsIPos_Z]);
		SetPlayerInterior(playerid,HausInfo[hs][hsInterior]);
		SetPlayerVirtualWorld(playerid,hs);
		SetCameraBehindPlayer(playerid);
		SetPVarInt(playerid,"HausID",hs);
		SetPVarInt(playerid,"InHaus",1);
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    new string[264];
    if(GetPVarInt(playerid, "IsOnFire"))
	{
	    SendClientMessage(playerid, COLOR_SORRY, "Du bist durch das Feuer verbrannt.");
	    TogglePlayerBurning(playerid, false);
	}
    if(IsPlayerInAnyVehicle(killerid) && reason == 50 && killerid != INVALID_PLAYER_ID)
	{
 		SendClientMessage(killerid,COLOR_WHITE," ");
 		SendClientMessage(killerid,COLOR_KICK,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Rotorn");
 		KickPlayer(killerid,string);
 		return 1;
	}
	if(GetPlayerScore(killerid) < 2 && GetPVarInt(killerid,"AttackNotwehr") != playerid)
	{
		format(string,128,"%s wurde vom System permanent gebannt: Grund: DM als Neuling",SpielerInfo[killerid][sName]);
		SendClientMessageToAll(COLOR_KICK,string);
		LogBan(string);
		BanPlayer(killerid,"System","DM als Neuling");
		return 1;
	}
	if(GetPlayerScore(killerid) >= 2 && GetPlayerScore(playerid) < 2 && GetPVarInt(killerid,"AttackNotwehr") != playerid)
	{
		format(string,128,"%s wurde vom System gekickt. Grund: DM auf Neulinge",SpielerInfo[killerid][sName]);
		SendClientMessageToAll(COLOR_KICK,string);
		LogKick(string);
		KickPlayer(killerid,"DM auf Neulinge");
		return 1;
	}
    if(GetPVarInt(killerid,"Paintball") >= 1)
    {
        if(GetPVarInt(killerid,"Paintball") < 3){
        SpielerInfo[killerid][sPBKills]++;
        SpielerInfo[playerid][sPBTode]++;}
		foreach(new i : Player)
		{
			if(GetPVarInt(i,"Paintball") == 0)continue;
			if(GetPVarInt(i,"Paintball") != GetPVarInt(playerid,"Paintball"))continue;
			if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))continue;
 			format(string,sizeof(string),"%s hat %s erledigt.",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
        	SendClientMessage(i,COLOR_YELLOW,string);
		}
    }
   	if(SpielerInfo[playerid][sC4RobState] == true)
	{
		SendClientMessage(playerid,COLOR_SORRY,"Ihr seid am C4-Raub gescheitert.");
		KillTimer(C4robTimer);
		robc4sec = 0;
		SpielerInfo[playerid][sC4RobState] = false;
		pRobC4BackwardTime = 0;
		pRobC4TimeNearVehicle = 0;
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(SpielerInfo[i][sC4RobState] == true) SpielerInfo[i][sC4RobState] = false;
				SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DER ÜBERFALL AUF DEN C4-TRANSPORTER WAR NICHT ERFOLGREICH.");
			}
		}
	}
    if(SpielerInfo[playerid][sContract] == 1 && SpielerInfo[killerid][sFraktion] == 19)
    {
		GameTextForPlayer(killerid,"~g~> HITMAN KILL <",3000,4);
		GameTextForPlayer(playerid,"~r~> HITMAN AUFTRAG <",3000,4);
		SpielerInfo[playerid][sContract] = 0;
		
     	mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `contracts` WHERE `Contract` = '%e'", SpielerInfo[playerid][sName]);
   	 	mysql_tquery(sqlHandle, string, "onHitmanContractSucces", "ii", playerid, killerid);
    }
	if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)
	{
	    new Zone = IsPlayerInGangZoneEx(killerid);
	    if(Zone >= 0)
		{
	        if(GangZoneInfo[Zone][gzFightTime] > 0)
	        {
	            format(string,sizeof(string),"%s hat %s erledigt. +1 Kill für %s!",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName],FrakName(SpielerInfo[killerid][sFraktion]));
	            if(SpielerInfo[killerid][sFraktion] == GangZoneInfo[Zone][gzOwner] && SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzAttacker])
	            {
	                new anzeige[8];
	                SetPVarInt(playerid,"TodGFZone",1);
	                GangZoneInfo[Zone][gzOwnerPunkte]++;
	                format(anzeige,sizeof(anzeige),"%d Kills",GangZoneInfo[Zone][gzOwnerPunkte]);
	                foreach(new i : Player)
					{
						if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
						{
							PlayerTextDrawSetString(i, Gangfight[i][4], anzeige);
						    SendClientMessage(i,COLOR_GANGFIGHT,string);
						}
					}
					GameTextForPlayer(killerid,"~g~> GANGFIGHTKILL <",3000,4);
					GameTextForPlayer(playerid,"~r~> GANGFIGHTTOD <",3000,4);
	            }
	            else if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzOwner] && SpielerInfo[killerid][sFraktion] == GangZoneInfo[Zone][gzAttacker])
	            {
	                new anzeige[8];
	                SetPVarInt(playerid,"TodGFZone",1);
	                GangZoneInfo[Zone][gzAttackerPunkte]++;
	                format(anzeige,sizeof(anzeige),"%d Kills",GangZoneInfo[Zone][gzAttackerPunkte]);
	                foreach(new i : Player)
					{
						if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
						{
						    PlayerTextDrawSetString(i, Gangfight[i][5], anzeige);
						    SendClientMessage(i,COLOR_GANGFIGHT,string);
						}
					}
					GameTextForPlayer(killerid,"~g~> GANGFIGHTKILL <",3000,4);
					GameTextForPlayer(playerid,"~r~> GANGFIGHTTOD <",3000,4);
	            }
	        }
	    }
	    if(FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarGegner] > 0)
	    {
			if(GetPVarInt(killerid,"Paintball") == 0)
  			{
				if(FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarGegner] == SpielerInfo[playerid][sFraktion])
				{
				    new string2[200];
				    FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarPoints]++;
					if(FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarPoints] >= 50)
					{
					    new killedstr[128], killedstr2[128];
					    format(killedstr,sizeof(killedstr),"[GANGWAR] Euer Mitglied %s hat %s erledigt! (>FINALER KILL<)",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
					    format(killedstr2,sizeof(killedstr2),"[GANGWAR] Euer Gegner %s hat %s erledigt! (>FINALER TOD<)",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
					    format(string,sizeof(string),"[GANGWAR] Die Fraktion '%s' hat das Gangwar gegen '%s' mit '%d' zu '%d' Kills gewonnen!",FrakName(SpielerInfo[killerid][sFraktion]),FrakName(SpielerInfo[playerid][sFraktion]),FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarPoints],FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarPoints]);
						SendICPMessage(string);
						format(string,sizeof(string),"[GANGWAR] Ihr seit besser als die Fraktion '%s'! Ihr habt sie im Krieg besiegt!",FrakName(SpielerInfo[playerid][sFraktion]));
						format(string2,sizeof(string2),"[GANGWAR] Die Fraktion '%s' ist besser als Ihr! Sie hat euch im Krieg besiegt!",FrakName(SpielerInfo[killerid][sFraktion]));
						foreach(new i : Player)
						{
						    if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
						    {
						        SendClientMessage(i,COLOR_WHITE," ");
						        SendClientMessage(i,COLOR_GANGFIGHT,string2);
						        SendClientMessage(i,COLOR_SORRY,killedstr2);
						        SendClientMessage(i,COLOR_WHITE," ");
						    }
						    else if(SpielerInfo[i][sFraktion] == SpielerInfo[killerid][sFraktion])
						    {
						        SendClientMessage(i,COLOR_WHITE," ");
						        SendClientMessage(i,COLOR_GANGFIGHT,string);
						        SendClientMessage(i,COLOR_SUPER,killedstr);
						        SendClientMessage(i,COLOR_WHITE," ");
						    }
						}
						GameTextForPlayer(killerid,"~g~> FINALER GANGWARKILL <",3000,4);
						GameTextForPlayer(playerid,"~r~> FINALER GANGWARTOD <",3000,4);
					    FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarPoints] = 0;
					    FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarPoints] = 0;
					    FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarGegner] = 0;
					    FrakInfo[SpielerInfo[killerid][sFraktion]][fiWarGegner] = 0;
					}
					else
					{
					    format(string,sizeof(string),"[GANGWAR] Euer Mitglied %s hat %s erledigt!",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
					    format(string2,sizeof(string2),"[GANGWAR] Euer Gegner %s hat %s erledigt!",SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
					    foreach(new i : Player)
						{
						    if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
						    {
						        SendClientMessage(i,COLOR_GANGFIGHT,string2);
						    }
						    else if(SpielerInfo[i][sFraktion] == SpielerInfo[killerid][sFraktion])
						    {
						        SendClientMessage(i,COLOR_GANGFIGHT,string);
						    }
						}
					    GameTextForPlayer(killerid,"~g~> GANGWARKILL <",3000,4);
						GameTextForPlayer(playerid,"~r~> GANGWARTOD <",3000,4);
					}
				}
			}
	    }
	}
	if(GetPlayerWantedLevelEx(playerid) >= 1 && SpielerInfo[killerid][sFraktion] == 2 && GetPVarInt(killerid,"CopDuty") == 1 ||
	GetPlayerWantedLevelEx(playerid) >= 1 && SpielerInfo[killerid][sFraktion] == 6 && GetPVarInt(killerid,"FBIDuty") == 1)
	{
	    if(GetPVarInt(playerid,"Bankrob") == 1)
		{
			format(string,164,"%s %s hat den gesuchten Bankräuber %s neutralisiert.",RangName(killerid),SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
			SendICPMessage(string);
            SpielerInfo[playerid][sZelle] = 1;
   			new Zeit, Geld = GetPlayerWantedLevelEx(playerid)*50;
   			GivePlayerMoneyEx(playerid,-Geld);
		    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += Geld;
		    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakGVerbrecher]++;
		    Zeit = GetPlayerWantedLevelEx(playerid)*4;
	        SpielerInfo[playerid][sKnast] = Zeit;
	        SetPlayerWantedLevelEx(playerid,0);
       		SetPlayerHealth(playerid,100);
			
			PlayerTextDrawHide(playerid, BankraubTD[playerid][0]);
			PlayerTextDrawHide(playerid, BankraubTD[playerid][1]);
			PlayerTextDrawHide(playerid, BankraubTD[playerid][2]);
			PlayerTextDrawHide(playerid, BankraubTD[playerid][3]);
			PlayerTextDrawHide(playerid, BankraubTD[playerid][4]);
			PlayerTextDrawHide(playerid, BankraubTD[playerid][5]);
	    	BankRobAmLaufen = 0;
	    	DeleteVehicle(BankRobVan);
	    	BankRobVan = -1;
	    	KillTimer(PlayerBankRobTimer[playerid]);
	    	SpawnPlayerEx(playerid);
			for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
 			{
 		    	DestroyDynamicObject(BankRobGeldSack[sackid]);
 		    	Delete3DTextLabel(BankRobGeldSackLabel[sackid]);
 		    	BankRobGeldSackLabel[sackid] = Text3D:INVALID_3DTEXT_ID;
 			}
 			return 1;
		}
		else
		{
			format(string,164,"%s %s hat den gesuchten Verbrecher %s neutralisiert.",RangName(killerid),SpielerInfo[killerid][sName],SpielerInfo[playerid][sName]);
			SendICPMessage(string);
            SpielerInfo[playerid][sZelle] = 1;
		    new Zeit, Geld = GetPlayerWantedLevelEx(playerid)*50;
		    GivePlayerMoneyEx(playerid,-Geld);
		    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += Geld;
		    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakGVerbrecher]++;
		    Zeit = GetPlayerWantedLevelEx(playerid)*4;
	        SpielerInfo[playerid][sKnast] = Zeit;
	        SetPlayerWantedLevelEx(playerid,0);
         	SetPlayerHealth(playerid,100);
			SpawnPlayerEx(playerid);
			return 1;
		}
	}
	if(GetPVarInt(playerid,"TodGFZone") < 1 || GetPVarInt(playerid,"CopDuty") == 0 || GetPVarInt(playerid,"FBIDuty") == 0
	|| GetPVarInt(playerid,"MedicDuty") == 0 || GetPVarInt(playerid,"FireDuty") == 0 || SpielerInfo[playerid][sKnast] == 0 ||
	GetPVarInt(playerid,"Paintball") == 0)
	{
		if(MedicDuty == 0)
		{
	 		if(GetPVarInt(playerid,"TodGFZone") != 1)
 			{
    			if(GetPVarInt(playerid,"Paintball") == 0)
		    	{
	 				SpielerInfo[playerid][sKrankenhaus] = 1;
	    			GetPlayerPos(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]);
					Tot_Int[playerid] = GetPlayerInterior(playerid);
					Tot_World[playerid] = GetPlayerVirtualWorld(playerid);
				}
 			}
		}
		else if(MedicDuty > 0)//Sanitäter Online
		{
		    if(GetPVarInt(playerid,"Paintball") == 0 || GetPlayerWantedLevelEx(playerid) == 0 || GetPVarInt(playerid,"TodGFZone") != 1 || SpielerInfo[playerid][sKnast] <= 0)
		    {
		    	SpielerInfo[playerid][sWiederbeleben] = 1;
			    GetPlayerPos(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]);
				Tot_Int[playerid] = GetPlayerInterior(playerid);
				Tot_World[playerid] = GetPlayerVirtualWorld(playerid);
				foreach(new i : Player)
				{
				    if(GetPVarInt(i,"MedicDuty") > 0)
				    {
				        SendClientMessage(i,COLOR_RED,"ZENTRALE: Eine weitere Person ist schwerverletzt. Alle verfügbaren Einheiten werden gebeten Sich umgehend");
				        SendClientMessage(i,COLOR_RED,"ZENTRALE: zum Spieler zu begeben. Alle Schwerverletzten sind unter '/totliste' zu finden.");
				    }
				}
			}
		}
	}
	if(GetPVarInt(playerid,"CopDuty") == 1)
	{
	    DeletePVar(playerid,"CopDuty");
	    CopDuty--;
		ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid,0);
        SetPlayerColor(playerid,COLOR_WHITE);
		KillTimer(PDEquiptTimer[playerid]);
	}
	else if(GetPVarInt(playerid,"FBIDuty") == 1)
	{
	    DeletePVar(playerid,"FBIDuty");
	    FBIDuty--;
		ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid,0);
        SetPlayerColor(playerid,COLOR_WHITE);
		KillTimer(PDEquiptTimer[playerid]);
	}
	else if(GetPVarInt(playerid,"MedicDuty") == 1)
	{
		DeletePVar(playerid,"MedicDuty");
		MedicDuty--;
		ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid,0);
        SetPlayerColor(playerid,COLOR_WHITE);
	}
	else if(GetPVarInt(playerid,"FireDuty") == 1)
	{
		DeletePVar(playerid,"FireDuty");
		ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid,0);
        SetPlayerColor(playerid,COLOR_WHITE);
	}
    else if(GetPVarInt(playerid,"PizzaboteDuty") == 1){DeletePVar(playerid,"PizzaboteDuty");}
    else if(GetPVarInt(playerid,"KehrmaschinenDuty") == 1){DeletePVar(playerid,"KehrmaschinenDuty");}
    else if(GetPVarInt(playerid,"PilotDuty") == 1){DeletePVar(playerid,"PilotDuty");}
    else if(GetPVarInt(playerid,"BusfahrerDuty") == 1){DeletePVar(playerid,"BusfahrerDuty");}
    else if(GetPVarInt(playerid,"MüllmannDuty") == 1){DeletePVar(playerid,"MüllmannDuty");}
    else if(GetPVarInt(playerid,"LandwirtDuty") == 1){DeletePVar(playerid,"LandwirtDuty");}
    else if(GetPVarInt(playerid,"HolzfallerDuty") == 1)
	{
		DeletePVar(playerid,"HolzfallerDuty");
	    EntfernungObjekteHolz(playerid);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(FahrzeugInfo[vehicleid][fLabel] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
		FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
		AddOther(vehicleid);
	}
	if(FahrzeugInfo[vehicleid][fNeonStatus] == true)
	{
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][0]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][1]);
		FahrzeugInfo[vehicleid][fNeonObj][0] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonObj][1] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(FahrzeugInfo[vehicleid][fNeonColor],0,0,0,0,0,0);
		FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(FahrzeugInfo[vehicleid][fNeonColor],0,0,0,0,0,0);
		AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
	}
    if(FahrzeugInfo[vehicleid][fNebenjob] > 0)
    {
	    DOOR[vehicleid] = false;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
	}
	else if(FahrzeugInfo[vehicleid][fFraktion] > 0)
	{
	    DOOR[vehicleid] = true;
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	}
	else if(FahrzeugInfo[vehicleid][fGruppe] > 0)
	{
	    DOOR[vehicleid] = true;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	}
	else if(FahrzeugInfo[vehicleid][fFirma] > 0)
	{
	    DOOR[vehicleid] = true;
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	}
	else if(FahrzeugInfo[vehicleid][fFahrschule] > 0)
	{
	    DOOR[vehicleid] = false;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
	}
	else if(FahrzeugInfo[vehicleid][fAutohaus] > 0)
	{
	    DOOR[vehicleid] = true;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	}
	else if(strlen(FahrzeugInfo[vehicleid][fBesitzer]) > 0)
	{
 		DOOR[vehicleid] = true;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	}
	if(FahrzeugInfo[vehicleid][fSireneBool] == true)
	{
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][0]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][1]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][2]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][3]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][4]);
		FahrzeugInfo[vehicleid][fSirene][0] = -1;
		FahrzeugInfo[vehicleid][fSirene][1] = -1;
		FahrzeugInfo[vehicleid][fSirene][2] = -1;
		FahrzeugInfo[vehicleid][fSirene][3] = -1;
		FahrzeugInfo[vehicleid][fSirene][4] = -1;
		FahrzeugInfo[vehicleid][fSireneBool] = false;
	}
	Motor[vehicleid] = false;
	Licht[vehicleid] = false;
	Motorhaube[vehicleid] = false;
	Kofferraum[vehicleid] = false;
	CarRadio[vehicleid] = false;
	AddTuning(vehicleid);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(FahrzeugInfo[vehicleid][fLabel] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
		FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if(FahrzeugInfo[vehicleid][fNeonStatus] == true)
	{
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][0]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][1]);
		FahrzeugInfo[vehicleid][fNeonObj][0] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonObj][1] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonStatus] = false;
	}
	if(FahrzeugInfo[vehicleid][fBankrob] != 0)
	{
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][0]);
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][1]);
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][2]);
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][3]);
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][4]);
		PlayerTextDrawHide(BankAttacker, BankraubTD[BankAttacker][5]);
    	BankRobAmLaufen = 0;
    	DeleteVehicle(BankRobVan);
    	BankRobVan = -1;
    	KillTimer(PlayerBankRobTimer[BankAttacker]);
		for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
		{
	    	DestroyDynamicObject(BankRobGeldSack[sackid]);
	    	Delete3DTextLabel(BankRobGeldSackLabel[sackid]);
	    	BankRobGeldSackLabel[sackid] = Text3D:INVALID_3DTEXT_ID;
		}
		SendClientMessage(BankAttacker,COLOR_SORRY,"Bankrob fehlgeschlagen, da der Bankrobvan zerstört wurde.");
		BankAttacker = -1;
	}
	if(FahrzeugInfo[vehicleid][fImportCar] != 0)
	{
 		KillTimer(ImportCarTimer);
	    Importfahrzeug = false;
		SetTimer("ImportCarTimer",3600000,false);
		DeleteVehicle(ImportCar);
		ImportCar = 0;
		SendClientMessageToAll(COLOR_ORANGE,"Das Importfahrzeug wurde zerstört. Mission fehlgeschlagen.");
	}
	if(FahrzeugInfo[vehicleid][fKurrierCar] != 0)
	{
	    new kurrierid = GetPVarInt(FahrzeugInfo[vehicleid][fKurrierCar],"KurrierID");
	    kurrierid--;
	    SpielerInfo[FahrzeugInfo[vehicleid][fKurrierCar]][sKurrier] = 1;
		SendClientMessage(FahrzeugInfo[vehicleid][fKurrierCar],COLOR_ORANGE,"Das Kurrierfahrzeug wurde zerstört. Mission fehlgeschlagen.");
		SetPlayerPos(FahrzeugInfo[vehicleid][fKurrierCar],777.7709,-1016.0993,26.3594);
		KillTimer(KurrierCarTimer[kurrierid]);
	    Kurrierfahrzeug[kurrierid] = false;
		DeleteVehicle(KurrierCar[kurrierid]);
		KurrierCar[kurrierid] = 0;
	}
	if(FahrzeugInfo[vehicleid][fSireneBool] == true)
	{
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][0]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][1]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][2]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][3]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][4]);
		FahrzeugInfo[vehicleid][fSirene][0] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fSirene][1] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fSirene][2] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fSirene][3] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fSirene][4] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fSireneBool] = false;
	}
 	if(Indicators_xqz[vehicleid][2]) DestroyObject(Indicators_xqz[vehicleid][2]), DestroyObject(Indicators_xqz[vehicleid][3]),DestroyObject(Indicators_xqz[vehicleid][5]),Indicators_xqz[vehicleid][2]=0;
  	if(Indicators_xqz[vehicleid][0]) DestroyObject(Indicators_xqz[vehicleid][0]), DestroyObject(Indicators_xqz[vehicleid][1]),DestroyObject(Indicators_xqz[vehicleid][4]),Indicators_xqz[vehicleid][0]=0;
	RemoveTuning(vehicleid);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(firmaerstellen[playerid] == true)
	{
	    if(strcmp(text,"GFirma1",true) == 0)
	    {
			if(gfirmapunkt[playerid] == 1)
			{
			    gfirmapos[playerid][0] = x;
			    gfirmapos[playerid][1] = y;
			    gfirmapunkt[playerid] = 2;
			    SendClientMessage(playerid,COLOR_INFO,"Begib dich nun an die obere LINKE Ecke und schreibe 'GFirma2'");
			    return true;
			}
		}
	}
    if(firmaerstellen[playerid] == true)
    {
        if(strcmp(text,"GFirma2",true) == 0)
	    {
	        if(gfirmapunkt[playerid] == 2)
	        {
		        gfirmapos[playerid][2] = x;
		        gfirmapos[playerid][3] = y;
		        gfirmapunkt[playerid] = 3;
		        SendClientMessage(playerid,COLOR_INFO,"Begib dich nun an den Punkt, wo das Icon erstellt werden soll und schreibe 'GFirma3'");
		        return true;
			}
		}
	}
    if(firmaerstellen[playerid] == true)
    {
        if(strcmp(text,"GFirma3",true) == 0)
	    {
	        if(gfirmapunkt[playerid] == 3)
	        {
	            gfirmapunkt[playerid] = 0;
	            firmaerstellen[playerid] = false;
	            gfirmapos[playerid][4] = x;
		        gfirmapos[playerid][5] = y;
		        gfirmapos[playerid][6] = z;
	            ShowPlayerDialog(playerid,DIALOG_FIRMA_GRUNDSTUCK,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Grundstück erstellen","Wieviel soll das Grundstück kosten?\nMindestens 500$ und maximal 500.000$","Weiter","Abbrechen");
	            return true;
			}
		}
	}
    if(Afk[playerid] == 1)
    {
        SendClientMessage(playerid, COLOR_INFO, "Hinweis: Du bist Abwesend gemeldet. Benutze '/back'.");
        return 0;
 	}
    if(SpielerInfo[playerid][sMuted] > 0)
    {
        new string[144];
        format(string,144,"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
        SendClientMessage(playerid,COLOR_RED,string);
        return 0;
    }
    if(SpielerInfo[playerid][sWiederbeleben] == 1 || SpielerInfo[playerid][sKrankenhaus] == 1)
    {
        SendClientMessage(playerid,COLOR_RED,"Du liegst schwer verletzt auf dem Boden...");
        return 0;
    }
    for(new i=0;i<sizeof(Badword);i++)
    {
    	if(strfind(text,Badword[i],true) != -1)
    	{
    	    new bwgstring[144];
    	    SetPVarInt(playerid,"UsingBadword", GetPVarInt(playerid,"UsingBadword") +1);
			SpielerInfo[playerid][sBadword] += 1;
			if(SpielerInfo[playerid][sBadword] == 9)
			{
			    new string[144];
		        format(string,144,"Das System hat den %s verwarnt. Grund: 9x Badword benutzt",SpielerInfo[playerid][sName]);
				SendAdminMessage(COLOR_SORRY,string);
				LogWarn(string);
				format(string,144,"Das System hat dich verwarnt. Grund: 9x Badword benutzt");
				WarnPlayer(playerid,"System","9x Badword benutzt");
				SpielerInfo[playerid][sBadword] = 0;
			}
    	    if(GetPVarInt(playerid,"UsingBadword") < 3)
    	    {
			    format(bwgstring,sizeof(bwgstring),"Du hast das Badword '%s' genutzt. Du erhälst Verwarnung %d/3!", Badword[i], GetPVarInt(playerid,"UsingBadword"));
			    SendClientMessage(playerid,COLOR_SORRY,bwgstring);
			    return 0;
			}
			else if(GetPVarInt(playerid,"UsingBadword") == 3)
    	    {
			    SendClientMessage(playerid,COLOR_SORRY,"Das System hat dich vom Server gekickt!");
			    SendClientMessage(playerid,COLOR_GREY,"Du hast zum 3ten mal ein Badword benutzt. Reiß dich in Zukunft zusammen.");
				format(bwgstring,sizeof(bwgstring),"%s wurde vom System gekickt. Grund: 3x Badword",SpielerInfo[playerid][sName]);
				KickPlayer(playerid,bwgstring);
			    return 0;
			}
    	}
	}
 	new textgstring[144];
	if(isNewsLive(playerid))
	{
		format(textgstring,sizeof(textgstring),"Live %s: %s",SpielerInfo[playerid][sName],text);
		SendClientMessageToAll(COLOR_LIGHTGREEN,textgstring);
	}
	else
	{
  		if(GetPVarInt(playerid,"CopMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt: %s",text);}
  		else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt: %s",text);}
  		else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt: %s",text);}
		else {format(textgstring,sizeof(textgstring),"%s sagt: %s",SpielerInfo[playerid][sName],text);}
		SetPlayerChatBubble(playerid, text, 0xE10000FF, 10.0, 5000);
		ProxDetector(20.0, playerid, textgstring, 0xFFFFFFFF,0xFFFFFFFF,0xE0E0E0FE,0xE0E0E0FE,0xE0E0E0FE);
	}
	return 0;
}

//OnPlayerCommandTextOCMD

//Admin Befehle

ocmd:serveredit(playerid, params[])
{
    if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
    ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Server-Einstellungen","Message of the day","Auswahl","Abbrechen");
    return 1;
}

ocmd:acheck(playerid,params[])
{
	new pID;
	if(SpielerInfo[playerid][sAdmin] < 3)return NichtBerechtigt
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /check [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	ShowStats(playerid,pID);
	new string[128];
	SendClientMessage(playerid,COLOR_INFO," ");
	format(string,sizeof(string),"Finanzcheck von %s ergab: %d$ Bargeld & %d$ Girokonto",SpielerInfo[pID][sName],SpielerInfo[pID][sGeld],SpielerInfo[pID][sBankkonto]);
	SendClientMessage(playerid,COLOR_INFO,string);
	return 1;
}

ocmd:apn(playerid,params[])
{
    if(SpielerInfo[playerid][sAdmin] < 1)return NichtBerechtigt
    new string[144], pID, text[128];
	if(sscanf(params,"us[128]",pID,text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /apn [SpielerID] [Text]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,sizeof(string),"[ADM-NACHRICHT] %s %s: %s",AdminName(playerid),SpielerInfo[playerid][sName],text);
	SendClientMessage(playerid,COLOR_GANGFIGHT,string);
	SendClientMessage(pID,COLOR_GANGFIGHT,string);
	return 1;
}

ocmd:givemats(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	new fID, Betrag;
	if(sscanf(params,"ii",fID,Betrag))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /givemats [FraktionsID] [Anzahl]");
	{
	    if(fID > 18 || fID < 9)return SendClientMessage(playerid,COLOR_GREY,"Nur kriminelle Organisationen können Materialien besitzen.");
	    FrakInfo[fID][fiMats] += Betrag;
		new string[128];
		format(string,sizeof(string),"Du hast der Fraktion '%s' '%d' Materialien gegeben.",FrakName(fID),Betrag);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,sizeof(string),"%s %s hat eurer Fraktion '%d' Materialien gegeben.",AdminName(playerid),SpielerInfo[playerid][sName],Betrag);
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] == fID)
		    {
		        SendClientMessage(i,COLOR_SUPER,string);
		    }
		}
	}
	return 1;
}

ocmd:givemoney(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	new pID, Betrag, string[128];
	if(sscanf(params,"ui",pID,Betrag))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /givemoney [SpielerID] [Betrag]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
	    GivePlayerMoneyEx(pID,Betrag);
  	 	format(string,128,"Du hast dem %s %d$ gegeben.",SpielerInfo[pID][sName],Betrag);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,128,"%s %s hat dir %d$ gegeben.",AdminName(playerid),SpielerInfo[playerid][sName],Betrag);
		SendClientMessage(pID,COLOR_SUPER,string);
		return 1;
	}
}

ocmd:givedonator(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] != 6)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /givedonator [SpielerID]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
		SpielerInfo[pID][sDonator] = 1;
  	 	format(string,128,"Du hast dem Spieler %s den Donatorrang gegeben.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SUPER,string);
		if(SpielerInfo[pID][sBankPin] == 0)
		{
			format(string,128,"%s %s hat dir den Donatorrang gegeben. (+15.000$ auf dem Bankkonto)",AdminName(playerid),SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_SUPER,string);
			SpielerInfo[pID][sBankkonto] = 15000;
		}
		else
		{
			format(string,128,"%s %s hat dir den Donatorrang gegeben. (+15.000$ auf der Hand)",AdminName(playerid),SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_SUPER,string);
			GivePlayerMoneyEx(pID,15000);
		}
		return 1;
	}
}

ocmd:takedonator(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] != 6)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /takedonator [SpielerID]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
		SpielerInfo[pID][sDonator] = 0;
  	 	format(string,128,"Spieler %s besitzt nun kein Donatorrang mehr.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,128,"Dein Donatorrang wurde von %s %s entfernt.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_SUPER,string);
		return 1;
	}
}

ocmd:givepremium(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] != 6)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /givepremium [SpielerID]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
		SpielerInfo[pID][sPremium] = 1;
  	 	format(string,128,"Du hast dem Spieler %s den Premiumrang gegeben.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,128,"%s %s hat dir den Premiumrang gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_SUPER,string);
		return 1;
	}
}

ocmd:takepremium(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] != 6)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /takepremium [SpielerID]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
		SpielerInfo[pID][sPremium] = 0;
  	 	format(string,128,"Spieler %s besitzt nun kein Premiumrang mehr.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,128,"Dein Premium ist abgelaufen.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_SUPER,string);
		return 1;
	}
}

ocmd:makeadmin(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] == 8 || IsPlayerAdmin(playerid))
	{
		new pID, Rang, string[128];
		if(sscanf(params,"ui",pID,Rang))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /makeadmin [SpielerID] [Rang]");
	    if(Rang > 8 || Rang < 0)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /makeadmin [SpielerID] [Rang(1-8)]");
	    if(!IsPlayerConnected(pID))return NichtOnline
	    SpielerInfo[pID][sAdmin] = Rang;
	    if(Rang != 0)
	    {
		    format(string,128,"%s %s hat den %s zu einem '%s' ernannt. Willkommen im Team!",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],AdminName(pID));
			SendAdminMessage(COLOR_INFO,string);
		}
		else if(Rang == 0)
		{
		    format(string,128,"%s %s hat den %s zu einem '%s' ernannt. Er ist nun kein Teammitglied mehr.",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],AdminName(pID));
			SendAdminMessage(COLOR_INFO,string);
			format(string,128,"%s %s hat dich zu einem '%s' ernannt. Du bist nun kein Teammitglied mehr.",AdminName(playerid),SpielerInfo[playerid][sName],AdminName(pID));
			SendClientMessage(pID,COLOR_INFO,string);
		}
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:makeleader(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	new pID, FrakID, string[144];
	if(sscanf(params,"ui",pID,FrakID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /makeleader [SpielerID] [FraktionsID]");
    if(FrakID > 19 || FrakID < 0)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /makeleader [SpielerID] [FraktionsID(1-19)]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat nicht das zweite Level erreicht.");
	if(GetPVarInt(pID,"CopDuty") == 1){DeletePVar(pID,"CopDuty"); CopDuty--;}
	if(GetPVarInt(pID,"FBIDuty") == 1){DeletePVar(pID,"FBIDuty"); FBIDuty--;}
	if(GetPVarInt(pID,"MedicDuty") == 1){DeletePVar(pID,"MedicDuty"); MedicDuty--;}
	if(GetPVarInt(pID,"FireDuty") == 1){DeletePVar(pID,"FireDuty"); MedicDuty--;}
	SetPlayerSkin(pID,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
	ResetPlayerWeapons(pID);
	SetPlayerArmour(pID,0);
	SetPlayerColor(pID,COLOR_WHITE);
	
	PlayerTextDrawDestroy(pID, Gangfight[pID][0]); PlayerTextDrawDestroy(pID, Gangfight[pID][1]); PlayerTextDrawDestroy(pID, Gangfight[pID][2]);
	PlayerTextDrawDestroy(pID, Gangfight[pID][3]); PlayerTextDrawDestroy(pID, Gangfight[pID][4]); PlayerTextDrawDestroy(pID, Gangfight[pID][5]); PlayerTextDrawDestroy(pID, Gangfight[pID][6]);

	if(FrakID != 0)
    {
		SpielerInfo[pID][sFraktion] = FrakID;
		SpielerInfo[pID][sLeader] = FrakID;
		SpielerInfo[pID][sRank] = 7;
		FrakInfo[FrakID][fiFrakMembers]++;
	    format(string,144,"%s %s hat den Spieler %s zum Leader der Fraktion '%s' ernannt.",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],FrakName(SpielerInfo[pID][sFraktion]));
		SendAdminMessage(COLOR_INFO,string);
		format(string,144,"%s %s hat dich zum Leader der Fraktion '%s' ernannt.",AdminName(playerid),SpielerInfo[playerid][sName],FrakName(SpielerInfo[pID][sFraktion]));
		SendClientMessage(pID,COLOR_INFO,string);
		SendClientMessage(pID,COLOR_INFO,"Hinweis: Benutze '/spawnchange' um dein Spawnpunkt zu ändern.");
	}
	else if(FrakID == 0)
	{
	    format(string,144,"%s %s hat den Spieler %s aus seiner Fraktion entlassen. Er ist nun kein Leader mehr.",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		SendAdminMessage(COLOR_INFO,string);
		format(string,144,"%s %s hat dich aus deiner Fraktion entlassen. Du bist nun kein Leader mehr.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_INFO,string);
		SpielerInfo[pID][sFraktion] = 0;
		SpielerInfo[pID][sLeader] = 0;
		SpielerInfo[pID][sRank] = 0;
    	if(SpielerInfo[pID][sSpawn] == 1){SpielerInfo[pID][sSpawn] = 0;}
    	FrakInfo[FrakID][fiFrakMembers]--;
	}
	SpawnPlayerEx(pID);
	return 1;
}

ocmd:ainvite(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new pID, FrakID, string[128];
	if(sscanf(params,"ui",pID,FrakID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ainvite [SpielerID] [FraktionsID]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat nicht das zweite Level erreicht.");
    FrakInfo[FrakID][fiFrakMembers]++;
    SpielerInfo[pID][sFraktion] = FrakID;
    SpielerInfo[pID][sRank] = 1;
    SpawnPlayerEx(pID);
	format(string,sizeof(string),"%s %s hat dich in die Fraktion %s invitet.",AdminName(playerid),SpielerInfo[playerid][sName],FrakName(FrakID));
	SendClientMessage(pID,COLOR_SUPER,string);
	format(string,sizeof(string),"Du hast den %s in die Fraktion %s invitet.",SpielerInfo[pID][sName],FrakName(FrakID));
	SendClientMessage(playerid,COLOR_SUPER,string);
	return 1;
}

ocmd:auninvite(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new pID, FrakID, string[128];
	if(sscanf(params,"ui",pID,FrakID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /auninvite [SpielerID] [FraktionsID]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(pID == playerid && SpielerInfo[playerid][sRank] == 7)return SendClientMessage(playerid,COLOR_GREY,"Du kannst dich als Leader nicht selber uninviten.");
    FrakInfo[FrakID][fiFrakMembers]++;
    SpielerInfo[pID][sFraktion] = 0;
    SpielerInfo[pID][sRank] = 0;
    SpawnPlayerEx(pID);
	format(string,sizeof(string),"%s %s hat dich aus der Fraktion %s uninvitet.",AdminName(playerid),SpielerInfo[playerid][sName],FrakName(FrakID));
	SendClientMessage(pID,COLOR_SUPER,string);
	format(string,sizeof(string),"Du hast %s aus der Fraktion %s uninvitet.",SpielerInfo[pID][sName],FrakName(FrakID));
	SendClientMessage(playerid,COLOR_SUPER,string);
	return 1;
}

ocmd:spawn(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 1)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /spawn [SpielerID]");
    if(!IsPlayerConnected(pID))return NichtOnline
    format(string,128,"%s %s hat dich gespawnt.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SUPER,string);
	format(string,128,"Du hast %s gespawnt.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SUPER,string);
	SpawnPlayerEx(pID);
	return 1;
}

ocmd:slap(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 1)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /slap [SpielerID]");
    if(!IsPlayerConnected(pID))return NichtOnline
	GetPlayerPos(pID,SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ]);
	SetPlayerPos(pID,SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ]+10);
	format(string,128,"%s %s hat dich geslappt.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	format(string,128,"Du hast den %s geslappt.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SORRY,string);
	return 1;
}

ocmd:setskin(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, SkinID, string[128];
	if(sscanf(params,"ui",pID,SkinID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setskin [SpielerID] [SkinID]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(SkinID < 1 || SkinID > 299)return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /setskin [SpielerID] [SkinID(1-299)]");
	format(string,128,"%s %s hat dir die SkinID: %d gesetzt.",AdminName(playerid),SpielerInfo[playerid][sName],SkinID);
	SendClientMessage(pID,COLOR_SUPER,string);
	format(string,128,"Du hast den %s die SkinID: %d gesetzt.",SpielerInfo[pID][sName],SkinID);
	SendClientMessage(playerid,COLOR_SUPER,string);
	SetPlayerSkin(pID,SkinID);
	mysql_SetInt("accounts", "SkinID", SkinID, "Name", SpielerInfo[pID][sName]);
	return 1;
}

ocmd:gotoort(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	if(GetPVarInt(playerid,"AdminDuty") != 1)return AdminDienst
	new Ort[3];
	if(sscanf(params,"s[3]",Ort))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gotoort [LS|SF|LV|MC]");
	if(strcmp(Ort, "LS", true, strlen(Ort)) == 0)
    {
	    SetPlayerPos(playerid,2041.5601,-1726.4623,13.2513);
	    SetPlayerFacingAngle(playerid,179.1141);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
		    SetVehiclePos(tmpcar,2041.5601,-1726.4623,13.2513+5);
		    SetVehicleZAngle(tmpcar,179.1141);
		    LinkVehicleToInterior(tmpcar,0);
		    SetVehicleVirtualWorld(tmpcar,0);
		    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
		}
	}
	else if(strcmp(Ort, "SF", true, strlen(Ort)) == 0)
    {
	    SetPlayerPos(playerid,-2248.2539,-161.2652,34.9977);
	    SetPlayerFacingAngle(playerid,0.6259);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
		    SetVehiclePos(tmpcar,-2248.2539,-161.2652,34.9977+5);
		    SetVehicleZAngle(tmpcar,0.6259);
		    LinkVehicleToInterior(tmpcar,0);
		    SetVehicleVirtualWorld(tmpcar,0);
		    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
		}
	}
	else if(strcmp(Ort, "LV", true, strlen(Ort)) == 0)
    {
	    SetPlayerPos(playerid,2068.7690,1761.4879,10.3772);
	    SetPlayerFacingAngle(playerid,152.6356);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
		    SetVehiclePos(tmpcar,2068.7690,1761.4879,10.3772+5);
		    SetVehicleZAngle(tmpcar,358.8096);
		    LinkVehicleToInterior(tmpcar,0);
		    SetVehicleVirtualWorld(tmpcar,0);
		    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
		}
	}
	else if(strcmp(Ort, "MC", true, strlen(Ort)) == 0)
    {
	    SetPlayerPos(playerid,-2246.5522,-1713.1758,480.1397);
	    SetPlayerFacingAngle(playerid,45.5076);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
		    SetVehiclePos(tmpcar,-2246.5522,-1713.1758,480.1397+5);
		    SetVehicleZAngle(tmpcar,45.5076);
		    LinkVehicleToInterior(tmpcar,0);
		    SetVehicleVirtualWorld(tmpcar,0);
		    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
		}
	}
	return 1;
}

ocmd:respawncar(playerid,params[])
{
	new vehID;
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
    if(sscanf(params,"i",vehID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /respawncar [VehicleID]");
    if(!IsValidVehicle(vehID))return SendClientMessage(playerid,COLOR_SORRY,"Die angegebene FahrzeugID existiert nicht.");
    SetVehicleToRespawn(vehID);
    SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug wurde erfolgreich respawnt.");
	return 1;
}

ocmd:getcar(playerid,params[])
{
    new vehID, Float:Pos[3];
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
    if(sscanf(params,"i",vehID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /getcar [VehicleID]");
    if(!IsValidVehicle(vehID))return SendClientMessage(playerid,COLOR_SORRY,"Die angegebene FahrzeugID existiert nicht.");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
    SetVehiclePos(vehID,Pos[0],Pos[1],Pos[2]);
    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Fahrzeug erfolgreich zu dir geportet.");
	return 1;
}

ocmd:veh(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	if(GetPVarInt(playerid,"AdminDuty") != 1)return AdminDienst
	new vehID, Farbe1, Farbe2;
	if(sscanf(params,"iii",vehID,Farbe1,Farbe2))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /veh [VehicleID] [Farbe1] [Farbe2]");
    new Float: vX, Float: vY, Float: vZ;
    GetPlayerPos(playerid,vX,vY,vZ);
	if(vehID < 400 || vehID > 611)return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /veh [VehicleID(400-611)] [Farbe1] [Farbe2]");
	if(Farbe1 < 0 || Farbe1 > 255)return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /veh [VehicleID] [Farbe1(0-255)] [Farbe2]");
	if(Farbe2 < 0 || Farbe2 > 255)return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /veh [VehicleID] [Farbe1] [Farbe2(0-255)]");
	new car = CreateVehicle(vehID, vX,vY,vZ, 0.0, Farbe1, Farbe2, -1);
	SetPlayerPos(playerid,vX,vY,vZ+2);
	LinkVehicleToInterior(car,GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(car,GetPlayerVirtualWorld(playerid));
	FahrzeugTank[car] = VehicleData[GetVehicleModel(car)-400][vehLiter];
	SendClientMessage(playerid,COLOR_INFO,"Bitte vergesse nicht das Fahrzeug mit /carcontrol zu löschen.");
	return 1;
}

ocmd:carcontrol(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new Aktion[8];
	if(sscanf(params,"s[8]",Aktion))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /carcontrol [Respawn/Delete]");
    if(strcmp(Aktion, "Respawn", true, strlen(Aktion)) == 0)
    {
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        SendClientMessage(playerid,COLOR_INFO,"Das Fahrzeug wurde respawnt.");
    }
    if(strcmp(Aktion, "Delete", true, strlen(Aktion)) == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		DestroyVehicleEx(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_INFO,"Das Fahrzeug wurde gelöscht.");
	}
	return 1;
}

ocmd@2:a,admin(playerid,params[])
{
	new string[144];
	if(SpielerInfo[playerid][sAdmin] == 0)
	{
	    new pID;
	    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /a(dmin) [SpielerID]");
        if(!IsPlayerConnected(pID))return NichtOnline
		format(string,128,"%s meldet den %s[ID:%d] als Cheater.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName],pID);
		SendAdminMessage(COLOR_YELLOW,string);
		SendClientMessage(playerid,COLOR_GREY,"Deine Meldung wurde an alle verfügbaren Teammitglieder gesendet.");
	}
	else if(SpielerInfo[playerid][sAdmin] != 0)
	{
	    new text[100];
		if(sscanf(params,"s[100]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /a(dmin) [Text]");
	    format(string,128,"* %s %s: %s",AdminName(playerid),SpielerInfo[playerid][sName],text);
	    SendAdminMessage(COLOR_BLUE,string);
	}
	return 1;
}

ocmd:goto(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 1)return NichtBerechtigt
	if(GetPVarInt(playerid,"AdminDuty") != 1)return AdminDienst
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /goto [SpielerID]");
 	if(!IsPlayerConnected(pID))return NichtOnline
	new Float: pX, Float: pY, Float: pZ;
	format(string,128,"Du hast dich zum %s %s geportet.",AdminName(pID),SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SUPER,string);
	format(string,128,"%s %s hat sich zu dir geportet.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SUPER,string);
	GetPlayerPos(pID,pX,pY,pZ);
	SetPlayerPos(playerid,pX+1,pY,pZ);
	SetPlayerInterior(playerid,GetPlayerInterior(pID));
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(pID));
	if(IsPlayerInAnyVehicle(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
	    SetVehiclePos(tmpcar,pX,pY,pZ+2);
	    LinkVehicleToInterior(tmpcar,GetPlayerInterior(pID));
	    SetVehicleVirtualWorld(tmpcar,GetPlayerVirtualWorld(pID));
	    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
	}
	return 1;
}

ocmd:gethere(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gethere [SpielerID]");
 	if(!IsPlayerConnected(pID))return NichtOnline
	new Float: pX, Float: pY, Float: pZ;
	format(string,128,"%s %s hat dich zu sich geportet.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SUPER,string);
	format(string,128,"Du hast %s %s zu dir geportet.",AdminName(pID),SpielerInfo[pID][sName]);
	GetPlayerPos(playerid,pX,pY,pZ);
	SetPlayerPos(pID,pX+1,pY,pZ);
	SetPlayerInterior(pID,GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(pID,GetPlayerVirtualWorld(playerid));
	if(IsPlayerInAnyVehicle(pID))
	{
		new tmpcar = GetPlayerVehicleID(pID);
	    SetVehiclePos(tmpcar,pX,pY,pZ+2);
	    LinkVehicleToInterior(tmpcar,GetPlayerInterior(playerid));
	    SetVehicleVirtualWorld(tmpcar,GetPlayerVirtualWorld(playerid));
	    AC_PutPlayerInVehicleEx(pID, tmpcar, 0);
	}
	return 1;
}

ocmd:setint(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	new pID, Interior, string[128];
	if(sscanf(params,"ui",pID,Interior))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setint [SpielerID] [Interior]");
    if(!IsPlayerConnected(pID))return NichtOnline
    SetPlayerInterior(pID,Interior);
 	format(string,128,"Du hast dem %s das Interior auf %d gesetzt.",SpielerInfo[pID][sName],Interior);
	SendClientMessage(playerid,COLOR_SUPER,string);
	format(string,128,"%s %s hat deinen Interior auf %d gesetzt.",AdminName(playerid),SpielerInfo[playerid][sName],Interior);
	SendClientMessage(pID,COLOR_SUPER,string);
	if(IsPlayerInAnyVehicle(pID))
	{
	    LinkVehicleToInterior(GetPlayerVehicleID(pID),Interior);
	}
    return 1;
}

ocmd:setvw(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Interior, string[128];
	if(sscanf(params,"ui",pID,Interior))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setvw [SpielerID] [Welt]");
    if(!IsPlayerConnected(pID))return NichtOnline
    SetPlayerVirtualWorld(pID,Interior);
 	format(string,128,"Du hast dem %s die Welt auf %d gesetzt.",SpielerInfo[pID][sName],Interior);
	SendClientMessage(playerid,COLOR_SUPER,string);
	format(string,128,"%s %s hat deine Welt auf %d gesetzt.",AdminName(playerid),SpielerInfo[playerid][sName],Interior);
	SendClientMessage(pID,COLOR_SUPER,string);
    return 1;
}

ocmd:sethp(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Float:HPAnzahl, string[128];
	if(sscanf(params,"uf",pID,HPAnzahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sethp [SpielerID] [Anzahl]");
    if(!IsPlayerConnected(pID))return NichtOnline
 	format(string,128,"Du hast dem %s das HP auf %.2f gesetzt.",SpielerInfo[pID][sName],HPAnzahl);
	SendClientMessage(playerid,COLOR_SUPER,string);
	format(string,128,"%s %s hat deine Healthpoint(HP) auf %.2f gesetzt.",AdminName(playerid),SpielerInfo[playerid][sName],HPAnzahl);
	SendClientMessage(pID,COLOR_SUPER,string);
	SetPlayerHealth(pID,HPAnzahl);
	return 1;
}

ocmd:setarmour(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Float:HPAnzahl, string[128];
	if(sscanf(params,"uf",pID,HPAnzahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setarmour [SpielerID] [Anzahl]");
    if(!IsPlayerConnected(pID))return NichtOnline
 	format(string,128,"Du hast dem %s das Armour auf %.2f gesetzt.",SpielerInfo[pID][sName],HPAnzahl);
	SendClientMessage(playerid,COLOR_SUPER,string);
	format(string,128,"%s %s hat dein Armour auf %.2f gesetzt.",AdminName(playerid),SpielerInfo[playerid][sName],HPAnzahl);
	SendClientMessage(pID,COLOR_SUPER,string);
	SetPlayerArmour(pID,HPAnzahl);
	return 1;
}

ocmd:gotopos(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 3)return NichtBerechtigt
	if(GetPVarInt(playerid,"AdminDuty") != 1)return AdminDienst
	new Float:PosX, Float:PosY, Float:PosZ, string[128];
	if(sscanf(params,"fff",PosX,PosY,PosZ))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gotopos [PosX] [PosY] [PosZ]");
    if(IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
    }
    else
    {
        SetPlayerPos(playerid, PosX, PosY, PosZ);
    }
	format(string,128,"Du hast dich zur folgenden Koordinaten geportet: PosX: %f | PosY: %f | PosZ: %f",PosX,PosY,PosZ);
 	SendClientMessage(playerid,COLOR_SUPER,string);
	return 1;
}

ocmd:kick(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	new pID, Grund[64], string[144];
	if(sscanf(params,"us[64]",pID,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /kick [SpielerID] [Grund]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[playerid][sAdmin] < SpielerInfo[pID][sAdmin])return NichtBerechtigt
	format(string,128,"%s %s hat dich vom Server gekickt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Grund);
	SendClientMessage(pID,COLOR_SORRY,string);
	format(string,128,"%s wurde von %s %s gekickt. Grund: %s",SpielerInfo[pID][sName],AdminName(playerid),SpielerInfo[playerid][sName],Grund);
	SendClientMessageToAll(COLOR_KICK,string);
	KickPlayer(pID,string);
	return 1;
}

ocmd:ban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new pID, Grund[64], string[144];
	if(sscanf(params,"us[128]",pID,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ban [SpielerID] [Grund]");
	{
	    if(IsPlayerConnected(pID))
	    {
			if(SpielerInfo[playerid][sAdmin] < SpielerInfo[pID][sAdmin])return NichtBerechtigt
			format(string,128,"%s wurde von %s %s permanent gebannt: Grund: %s",SpielerInfo[pID][sName],AdminName(playerid),SpielerInfo[playerid][sName],Grund);
			SendClientMessageToAll(COLOR_KICK,string);
			LogBan(string);
			format(string,128,"%s %s hat dich permanent gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Grund);
			SendClientMessage(pID,COLOR_SORRY,string);
			BanPlayer(pID,SpielerInfo[playerid][sName],Grund);
			return 1;
		}
		else NichtOnline
		return 1;
	}
}

ocmd:oban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new Name[24], Grund[64], query[128];
	if(sscanf(params,"ss[64]",Name,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /oban [SpielerName] [Grund]");
	{
	    foreach(new i : Player)
	    {
	        if(strcmp(Name, SpielerInfo[i][sName], true, strlen(Name)) == 0)return SendClientMessage(playerid,COLOR_INFO,"Der angegebene Spieler ist online. Benutze /ban [SpielerID] [Grund]");
		    mysql_format(sqlHandle, query, sizeof(query), "SELECT `Name` FROM `accounts` WHERE `Name` = '%e'", Name);
		   	mysql_tquery(sqlHandle, query, "onBanPlayerOffline", "iss", playerid, Name, Grund);
			return 1;
		}
	}
	return 1;
}

ocmd:unban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	new Name[24], Grund[64];
	if(sscanf(params,"ss[64]",Name,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /unban [Name] [Grund]");
	new query[144];
    mysql_format(sqlHandle, query, sizeof(query), "SELECT `Name` FROM `accbans` WHERE `Name` = '%e'", Name);
   	mysql_tquery(sqlHandle, query, "onUnbanPlayer", "iss", playerid, Name, Grund);
	return 1;
}

ocmd@2:tban,timeban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Minuten, Grund[64], string[144];
	if(sscanf(params,"uis[64]",pID,Minuten,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /tban [SpielerID] [Minuten] [Grund]");
	{
	    if(!IsPlayerConnected(pID))return NichtOnline
	    if(SpielerInfo[playerid][sAdmin] < SpielerInfo[pID][sAdmin])return NichtBerechtigt
	    if(Minuten < 5 || Minuten > 1440)return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /tban [SpielerID] [Minuten(5-1440)] [Grund]");
	    format(string,128,"%s %s hat den %s für %d Minuten gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Minuten,Grund);
	    SendClientMessageToAll(COLOR_KICK,string);
	    LogTBan(string);
	    format(string,128,"%s %s hat dich für %d Minuten gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Minuten,Grund);
	    SendClientMessage(pID,COLOR_SORRY,string);
        TBanPlayer(pID,Minuten,SpielerInfo[playerid][sName],Grund);
        return 1;
	}
}

ocmd@2:otban,otimeban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new Name[24], Minuten, Grund[64], query[250];
	if(sscanf(params,"sis[64]",Name,Minuten,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /otban [SpielerName] [Minuten(5-1440)] [Grund]");
	{
		if(Minuten < 5 || Minuten > 1440) return SendClientMessage(playerid,COLOR_SORRY,"Benutze: /otban [SpielerName] [Minuten(5-1440)] [Grund]");
	    foreach(new i : Player)
	    {
	        if(strcmp(Name, SpielerInfo[i][sName], true, strlen(Name)) == 0)return SendClientMessage(playerid,COLOR_INFO,"Der angegebene Spieler ist online. Benutze /ban [SpielerID] [Grund]");
		}
		mysql_format(sqlHandle, query, sizeof(query), "SELECT `Name` FROM `accounts` WHERE `Name` = '%e'", Name);
		mysql_tquery(sqlHandle, query, "onTimebanPlayerOffline", "isis", playerid, Name, Minuten, Grund);
	}
	return 1;
}

ocmd@2:untimeban,untban(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new Name[24], Grund[64];
	if(sscanf(params,"ss[64]",Name,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /untban [Name] [Grund]");
	{
  		new query[128];
	    mysql_format(sqlHandle, query,sizeof(query), "SELECT `Name` FROM `timebans` WHERE `Name` = '%e'", Name);
	   	mysql_tquery(sqlHandle, query, "onUntimebanPlayer", "iss", playerid, Name, Grund);
	}
	return 1;
}

ocmd@3:support,sup,report(playerid,params[])
{
	if(GetPVarInt(playerid,"SupTicket") == 1 && GetPVarInt(playerid,"SupTicketOpen") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast bereits ein Support-Ticket verfasst. Bitte gedulde dich oder ziehe es mit /ct zurück.");
    if(GetPVarInt(playerid,"SupTicket") == 1 && GetPVarInt(playerid,"SupTicketOpen") == 1)
    {
        new text[64];
        if(sscanf(params,"s[64]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text]");
        if(strlen(text) < 1 || strlen(text) > 64)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text(10-64 Zeichen)]");
		new string[144];
		format(string,sizeof(string),"[SUPPORT] %s schreibt: %s",SpielerInfo[playerid][sName],text);
		SendClientMessage(GetPVarInt(playerid,"SupTicketAdmin"),COLOR_INFO,string);
		SendClientMessage(playerid,COLOR_INFO,string);
		return 1;
    }
    else if(SpielerInfo[playerid][sAdmin] == 0 && GetPVarInt(playerid,"SupTicketTaked") <= 0 && GetPVarInt(playerid,"SupTicket") == 0 && GetPVarInt(playerid,"SupTicketOpen") == 0)
    {
        new text[64];
		if(sscanf(params,"s[64]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text]");
		if(strlen(text) < 1 || strlen(text) > 64)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text(10-64 Zeichen)]");
		CreateSupTicket(playerid,text);
		SendClientMessage(playerid,COLOR_YELLOW,"Dein Support-Ticket wurde erstellt. Bitte warte bis ein Teammitglied dein Ticket öffnet.");
		SendClientMessage(playerid,COLOR_YELLOW,"Solltest du offline gehen oder '/ct' nutzen wird dein Support-Ticket gelöscht.");
		return 1;
	}
	else if(SpielerInfo[playerid][sAdmin] >= 1 && GetPVarInt(playerid,"SupTicketTaked") >= 0)
	{
	    new text[64];
        if(sscanf(params,"s[64]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text]");
        if(strlen(text) < 1 || strlen(text) > 64)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sup [Text(10-64 Zeichen)]");
		new string[144];
		format(string,sizeof(string),"[SUPPORT] %s %s schreibt: %s",AdminName(playerid),SpielerInfo[playerid][sName],text);
		SendClientMessage(GetPVarInt(playerid,"SupTicketTaked"),COLOR_INFO,string);
		SendClientMessage(playerid,COLOR_INFO,string);
		return 1;
	}
	return 1;
}

ocmd:tickets(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
    new string[200], query[128];
    SendClientMessage(playerid,COLOR_YELLOW,"Alle offenen Support-Tickets - zum annehmen '/taketicket'");
    foreach(new i : Player)
    {
        if(GetPVarInt(i,"SupTicket") == 1 && GetPVarInt(i,"SupTicketOpen") == 0)
        {
            format(query,sizeof(query),"%s",mysql_GetString("suptickets", "Text", "Name", SpielerInfo[i][sName]));
			format(string,sizeof(string),"%s | [%d] | %s",SpielerInfo[i][sName],i,query);
			SendClientMessage(playerid,COLOR_INFO,string);
        }
    }
    return 1;
}

ocmd:taketicket(playerid,params[])
{
    new pID,ticket[200];
	if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /taketicket [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(GetPVarInt(pID,"SupTicket") == 0 || GetPVarInt(pID,"SupTicketOpen") == 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler hat kein offenes Support-Ticket.");
	format(ticket,sizeof(ticket),"[SUPPORT] %s schrieb: %s",SpielerInfo[pID][sName], mysql_GetString("suptickets", "Text", "Name", SpielerInfo[pID][sName]));
	SendClientMessage(playerid,COLOR_YELLOW,"[SUPPORT] Du hast das Support-Ticket geöffnet. Antworte dem Spieler mit '/sup'.");
	SendClientMessage(playerid,COLOR_INFO,ticket);
	SetPVarInt(pID,"SupTicketOpen",1);
	SetPVarInt(pID,"SupTicketAdmin",playerid);
	SetPVarInt(playerid,"SupTicketTaked",pID);
	format(ticket,sizeof(ticket),"[SUPPORT] %s %s hat dein Ticket geöffnet. Du kannst nun über '/sup' mit Ihm schreiben.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_YELLOW,ticket);
	SpielerInfo[playerid][sTicketsBearbeitet]++;
	return 1;
}

ocmd:giveticket(playerid,params[])
{
    new pID,ticket[200];
    if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /giveticket [SpielerID]");
	{
		if(!IsPlayerConnected(pID))return NichtOnline
		if(GetPVarInt(playerid,"SupTicketTaked") < 0)return SendClientMessage(playerid,COLOR_GREY,"Du bearbeitest derzeit kein offenes Support-Ticket.");
		if(GetPVarInt(pID,"SupTicketTaked") > 0)return SendClientMessage(playerid,COLOR_GREY,"Das Teammitglied bearbeitet bereits ein offenes Support-Ticket.");
		new ticketID = GetPVarInt(playerid,"SupTicketTaked");
		format(ticket,sizeof(ticket),"[SUPPORT] %s schrieb: %s",SpielerInfo[ticketID][sName], mysql_GetString("suptickets", "Text", "Name", SpielerInfo[ticketID][sName]));
		SendClientMessage(playerid,COLOR_YELLOW,"Du hast das Support-Ticket weitergegeben.");
		SendClientMessage(pID,COLOR_YELLOW,"Du hast ein neues Support-Ticket zugeleitet bekommen.");
		SendClientMessage(pID,COLOR_INFO,ticket);
		SetPVarInt(pID,"SupTicketTaked",ticketID);
		SetPVarInt(ticketID,"SupTicketAdmin",pID);
		format(ticket,sizeof(ticket),"[SUPPORT] %s %s hat dein Ticket erhalten. Schreibe weiterhin über '/sup' mit dem Teammitglied.",AdminName(pID),SpielerInfo[pID][sName]);
		SendClientMessage(ticketID,COLOR_YELLOW,ticket);
  		SetPVarInt(playerid,"SupTicketTaked",-1);
  		SpielerInfo[playerid][sTicketsBearbeitet]--;
	}
	return 1;
}

ocmd:closeticket(playerid,params[])
{
    if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
	new pID;
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /closeticket [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(GetPVarInt(pID,"SupTicket") == 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler hat kein offenes Support-Ticket.");
	new string[164];
	format(string,sizeof(string),"[SUPPORT] %s %s hat dein Support-Ticket geschlossen. Feedback würde "SERV_NAME" sehr helfen!",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_YELLOW,string);
	format(string,sizeof(string),"[SUPPORT] Du hast das Support-Ticket von %s geschlossen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	DeleteSupTicket(pID);
	DeletePVar(pID,"SupTicket");
	DeletePVar(pID,"SupTicketOpen");
	SetPVarInt(playerid,"SupTicketTaked",-1);
	DeletePVar(pID,"SupTicketAdmin");
	return 1;
}

ocmd:createcar(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	ShowPlayerDialog(playerid,DIALOG_CREATECAR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Fraktionsfahrzeug\nAutohausfahrzeug\nNebenjobfahrzeug","Weiter","Abbrechen");
	return 1;
}

ocmd:deletecar(playerid,params[])
{
	new vehicleid, query[128];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",vehicleid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /deletecar [FahrzeugID]");
    if(IsValidVehicle(vehicleid) || FahrzeugInfo[vehicleid][fDatabaseID] != 0)
    {
		mysql_format(sqlHandle, query, sizeof(query), "DELETE FROM `vehicles` WHERE `ID` = '%d'", FahrzeugInfo[vehicleid][fDatabaseID]);
		mysql_tquery(sqlHandle, query);
   		DeleteVehicle(vehicleid);
		SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug wurde erfolgreich gelöscht.");
        return 1;
    }
    else SendClientMessage(playerid,COLOR_GREY,"Entweder exestiert das Fahrzeug nicht, oder das angegebene Fahrzeug steht nicht in der vehicles Tabelle.");
    return 1;
}

ocmd:editcar(playerid,params[])
{
	new vehicleid, Betrag, Auswahl[64], string[128];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"dsd",vehicleid,Auswahl,Betrag))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /editcar [FahrzeugID] [Fraktion|Nebenjob|Autohaus|Preis|Farbe1|Farbe2]");
    if(IsValidVehicle(vehicleid) || FahrzeugInfo[vehicleid][fDatabaseID] != 0)
    {
   		if(strcmp(Auswahl, "Fraktion", true, strlen(Auswahl)) == 0)
    	{
			format(string,sizeof(string),"FahrzeugID: %d - Alte Fraktion: %d - Neue Fraktion: %d",vehicleid,FahrzeugInfo[vehicleid][fFraktion],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
			FahrzeugInfo[vehicleid][fFraktion] = Betrag;
	        return 1;
		}
		else if(strcmp(Auswahl, "Nebenjob", true, strlen(Auswahl)) == 0)
    	{
  			format(string,sizeof(string),"FahrzeugID: %d - Alter Nebenjob: %d - Neuer Nebenjob: %d",vehicleid,FahrzeugInfo[vehicleid][fNebenjob],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
			FahrzeugInfo[vehicleid][fNebenjob] = Betrag;
	        return 1;
		}
		else if(strcmp(Auswahl, "Autohaus", true, strlen(Auswahl)) == 0)
    	{
  			format(string,sizeof(string),"FahrzeugID: %d - Altes Autohaus: %d - Neues Autohaus: %d",vehicleid,FahrzeugInfo[vehicleid][fAutohaus],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
			FahrzeugInfo[vehicleid][fAutohaus] = Betrag;
	        return 1;
		}
		else if(strcmp(Auswahl, "Preis", true, strlen(Auswahl)) == 0)
    	{
  			format(string,sizeof(string),"FahrzeugID: %d - Alter Preis: %d - Neuer Preis: %d",vehicleid,FahrzeugInfo[vehicleid][fPreis],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
			FahrzeugInfo[vehicleid][fPreis] = Betrag;
			format(string, sizeof(string), "{FE0000}%s {FFFFFF}zu Verkaufen!\nPreis: {FE0000}%d$",FahrzeugName[FahrzeugInfo[vehicleid][fModelID]-400],FahrzeugInfo[vehicleid][fPreis]);
			Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, string);
	        return 1;
		}
		else if(strcmp(Auswahl, "Farbe1", true, strlen(Auswahl)) == 0)
    	{
  			format(string,sizeof(string),"FahrzeugID: %d - Alte Farbe1: %d - Neue Farbe1: %d",vehicleid,FahrzeugInfo[vehicleid][fColor][0],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
	 		new Float:Position[4], newvehicleid;
		 	GetVehiclePos(vehicleid,Position[0],Position[1],Position[2]);
			GetVehicleZAngle(vehicleid,Position[3]);
			if(FahrzeugInfo[vehicleid][fNebenjob] != 0)
			{
				if(FahrzeugInfo[vehicleid][fNebenjob] == 1 || FahrzeugInfo[vehicleid][fNebenjob] == 3 || FahrzeugInfo[vehicleid][fNebenjob] == 4 ||
				FahrzeugInfo[vehicleid][fNebenjob] == 5 || FahrzeugInfo[vehicleid][fNebenjob] == 6)
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],180);
				}
	   			else if(FahrzeugInfo[vehicleid][fNebenjob] == 2)//Pizzabote
			    {
					newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
				else if(FahrzeugInfo[vehicleid][fNebenjob] == 7)//Landwirt
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
				else if(FahrzeugInfo[vehicleid][fNebenjob] == 10)//Holzfäller
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
				format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Nebenjob");
				SetVehicleNumberPlate(newvehicleid,"Nebenjob");
			}
			else if(FahrzeugInfo[vehicleid][fAutohaus] != 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],180);
	    		format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Autohaus");
				SetVehicleNumberPlate(newvehicleid,"Autohaus");
			}
			else if(FahrzeugInfo[vehicleid][fFraktion] > 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],-1);
			    CreateFrakNummernSchild(newvehicleid,FahrzeugInfo[vehicleid][fFraktion]);
			}
			else if(FahrzeugInfo[vehicleid][fGruppe] > 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],-1);
	    		format(FahrzeugInfo[newvehicleid][fKennzeichen], 5, FahrzeugInfo[vehicleid][fKennzeichen]);
				SetVehicleNumberPlate(newvehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);
			}
			else if(FahrzeugInfo[vehicleid][fFirma] > 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],-1);
			    CreateFirmaNummernSchild(newvehicleid,FahrzeugInfo[vehicleid][fFirma]);
			}
			else if(FahrzeugInfo[vehicleid][fFahrschule] > 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],180);
	    		format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Fahrschule");
				SetVehicleNumberPlate(newvehicleid,"Fahrschule");
			}

			FahrzeugInfo[newvehicleid][fDatabaseID] = FahrzeugInfo[vehicleid][fDatabaseID];
			FahrzeugInfo[newvehicleid][fErstellt] = FahrzeugInfo[vehicleid][fErstellt];
			FahrzeugInfo[newvehicleid][fModelID] = FahrzeugInfo[vehicleid][fModelID];
			FahrzeugInfo[newvehicleid][fPosition][0] = Position[0];
			FahrzeugInfo[newvehicleid][fPosition][1] = Position[1];
			FahrzeugInfo[newvehicleid][fPosition][2] = Position[2];
			FahrzeugInfo[newvehicleid][fPosition][3] = Position[3];
			FahrzeugInfo[newvehicleid][fColor][0] = Betrag;
			FahrzeugInfo[newvehicleid][fColor][1] = FahrzeugInfo[vehicleid][fColor][1];
			FahrzeugInfo[newvehicleid][fPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];
			FahrzeugInfo[newvehicleid][fAbgeschleppt] = FahrzeugInfo[vehicleid][fAbgeschleppt];
			FahrzeugInfo[newvehicleid][fParkkralle] = FahrzeugInfo[vehicleid][fParkkralle];
			FahrzeugInfo[newvehicleid][fKilometer] = FahrzeugInfo[vehicleid][fKilometer];
			FahrzeugInfo[newvehicleid][fTank] = FahrzeugInfo[vehicleid][fTank];
			FahrzeugInfo[newvehicleid][fRang] = FahrzeugInfo[vehicleid][fRang];
			for(new i=0;i<14;i++){
			FahrzeugInfo[newvehicleid][fTuning][i] = FahrzeugInfo[vehicleid][fTuning][i];}
			FahrzeugInfo[newvehicleid][fFraktion] = FahrzeugInfo[vehicleid][fFraktion];
			FahrzeugInfo[newvehicleid][fGruppe] = FahrzeugInfo[vehicleid][fGruppe];
			FahrzeugInfo[newvehicleid][fFirma] = FahrzeugInfo[vehicleid][fFirma];
			FahrzeugInfo[newvehicleid][fAutohaus] = FahrzeugInfo[vehicleid][fAutohaus];
			FahrzeugInfo[newvehicleid][fNebenjob] = FahrzeugInfo[vehicleid][fNebenjob];
			FahrzeugInfo[newvehicleid][fGarage] = FahrzeugInfo[vehicleid][fGarage];
			FahrzeugInfo[newvehicleid][fGPark] = FahrzeugInfo[vehicleid][fGPark];
			FahrzeugInfo[newvehicleid][fFahrschule] = FahrzeugInfo[vehicleid][fFahrschule];
			FahrzeugInfo[newvehicleid][fSupmobil] = FahrzeugInfo[vehicleid][fSupmobil];
			FahrzeugInfo[newvehicleid][fZiviroller] = FahrzeugInfo[vehicleid][fZiviroller];
			FahrzeugInfo[newvehicleid][fImportCar] = FahrzeugInfo[vehicleid][fImportCar];
			FahrzeugInfo[newvehicleid][fKurrierCar] = FahrzeugInfo[vehicleid][fKurrierCar];
			FahrzeugInfo[newvehicleid][fPreis] = FahrzeugInfo[vehicleid][fPreis];
			FahrzeugInfo[newvehicleid][fLabel] = FahrzeugInfo[vehicleid][fLabel];
			FahrzeugInfo[newvehicleid][fBesitzer] = FahrzeugInfo[vehicleid][fBesitzer];
			FahrzeugInfo[newvehicleid][fBesitzerID] = FahrzeugInfo[vehicleid][fBesitzerID];
			FahrzeugInfo[newvehicleid][fPizzaObjekt] = FahrzeugInfo[vehicleid][fPizzaObjekt];
			FahrzeugInfo[newvehicleid][fkGeld] = FahrzeugInfo[vehicleid][fkGeld];
			FahrzeugInfo[newvehicleid][fkC4] = FahrzeugInfo[vehicleid][fkC4];
			FahrzeugInfo[newvehicleid][fJobEXP] = FahrzeugInfo[vehicleid][fJobEXP];
			DeleteVehicle(vehicleid);
			AddTuning(newvehicleid);
			AddOther(newvehicleid);
			AC_PutPlayerInVehicleEx(playerid,newvehicleid,0);
	        return 1;
		}
		else if(strcmp(Auswahl, "Farbe2", true, strlen(Auswahl)) == 0)
    	{
  			format(string,sizeof(string),"FahrzeugID: %d - Alte Farbe2: %d - Neue Farbe2: %d",vehicleid,FahrzeugInfo[vehicleid][fColor][1],Betrag);
			SendClientMessage(playerid,COLOR_INFO,string);
	 		new Float:Position[4], newvehicleid;
		 	GetVehiclePos(vehicleid,Position[0],Position[1],Position[2]);
			GetVehicleZAngle(vehicleid,Position[3]);
			if(FahrzeugInfo[vehicleid][fNebenjob] != 0)
			{
				if(FahrzeugInfo[vehicleid][fNebenjob] == 1 || FahrzeugInfo[vehicleid][fNebenjob] == 3 || FahrzeugInfo[vehicleid][fNebenjob] == 4 ||
				FahrzeugInfo[vehicleid][fNebenjob] == 5 || FahrzeugInfo[vehicleid][fNebenjob] == 6)
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],180);
				}
	   			else if(FahrzeugInfo[vehicleid][fNebenjob] == 2)//Pizzabote
			    {
					newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
				else if(FahrzeugInfo[vehicleid][fNebenjob] == 7)//Landwirt
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
				else if(FahrzeugInfo[vehicleid][fNebenjob] == 10)//Holzfäller
				{
				    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],600);
				}
			}
			else if(FahrzeugInfo[vehicleid][fAutohaus] != 0)
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],180);
			}
			else
			{
			    newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],Betrag,FahrzeugInfo[vehicleid][fColor][1],-1);
			}
            SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);
			FahrzeugInfo[newvehicleid][fDatabaseID] = FahrzeugInfo[vehicleid][fDatabaseID];
			FahrzeugInfo[newvehicleid][fErstellt] = FahrzeugInfo[vehicleid][fErstellt];
			FahrzeugInfo[newvehicleid][fModelID] = FahrzeugInfo[vehicleid][fModelID];
			FahrzeugInfo[newvehicleid][fPosition][0] = Position[0];
			FahrzeugInfo[newvehicleid][fPosition][1] = Position[1];
			FahrzeugInfo[newvehicleid][fPosition][2] = Position[2];
			FahrzeugInfo[newvehicleid][fPosition][3] = Position[3];
			FahrzeugInfo[newvehicleid][fColor][0] = FahrzeugInfo[vehicleid][fColor][0];
			FahrzeugInfo[newvehicleid][fColor][1] = Betrag;
			FahrzeugInfo[newvehicleid][fPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];
			FahrzeugInfo[newvehicleid][fKennzeichen] = FahrzeugInfo[vehicleid][fKennzeichen];
			FahrzeugInfo[newvehicleid][fAbgeschleppt] = FahrzeugInfo[vehicleid][fAbgeschleppt];
			FahrzeugInfo[newvehicleid][fParkkralle] = FahrzeugInfo[vehicleid][fParkkralle];
			FahrzeugInfo[newvehicleid][fKilometer] = FahrzeugInfo[vehicleid][fKilometer];
			FahrzeugInfo[newvehicleid][fTank] = FahrzeugInfo[vehicleid][fTank];
			FahrzeugInfo[newvehicleid][fRang] = FahrzeugInfo[vehicleid][fRang];
			for(new i=0;i<14;i++){FahrzeugInfo[newvehicleid][fTuning][i] = FahrzeugInfo[vehicleid][fTuning][i];}
			FahrzeugInfo[newvehicleid][fFraktion] = FahrzeugInfo[vehicleid][fFraktion];
			FahrzeugInfo[newvehicleid][fGruppe] = FahrzeugInfo[vehicleid][fGruppe];
			FahrzeugInfo[newvehicleid][fFirma] = FahrzeugInfo[vehicleid][fFirma];
			FahrzeugInfo[newvehicleid][fAutohaus] = FahrzeugInfo[vehicleid][fAutohaus];
			FahrzeugInfo[newvehicleid][fNebenjob] = FahrzeugInfo[vehicleid][fNebenjob];
			FahrzeugInfo[newvehicleid][fGarage] = FahrzeugInfo[vehicleid][fGarage];
			FahrzeugInfo[newvehicleid][fGPark] = FahrzeugInfo[vehicleid][fGPark];
			FahrzeugInfo[newvehicleid][fFahrschule] = FahrzeugInfo[vehicleid][fFahrschule];
			FahrzeugInfo[newvehicleid][fSupmobil] = FahrzeugInfo[vehicleid][fSupmobil];
			FahrzeugInfo[newvehicleid][fZiviroller] = FahrzeugInfo[vehicleid][fZiviroller];
			FahrzeugInfo[newvehicleid][fImportCar] = FahrzeugInfo[vehicleid][fImportCar];
			FahrzeugInfo[newvehicleid][fKurrierCar] = FahrzeugInfo[vehicleid][fKurrierCar];
			FahrzeugInfo[newvehicleid][fPreis] = FahrzeugInfo[vehicleid][fPreis];
			FahrzeugInfo[newvehicleid][fLabel] = FahrzeugInfo[vehicleid][fLabel];
			FahrzeugInfo[newvehicleid][fBesitzer] = FahrzeugInfo[vehicleid][fBesitzer];
			FahrzeugInfo[newvehicleid][fBesitzerID] = FahrzeugInfo[vehicleid][fBesitzerID];
			FahrzeugInfo[newvehicleid][fPizzaObjekt] = FahrzeugInfo[vehicleid][fPizzaObjekt];
			FahrzeugInfo[newvehicleid][fkGeld] = FahrzeugInfo[vehicleid][fkGeld];
			FahrzeugInfo[newvehicleid][fkC4] = FahrzeugInfo[vehicleid][fkC4];
			FahrzeugInfo[newvehicleid][fJobEXP] = FahrzeugInfo[vehicleid][fJobEXP];
			DeleteVehicle(vehicleid);
			AddTuning(newvehicleid);
			AddOther(newvehicleid);
			AC_PutPlayerInVehicleEx(playerid,newvehicleid,0);
	        return 1;
		}
    }
    else SendClientMessage(playerid,COLOR_GREY,"Entweder exestiert das Fahrzeug nicht, oder das angegebene Fahrzeug steht nicht in der vehicles Tabelle.");
    return 1;
}

ocmd:parkcar(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
 	new vehicleid = GetPlayerVehicleID(playerid), Float:Position[4];
 	GetVehiclePos(vehicleid,Position[0],Position[1],Position[2]);
	GetVehicleZAngle(vehicleid,Position[3]);
	new newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1],-1);
    if(FahrzeugInfo[vehicleid][fNebenjob] > 0)
    {
		format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Nebenjob");
		SetVehicleNumberPlate(newvehicleid,"Nebenjob");
	}
	else if(FahrzeugInfo[vehicleid][fAutohaus] > 0)
	{
		format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Autohaus");
		SetVehicleNumberPlate(newvehicleid,"Autohaus");
	}
	else if(FahrzeugInfo[vehicleid][fFraktion] > 0)
	{
	    CreateFrakNummernSchild(newvehicleid,FahrzeugInfo[vehicleid][fFraktion]);
	}
	else if(FahrzeugInfo[vehicleid][fGruppe] > 0)
	{
		format(FahrzeugInfo[newvehicleid][fKennzeichen], 5, FahrzeugInfo[vehicleid][fKennzeichen]);
		SetVehicleNumberPlate(newvehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);
	}
	else if(FahrzeugInfo[vehicleid][fFirma] > 0)
	{
	    CreateFirmaNummernSchild(newvehicleid,FahrzeugInfo[vehicleid][fFirma]);
	}
	else if(FahrzeugInfo[vehicleid][fFahrschule] > 0)
	{
		format(FahrzeugInfo[newvehicleid][fKennzeichen], 0, "Fahrschule");
		SetVehicleNumberPlate(newvehicleid,"Fahrschule");
	}
	Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
	FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
	FahrzeugInfo[newvehicleid][fDatabaseID] = FahrzeugInfo[vehicleid][fDatabaseID];
	FahrzeugInfo[newvehicleid][fErstellt] = FahrzeugInfo[vehicleid][fErstellt];
	FahrzeugInfo[newvehicleid][fModelID] = FahrzeugInfo[vehicleid][fModelID];
	FahrzeugInfo[newvehicleid][fPosition][0] = Position[0];
	FahrzeugInfo[newvehicleid][fPosition][1] = Position[1];
	FahrzeugInfo[newvehicleid][fPosition][2] = Position[2];
	FahrzeugInfo[newvehicleid][fPosition][3] = Position[3];
	FahrzeugInfo[newvehicleid][fColor][0] = FahrzeugInfo[vehicleid][fColor][0];
	FahrzeugInfo[newvehicleid][fColor][1] = FahrzeugInfo[vehicleid][fColor][1];
	FahrzeugInfo[newvehicleid][fPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];
	FahrzeugInfo[newvehicleid][fAbgeschleppt] = FahrzeugInfo[vehicleid][fAbgeschleppt];
	FahrzeugInfo[newvehicleid][fParkkralle] = FahrzeugInfo[vehicleid][fParkkralle];
	FahrzeugInfo[newvehicleid][fKilometer] = FahrzeugInfo[vehicleid][fKilometer];
	FahrzeugInfo[newvehicleid][fTank] = FahrzeugInfo[vehicleid][fTank];
	FahrzeugInfo[newvehicleid][fRang] = FahrzeugInfo[vehicleid][fRang];
	for(new i=0;i<14;i++){
	FahrzeugInfo[newvehicleid][fTuning][i] = FahrzeugInfo[vehicleid][fTuning][i];}
	FahrzeugInfo[newvehicleid][fFraktion] = FahrzeugInfo[vehicleid][fFraktion];
	FahrzeugInfo[newvehicleid][fGruppe] = FahrzeugInfo[vehicleid][fGruppe];
	FahrzeugInfo[newvehicleid][fFirma] = FahrzeugInfo[vehicleid][fFirma];
	FahrzeugInfo[newvehicleid][fAutohaus] = FahrzeugInfo[vehicleid][fAutohaus];
	FahrzeugInfo[newvehicleid][fNebenjob] = FahrzeugInfo[vehicleid][fNebenjob];
	FahrzeugInfo[newvehicleid][fGarage] = FahrzeugInfo[vehicleid][fGarage];
	FahrzeugInfo[newvehicleid][fGPark] = FahrzeugInfo[vehicleid][fGPark];
	FahrzeugInfo[newvehicleid][fFahrschule] = FahrzeugInfo[vehicleid][fFahrschule];
	FahrzeugInfo[newvehicleid][fSupmobil] = FahrzeugInfo[vehicleid][fSupmobil];
	FahrzeugInfo[newvehicleid][fZiviroller] = FahrzeugInfo[vehicleid][fZiviroller];
	FahrzeugInfo[newvehicleid][fImportCar] = FahrzeugInfo[vehicleid][fImportCar];
 	FahrzeugInfo[newvehicleid][fKurrierCar] = FahrzeugInfo[vehicleid][fKurrierCar];
	FahrzeugInfo[newvehicleid][fPreis] = FahrzeugInfo[vehicleid][fPreis];
	FahrzeugInfo[newvehicleid][fLabel] = FahrzeugInfo[vehicleid][fLabel];
	FahrzeugInfo[newvehicleid][fBesitzer] = FahrzeugInfo[vehicleid][fBesitzer];
	FahrzeugInfo[newvehicleid][fBesitzerID] = FahrzeugInfo[vehicleid][fBesitzerID];
	FahrzeugInfo[newvehicleid][fPizzaObjekt] = FahrzeugInfo[vehicleid][fPizzaObjekt];
	FahrzeugInfo[newvehicleid][fkGeld] = FahrzeugInfo[vehicleid][fkGeld];
	FahrzeugInfo[newvehicleid][fkC4] = FahrzeugInfo[vehicleid][fkC4];
	FahrzeugInfo[newvehicleid][fJobEXP] = FahrzeugInfo[vehicleid][fJobEXP];
	DeleteVehicle(vehicleid);
	AddTuning(newvehicleid);
	AddOther(newvehicleid);
	AC_PutPlayerInVehicleEx(playerid,newvehicleid,0);
	SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug wurde erfolgreich umgeparkt.");
	return 1;
}

ocmd:createtstelle(playerid,params[])
{
    new Auswahl, tsid, query[256], Float:pX, Float:pY, Float:pZ, Text[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createtstelle [Eingang = 1|Tankstelle1 = 2|Tankstelle2 = 3|Tafel = 4]");
    if(Auswahl == 1)//Eingang der Tankstelle
    {
		new Preis;
		GetPlayerPos(playerid,pX,pY,pZ);
        if(sscanf(params,"dd",Auswahl,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createtstelle [1] [Preis]");
   		for(new mf=1;mf<MAX_TSTELLEN;mf++)
    	{
    	    if(TankstellenInfo[mf][tsErstellt] == true)continue;
    	    TankstellenInfo[mf][tsErstellt] = true;
    	    TankstellenInfo[mf][tsEPos_X] = pX;
    	    TankstellenInfo[mf][tsEPos_Y] = pY;
    	    TankstellenInfo[mf][tsEPos_Z] = pZ;
    	    TankstellenInfo[mf][tsPreis] = Preis;
	        mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `tankstellen` (`ID`,`Preis`,`EPos_X`,`EPos_Y`,`EPos_Z`) VALUES ('%d','%d','%f','%f','%f')",mf,Preis,pX,pY,pZ);
   		 	mysql_tquery(sqlHandle, query);
  			format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Tankstelle zu kaufen", mf, Preis);
  			TankstellenInfo[mf][tsText][0] = Create3DTextLabel(Text, COLOR_WHITE, pX, pY, pZ, 10.0, 0);
   			TankstellenInfo[mf][tsPickup][0] = CreatePickup(1273, 23, pX, pY, pZ, -1);
		    format(query,sizeof(query),"Die Tankstelle (ID: %d) wurde erfolgreich erstellt",mf);
    		SendClientMessage(playerid,COLOR_SUPER,query);
			format(TankstellenInfo[tsid][tsBeschreibung], 15, "Petrol Station");
   			return 1;
    	}
	}
	else if(Auswahl == 2)//Tankstelle1
	{
	    GetPlayerPos(playerid,pX,pY,pZ);
	    if(sscanf(params,"dd",Auswahl,tsid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createtstelle [2] [TankstellenID]");
        if(TankstellenInfo[tsid][tsErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Diese TankstellenID existiert nicht.");
       	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `tankstellen` SET `TPos_X1`='%f', `TPos_Y1`='%f', `TPos_Z1`='%f' WHERE `ID`='%d'",pX,pY,pZ,tsid);
		mysql_tquery(sqlHandle, query);
		if(TankstellenInfo[tsid][tsPos_X][0] == 0)
		{
	        format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBenutze '{FF0000}/tanken{FFFFFF}'\num dein Fahrzeug zu betanken", tsid);
	        TankstellenInfo[tsid][tsText][1] = Create3DTextLabel(Text, COLOR_WHITE, pX,pY,pZ+0.2, 10.0, 0);
	        TankstellenInfo[tsid][tsPickup][1] = CreatePickup(1650, 23, pX,pY,pZ, -1);
         	TankstellenInfo[tsid][tsPos_X][0] = pX;
	        TankstellenInfo[tsid][tsPos_Y][0] = pY;
	        TankstellenInfo[tsid][tsPos_Z][0] = pZ;
        	return 1;
        }
        else
        {
			Delete3DTextLabel(TankstellenInfo[tsid][tsText][1]);
			TankstellenInfo[tsid][tsText][1] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(TankstellenInfo[tsid][tsPickup][1]);
      		format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBenutze '{FF0000}/tanken{FFFFFF}'\num dein Fahrzeug zu betanken", tsid);
	        TankstellenInfo[tsid][tsText][1] = Create3DTextLabel(Text, COLOR_WHITE, pX,pY,pZ+0.2, 10.0, 0);
	        TankstellenInfo[tsid][tsPickup][1] = CreatePickup(1650, 23, pX,pY,pZ, -1);
         	TankstellenInfo[tsid][tsPos_X][0] = pX;
	        TankstellenInfo[tsid][tsPos_Y][0] = pY;
	        TankstellenInfo[tsid][tsPos_Z][0] = pZ;
        }
	}
	else if(Auswahl == 3)//Tankstelle2
	{
	    GetPlayerPos(playerid,pX,pY,pZ);
	    if(sscanf(params,"dd",Auswahl,tsid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createtstelle [3] [TankstellenID]");
     	if(TankstellenInfo[tsid][tsErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Diese TankstellenID existiert nicht.");
       	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `tankstellen` SET `TPos_X2`='%f', `TPos_Y2`='%f', `TPos_Z2`='%f' WHERE `ID`='%d'",pX,pY,pZ,tsid);
		mysql_tquery(sqlHandle, query);
		if(TankstellenInfo[tsid][tsPos_X][1] == 0)
		{
      		format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBenutze '{FF0000}/tanken{FFFFFF}'\num dein Fahrzeug zu betanken", tsid);
			TankstellenInfo[tsid][tsText][2] = Create3DTextLabel(Text, COLOR_WHITE, pX,pY,pZ+0.2, 10.0, 0);
			TankstellenInfo[tsid][tsPickup][2] = CreatePickup(1650, 23, pX,pY,pZ, -1);
			TankstellenInfo[tsid][tsPos_X][1] = pX;
			TankstellenInfo[tsid][tsPos_Y][1] = pY;
			TankstellenInfo[tsid][tsPos_Z][1] = pZ;
			return 1;
		}
		else
		{
		
			Delete3DTextLabel(TankstellenInfo[tsid][tsText][2]);
            TankstellenInfo[tsid][tsText][2] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(TankstellenInfo[tsid][tsPickup][2]);
       		format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBenutze '{FF0000}/tanken{FFFFFF}'\num dein Fahrzeug zu betanken", tsid);
			TankstellenInfo[tsid][tsText][2] = Create3DTextLabel(Text, COLOR_WHITE, pX,pY,pZ+0.2, 10.0, 0);
			TankstellenInfo[tsid][tsPickup][2] = CreatePickup(1650, 23, pX,pY,pZ, -1);
			TankstellenInfo[tsid][tsPos_X][1] = pX;
			TankstellenInfo[tsid][tsPos_Y][1] = pY;
			TankstellenInfo[tsid][tsPos_Z][1] = pZ;
		}
	}
	else if(Auswahl == 4)//Tafel
	{
	    new Float:pR;
	    GetPlayerPos(playerid,pX,pY,pZ);
	    GetPlayerFacingAngle(playerid,pR);
	    if(sscanf(params,"dd",Auswahl,tsid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createtstelle [4] [TankstellenID]");
     	if(TankstellenInfo[tsid][tsErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Diese TankstellenID existiert nicht.");
       	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `tankstellen` SET `S_PosX`='%f', `S_PosY`='%f', `S_PosZ`='%f', `S_PosR`='%f' WHERE `ID`='%d'",pX,pY,pZ+3,pR,tsid);
		mysql_tquery(sqlHandle, query);
		if(TankstellenInfo[tsid][tsTPos_X] == 0)
		{
		    TankstellenTafelUpdate(tsid);
		    Streamer_Update(playerid);
			TankstellenInfo[tsid][tsTPos_X] = pX;
			TankstellenInfo[tsid][tsTPos_Y] = pY;
			TankstellenInfo[tsid][tsTPos_Z] = pZ+3;
			TankstellenInfo[tsid][tsTPos_R] = pR;
			return 1;
		}
		else
		{
			TankstellenTafelUpdate(tsid);
			Streamer_Update(playerid);
			TankstellenInfo[tsid][tsTPos_X] = pX;
			TankstellenInfo[tsid][tsTPos_Y] = pY;
			TankstellenInfo[tsid][tsTPos_Z] = pZ+3;
			TankstellenInfo[tsid][tsTPos_R] = pR;
		}
	}
    return 1;
}

ocmd:edittstelle(playerid,params[])
{
    new Preis, query[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!AnTankstellenHaus(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Tankstelle.");
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /edittstelle [Preis]");
    new an = GetNearTankstellenHausID(playerid);
    TankstellenInfo[an][tsPreis] = Preis;
	format(query,sizeof(query),"Der Preis von der Tankstelle (ID:%d) wurde auf %d$ gesetzt.",an,Preis);
	SendClientMessage(playerid,COLOR_SUPER,query);
	Delete3DTextLabel(TankstellenInfo[an][tsText][0]);
	TankstellenInfo[an][tsText][0] = Text3D:INVALID_3DTEXT_ID;
    if(strlen(TankstellenInfo[an][tsBesitzer]) < 2)
	{
		format(query, sizeof(query), "Tankstelle 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Tankstelle zu kaufen", an, TankstellenInfo[an][tsPreis]);
  	}
  	else
  	{
  	    format(query, sizeof(query), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, TankstellenInfo[an][tsBesitzer]);
  	}
    TankstellenInfo[an][tsText][0] = Create3DTextLabel(query, COLOR_WHITE, TankstellenInfo[an][tsPos_X], TankstellenInfo[an][tsPos_Y], TankstellenInfo[an][tsPos_Z], 10.0, 0);
	return 1;
}

ocmd:deltstelle(playerid,params[])
{
	new query[128], tsid;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",tsid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /deltstelle [ID]");
    if(TankstellenInfo[tsid][tsErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Diese TankstellenID existiert nicht.");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `tankstellen` WHERE `ID`='%d'",tsid);
    mysql_tquery(sqlHandle, query);
	Delete3DTextLabel(TankstellenInfo[tsid][tsText][0]);
	TankstellenInfo[tsid][tsText][0] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(TankstellenInfo[tsid][tsPickup][0]);
	Delete3DTextLabel(TankstellenInfo[tsid][tsText][1]);
	TankstellenInfo[tsid][tsText][1] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(TankstellenInfo[tsid][tsPickup][1]);
	Delete3DTextLabel(TankstellenInfo[tsid][tsText][2]);
    TankstellenInfo[tsid][tsText][2] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(TankstellenInfo[tsid][tsPickup][2]);
	TankstellenInfo[tsid][tsPos_X][0] = 0;
	TankstellenInfo[tsid][tsPos_Y][0] = 0;
	TankstellenInfo[tsid][tsPos_Z][0] = 0;
	TankstellenInfo[tsid][tsPos_X][1] = 0;
	TankstellenInfo[tsid][tsPos_Y][1] = 0;
	TankstellenInfo[tsid][tsPos_Z][1] = 0;
	TankstellenInfo[tsid][tsErstellt] = false;
	TankstellenInfo[tsid][tsEPos_X] = 0;
	TankstellenInfo[tsid][tsEPos_Y] = 0;
	TankstellenInfo[tsid][tsEPos_Z] = 0;
	TankstellenInfo[tsid][tsPreis] = 0;
	TankstellenInfo[tsid][tsBenzin] = 0;
	TankstellenInfo[tsid][tsDiesel] = 0;
	TankstellenInfo[tsid][tsKerosin] = 0;
	TankstellenInfo[tsid][tsBenzinPreis] = 0;
	TankstellenInfo[tsid][tsDieselPreis] = 0;
	TankstellenInfo[tsid][tsKerosinPreis] = 0;
 	TankstellenInfo[tsid][tsBesitzer] = 0;
 	TankstellenInfo[tsid][tsBeschreibung] = 0;
    format(query,sizeof(query),"Die Tankstelle (ID: %d) wurde erfolgreich gelöscht",tsid);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:createammu(playerid,params[])
{
    new query[256], Float:pX, Float:pY, Float:pZ, Text[224], Preis;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createammu [Preis]");
	GetPlayerPos(playerid,pX,pY,pZ);
	for(new mf=1;mf<MAX_AMMUS;mf++)
	{
	    if(AmmunationInfo[mf][amErstellt] == true)continue;
	    AmmunationInfo[mf][amErstellt] = true;
	    AmmunationInfo[mf][amPos_X] = pX;
	    AmmunationInfo[mf][amPos_Y] = pY;
	    AmmunationInfo[mf][amPos_Z] = pZ;
	    AmmunationInfo[mf][amPreis] = Preis;
        mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `ammunation` (`ID`,`Preis`,`Pos_X`,`Pos_Y`,`Pos_Z`) VALUES ('%d','%d','%f','%f','%f')",mf,Preis,pX,pY,pZ);
	 	mysql_query(sqlHandle, query);
		format(Text, sizeof(Text), "Ammunation 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Ammunation zu kaufen", mf, Preis);
		AmmunationInfo[mf][amText] = Create3DTextLabel(Text, COLOR_WHITE, pX, pY, pZ, 10.0, 0);
		AmmunationInfo[mf][amPickup] = CreatePickup(1273, 23, pX, pY, pZ, -1);
	    format(query,sizeof(query),"Das Ammunation (ID: %d) wurde erfolgreich erstellt.",mf);
		SendClientMessage(playerid,COLOR_SUPER,query);
		return 1;
	}
	return 1;
}

ocmd:editammu(playerid,params[])
{
    new Preis, query[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!AnAmmunation(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Ammunation.");
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /editammu [Preis]");
    new an = GetNearAmmunationID(playerid);
    AmmunationInfo[an][amPreis] = Preis;
	format(query,128,"Der Preis vom Ammunation (ID:%d) wurde auf %d$ gesetzt.",an,Preis);
	SendClientMessage(playerid,COLOR_SUPER,query);
	Delete3DTextLabel(AmmunationInfo[an][amText]);
	AmmunationInfo[an][amText] = Text3D:INVALID_3DTEXT_ID;
    if(strlen(AmmunationInfo[an][amBesitzer]) < 2)
	{
		format(query, sizeof(query), "Ammunation 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Ammunation zu kaufen", an, AmmunationInfo[an][amPreis]);

  	}
   	else if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
	{
		format(query, sizeof(query), "Ammunation 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, AmmunationInfo[an][amBesitzer]);
	}
	AmmunationInfo[an][amText] = Create3DTextLabel(query, COLOR_WHITE, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], 10.0, 0);
	return 1;
}

ocmd:delammu(playerid,params[])
{
	new query[128], an;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",an))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /delammu [ID]");
    if(AmmunationInfo[an][amErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Dieses Ammunation existiert nicht.");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `ammunation` WHERE `ID`='%d'",an);
    mysql_tquery(sqlHandle, query);
	Delete3DTextLabel(AmmunationInfo[an][amText]);
	AmmunationInfo[an][amText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(AmmunationInfo[an][amPickup]);
	AmmunationInfo[an][amErstellt] = false;
	AmmunationInfo[an][amPos_X] = 0;
	AmmunationInfo[an][amPos_Y] = 0;
	AmmunationInfo[an][amPos_Z] = 0;
	AmmunationInfo[an][amPreis] = 0;
 	AmmunationInfo[an][amBesitzer] = 0;
    format(query,sizeof(query),"Das Ammunation (ID: %d) wurde erfolgreich gelöscht",an);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:createlager(playerid,params[])
{
	new query[256], Float:pX, Float:pY, Float:pZ, Text[224], ffirmid;
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	if(sscanf(params,"d",ffirmid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createlager [Firmen ID]");
	GetPlayerPos(playerid,pX,pY,pZ);
	for(new mf=1;mf<MAX_LAGER;mf++)
	{
		FirmaLagerInfo[mf][firmid] = ffirmid;
		FirmaLagerInfo[mf][firmenname] = FirmenInfo[ffirmid][fName];
		FirmaLagerInfo[mf][flposx] = pX;
		FirmaLagerInfo[mf][flposy] = pY;
		FirmaLagerInfo[mf][flposz] = pZ;
		mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `firmalager` (`firmenlid`,`firmenname`,`firmenid`,`posx`,`posy`,`posz`) VALUES ('%d','%s','%d','%f','%f','%f')",mf,FirmenInfo[ffirmid][fName],ffirmid,pX,pY,pZ);
		mysql_tquery(sqlHandle, query);
		format(Text, sizeof(Text),"Lager 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s",
		mf, FirmaLagerInfo[mf][firmenname]);
		FirmaLagerInfo[mf][flLabel] = Create3DTextLabel(Text, COLOR_WHITE, FirmaLagerInfo[mf][flposx], FirmaLagerInfo[mf][flposy], FirmaLagerInfo[mf][flposz], 10.0, 0);
		FirmaLagerInfo[mf][flPickup] = CreatePickup(1272,1,FirmaLagerInfo[mf][flposx],FirmaLagerInfo[mf][flposy],FirmaLagerInfo[mf][flposz]);
	    format(query,sizeof(query),"Das Lager (ID: %d) für die Firma %s wurde erfolgreich erstellt.",mf,FirmenInfo[ffirmid][fName]);
		SendClientMessage(playerid,COLOR_SUPER,query);
		return 1;
	}
	return 1;
}

ocmd:dellager(playerid,params[])
{
	new query[128], an;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",an))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /dellager [ID]");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `lager` WHERE `firmenlid`='%d'",an);
    mysql_tquery(sqlHandle, query);
	Delete3DTextLabel(FirmaLagerInfo[an][flLabel]);
	FirmaLagerInfo[an][flLabel] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(FirmaLagerInfo[an][flPickup]);
	FirmaLagerInfo[an][flposx] = 0;
	FirmaLagerInfo[an][flposy] = 0;
	FirmaLagerInfo[an][flposz] = 0;
 	FirmaLagerInfo[an][firmenname] = 0;
 	FirmaLagerInfo[an][firmid] = 0;
    format(query,sizeof(query),"Das Lager (ID: %d) wurde erfolgreich gelöscht",an);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:createstore(playerid,params[])
{
    new query[256], Float:pX, Float:pY, Float:pZ, Text[224], Preis;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createstore [Preis]");
	GetPlayerPos(playerid,pX,pY,pZ);
	for(new mf=1;mf<MAX_STORES;mf++)
	{
	    if(StoreInfo[mf][siErstellt] == true)continue;
	    StoreInfo[mf][siErstellt] = true;
	    StoreInfo[mf][siPos_X] = pX;
	    StoreInfo[mf][siPos_Y] = pY;
	    StoreInfo[mf][siPos_Z] = pZ;
	    StoreInfo[mf][siPreis] = Preis;
        mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `stores` (`ID`,`Preis`,`Pos_X`,`Pos_Y`,`Pos_Z`) VALUES ('%d','%d','%f','%f','%f')",mf,Preis,pX,pY,pZ);
	 	mysql_tquery(sqlHandle, query);
		format(Text, sizeof(Text), "24/7 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das 24/7 zu kaufen", mf, Preis);
		StoreInfo[mf][siText] = Create3DTextLabel(Text, COLOR_WHITE, pX, pY, pZ, 10.0, 0);
		StoreInfo[mf][siPickup] = CreatePickup(1273, 23, pX, pY, pZ, -1);
	    format(query,sizeof(query),"Der 24/7 (ID: %d) wurde erfolgreich erstellt.",mf);
		SendClientMessage(playerid,COLOR_SUPER,query);
		return 1;
	}
	return 1;
}

ocmd:editstore(playerid,params[])
{
    new Preis, query[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!AnStore(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem 24/7.");
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /editstore [Preis]");
    new an = GetNearStoreID(playerid);
    StoreInfo[an][siPreis] = Preis;
	format(query,128,"Der Preis vom 24/7 (ID:%d) wurde auf %d$ gesetzt.",an,Preis);
	SendClientMessage(playerid,COLOR_SUPER,query);
	Delete3DTextLabel(StoreInfo[an][siText]);
	StoreInfo[an][siText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(StoreInfo[an][siPickup]);
    if(strlen(StoreInfo[an][siBesitzer]) < 2)
	{
		format(query, sizeof(query), "24/7 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das 24/7 zu kaufen", an, StoreInfo[an][siPreis]);
		StoreInfo[an][siPickup] = CreatePickup(1273, 23, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], -1);
  	}
    StoreInfo[an][siText] = Create3DTextLabel(query, COLOR_WHITE, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], 10.0, 0);
	return 1;
}

ocmd:delstore(playerid,params[])
{
	new query[128], an;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",an))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /delstore [ID]");
    if(StoreInfo[an][siErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Dieser 24/7 existiert nicht.");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `stores` WHERE `ID`='%d'",an);
    mysql_tquery(sqlHandle, query);
	Delete3DTextLabel(StoreInfo[an][siText]);
	StoreInfo[an][siText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(StoreInfo[an][siPickup]);
	StoreInfo[an][siErstellt] = false;
	StoreInfo[an][siPos_X] = 0;
	StoreInfo[an][siPos_Y] = 0;
	StoreInfo[an][siPos_Z] = 0;
	StoreInfo[an][siPreis] = 0;
 	StoreInfo[an][siBesitzer] = 0;
    format(query,sizeof(query),"Der 24/7 (ID: %d) wurde erfolgreich gelöscht",an);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:createhaus(playerid,params[])
{
    new query[256], Float:pX, Float:pY, Float:pZ, Text[224], Ort, Typ, Preis;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"ddd",Ort,Typ,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createhaus [LS=1|SF=2|LV=3] [Appartment=1|Haus=2|Villa=3] [Preis]");
	GetPlayerPos(playerid,pX,pY,pZ);
	for(new mf=1;mf<MAX_HAUSER;mf++)
	{
	    if(HausInfo[mf][hsErstellt] == true)continue;
	    HausInfo[mf][hsErstellt] = true;
	    HausInfo[mf][hsPos_X] = pX;
	    HausInfo[mf][hsPos_Y] = pY;
	    HausInfo[mf][hsPos_Z] = pZ;
	    HausInfo[mf][hsPreis] = Preis;
	    HausInfo[mf][hsOrt] = Ort;
	    HausInfo[mf][hsTyp] = Typ;
	 	if(Typ == 1)//Appartment
	 	{
   			mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `hauser` (`ID`,`Preis`,`Ort`,`Typ`,`Interior`,`Pos_X`,`Pos_Y`,`Pos_Z`,`IPos_X`,`IPos_Y`,`IPos_Z`) VALUES ('%d','%d','%d','%d','1','%f','%f','%f','223.043991','1289.259888','1082.199951')",mf,Preis,Ort,Typ,pX,pY,pZ);
			mysql_tquery(sqlHandle, query);
			HausInfo[mf][hsIPos_X] = 223.043991;
			HausInfo[mf][hsIPos_Y] = 1289.259888;
			HausInfo[mf][hsIPos_Z] = 1082.199951;
			HausInfo[mf][hsInterior] = 1;
			format(Text, sizeof(Text), "Appartment 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Appartment zu kaufen", mf, Preis);
	    	format(query,sizeof(query),"Das Appartment (ID: %d) wurde erfolgreich erstellt.",mf);
		}
		else if(Typ == 2)//Haus
		{
   			mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `hauser` (`ID`,`Preis`,`Ort`,`Typ`,`Interior`,`Pos_X`,`Pos_Y`,`Pos_Z`,`IPos_X`,`IPos_Y`,`IPos_Z`) VALUES ('%d','%d','%d','%d','2','%f','%f','%f','225.756989','1240.000000','1082.149902')",mf,Preis,Ort,Typ,pX,pY,pZ);
			mysql_tquery(sqlHandle, query);
			HausInfo[mf][hsIPos_X] = 225.756989;
			HausInfo[mf][hsIPos_Y] = 1240.000000;
			HausInfo[mf][hsIPos_Z] = 1082.149902;
			HausInfo[mf][hsInterior] = 2;
			format(Text, sizeof(Text), "Haus 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Haus zu kaufen", mf, Preis);
	    	format(query,sizeof(query),"Das Haus (ID: %d) wurde erfolgreich erstellt.",mf);
		}
		else if(Typ == 3)//Villa
		{
   			mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `hauser` (`ID`,`Preis`,`Ort`,`Typ`,`Interior`,`Pos_X`,`Pos_Y`,`Pos_Z`,`IPos_X`,`IPos_Y`,`IPos_Z`) VALUES ('%d','%d','%d','%d','7','%f','%f','%f','225.630997','1022.479980','1084.069946')",mf,Preis,Ort,Typ,pX,pY,pZ);
			mysql_tquery(sqlHandle, query);
			HausInfo[mf][hsIPos_X] = 225.630997;
			HausInfo[mf][hsIPos_Y] = 1022.479980;
			HausInfo[mf][hsIPos_Z] = 1084.069946;
			HausInfo[mf][hsInterior] = 7;
			format(Text, sizeof(Text), "Villa 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Villa zu kaufen", mf, Preis);
	    	format(query,sizeof(query),"Die Villa (ID: %d) wurde erfolgreich erstellt.",mf);
		}
		HausInfo[mf][hsText] = Create3DTextLabel(Text, COLOR_WHITE, pX, pY, pZ, 10.0, 0);
		HausInfo[mf][hsPickup] = CreatePickup(1273, 23, pX, pY, pZ, -1);
		SendClientMessage(playerid,COLOR_SUPER,query);
		return 1;
	}
	return 1;
}

ocmd:edithaus(playerid,params[])
{
    new Preis, query[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!AnHaus(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem Haus.");
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /edithaus [Preis]");
    new hs = GetNearHausID(playerid);
    if(strlen(HausInfo[hs][hsBesitzer]) > 2)return SendClientMessage(playerid,COLOR_SORRY,"Es können nur unverkaufte Häuser bearbeitet werden.");
    HausInfo[hs][hsPreis] = Preis;
	format(query,128,"Der Preis vom Haus (ID:%d) wurde auf %d$ gesetzt.",hs,Preis);
	SendClientMessage(playerid,COLOR_SUPER,query);
	Delete3DTextLabel(HausInfo[hs][hsText]);
	HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(HausInfo[hs][hsPickup]);
    if(strlen(HausInfo[hs][hsBesitzer]) < 2)
	{
	    if(HausInfo[hs][hsTyp] == 1)//Appartment
	    {
			format(query, sizeof(query), "Appartment 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Appartment zu kaufen", hs, HausInfo[hs][hsPreis]);
			HausInfo[hs][hsPickup] = CreatePickup(1273, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
		}
		else if(HausInfo[hs][hsTyp] == 2)//Haus
		{
			format(query, sizeof(query), "Haus 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Haus zu kaufen", hs, HausInfo[hs][hsPreis]);
			HausInfo[hs][hsPickup] = CreatePickup(1273, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
		}
		else if(HausInfo[hs][hsTyp] == 3)//Villa
		{
			format(query, sizeof(query), "Villa 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Villa zu kaufen", hs, HausInfo[hs][hsPreis]);
			HausInfo[hs][hsPickup] = CreatePickup(1273, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
		}
   	}
   	HausInfo[hs][hsText] = Create3DTextLabel(query, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
	return 1;
}

ocmd:delhaus(playerid,params[])
{
	new query[128], hs;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",hs))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /delhaus [ID]");
    if(HausInfo[hs][hsErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Dieses Haus existiert nicht.");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `hauser` WHERE `ID`='%d'",hs);
    mysql_tquery(sqlHandle, query);
	Delete3DTextLabel(HausInfo[hs][hsText]);
	HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(HausInfo[hs][hsPickup]);
	HausInfo[hs][hsErstellt] = false;
	HausInfo[hs][hsPos_X] = 0;
	HausInfo[hs][hsPos_Y] = 0;
	HausInfo[hs][hsPos_Z] = 0;
	HausInfo[hs][hsPreis] = 0;
 	HausInfo[hs][hsBesitzer] = 0;
    format(query,sizeof(query),"Das Haus (ID: %d) wurde erfolgreich gelöscht",hs);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:creategarage(playerid,params[])
{
    new query[256], Float:pX, Float:pY, Float:pZ, Text[224], Ort, Preis;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"dd",Ort,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /creategarage [LS=1|SF=2|LV=3] [Preis]");
	GetPlayerPos(playerid,pX,pY,pZ);
	for(new mf=1;mf<MAX_GARAGEN;mf++)
	{
	    if(GaragenInfo[mf][giErstellt] == true)continue;
	    GaragenInfo[mf][giErstellt] = true;
	    GaragenInfo[mf][giPos_X] = pX;
	    GaragenInfo[mf][giPos_Y] = pY;
	    GaragenInfo[mf][giPos_Z] = pZ;
	    GaragenInfo[mf][giPreis] = Preis;
	    GaragenInfo[mf][giOrt] = Ort;

		mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `garagen` (`ID`,`Preis`,`Ort`, `Pos_X`,`Pos_Y`,`Pos_Z`) VALUES ('%d','%d','%d','%f','%f','%f')",mf,Preis,Ort,pX,pY,pZ);
		mysql_tquery(sqlHandle, query);
		format(Text, sizeof(Text), "Garage 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Garage zu kaufen", mf, Preis);
    	format(query,sizeof(query),"Die Garage (ID: %d) wurde erfolgreich erstellt.",mf);

		GaragenInfo[mf][giText] = Create3DTextLabel(Text, COLOR_WHITE, pX, pY, pZ, 10.0, 0);
		GaragenInfo[mf][giPickup] = CreatePickup(1273, 23, pX, pY, pZ, -1);
		SendClientMessage(playerid,COLOR_SUPER,query);
		return 1;
	}
	return 1;
}

ocmd:creategarageout(playerid,params[])
{
    new query[256], Float:Pos[4], gid;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du musst dafür in einem Fahrzeug sitzen.");
    if(sscanf(params,"d",gid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /creategarageout [GaragenID]");
    if(GaragenInfo[gid][giErstellt] == false)return SendClientMessage(playerid,COLOR_SORRY,"Diese Garage existiert nicht.");
    new vehicleid = GetPlayerVehicleID(playerid);

    GetVehiclePos(vehicleid,Pos[0],Pos[1],Pos[2]);
    GetVehicleZAngle(vehicleid,Pos[3]);
    
    GaragenInfo[gid][giOPos_X] = Pos[0];
    GaragenInfo[gid][giOPos_Y] = Pos[1];
    GaragenInfo[gid][giOPos_Z] = Pos[2];
    GaragenInfo[gid][giOPos_A] = Pos[3];

	format(query,sizeof(query),"UPDATE `garagen` SET `OPos_X`='%f', `OPos_Y`='%f', `OPos_Z`='%f', `OPos_A`='%f' WHERE `ID`='%d'",Pos[0],Pos[1],Pos[2],Pos[3],gid);
	mysql_tquery(sqlHandle, query);

	format(query,sizeof(query),"Die Ausgang Position der GaragenID: %d wurde erfolgreich erstellt.",gid);
	SendClientMessage(playerid,COLOR_SUPER,query);
	return 1;
}

ocmd:editgarage(playerid,params[])
{
    new Preis, query[224];
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(!AnGarage(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich an keiner Garage.");
    if(sscanf(params,"d",Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /editgarage [Preis]");
    new hs = GetNearGarageID(playerid);
    if(strlen(GaragenInfo[hs][giBesitzer]) > 2)return SendClientMessage(playerid,COLOR_SORRY,"Es können nur unverkaufte Garagen bearbeitet werden.");
    GaragenInfo[hs][giPreis] = Preis;
	format(query,128,"Der Preis von der Garage (ID:%d) wurde auf %d$ gesetzt.",hs,Preis);
	SendClientMessage(playerid,COLOR_SUPER,query);
	Delete3DTextLabel(GaragenInfo[hs][giText]);
	GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(GaragenInfo[hs][giPickup]);
    if(strlen(HausInfo[hs][hsBesitzer]) < 2)
	{
		format(query, sizeof(query), "Haus 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Haus zu kaufen", hs, GaragenInfo[hs][giPreis]);
		GaragenInfo[hs][giPickup] = CreatePickup(1273, 23, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], -1);
   	}
   	GaragenInfo[hs][giText] = Create3DTextLabel(query, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);
	return 1;
}

ocmd:delgarage(playerid,params[])
{
	new query[128], hs;
    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    if(sscanf(params,"d",hs))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /delgarage [ID]");
    if(GaragenInfo[hs][giErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Diese Garage existiert nicht.");
    mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `garagen` WHERE `ID`='%d'",hs);
    mysql_query(sqlHandle, query);
	Delete3DTextLabel(GaragenInfo[hs][giText]);
	GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
	DestroyPickup(GaragenInfo[hs][giPickup]);
	GaragenInfo[hs][giErstellt] = false;
	GaragenInfo[hs][giPos_X] = 0;
	GaragenInfo[hs][giPos_Y] = 0;
	GaragenInfo[hs][giPos_Z] = 0;
	GaragenInfo[hs][giPreis] = 0;
 	GaragenInfo[hs][giBesitzer] = 0;
    format(query,sizeof(query),"Die Garage (ID: %d) wurde erfolgreich gelöscht",hs);
    SendClientMessage(playerid,COLOR_SUPER,query);
    return 1;
}

ocmd:garage(playerid,params[])
{
    if(!AnGarage(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich an keiner Garage.");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
    new hs = GetNearGarageID(playerid);
    if(SpielerInfo[playerid][sGarage] == hs || SpielerInfo[playerid][sGMieter] == hs)
    {
        new str[340], string[10][34], vehicleid = GetPlayerVehicleID(playerid);
        if(FahrzeugInfo[vehicleid][fDatabaseID] != 0 || FahrzeugInfo[vehicleid][fGruppe] != 0 || FahrzeugInfo[vehicleid][fFirma] != 0 || FahrzeugInfo[vehicleid][fBesitzerID] != 0)
        {
			if(GaragenInfo[hs][giFahrzeug][0] == 0){format(string[0],34,"{9ACD32}Parkplatz frei");}
			else{format(string[0],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][0]-400]);}
			if(GaragenInfo[hs][giFahrzeug][1] == 0){format(string[1],34,"{9ACD32}Parkplatz frei");}
			else{format(string[1],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][1]-400]);}
			if(GaragenInfo[hs][giFahrzeug][2] == 0){format(string[2],34,"{9ACD32}Parkplatz frei");}
			else{format(string[2],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][2]-400]);}
			if(GaragenInfo[hs][giFahrzeug][3] == 0){format(string[3],34,"{9ACD32}Parkplatz frei");}
			else{format(string[3],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][3]-400]);}
			if(GaragenInfo[hs][giFahrzeug][4] == 0){format(string[4],34,"{9ACD32}Parkplatz frei");}
			else{format(string[4],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][4]-400]);}
			if(GaragenInfo[hs][giFahrzeug][5] == 0){format(string[5],34,"{9ACD32}Parkplatz frei");}
			else{format(string[5],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][5]-400]);}
			if(GaragenInfo[hs][giFahrzeug][6] == 0){format(string[6],34,"{9ACD32}Parkplatz frei");}
			else{format(string[6],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][6]-400]);}
			if(GaragenInfo[hs][giFahrzeug][7] == 0){format(string[7],34,"{9ACD32}Parkplatz frei");}
			else{format(string[7],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][7]-400]);}
			if(GaragenInfo[hs][giFahrzeug][8] == 0){format(string[8],34,"{9ACD32}Parkplatz frei");}
			else{format(string[8],34,"{FF0000}%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][8]-400]);}
			if(GaragenInfo[hs][giFahrzeug][9] == 0){format(string[9],34,"{9ACD32}Parkplatz frei");}
			else{format(string[9],34,"%s",FahrzeugName[GaragenInfo[hs][giFahrzeug][9]-400]);}
			format(str,sizeof str,"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5],string[6],string[7],string[8],string[9]);
	        ShowPlayerDialog(playerid,DIALOG_GARAGE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Garagen System",str,"Parken","Abbrechen");
	        return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du kannst in Garagen nur Gruppen & Privatfahrzeuge unterbringen.");
		return 1;
    }
    else SendClientMessage(playerid,COLOR_GREY,"Du kannst deine Fahrzeuge hier nicht unterbringen.");
	return 1;
}

ocmd:createfeuer(playerid,params[])
{
    new Float:Pos[3], string[144], _alarm;
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
	if(sscanf(params,"d",_alarm))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /createfeuer [Alarm]");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
    new Feuer = mysql_GetInt("config", "ValueInt", "Config", "Feuer");
	if(Feuer < _alarm){mysql_SetInt("config", "ValueInt",_alarm, "Config", "Feuer");}
	mysql_format(sqlHandle, string, sizeof(string), "INSERT INTO `feuer` (`Alarm`, `Pos_X`, `Pos_Y`, `Pos_Z`) VALUES ('%d', '%f', '%f', '%f')", _alarm, Pos[0], Pos[1], Pos[2]-2.5);
	mysql_tquery(sqlHandle, string);
	format(string,sizeof(string),"Du hast für den Alarm %d, ein neues Feuer erstellt.",_alarm);
	SendClientMessage(playerid,COLOR_SUPER,string);
	return 1;
}

/*ocmd:feuer(playerid,params[])
{
	new count3 = 0, query[464], var[64];
    format(query, sizeof(query),"SELECT * FROM `feuer` WHERE `Alarm` = '%d'", 8);
	mysql_query(query);
	mysql_store_result();
	while(mysql_fetch_row_format(query,"|"))
	{
	    mysql_get_field("Pos_X",var); FeuerPos[0][count3] = floatstr(var);
	    mysql_get_field("Pos_Y",var); FeuerPos[1][count3] = floatstr(var);
	    mysql_get_field("Pos_Z",var); FeuerPos[2][count3] = floatstr(var);
	  	count3++;
	}
	mysql_free_result();
	for(new i=0;i<count3;i++)
	{
	  	FeuerInfo[i][oPosX] = FeuerPos[0][i];
	  	FeuerPos[0][i] = 0;
	   	FeuerInfo[i][oPosY] = FeuerPos[1][i];
	   	FeuerPos[1][i] = 0;
	    FeuerInfo[i][oPosZ] = FeuerPos[2][i];
	    FeuerPos[2][i] = 0;
	    FeuerInfo[i][Erstellt] = true;
	    FeuerInfo[i][FID] = CreateDynamicObject(18689,FeuerInfo[i][oPosX],FeuerInfo[i][oPosY],FeuerInfo[i][oPosZ],0.0,0.0,0.0);
	}
	FeuerStatusTimer = SetTimer("FeuerStatus",5000,true);
	foreach(new i : Player)
	{
	    if(SpielerInfo[i][sFraktion] == 5 || SpielerInfo[i][sFraktion] == 2 || SpielerInfo[i][sFraktion] == 6)
	    {
		    if(SpielerInfo[i][sFraktion] == 2 || SpielerInfo[i][sFraktion] == 6)
		    {
		    	SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS S.A RETTUNGSDIENST, MELDET EINEN BRAND!");
				SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS FEUER BEFINDET SICH AM ROTEN MARKER.");
			}
		 	if(SpielerInfo[i][sFraktion] == 5)
		    {
	    		SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! EINE UNBEKANNTE PERSON, MELDET EINEN BRAND!");
				SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS FEUER BEFINDET SICH AM ROTEN MARKER!");
		    }
		    SetPlayerCheckpoint(i,FeuerInfo[0][oPosX],FeuerInfo[0][oPosY],FeuerInfo[0][oPosZ],2.5);
		}
	}
    return 1;
}*/

ocmd@2:givegun,giveweapon(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	new pID, Waffenid, Munition, string[128];
	if(sscanf(params,"uii",pID,Waffenid,Munition))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze /givegun [SpielerID] [WaffenID] [Munition]");
	{
		if(!IsPlayerConnected(pID))return NichtOnline
		GivePlayerWeapon(pID,WEAPON:Waffenid,Munition);
		format(string,128,"Du hast dem %s die Waffe '%s' mit %d Munition gegeben.",SpielerInfo[pID][sName],WaffenName(Waffenid),Munition);
		SendClientMessage(playerid,COLOR_SUPER,string);
		format(string,128,"%s %s hat dir die Waffe '%s' mit %d Munition gegeben.",AdminName(playerid),SpielerInfo[playerid][sName],WaffenName(Waffenid),Munition);
		SendClientMessage(pID,COLOR_SUPER,string);
		return 1;
	}
}

ocmd:warn(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	new pID, Grund[64], string[144];
	if(sscanf(params,"us[64]",pID,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /warn [SpielerID] [Grund]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,128,"%s %s hat den %s verwarnt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Grund);
	SendICPMessage(string);
	LogWarn(string);
	WarnPlayer(pID,SpielerInfo[playerid][sName],Grund);
	format(string,128,"%s %s hat dich verwant. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Grund);
	SendClientMessage(pID,COLOR_SORRY,string);
	if(SpielerInfo[playerid][sWarns] == 5)
	{
		format(string,128,"%s wurde vom System permanent gebannt: Grund: 5 Verwarnungen",SpielerInfo[pID][sName]);
	    SendClientMessageToAll(COLOR_SORRY,string);
		format(string,128,"Das System hat dich permanent gebannt. Grund: 5 Verwarnungen");
		LogBan(string);
		BanPlayer(pID,"System",Grund);
		return 1;
	}
	else
	{
	    format(string,128,"Anzahl Verwarnungen: %d",SpielerInfo[pID][sWarns]);
	    SendClientMessage(pID,COLOR_INFO,string);
	    SendClientMessage(pID,COLOR_INFO,"Du kannst im Control Panel deine Verwarnungen unter 'Mein Profil' einsehen.");
	    return 1;
	}
}

ocmd:adsperre(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Grund[64], string[224], Minuten;
	if(sscanf(params,"uis[64]",pID,Minuten,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /adsperre [SpielerID] [Minuten] [Grund]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,128,"%s %s hat den Spieler %s für %d Minute(n) von der Werbung ausgeschlossen. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Minuten,Grund);
	SendICPMessage(string);
	format(string,128,"%s %s hat dich für %d Minute(n) von der Werbung ausgeschlossen. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Minuten,Grund);
	SendClientMessage(pID,COLOR_SORRY,string);
	WerbungSperre(pID,Minuten);
	return 1;
}

ocmd:adentsperre(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /adentsperre [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,128,"%s %s hat den Spieler %s für die Werbung wieder freigegeben.",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
	SendICPMessage(string);
	format(string,128,"%s %s hat dich für die Werbung wieder freigegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	SpielerInfo[pID][sADSperre] = 0;
	return 1;
}

ocmd:mute(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, Grund[64], string[224], Minuten;
	if(sscanf(params,"uis[64]",pID,Minuten,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /mute [SpielerID] [Minuten] [Grund]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,128,"%s %s hat den %s für %d Minute(n) gemutet. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Minuten,Grund);
	SendICPMessage(string);
	format(string,128,"%s %s hat dich für %d Minute(n) gemutet. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Minuten,Grund);
	SendClientMessage(pID,COLOR_SORRY,string);
	MutePlayer(pID,Minuten);
	return 1;
}

ocmd:unmute(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /unmute [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	format(string,128,"%s %s hat den %s entmutet.",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
	SendICPMessage(string);
	format(string,128,"%s %s hat dich entmutet.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	SpielerInfo[pID][sMuted] = 0;
	return 1;
}

ocmd:freeze(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /frezze [SpielerID]");
    if(GetPVarInt(pID,"Freezed") == 0)
    {
	    TogglePlayerControllable(pID,false);
		format(string,128,"%s %s hat dich gefreezt.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_SORRY,string);
		format(string,128,"Du hast den %s gefreezt.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SORRY,string);
		SetPVarInt(pID,"Freezed",1);
	}
	else
	{
		TogglePlayerControllable(pID,true);
		format(string,128,"%s %s hat dich entfreezt.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(pID,COLOR_SORRY,string);
		format(string,128,"Du hast den %s entfreezt.",SpielerInfo[pID][sName]);
		SendClientMessage(playerid,COLOR_SORRY,string);
		DeletePVar(pID,"Freezed");
	}
	return 1;
}

ocmd:godtest(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new pID;
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /godtest [SpielerID/Name]");
	if(!IsPlayerConnected(pID))return NichtOnline
	new Float:px,Float:py,Float:pz,string[164];
	GetPlayerPos(pID,px,py,pz);
	format(string,sizeof(string),"Achtung: Du wirst nun vom %s %s auf Godmode überprüft.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_YELLOW,string);
	SendClientMessage(pID,COLOR_YELLOW,"Achtung: Solltest du versuchen, den Godmode Check zu umgehen, wirst du permanent vom Server gesperrt!");
	SendClientMessage(pID,COLOR_INFO,"Achtung: Du wirst nun überprüft, bitte habe einen Moment Geduld.");
	SetPlayerHealth(pID,100),	SetPlayerArmour(pID,0);
	SetTimerEx("GodmodeCheck",2000,false,"dd",playerid,pID);
	return CreateExplosion(px, py, pz, 0, 10.0);
}

ocmd:lic(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
    new pID, licname[24];
    if(sscanf(params,"us",pID,licname))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /lic [SpielerID] [Autoschein|Bikeschein|Flugschein|LKWschein|BootSchein|WaffenSchein|Perso|Alle]");
    if(!IsPlayerConnected(pID))return NichtOnline
    new string[128];
    if(strcmp(licname,"Autoschein",true)==0)
	{
	    SpielerInfo[pID][sCarLic] = 1;
		format(string,sizeof(string),"%s %s hat dir einen Autoschein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den Autoschein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"Bikeschein",true)==0)
	{
        SpielerInfo[pID][sBikeLic] = 1;
		format(string,sizeof(string),"%s %s hat dir einen Bikeschein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den Bikeschein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"Flugschein",true)==0)
	{
        SpielerInfo[pID][sFlugLic] = 1;
		format(string,sizeof(string),"%s %s hat dir Spieler einen Flugschein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den Flugschein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"LKWschein",true)==0)
	{
        SpielerInfo[pID][sTruckLic] = 1;
		format(string,sizeof(string),"%s %s hat dir einen LKWschein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den LKWschein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
  	}
	else if(strcmp(licname,"BootSchein",true)==0)
	{
        SpielerInfo[pID][sBootLic] = 1;
		format(string,sizeof(string),"%s %s hat dir einen BootSchein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den BootSchein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"WaffenSchein",true)==0)
	{
        SpielerInfo[pID][sWeaponLic] = 3;
		format(string,sizeof(string),"%s %s hat dir einen Waffenschein gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den Waffenschein gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"Perso",true)==0)
	{
 		SpielerInfo[pID][sPerso] = 1;
		format(string,sizeof(string),"%s %s hat dir einen Personalausweis gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s den Personalausweis gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	else if(strcmp(licname,"Alle",true)==0)
	{
	    SpielerInfo[pID][sCarLic] = 1;
	    SpielerInfo[pID][sBikeLic] = 1;
	    SpielerInfo[pID][sFlugLic] = 1;
	    SpielerInfo[pID][sTruckLic] = 1;
	    SpielerInfo[pID][sBootLic] = 1;
	    SpielerInfo[pID][sWeaponLic] = 3;
	    SpielerInfo[pID][sPerso] = 1;
		format(string,sizeof(string),"%s %s hat dir alle Scheine gegeben.",AdminName(playerid),SpielerInfo[playerid][sName]);
        SendClientMessage(pID,COLOR_INFO,string);
		format(string,sizeof(string),"Du hast dem %s alle Scheine gegeben.",SpielerInfo[pID][sName]);
        SendClientMessage(playerid,COLOR_SUPER,string);
	}
	return 1;
}

ocmd@2:cr,carrespawn(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	if(GlobalVars[crespawn] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Es findet derzeit einen Carrespawn statt.");
    new Auswahl[24], string[144];
    if(sscanf(params,"s",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /carrespawn [Alle|Pizzabote|KFahrer|Pilot|Busfahrer|Müllmann|Landwirt|Holzfäller]");
    if(strcmp(Auswahl,"Alle",true)==0)
	{
 		format(string,128,"%s %s hat einen allgemeinen Carrespawn gestartet. Er beginnt in 30 Sekunden.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 1;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
	    
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	    return 1;
	}
	else if(strcmp(Auswahl,"Pizzabote",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Pizzaboten Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 3;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"KFahrer",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Kehrmaschinenfahrer Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 4;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"Pilot",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Piloten Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 5;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"Busfahrer",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Busfahrer Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 6;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"Müllmann",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Müllmann Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 7;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"Landwirt",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Landwirt Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 8;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	else if(strcmp(Auswahl,"Holzfäller",true)==0)
	{
		format(string,128,"%s %s respawnt in 30 Sekunden alle Fahrzeuge vom Holzfäller Job.",AdminName(playerid),SpielerInfo[playerid][sName]);
	    SendClientMessageToAll(COLOR_INFO,string);

	    GlobalVars[crespawn] = 9;
	    CountdownTimer = SetTimerEx("CountdownTime",1000,true,"i",30);
   		foreach(new i : Player)
		{
		    if(GetPVarInt(i,"ProbeFahrt") == 1 || GetPVarInt(i,"ImImportCar") == 1 || GetPVarInt(i,"ImKurrierCar") == 1)continue;
			PlayerTextDrawSetString(i,CountdownDraw[i][2],"CARRESPAWN");
			PlayerTextDrawSetString(i,CountdownDraw[i][3],"30 Sekunden");
			PlayerTextDrawShow(i,CountdownDraw[i][0]);
			PlayerTextDrawShow(i,CountdownDraw[i][1]);
			PlayerTextDrawShow(i,CountdownDraw[i][2]);
			PlayerTextDrawShow(i,CountdownDraw[i][3]);
		}
	}
	return 1;
}

ocmd:refill(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
 	for(new id = 1; id < MAX_VEHICLES; id++)
 	{
  		if(!IsValidVehicle(id))continue;
  		if(IsAFahrrad(id))continue;
   		FahrzeugInfo[id][fTank] = VehicleData[GetVehicleModel(id)-400][vehLiter];
	}
	new string[128];
	format(string,sizeof(string),"%s %s hat alle Fahrzeuge betankt.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessageToAll(COLOR_YELLOW,string);
	return 1;
}

ocmd:tv(playerid,params[])
{
	new pID,string[128];
	if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	if(GetPVarInt(playerid,"SpectateMode") == 0)
	{
	    if(SpielerInfo[playerid][sSpectate] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du spectatest bereits einen Spieler.");
	    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /tv [SpielerID/Name]");
    	if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dich nicht selber Spectaten.");
		if(!IsPlayerConnected(pID))return NichtOnline
		if(IsPlayerNPC(pID))return SendClientMessage(playerid,COLOR_SORRY,"Das kannst keinen Bot Spectaten.");
		if(SpielerInfo[pID][sSpectate] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler spectatet bereits einen Spieler.");
		GetPlayerPos(playerid,SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ]);
		SpielerInfo[playerid][sInterior] = GetPlayerInterior(playerid);
		SpielerInfo[playerid][sVirtualWorld] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid,COLOR_INFO,"Hinweis: Benutze erneut '/tv' um das spionieren abzubrechen.");
		format(string,sizeof(string),"Du spionerst jetzt %s (ID:%d) aus.",SpielerInfo[pID][sName],pID);
		SendClientMessage(playerid,COLOR_SUPER,string);
		SetPlayerInterior(playerid,GetPlayerInterior(pID));
	 	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(pID));
	   	TogglePlayerSpectating(playerid,true);
	   	if(!IsPlayerInAnyVehicle(pID)) PlayerSpectatePlayer(playerid,pID);
		else  PlayerSpectateVehicle(playerid,GetPlayerVehicleID(pID));
	   	SpielerInfo[playerid][sSpectate] = pID;
	   	SetPVarInt(playerid,"SpectateMode",1);
	   	return 1;
	}
	else
	{
		TogglePlayerSpectating(playerid,false);
		SetPlayerPos(playerid,SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ]);
		SetPlayerVirtualWorld(playerid,SpielerInfo[playerid][sVirtualWorld]);
		SetPlayerInterior(playerid,SpielerInfo[playerid][sInterior]);
		SendClientMessage(playerid,COLOR_INFO,"Du spectatest nun nicht mehr.");
	    SpielerInfo[playerid][sSpectate] = 0;
	    DeletePVar(playerid,"SpectateMode");
	    return 1;
	}
}

ocmd:clearchat(playerid,params[])
{
	if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
	new string[164];
 	foreach(new i : Player)
	{
	    ClearChat(i,100);
	}
	format(string,128,"%s %s hat den Chat geleert.",AdminName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessageToAll(COLOR_INFO,string);
	return 1;
}

ocmd:giveexp(playerid,params[])
{
	new pID,Anzahl,string[144];
	if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
	if(sscanf(params,"ud",pID,Anzahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /giveexp [SpielerID] [Anzahl]");
	GivePlayerEXP(pID,Anzahl);
	format(string,sizeof(string),"Du hast %s %d EXP gegeben.",SpielerInfo[pID][sName],Anzahl);
	SendClientMessage(playerid,COLOR_INFO,string);
	format(string,sizeof(string),"%s %s hat dir %d EXP vergeben.",AdminName(playerid),SpielerInfo[playerid][sName],Anzahl);
	SendClientMessage(pID,COLOR_INFO,string);
	return 1;
}

ocmd:getinfo(playerid,params[])
{
	new carid, string[144];
    if(SpielerInfo[playerid][sAdmin] < 3)return NichtBerechtigt
    if(sscanf(params,"d",carid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /getinfo [FahrzeugID]");
    format(string,sizeof(string),"FahrzeugID:	%d - Fraktion:	%d - Nebenjob:	%d - Autohaus:	%d - Besitzer:	%s - Kennzeichen:	%s - DatenbankID:	%d",
	carid,
	FahrzeugInfo[carid][fFraktion],
	FahrzeugInfo[carid][fNebenjob],
	FahrzeugInfo[carid][fAutohaus],
	FahrzeugInfo[carid][fBesitzer],
	FahrzeugInfo[carid][fKennzeichen],
	FahrzeugInfo[carid][fDatabaseID]);
	SendClientMessage(playerid,COLOR_INFO,string);
	return 1;
}

//Fraktions Befehle
ocmd:gupgrade(playerid,params[])
{
	new gid, str[144];
    if(SpielerInfo[playerid][sAdmin] < 5)return NichtBerechtigt
    if(sscanf(params,"d",gid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gupgrade [GruppenID]");
    if(GruppenInfo[gid][gErstellt] == false)return SendClientMessage(playerid,COLOR_SORRY,"Diese GruppenID existiert nicht.");
    GruppenInfo[gid][gUpgrade][0] = 1;
	foreach(new i : Player)
	{
 	    if(SpielerInfo[i][sGruppe] != gid)continue;
		format(str,sizeof(str),"%s %s hat eurer Gruppe das Gehaltupgrade aktiviert.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendClientMessage(i,COLOR_INFO,str);
	}
	SendClientMessage(playerid,COLOR_SUPER,"Du hast der Gruppe erfolgreich das Upgrade freigeschaltet.");
	return 1;
}

ocmd:bombent(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 2 || SpielerInfo[playerid][sFraktion] != 6)return NichtBerechtigt
	for(new bombID = 0; bombID < 10; bombID++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,BombenInfo[bombID][bombPos][0],BombenInfo[bombID][bombPos][1],BombenInfo[bombID][bombPos][2]) && BombenInfo[bombID][bombcreate] == 1)
	    {
	        OnePlayAnim(playerid,"BOMBER","BOM_Plant",4.0,false,false,false,false,0);
	        BombenIDVar[playerid] = bombID;
			ShowPlayerDialog(playerid,DIALOG_BOMBE_ENT,DIALOG_STYLE_LIST,"Wähle den Draht","{FF0000}Rot\n{E1FF33}Gelb\n{66CC00}Grün","Weiter","Abbrechen");
			return true;
		}
	}
	return true;
}

ocmd:showammu(playerid,params[])
{
    new id;
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
    {
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    if(sscanf(params,"d",id))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /showammu [ID]");
			if(AmmunationInfo[id][amErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Dieses Ammunation existiert nicht.");
			SetPlayerCheckpoint(playerid,AmmunationInfo[id][amPos_X],AmmunationInfo[id][amPos_Y],AmmunationInfo[id][amPos_Z],2.5);
			SendClientMessage(playerid,COLOR_SORRY,"Marker zum angegebenen Ammunation, wurde gesetzt.");
		}
		else SendClientMessage(playerid,COLOR_SORRY,"* Du bist nicht im Dienst!");
		return 1;
	}
	else NichtBerechtigt
 	return 1;
}

ocmd:showstore(playerid,params[])
{
    new id;
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
    {
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    if(sscanf(params,"d",id))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /showstore [ID]");
			if(StoreInfo[id][siErstellt] == false)return SendClientMessage(playerid,COLOR_GREY,"Dieses 24/7 existiert nicht.");
			SetPlayerCheckpoint(playerid,StoreInfo[id][siPos_X],StoreInfo[id][siPos_Y],StoreInfo[id][siPos_Z],2.5);
			SendClientMessage(playerid,COLOR_SORRY,"Marker zum angegebenen 24/7, wurde gesetzt.");
		}
		else SendClientMessage(playerid,COLOR_SORRY,"* Du bist nicht im Dienst!");
		return 1;
	}
	else NichtBerechtigt
 	return 1;
}

ocmd:unmask(playerid,params[])
{
    new pID, string[144];
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
    {
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /unmask [SpielerID/Name]");
		    if(!IsPlayerConnected(pID))return NichtOnline
	    	if(GetDistanceBetweenPlayers(playerid, pID) >= 7)return NichtNahe
	    	if(GetPVarInt(pID,"Getazert") == 1 || GetPVarInt(pID,"Handschellen") == 1)
	    	{
				if(SpielerInfo[pID][sFraktion] == 2 || SpielerInfo[pID][sFraktion] == 6)
				{
			        if(GetPVarInt(pID,"CopMaske") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat keine Maske auf.");
			        else if(GetPVarInt(playerid,"CopMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, pID, true);}
			            DeletePVar(pID,"CopMaske");
			            format(string,sizeof(string),"* %s %s zieht die Maske von einer Person herunter.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }
				}
				else if(SpielerInfo[pID][sFraktion] == 19)
				{
	   				if(GetPVarInt(pID,"HitmanMaske") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat keine Maske auf.");
			        else if(GetPVarInt(playerid,"HitmanMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, pID, true);}
			            DeletePVar(pID,"HitmanMaske");
			            format(string,sizeof(string),"* %s %s zieht die Maske von einer Person herunter.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }
				}
				else if(SpielerInfo[pID][sGruppe] == 1)
				{
					if(GetPVarInt(pID,"GruppenMaske") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat keine Maske auf.");
			        else if(GetPVarInt(playerid,"GruppenMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, pID, true);}
			            DeletePVar(pID,"GruppenMaske");
			            format(string,sizeof(string),"* %s %s zieht die Maske von einer Person herunter.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }
				}
				else SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat keine Maske auf.");
		        return 1;
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler muss entweder getazert sein oder Handschellen an haben.");
			return 1;
		}
		else SendClientMessage(playerid,COLOR_SORRY,"* Du bist nicht im Dienst!");
		return 1;
	}
 	else NichtBerechtigt
 	return 1;
}

ocmd:mautstationen(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
 	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    SendClientMessage(playerid,COLOR_WHITE," ");
		    SendClientMessage(playerid,COLOR_WHITE,"|__________ {FF0000}Mautstationen{FFFFFF} __________|");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 1: {FF0000}LS nach SF{FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 2: {FF0000}SF nach LS{FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 3: {FF0000}SF (Tunnel) nach LS (Tunnel){FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 4: {FF0000}LS (Tunnel) nach SF (Tunnel){FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 5: {FF0000}Blueberryfarm LS/LV nach LV/LS{FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 6: {FF0000}Brücke LV - LS{FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE,"	Mautstation 7: {FF0000}Brücke LS - LV{FFFFFF}");
		    SendClientMessage(playerid,COLOR_WHITE," ");
		}
 		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
 		return 1;
 	}
 	else NichtBerechtigt
 	return 1;
}
ocmd:mautkontrolle(playerid,params[])
{
	new Auswahl;
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
 	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    if(sscanf(params,"d",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /mautkontrolle [MautID(1-7)]");
	        if(Auswahl < 1 || Auswahl > 7)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /mautkontrolle [MautID(1-7)]");
		    if(Auswahl == 1)//LS-SF
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,56.1354,-1525.3245,4.9989))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 1.");
				if(MautStatus[0] == false)
 				{
					MautStatus[0] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 1 geschlossen.");
 				}
 				else if(MautStatus[0] == true)
 				{
					MautStatus[0] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 1 geöffnet.");
 				}
 				return 1;
			}
			else if(Auswahl == 2)//SF-LS
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,49.5451,-1538.1730,5.1519))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 2.");
				if(MautStatus[1] == false)
 				{
					MautStatus[1] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 2 geschlossen.");
 				}
 				else if(MautStatus[1] == true)
 				{
					MautStatus[1] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 2 geöffnet.");
 				}
 				return 1;
			}
			else if(Auswahl == 3)//SFTunnel - LSTunnel
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,26.1980,-1338.1219,10.1589))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 3.");
				if(MautStatus[2] == false)
 				{
					MautStatus[2] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 3 geschlossen.");
 				}
 				else if(MautStatus[2] == true)
 				{
					MautStatus[2] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 3 geöffnet.");
 				}
 				return 1;
			}
			else if(Auswahl == 4)//LSTunnel - SFTunnel
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,-1.1519,-1323.5649,11.2628))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 4.");
				if(MautStatus[3] == false)
 				{
					MautStatus[3] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 4 geschlossen.");
 				}
 				else if(MautStatus[3] == true)
 				{
					MautStatus[3] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 4 geöffnet.");
 				}
 				return 1;
			}
			else if(Auswahl == 5)
			{
				if(IsPlayerInRangeOfPoint(playerid,3.5,523.5012,469.5414,18.9297) ||//LS - LV
				IsPlayerInRangeOfPoint(playerid,3.5,518.9169,475.9107,18.9297))//LV - LS
        		{
					if(MautStatus[4] == false)
	 				{
						MautStatus[4] = true;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 5 geschlossen.");
	 				}
	 				else if(MautStatus[4] == true)
	 				{
						MautStatus[4] = false;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 5 geöffnet.");
	 				}
	 				return 1;
				}
				else SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 5.");
				return 1;
			}
			else if(Auswahl == 6)//LV-LS
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,1730.1222,520.3935,28.2204))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 6.");
				if(MautStatus[5] == false)
 				{
					MautStatus[5] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 6 geschlossen.");
 				}
 				else if(MautStatus[5] == true)
 				{
					MautStatus[5] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 6 geöffnet.");
 				}
 				return 1;
			}
			else if(Auswahl == 7)//LS-LV
			{
				if(!IsPlayerInRangeOfPoint(playerid,3.5,1743.9443,515.8735,28.2149))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Mautstation 7.");
				if(MautStatus[6] == false)
 				{
					MautStatus[6] = true;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 7 geschlossen.");
 				}
 				else if(MautStatus[6] == true)
 				{
					MautStatus[6] = false;
					SendClientMessage(playerid,COLOR_SUPER,"Du hast die Mautstation 7 geöffnet.");
 				}
 				return 1;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:showmarke(playerid,params[])
{
	new pID, string[144];
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
 	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /showmarke [SpielerID/Name]");
			if(!IsPlayerConnected(playerid))return NichtOnline
			if(GetDistanceBetweenPlayers(playerid, pID) >= 7)return NichtNahe
			format(string,sizeof(string),"* %s %s zeigt %s seine Dienstmarke",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
			ProxDetector(7, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string,sizeof(string),"|*** Dienstmarke von {FF0000}%s{FFFFFF} ***|",SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_WHITE,string);
			format(string,sizeof(string),"Name: {FF0000}%s",SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_WHITE,string);
			format(string,sizeof(string),"Fraktion: {FF0000}%s",FrakName(SpielerInfo[playerid][sFraktion]));
			SendClientMessage(pID,COLOR_WHITE,string);
			format(string,sizeof(string),"Rang: {FF0000}%s",RangName(playerid));
			SendClientMessage(pID,COLOR_WHITE,string);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
 	}
 	else NichtBerechtigt
 	return 1;
}

ocmd:c4(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 20)return NichtBerechtigt
    new string[175];
	format(string,sizeof(string),"{007DFF}C4 Gürtel: {FFFFFF}%d Sprengstoff",SpielerInfo[playerid][sc4]);
	SendClientMessage(playerid,COLOR_GREY,string);
	return true;
}

ocmd:takeoutfit(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 20)return NichtBerechtigt
    new string[125],pID;
	if(sscanf(params,"u",pID)) return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /takeoutfit [SpielerID/Name]");
    if(!ProxDetectorS(5.0,playerid,pID))return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist nicht in deiner Nähe!");
    if(IsPlayerNPC(pID)) return SendClientMessage(playerid,COLOR_SORRY,"Bei NPC´s nicht möglich!");
    if(pID == playerid) return SendClientMessage(playerid,COLOR_SORRY,"An dir selbst nicht möglich!");
    Knockout(pID,playerid);
    OnePlayAnim(playerid,"BOMBER","BOM_Plant",4.0,false, false, false, false,0);
    ApplyAnimation(pID, "CRACK","crckdeth1", 4.0, false, true, true, true, 0, SYNC_ALL);
	format(string,sizeof(string),"Du hast %s niedergeschlagen!",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_INFO,string);
	SendClientMessage(playerid,COLOR_INFO,"Du wurdest niedergeschlagen!");
    return true;
}

ocmd:legbombe(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 20)return NichtBerechtigt
    if(SpielerInfo[playerid][sc4] < 10) return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend C4 dabei! Mindestens: 10");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid,x,y,z);
    for(new bomb = 0; bomb < 10; bomb++)
    {
        if(BombenInfo[bomb][bombcreate] != 1)
        {
            BombenInfo[bomb][bombid] = bomb;
			BombenInfo[bomb][bombPos][0] = x;
			BombenInfo[bomb][bombPos][1] = y;
			BombenInfo[bomb][bombPos][2] = z;
			BombenIDVar[playerid] = BombenInfo[bomb][bombid];
			ShowPlayerDialog(playerid,DIALOG_BOMBE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Drahtfarbe","{FF0000}Rot\n{E1FF33}Gelb\n{66CC00}Grün","Weiter","Abbrechen");
			return true;
		}
	}
	return true;
}

ocmd:selbstmord(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 20)return NichtBerechtigt
    if(SpielerInfo[playerid][sc4] < 7) return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend C4 dabei! Mindestens: 7");
    new Float:x, Float:y, Float:z,
        randomradius = random(35) + 5;
    GetPlayerPos(playerid,x,y,z);
    SetPlayerHealth(playerid,0);
    SpielerInfo[playerid][sc4] -= 7;
    CreateExplosion(x+1,y+1,z,7,randomradius);
    CreateExplosion(x,y,z,7,randomradius);
    CreateExplosion(x-1,y-1,z,7,randomradius);
    CreateExplosion(x-1.5,y-1.5,z,7,randomradius);
    CreateExplosion(x+1.5,y+1.5,z,7,randomradius);
    GameTextForPlayer(playerid,"~r~Selbstmord!",5000,1);
	for(new i = 0; i< MAX_PLAYERS; i++)
	{
	    if(IsPlayerInRangeOfPoint(i,15.0,x,y,z))
	    {
	        SetPlayerHealth(i,0);
		}
	}
	return true;
}

ocmd:contracts(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 19)return NichtBerechtigt
	foreach(new i : Player)
	{
	    new string[128];
	    if(SpielerInfo[i][sContract] != 1)continue;
     	mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `contracts` WHERE `Contract` = '%s'", SpielerInfo[i][sName]);
   	 	mysql_tquery(sqlHandle, string, "onShowHitmanContracts", "i", playerid);
	}
	return 1;
}

ocmd:repair(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 2)return NichtBerechtigt
	if(GetPVarInt(playerid,"CopDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Nur im Fahrzeug möglich.");
	new string[144], pID, Preis, tmpcar = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(tmpcar) != 552)return SendClientMessage(playerid,COLOR_GREY,"Nur im Mechaniker Fahrzeug möglich.");
	if(sscanf(params,"ud",pID,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /repair [SpielerID/Name] [Kosten]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(GetDistanceBetweenPlayers(playerid, pID) >= 7)return NichtNahe
	new PLAYER_STATE:State=GetPlayerState(pID);
 	if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du angegebene Spieler ist nicht der Fahrer dieses Fahrzeugs.");
	format(string,sizeof(string),"Du bietest dem Fahrer {FF0000}%s{00CDFF} eine Fahrzeugreparatur in Höhe von {FF0000}%d${00CDFF} an.",SpielerInfo[pID][sName],Preis);
	SendClientMessage(playerid,COLOR_INFO,string);
	format(string,sizeof(string),"{FF0000}%s %s{00CDFF} bietet dir eine Fahrzeugreparatur in Höhe von {FF0000}%d${00CDFF} an.",RangName(playerid),SpielerInfo[playerid][sName],Preis);
	SendClientMessage(pID,COLOR_INFO,string);
	SendClientMessage(pID,COLOR_INFO,"Benutze '{FF0000}/accept repair{00CDFF}' um die Fahrzeugreparatur anzunehmen.");
	SetPVarInt(pID,"MechanikerID",playerid);
	SetPVarInt(pID,"MechanikerPreis",Preis);
	return 1;
}

ocmd:gangwar(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] < 9)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Gang/Mafia.");
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
	new FraktionsID;
	if(sscanf(params,"i",FraktionsID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gangwar [FraktionsID] (/fl für eine Liste der Fraktionen)");
	if(FraktionsID < 9 || FraktionsID > 18)return SendClientMessage(playerid,COLOR_YELLOW,"* Du kannst nur Fraktion 9 - 18 den Krieg erklären! (/fl für eine Liste der Fraktionen)");
	if(FraktionsID == SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_GREY,"* Du kannst deiner eigenen Fraktion nicht den Krieg erklären!");
	if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarGegner] != 0)return SendClientMessage(playerid,COLOR_GREY,"* Deine Fraktion befindet sich schon im Krieg!");
	if(FrakInfo[FraktionsID][fiWarGegner] != 0)return SendClientMessage(playerid,COLOR_GREY,"* Diese Fraktion befindet sich bereits im Krieg! (/gangwars für eine Liste der Kriege)");
	new string[200], string2[200];
	format(string,sizeof(string),"[GANGWAR] Die Fraktion '%s' hat der Fraktion '%s' den Krieg erklärt!",FrakName(SpielerInfo[playerid][sFraktion]),FrakName(FraktionsID));
	SendICPMessage(string);
	format(string,sizeof(string),"[GANGWAR] Die Fraktion '%s' hat euch den Krieg erklärt!",FrakName(SpielerInfo[playerid][sFraktion]));
	format(string2,sizeof(string2),"[GANGWAR] Ihr habt der Fraktion '%s' den Krieg erklärt!",FrakName(FraktionsID));
	FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarGegner] = FraktionsID;
	FrakInfo[FraktionsID][fiWarGegner] = SpielerInfo[playerid][sFraktion];
	FrakInfo[SpielerInfo[playerid][sFraktion]][fiWarPoints] = 0;
	FrakInfo[FraktionsID][fiWarPoints] = 0;
	foreach(new i : Player)
	{
	    if(SpielerInfo[i][sFraktion] == FraktionsID)
	    {
	        SendClientMessage(i,COLOR_WHITE," ");
	        SendClientMessage(i,COLOR_GANGFIGHT,string);
	        SendClientMessage(i,COLOR_SUPER,"[GANGWAR] Der Krieg hat begonnen. Die Fraktion die zuerst 50 Kills hat, ist die bessere!");
	    }
	    else if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
	    {
	        SendClientMessage(i,COLOR_WHITE," ");
	        SendClientMessage(i,COLOR_GANGFIGHT,string2);
	        SendClientMessage(i,COLOR_SUPER,"[GANGWAR] Der Krieg hat begonnen. Die Fraktion die zuerst 50 Kills hat, ist die bessere!");
	    }
	}
	return 1;
}

ocmd:addblitzer(playerid,params[])
{
	new geschw,ortschaft[64];
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(GetPlayerInterior(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"In einem Interior kannst du keinen Blitzer aufstellen.");
			if(sscanf(params,"ds",geschw,ortschaft)) return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /addblitzer [Geschwindigkeit] [Ortsname]");
			if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		 	if(CreateBlitzer(playerid,geschw,ortschaft) == -1)return SendClientMessage(playerid,COLOR_GREY,"Du kannst nicht mehr Blitzer erstellen.");
			return 1;
  		}
  		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
  		return 1;
    }
    else NichtBerechtigt
	return 1;
}

ocmd:delblitzer(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
			DeleteBlitzer(playerid);
			return 1;
		}
  		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
  		return 1;
    }
    else NichtBerechtigt
	return 1;
}

ocmd:delallblitzer(playerid,params[])
{
	new string[128];
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
			SendClientMessageToAll(COLOR_BLUE, "");
			SendClientMessageToAll(COLOR_BLUE, "_______[ Regierungsnachricht ]_______");
			format(string,sizeof(string),"%s %s hat alle Blitzer entfernt.",RangName(playerid),SpielerInfo[playerid][sName]);
			SendClientMessageToAll(COLOR_BLUE,string);
			DeleteAllBlitzer();
			return 1;
  		}
  		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
  		return 1;
    }
    else NichtBerechtigt
	return 1;
}

ocmd:blitzerinfo(playerid,params[])
{
	new string[128],merker = true;
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			SendClientMessage(playerid,COLOR_WHITE,">>>>> {FF0000}Aktuelle Blitzer{FFFFFF} <<<<<");
		    for(new i=0;i<MAX_BLITZER;i++)
			{
				if(Blitzer[i][Erstellt] == true)
				{
					format(string,sizeof(string),"Blitzer %i : Richtgeschwindigkeit %i Km/h : Standort %s",i,Blitzer[i][Geschwindigkeit],Blitzer[i][BlitzerOrt]);
					SendClientMessage(playerid,COLOR_YELLOW,string);
					merker = false;
				}
		  	}
		  	if(merker)
		  	{
			  	SendClientMessage(playerid,COLOR_GREY,"Es wurden keine Blitzer errichtet.");
		  		return 1;
			}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:orten(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
	    {
			new vehid;
			if(sscanf(params,"i",vehid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /orten [FahrzeugID]");
			if(!IsValidVehicle(vehid))return SendClientMessage(playerid,COLOR_GREY,"GPS-ORTUNG: Das Fahrzeug konnte nicht ermittelt werden (StatusC=404NotFound)");
			new Float:gpsOrtPos[3];
			GetVehiclePos(vehid,gpsOrtPos[0],gpsOrtPos[1],gpsOrtPos[2]);
			SetPlayerCheckpoint(playerid,gpsOrtPos[0],gpsOrtPos[1],gpsOrtPos[2],4.0);
			SendClientMessage(playerid,COLOR_GREY,"GPS-ORTUNG: Das Fahrzeug wurde geortet (StatusC=100CPSet)");
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:takegun(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
	    {
		    new pID, waffenid;
		    if(sscanf(params,"ui",pID,waffenid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /takegun [SpielerID] [WaffenID]");
		    if(waffenid < 1 || waffenid > 48)return SendClientMessage(playerid,COLOR_GREY,"Gebe eine gültige WaffenID an.");
		    if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
		    RemovePlayerWeapon(pID,WEAPON:waffenid);
			new string[128];
			format(string,sizeof(string),"%s %s nimmt %s eine Waffe weg.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:takeguns(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
	    {
		    new pID;
		    if(sscanf(params,"ui",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /takeguns [SpielerID]");
		    if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
		    ResetPlayerWeapons(pID);
			new string[128];
			format(string,sizeof(string),"%s %s nimmt %s alle Waffen weg.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:checkgun(playerid,params[])
{
	new pID, Waffe, Munition, string[128], marker = true;
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sAdmin] >= 2)
	{
	 	if(SpielerInfo[playerid][sAdmin] >= 2 || GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
	 	{
		 	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /checkgun [SpielerID/Name]");
		 	if(!IsPlayerConnected(pID))return NichtOnline
		 	if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
			format(string,sizeof(string),"[_____Waffen von {FF0000}%s{FFFFFF}_____]",SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			for(new i=0;i<13;i++)
			{
				GetPlayerWeaponData(pID,WEAPON_SLOT:i,WEAPON:Waffe,Munition);
				if(Waffe != 0)
				{
					format(string,sizeof(string),"Waffenslot %d: %s %d Munition",i,WaffenName(Waffe),Munition);
					SendClientMessage(playerid,COLOR_INFO,string);
					marker = false;
				}
			}
			if(marker)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Der Spieler hat keine Waffen dabei.");
			    return 1;
			}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:givepunkte(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
 		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new string[128], Auswahl[20], pID, Anzahl, Grund[64];
			if(sscanf(params,"usds",pID,Auswahl,Anzahl,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /givepunkte [SpielerID/Name] [Autoschein|Motorradschein|Flugschein|LKWschein|Bootsschein] [Anzahl] [Grund]");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dir selber keine Punkte eintragen.");
			if(strcmp(Auswahl, "Autoschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sCarLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Autoschein.");
	    	    new Punkte = SpielerInfo[pID][stvoCarLic]+Anzahl;
	    	    if(Punkte < 10)
	    	    {
	    	        SpielerInfo[pID][stvoCarLic] += Anzahl;
	    	        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Autoschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Autoschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
	    	    }
	    	    else
	    	    {
	    	        SpielerInfo[pID][stvoCarLic] = 0;
	    	        SpielerInfo[pID][sCarLic] = 0;
		        	format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Autoschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        SendClientMessage(pID,COLOR_SORRY,"Dir wurde dein Autoschein entzogen, weil du mehr als 10 Strafpunkte oder 10 Strafpunkte hast.");
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Autoschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        format(string,sizeof(string),"Dem %s wurde sein Autoschein entzogen.",SpielerInfo[pID][sName]);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
			 	}
	    	}
			else if(strcmp(Auswahl, "Motorradschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sBikeLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Motorradschein.");
	    	    new Punkte = SpielerInfo[pID][stvoBikeLic]+Anzahl;
	    	    if(Punkte < 10)
	    	    {
	    	        SpielerInfo[pID][stvoBikeLic] += Anzahl;
	    	        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Motorradschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Motorradschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
	    	    }
	    	    else
	    	    {
	    	        SpielerInfo[pID][stvoBikeLic] = 0;
	    	        SpielerInfo[pID][sBikeLic] = 0;
		        	format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Motorradschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        SendClientMessage(pID,COLOR_SORRY,"Dir wurde dein Motorradschein entzogen, weil du mehr als 10 Strafpunkte oder 10 Strafpunkte hast.");
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Motorradschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        format(string,sizeof(string),"Dem %s wurde sein Motorradschein entzogen.",SpielerInfo[pID][sName]);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
			 	}
	    	}
			else if(strcmp(Auswahl, "Flugschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sFlugLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Flugschein.");
	    	    new Punkte = SpielerInfo[pID][stvoFlugLic]+Anzahl;
	    	    if(Punkte < 10)
	    	    {
	    	        SpielerInfo[pID][stvoFlugLic] += Anzahl;
	    	        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Flugschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Flugschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
	    	    }
	    	    else
	    	    {
	    	        SpielerInfo[pID][stvoFlugLic] = 0;
	    	        SpielerInfo[pID][sFlugLic] = 0;
		        	format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Flugschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        SendClientMessage(pID,COLOR_SORRY,"Dir wurde dein Flugschein entzogen, weil du mehr als 10 Strafpunkte oder 10 Strafpunkte hast.");
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Flugschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        format(string,sizeof(string),"Dem %s wurde sein Flugschein entzogen.",SpielerInfo[pID][sName]);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
			 	}
	    	}
			else if(strcmp(Auswahl, "LKWschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sTruckLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein LKWschein.");
	    	    new Punkte = SpielerInfo[pID][stvoTruckLic]+Anzahl;
	    	    if(Punkte < 10)
	    	    {
	    	        SpielerInfo[pID][stvoTruckLic] += Anzahl;
	    	        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den LKWschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den LKWschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
	    	    }
	    	    else
	    	    {
	    	        SpielerInfo[pID][stvoTruckLic] = 0;
	    	        SpielerInfo[pID][sTruckLic] = 0;
		        	format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den LKWschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        SendClientMessage(pID,COLOR_SORRY,"Dir wurde dein LKWschein entzogen, weil du mehr als 10 Strafpunkte oder 10 Strafpunkte hast.");
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den LKWschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        format(string,sizeof(string),"Dem %s wurde sein LKWschein entzogen.",SpielerInfo[pID][sName]);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
			 	}
	    	}
			else if(strcmp(Auswahl, "Bootsschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sBootLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Bootsschein.");
	    	    new Punkte = SpielerInfo[pID][stvoBootLic]+Anzahl;
	    	    if(Punkte < 10)
	    	    {
	    	        SpielerInfo[pID][stvoBootLic] += Anzahl;
	    	        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Bootsschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Bootsschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
	    	    }
	    	    else
	    	    {
	    	        SpielerInfo[pID][stvoBootLic] = 0;
	    	        SpielerInfo[pID][sBootLic] = 0;
		        	format(string,sizeof(string),"%s %s hat dir %d Punkte für den Bootsschein eingetragen. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
	    	        SendClientMessage(pID,COLOR_SORRY,string);
	    	        SendClientMessage(pID,COLOR_SORRY,"Dir wurde dein Bootsschein entzogen, weil du mehr als 10 Strafpunkte oder 10 Strafpunkte hast.");
	    	        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Bootsschein eingetragen. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        format(string,sizeof(string),"Dem %s wurde sein Bootsschein entzogen.",SpielerInfo[pID][sName]);
	    	        SendClientMessage(playerid,COLOR_SUPER,string);
	    	        return 1;
			 	}
	    	}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:delpunkte(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    if(SpielerInfo[playerid][sRank] < 6)return SendClientMessage(playerid,COLOR_SORRY,"Du benötigst min. den Co-Leader Rang, um Punkte zu entfernen.");
   		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new string[144], Auswahl[20], pID, Anzahl, Grund[64];
			if(sscanf(params,"usds[64]",pID,Auswahl,Anzahl,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /delpunkte [SpielerID/Name] [Autoschein|Motorradschein|Flugschein|LKWschein|Bootsschein] [Anzahl] [Grund]");
			if(!IsPlayerConnected(pID))return NichtOnline
            if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dir keine Punkte aus deiner eigenen Akte entfernen.");
			if(strcmp(Auswahl, "Autoschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sCarLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Autoschein.");
				if(SpielerInfo[pID][stvoCarLic] < Anzahl)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt nicht so viele Strafpunkte.");
		        SpielerInfo[pID][stvoCarLic] -= Anzahl;
		        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Autoschein entfernt. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
		        SendClientMessage(pID,COLOR_SORRY,string);
		        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Autoschein entfernt. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        return 1;
	    	}
			else if(strcmp(Auswahl, "Motorradschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sBikeLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Motorradschein.");
				if(SpielerInfo[pID][stvoBikeLic] < Anzahl)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt nicht so viele Strafpunkte.");
		        SpielerInfo[pID][stvoBikeLic] -= Anzahl;
		        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Motorradschein entfernt. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
		        SendClientMessage(pID,COLOR_SORRY,string);
		        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Motorradschein entfernt. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        return 1;
	    	}
			else if(strcmp(Auswahl, "Flugschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sFlugLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Flugschein.");
	            if(SpielerInfo[pID][stvoFlugLic] < Anzahl)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt nicht so viele Strafpunkte.");
		        SpielerInfo[pID][stvoFlugLic] -= Anzahl;
		        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Flugschein entfernt. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
		        SendClientMessage(pID,COLOR_SORRY,string);
		        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Flugschein entfernt. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        return 1;
	    	}
			else if(strcmp(Auswahl, "LKWschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sTruckLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein LKWschein.");
	    	    if(SpielerInfo[pID][stvoTruckLic] < Anzahl)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt nicht so viele Strafpunkte.");
		        SpielerInfo[pID][stvoTruckLic] -= Anzahl;
		        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den LKWschein entfernt. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
		        SendClientMessage(pID,COLOR_SORRY,string);
		        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den LKWschein entfernt. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        return 1;
	    	}
			else if(strcmp(Auswahl, "Bootsschein", true, strlen(Auswahl)) == 0)
	    	{
	    	    if(SpielerInfo[pID][sBootLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Bootsschein.");
				if(SpielerInfo[pID][stvoBootLic] < Anzahl)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt nicht so viele Strafpunkte.");
		        SpielerInfo[pID][stvoBootLic] -= Anzahl;
		        format(string,sizeof(string),"%s %s hat dir %d Strafpunkt(e) für den Bootsschein entfernt. Grund: %s",RangName(playerid),SpielerInfo[playerid][sName],Anzahl,Grund);
		        SendClientMessage(pID,COLOR_SORRY,string);
		        format(string,sizeof(string),"Du hast dem %s %d Strafpunkt(e) für den Bootsschein entfernt. Grund: %s",SpielerInfo[pID][sName],Anzahl,Grund);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        return 1;
	    	}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:strafpunkte(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
   		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    new pID, string[300];
		    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /strafpunkte [SpielerID/Name]");
		    if(!IsPlayerConnected(pID))return NichtOnline
			format(string,sizeof(string),"{FFFFFF}Strafpunkte von {FF0000}%s\n\n{FFFFFF}Autoschein:		{FF0000}%d{FFFFFF}/10 Strafpunkte\nMotorradschein:	{FF0000}%d{FFFFFF}/10 Strafpunkte\nFlugschein:		{FF0000}%d{FFFFFF}/10 Strafpunkte\nLKWschein:		{FF0000}%d{FFFFFF}/10 Strafpunkte\nBootsschein:		{FF0000}%d{FFFFFF}/10 Strafpunkte",
			SpielerInfo[pID][sName],SpielerInfo[pID][stvoCarLic],SpielerInfo[pID][stvoBikeLic],SpielerInfo[pID][stvoFlugLic],SpielerInfo[pID][stvoTruckLic],SpielerInfo[pID][stvoBootLic]);
			ShowPlayerDialog(playerid,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Strafpunkte",string,"Weiter","");
		    return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd@2:m,megaphone(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 0 && SpielerInfo[playerid][sFraktion] < 9)
	{
		new string[144], Text[128];
 		if(SpielerInfo[playerid][sMuted] > 0)
	    {
	        format(string,sizeof(string),"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
	        SendClientMessage(playerid,COLOR_RED,string);
	        return 1;
	    }
		if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /m(egaphone) [Text]");
		format(string,sizeof(string),">> %s << %s %s: %s",FrakKurzel(SpielerInfo[playerid][sFraktion]),RangName(playerid),SpielerInfo[playerid][sName],Text);
		ProxDetector(25, playerid, string,0xF5FF00FF,0xF5FF00FF,0xF5FF00FF,0xF5FF00FF,0xF5FF00FF);
		return 1;
	}
	return NichtBerechtigt
}

ocmd@2:d,department(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 0 && SpielerInfo[playerid][sFraktion] < 9)
	{
		new string[144], Text[128];
 		if(SpielerInfo[playerid][sMuted] > 0)
	    {
	        format(string,sizeof(string),"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
	        SendClientMessage(playerid,COLOR_RED,string);
	        return 1;
	    }
		if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /d(epartment) [Nachricht]");
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] != 0 && SpielerInfo[i][sFraktion] < 9)
		    {
			    format(string,sizeof(string),"%s %s: %s",FrakKurzel(SpielerInfo[playerid][sFraktion]),SpielerInfo[playerid][sName],Text);
			    SendClientMessage(i,0xFF3E3FFF,string);
			}
		}
		format(string,sizeof(string),"* %s %s spricht in sein Funkgerät.",RangName(playerid),SpielerInfo[playerid][sName]);
		ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:gc(playerid,params[])
{
	new Text[128], string[144];
	if(SpielerInfo[playerid][sGruppe] == 0)return NichtBerechtigt
 	if(SpielerInfo[playerid][sMuted] > 0)
    {
        format(string,sizeof(string),"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
        SendClientMessage(playerid,COLOR_RED,string);
        return 1;
    }
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gc [Nachricht]");
	foreach(new i : Player)
	{
		if(SpielerInfo[i][sGruppe] != SpielerInfo[playerid][sGruppe])continue;
		format(string,128,"[Gruppenchat]: %s %s sagt: %s",GRangName(playerid),SpielerInfo[playerid][sName],Text);
		SendClientMessage(i,COLOR_ORANGE,string);
	}
	return 1;
}

ocmd:ginvite(playerid,params[])
{
	if(SpielerInfo[playerid][sGRank] < 6)return NichtBerechtigt
	new pID, string[464];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ginvite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sGruppe] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist bereits in einer Gruppe.");
	if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat noch nicht das zweite Level erreicht.");
	format(string,128,"Du hast den %s in die Gruppe eingeladen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	format(string,sizeof(string),"{FFFFFF}Lieber %s\n\nDie Gruppe '{007DFF}%s{FFFFFF}' hat dich soeben eingeladen ein Teil von ihr zu werden.\nDu kannst das Angebot ablehnen, solltest du es annehmen beachte bitte die Regeln für die Gruppe.\nFalls es in der Gruppe Probleme gibt und kannst du ein Teammitglied kontaktieren.",SpielerInfo[pID][sName],GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
	ShowPlayerDialog(pID,DIALOG_GRUPPEN_INVITE,DIALOG_STYLE_MSGBOX,"{007DFF}Gruppeninvite",string,"Annehmen","Ablehnen");
	SetPVarInt(pID,"InvitedPID",playerid);
	return 1;
}

ocmd:guninvite(playerid,params[])
{
	if(SpielerInfo[playerid][sGRank] < 6)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /guninvite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(playerid == pID)return SendClientMessage(playerid,COLOR_GREY,"Du kannst dich nicht selber aus der Gruppe schmeißen.");
	if(SpielerInfo[pID][sGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist nicht in deiner Gruppe.");
	if(SpielerInfo[pID][sGRank] == 7)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst keinen Leader uninviten.");
	SpielerInfo[pID][sGruppe] = 0;
	SpielerInfo[pID][sGRank] = 0;
	SpielerInfo[pID][sGHaus] = 0;
	format(string,128,"Du hast den Spieler %s aus deiner Gruppe geschmissen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SORRY,string);
	format(string,128,"%s %s hat dich aus der Gruppe geschmissen.",GRangName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	return 1;
}

ocmd:fc(playerid,params[])
{
	new Text[128], string[144];
	if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
 	if(SpielerInfo[playerid][sMuted] > 0)
    {
        format(string,sizeof(string),"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
        SendClientMessage(playerid,COLOR_RED,string);
        return 1;
    }
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /fc [Nachricht]");
	foreach(new i : Player)
	{
		if(SpielerInfo[i][sFirma] != SpielerInfo[playerid][sFirma])continue;
		format(string,128,"[Firmenchat]: %s %s sagt: %s",FRangName(playerid),SpielerInfo[playerid][sName],Text);
		SendClientMessage(i,COLOR_ORANGE,string);
	}
	return 1;
}

ocmd:finvite(playerid,params[])
{
	if(SpielerInfo[playerid][sFRank] < 6)return NichtBerechtigt
	new pID, string[464];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /finvite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sFirma] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist bereits in einer Firma.");
	if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat noch nicht das zweite Level erreicht.");
	format(string,128,"Du hast den %s in die Firma eingeladen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	format(string,sizeof(string),"{FFFFFF}Lieber %s\n\nDie Firma '{007DFF}%s{FFFFFF}' hat dich soeben eingeladen ein Teil von ihr zu werden.\nDu kannst das Angebot ablehnen, solltest du es annehmen beachte bitte die Regeln für die Firma.\nFalls es in der Firma Probleme gibt und kannst du ein Teammitglied kontaktieren.",SpielerInfo[pID][sName],FirmenInfo[SpielerInfo[playerid][sFirma]][fName]);
	ShowPlayerDialog(pID,DIALOG_FIRMEN_INVITE,DIALOG_STYLE_MSGBOX,"{007DFF}Firmeninvite",string,"Annehmen","Ablehnen");
	SetPVarInt(pID,"InvitedPID",playerid);
	return 1;
}

ocmd:funinvite(playerid,params[])
{
	if(SpielerInfo[playerid][sFRank] < 6)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /funinvite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(playerid == pID)return SendClientMessage(playerid,COLOR_GREY,"Du kannst dich nicht selber aus der Firma schmeißen.");
	if(SpielerInfo[pID][sFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist nicht in deiner Firma.");
	if(SpielerInfo[pID][sFRank] == 7)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst keinen Leader uninviten.");
	SpielerInfo[pID][sFirma] = 0;
	SpielerInfo[pID][sFRank] = 0;
	SpielerInfo[pID][sGFirma] = 0;
	format(string,128,"Du hast den Spieler %s aus deiner Firma geschmissen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SORRY,string);
	format(string,128,"%s %s hat dich aus der Firma geschmissen.",FRangName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	return 1;
}

ocmd:setteam(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
	new pID, Team, string[144];
	if(sscanf(params,"ud",pID,Team))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setteam [SpielerID] [Team]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sFraktion] != 5)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht in deiner Fraktion.");
	SpielerInfo[pID][sTeam] = Team;
	if(Team == 0){format(string,sizeof(string),"Spieler %s wurde den Sanitäter-Rang erteilt.",SpielerInfo[pID][sName]);}
	else if(Team == 1){format(string,sizeof(string),"Spieler %s wurde den Feuerwehr-Rang erteilt.",SpielerInfo[pID][sName]);}
	SendClientMessage(playerid,COLOR_SUPER,string);
	if(Team == 0){format(string,sizeof(string),"%s %s hat dir den Sanitäter-Rang erteilt.",RangName(playerid),SpielerInfo[playerid][sName]);}
	else if(Team == 1){format(string,sizeof(string),"%s %s hat dir den Feuerwehr-Rang erteilt.",RangName(playerid),SpielerInfo[playerid][sName]);}
	SendClientMessage(pID,COLOR_SUPER,string);
	return 1;
}

ocmd:invite(playerid,params[])
{
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
	new pID, string[464];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /invite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sFraktion] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist bereits in einer Fraktion.");
	if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler hat nicht das zweite Level erreicht.");
	format(string,128,"Du hast den %s in die Fraktion eingeladen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	format(string,sizeof(string),"{FFFFFF}Lieber %s\n\nDie Fraktion '{007DFF}%s{FFFFFF}' hat dich soeben eingeladen ein Teil von ihr zu werden.\nDu kannst das Angebot ablehnen, solltest du es annehmen beachte bitte die Regeln für Fraktionen\nim Forum. Du hast dann eine Art Mindesvertragslaufzeit. Falls es in der Fraktion Probleme gibt und kannst du ein Teammitglied kontaktieren.",SpielerInfo[pID][sName],FrakName(SpielerInfo[playerid][sFraktion]));
	ShowPlayerDialog(pID,DIALOG_INVITE,DIALOG_STYLE_MSGBOX,"{007DFF}Fraktionsinvite",string,"Annehmen","Ablehnen");
	SetPVarInt(pID,"InvitedPID",playerid);
	return 1;
}

ocmd:uninvite(playerid,params[])
{
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
	new pID, string[128];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /uninvite [SpielerID]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(playerid == pID)return SendClientMessage(playerid,COLOR_GREY,"Du kannst dich nicht selber aus der Fraktion schmeißen.");
	if(SpielerInfo[pID][sFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist nicht in deiner Fraktion.");
	if(SpielerInfo[pID][sRank] == 7)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst keinen Leader uninviten.");
 	if(GetPVarInt(pID,"CopDuty") == 1){DeletePVar(pID,"CopDuty"); CopDuty--;}
 	if(GetPVarInt(pID,"FBIDuty") == 1){DeletePVar(pID,"FBIDuty"); FBIDuty--;}
 	if(GetPVarInt(pID,"MedicDuty") == 1){DeletePVar(pID,"MedicDuty"); MedicDuty--;}
 	if(GetPVarInt(pID,"FireDuty") == 1){DeletePVar(pID,"FireDuty"); MedicDuty--;}
	ResetPlayerWeapons(pID);
	SetPlayerArmour(pID,0);
	SetPlayerColor(pID,COLOR_WHITE);
	SpielerInfo[pID][sFraktion] = 0;
	if(SpielerInfo[pID][sSpawn] == 1){SpielerInfo[pID][sSpawn] = 0;}
	FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakMembers]--;
	SpawnPlayerEx(pID);
	format(string,128,"Du hast den %s aus deiner Fraktion geschmissen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SORRY,string);
	format(string,128,"%s %s hat dich aus der Fraktion geschmissen. Du bist nun wieder Zivilist.",RangName(playerid),SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_SORRY,string);
	return 1;
}

ocmd@2:giverang,setrang(playerid,params[])
{
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
    new pID, Rang, string[128];
	if(sscanf(params,"ui",pID,Rang))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setrang [SpielerID] [Rang]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Dieser Spieler gehört nicht zu deiner Fraktion.");
	if(Rang > 6)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst keinen Leaderrang vergeben. (Rang 1-6)");
	if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dir dein Rang nicht setzen.");
	if(SpielerInfo[pID][sRank] > SpielerInfo[playerid][sRank])return SendClientMessage(playerid,COLOR_SORRY,"Dieses Fraktionsmitglied besitzt einen höhren Rang als du.");
	SpielerInfo[pID][sRank] = Rang;
	format(string,128,"%s %s hat dir den Rang '%s' vergeben.",RangName(playerid),SpielerInfo[playerid][sName],RangName(pID));
	SendClientMessage(pID,COLOR_BLUE,string);
	format(string,128,"Du hast %s den Rang '%s' vergeben.",SpielerInfo[pID][sName],RangName(pID));
	SendClientMessage(playerid,COLOR_BLUE,string);
	return 1;
}

ocmd@2:givegrang,setgrang(playerid,params[])
{
	if(SpielerInfo[playerid][sGRank] < 6)return NichtBerechtigt
    new pID, Rang, string[128];
	if(sscanf(params,"ui",pID,Rang))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /setgrang [SpielerID] [Rang]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(SpielerInfo[pID][sGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_SORRY,"Dieser Spieler gehört nicht zu deiner Gruppe.");
	if(Rang > 6)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst keinen Leaderrang vergeben. (Rang 1-6)");
	if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dir dein Rang nicht setzen.");
	if(SpielerInfo[pID][sGRank] > SpielerInfo[playerid][sGRank])return SendClientMessage(playerid,COLOR_SORRY,"Dieses Gruppenmitglied besitzt einen höhren Rang als du.");
	SpielerInfo[pID][sGRank] = Rang;
	format(string,128,"%s %s hat dir den Rang '%s' vergeben.",GRangName(playerid),SpielerInfo[playerid][sName],GRangName(pID));
	SendClientMessage(pID,COLOR_BLUE,string);
	format(string,128,"Du hast %s den Rang '%s' vergeben.",SpielerInfo[pID][sName],GRangName(pID));
	SendClientMessage(playerid,COLOR_BLUE,string);
	return 1;
}

ocmd:ticket(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new pID, Betrag, Grund[64], string2[144];
		    if(sscanf(params,"uis[64]",pID,Betrag,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ticket [SpielerID] [Betrag] [Grund]");
			if(Betrag < 1 || Betrag > 2000)return SendClientMessage(playerid,COLOR_GREY,"Der Betrag darf nicht niedriger als 1$ oder höher als 2000$ sein.");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(pID == playerid)return SendClientMessage(playerid,COLOR_GREY,"Du kannst dir selber kein Ticket ausstellen.");
			if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
			SetPVarInt(pID,"Officer",playerid);
			SetPVarInt(pID,"TicketAngebot",1);
			SetPVarInt(pID,"TicketPreis",Betrag);
			format(string2,sizeof(string2),"{FF0000}%s %s{00CDFF} hat dir ein Ticket in höhe von {FF0000}%d${00CDFF} ausgestellt.",RangName(playerid),SpielerInfo[playerid][sName],Betrag);
			SendClientMessage(pID,COLOR_INFO,string2);
			SendClientMessage(pID,COLOR_INFO,"Benutze {FF0000}'/accept ticket'{00CDFF} um das Ticket zu bezahlen.");
			format(string2,sizeof(string2),"Du hast dem Spieler {FF0000}%s{00CDFF} ein Ticket in höhe von {FF0000}%d${00CDFF} ausgestellt. Grund: {FF0000}%s",SpielerInfo[pID][sName],Betrag,Grund);
			SendClientMessage(playerid,COLOR_INFO,string2);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
 	}
 	else NichtBerechtigt
 	return 1;
}

ocmd@2:suspect,su(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new pID, Anzahl, Grund[64], string2[144];
		    if(sscanf(params,"uis[64]",pID,Anzahl,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /su [SpielerID] [Anzahl] [Grund]");
			if(Anzahl<1)return SendClientMessage(playerid,COLOR_GREY,"Die Anzahl darf nicht höher als 6 und nicht niedriger als 0 sein.");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");

			new Ergebnis = Anzahl+GetPlayerWantedLevelEx(pID);
			if(Ergebnis > 16)
			{
			    SendClientMessage(playerid,COLOR_SORRY,"Du kannst dem angegebenen Spieler nicht so viele Wanteds geben.");
				format(string2,128,"Aktulles Wantedlevel von %s: %d",SpielerInfo[pID][sName],GetPlayerWantedLevelEx(pID));
				SendClientMessage(playerid,COLOR_SORRY,string2);
			    return 1;
			}
			SpielerInfo[pID][sLastCrime] = Grund;
		    SetPlayerWantedLevelEx(pID, GetPlayerWantedLevelEx(pID) +Anzahl);
			format(string2,128,"Officer %s hat dir %i Wanted(s) gegeben. Grund: %s",SpielerInfo[playerid][sName],Anzahl,Grund);
			SendClientMessage(pID,COLOR_SORRY,string2);
			format(string2,128,"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(pID));
			SendClientMessage(pID,COLOR_YELLOW,string2);
			format(string2,128,"Officer %s hat dem %s %i Wanted(s) gegeben. Grund: %s",SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Anzahl,Grund);
			SendCopMessage(COLOR_BLUE,string2);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:clear(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new pID, Anzahl, Grund[64], string2[144];
		    if(sscanf(params,"uis[64]",pID,Anzahl,Grund))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /clear [SpielerID] [Anzahl] [Grund]");
			if(Anzahl<1)return SendClientMessage(playerid,COLOR_GREY,"Die Anzahl darf nicht niedriger als 1 sein.");
		    if(!IsPlayerConnected(pID))return NichtOnline
			if((GetPlayerWantedLevelEx(pID) - Anzahl) < 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler hat nicht so viele Wanteds.");
			if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");
			SetPlayerWantedLevelEx(pID, GetPlayerWantedLevelEx(pID) -Anzahl);
			format(string2,128,"Officer %s hat %i Wanted(s) aus deiner Akte entfernt. Grund: %s",SpielerInfo[playerid][sName],Anzahl,Grund);
			SendClientMessage(pID,COLOR_SORRY,string2);
			format(string2,128,"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(pID));
			SendClientMessage(pID,COLOR_YELLOW,string2);
			format(string2,128,"Officer %s hat %i Wanted(s) aus der Akte von %s entfernt. Grund: %s",SpielerInfo[playerid][sName],Anzahl,SpielerInfo[pID][sName],Grund);
			SendCopMessage(COLOR_BLUE,string2);
			return 1;
 		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd@2:wanteds,gesuchte(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Nach folgenden Verbrechern wird gefahndet:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(GetPlayerWantedLevelEx(i) > 0)
				{
					new string[128];
					format(string,128, "%s | %d Wanted(s)",SpielerInfo[i][sName],GetPlayerWantedLevelEx(i));
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
			return 1;
 		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd@2:deathcp,cptot(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
	if(GetPVarInt(playerid,"MedicDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /cptot [SpielerID]");
    if(SpielerInfo[pID][sWiederbeleben] < 1)return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler muss nicht wiederbelebt werden.");
    if(GetDistanceBetweenPlayers(playerid, pID) >= 3)
    {
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(pID,pX,pY,pZ);
		SetPlayerCheckpoint(playerid,pX,pY,pZ,2.0);
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] != 5)continue;
		    if(GetPVarInt(i,"MedicDuty") != 1)continue;
		    format(string,128,"%s %s ist auf dem Weg zum Schwerverletzten %s.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		    SendClientMessage(i,0x0073FFFF,string);
		}
		SendClientMessage(playerid,COLOR_INFO,"Die schwerverletzte Person wurde auf deiner Karte rot makiert.");
		return 1;
    }
    else SendClientMessage(playerid,COLOR_GREY,"Du stehst bereits neben dem Spieler.");
	return 1;
}

ocmd@2:deathslist,totliste(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
    if(GetPVarInt(playerid,"MedicDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
    new merker = true;
    SendClientMessage(playerid, COLOR_YELLOW, "Folgende Personen sind schwer verletzt:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(SpielerInfo[i][sWiederbeleben] > 0 && GetPlayerInterior(i) == 0)
		{
			new string[128];
			format(string,128, "%s | ID: %d",SpielerInfo[i][sName],i);
			SendClientMessage(playerid, COLOR_WHITE, string);
			merker = false;
		}
	}
	if(merker)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Derzeit ist keine Person schwerverletzt.");
	    return 1;
	}
	SendClientMessage(playerid,COLOR_YELLOW, "Benutze '/cptot [SpielerID]' um den schwerverletzten zu finden.");
	return 1;
}

ocmd@2:rea,wiederbeleben(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
	if(GetPVarInt(playerid,"MedicDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	new pID, string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /rea [SpielerID]");
	if(pID == playerid)return SendClientMessage(playerid,COLOR_RED,"Du kannst dich nicht selber wiederbeleben.");
	if(GetDistanceBetweenPlayers(playerid, pID) >= 3)return NichtNahe
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
	if(SpielerInfo[pID][sWiederbeleben] == 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler muss nicht wiederbelebt werden.");
	KillTimer(DeadTimer[pID]);
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, false, true, true, true, 0, SYNC_ALL);
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, false, true, true, true, 0, SYNC_ALL);
	format(string,sizeof(string),"%s %s versucht %s wiederzubeleben.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
	DeadTimer[pID] = SetTimerEx("Reanimation",4100,false,"i",pID);
	SpielerInfo[pID][sWiederbeleben] = 0;
	SpielerInfo[pID][sKrankenhaus] = 0;
	ProxDetector(20.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
	SendClientMessage(playerid,COLOR_GREY,"Du bist ein guter Rettungssanitäter! Für deine Bereitschaft erhälst du 250$.");
	GivePlayerMoneyEx(playerid,250);
	FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += 250;
	SetPVarInt(pID,"Lebensretter",playerid);
	SetPlayerHealth(pID,100);
	return 1;
}

ocmd:hs(playerid, params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    new pID, string[144];
		if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /hs [SpielerID]");
		if(!IsPlayerConnected(pID))return NichtOnline
		if(GetDistanceBetweenPlayers(playerid, pID) >= 3)return NichtNahe
	    if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");
		if(GetPVarInt(pID,"Handschellen") == 1)
		{
	        format(string,128,"Officer %s hat dir deine Handschellen abgenommen.",SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_YELLOW,string);
	        format(string,128,"Du hast dem %s seine Handschellen abgenommen.",SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_SUPER,string);
			SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(pID, Handschellen[playerid]);
			DeletePVar(pID,"Handschellen");
		}
		else if(GetPVarInt(playerid,"Handschellen") == 0)
		{
	        format(string,128,"Officer %s hat dir Handschellen angelegt.",SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_YELLOW,string);
	        format(string,128,"Du hast dem %s Handschellen angelegt.",SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_SUPER,string);
			SetPlayerSpecialAction(pID,SPECIAL_ACTION_NONE);
			SetPlayerSpecialAction(pID, SPECIAL_ACTION_CUFFED);
			Handschellen[pID] = SetPlayerAttachedObject(pID, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
			SetPVarInt(pID,"Handschellen",1);
			return 1;
		}
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:cuff(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du kannst nur in Fahrzeugen fesseln.");
	    new pID, string[144];
	    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /cuff [SpielerID]");
	    if(!IsPlayerConnected(pID))return NichtOnline
	    if(GetPlayerVehicleID(pID) == GetPlayerVehicleID(playerid))
		{
			if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");
			if(GetPVarInt(pID,"Gefesselt") == 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits gefesselt.");
			TogglePlayerControllable(pID, false);
	        SetPVarInt(pID,"Gefesselt",1);
	        format(string,128,"Officer %s fesselt den %s.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        return 1;
	    }
	    else SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler sitzt nicht in deinem Auto.");
	    return 1;
  	}
	else NichtBerechtigt
	return 1;
}

ocmd:uncuff(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		new pID, string[144];
		if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /uncuff [SpielerID]");
		if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
		if(GetPVarInt(pID,"Gefesselt") != 1)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler wurde nicht gefesselt.");
		if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");
		TogglePlayerControllable(pID, true);
		format(string,128,"Officer %s befreit den %s.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:grab(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    new pID, SitzID, string[144];
	    if(sscanf(params,"ui",pID,SitzID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /grab [SpielerID] [SitzID - 1 = Links hinten | 2 = Rechts hinten");
	    if(!IsPlayerConnected(pID))return NichtOnline
		if(GetDistanceBetweenPlayers(playerid, pID) >= 12)return NichtNahe
		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du kannst nur in Fahrzeugen graben.");
		new PLAYER_STATE:State=GetPlayerState(playerid);
	 	if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
	    if(IsPlayerInAnyVehicle(pID))return SendClientMessage(playerid,COLOR_GREY,"Der Spieler sitzt in einem Fahrzeug.");
	    new Float:armour;
		GetPlayerArmour(pID, armour);
		if(armour != 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler darf kein Armour haben.");
	    if(SpielerInfo[pID][sFraktion] == 2)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bei der Staatsgewalt.");
		format(string,128,"Officer %s zieht den %s in sein Fahrzeug und fesselt Ihn.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		if(SitzID==1){AC_PutPlayerInVehicleEx(pID, GetPlayerVehicleID(playerid), 2);}
		else if(SitzID==2){AC_PutPlayerInVehicleEx(pID, GetPlayerVehicleID(playerid), 3);}
		TogglePlayerControllable(pID, false);
	  	SetPVarInt(pID,"Gefesselt",1);
		ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
 	}
	else NichtBerechtigt
	return 1;
}

ocmd:arrest(playerid,params[])
{
    new pID;
    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
    {
		if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /arrest [SpielerID/Name]");
		if(!IsPlayerConnected(pID))return NichtOnline
		if(GetPlayerWantedLevelEx(pID) == 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist kein Verbrecher.");
	    if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
        new Zeit, string[128];
		Zeit = GetPlayerWantedLevelEx(pID)*3;
		new Gehalt = GetPlayerWantedLevelEx(pID)*30;
		GivePlayerMoneyEx(pID,-Gehalt);
		FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += Gehalt;
        if(IsPlayerInRangeOfPoint(playerid,10.0,1587.0156,-1654.4163,1257.7506))
		{
			SpielerInfo[pID][sZelle] = 1;
    		format(string,128,"%s %s hat den Verbrecher %s für %d Minuten eingesperrt.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Zeit);
    		SendClientMessageToAll(COLOR_RED,string);
    		SpielerInfo[pID][sKnast] = Zeit;
    		SetPlayerWantedLevelEx(pID,0);
    		SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(pID, Handschellen[playerid]);
			FrakInfo[2][fiFrakGVerbrecher]++;
			SpawnPlayerEx(pID);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,221.7328,114.3382,999.0156))
    	{
            SpielerInfo[pID][sZelle] = 2;
    		format(string,128,"%s %s hat den Verbrecher %s für %d Minuten eingesperrt.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Zeit);
    		SendClientMessageToAll(COLOR_RED,string);
    		SpielerInfo[pID][sKnast] = Zeit;
    		SetPlayerWantedLevelEx(pID,0);
    		SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(pID, Handschellen[playerid]);
			FrakInfo[2][fiFrakGVerbrecher]++;
			SpawnPlayerEx(pID);
			return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid,7.0,195.1364,179.2897,1003.0234) || IsPlayerInRangeOfPoint(playerid,7.0,194.7606,157.9839,1003.0234))
		{
			SpielerInfo[pID][sZelle] = 3;
    		format(string,128,"%s %s hat den Verbrecher %s für %d Minuten eingesperrt.",RangName(playerid),SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Zeit);
    		SendClientMessageToAll(COLOR_RED,string);
    		SpielerInfo[pID][sKnast] = Zeit;
    		SetPlayerWantedLevelEx(pID,0);
    		SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(pID, Handschellen[playerid]);
			FrakInfo[2][fiFrakGVerbrecher]++;
			SpawnPlayerEx(pID);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du kannst hier niemanden einsperren.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:unarrest(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 2)NichtBerechtigt
    new pID, Zeit, string[144];
    if(sscanf(params,"ui",pID,Zeit))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /unarrest [SpielerID] [Zeit]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(GetDistanceBetweenPlayers(playerid, pID) > 5)return NichtNahe
    if(SpielerInfo[pID][sKnast] == 0)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht im Gefängnis.");
    if(Zeit < 1 && Zeit > SpielerInfo[playerid][sKnast])return SendClientMessage(playerid,COLOR_GREY,"Die Zeit darf nicht kleiner als 1 sein.");
	format(string,128,"Officer %s hat den %s %d Minuten nachlass gegeben.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName],Zeit);
	SendCopMessage(COLOR_BLUE,string);
	format(string,128,"Officer %s hat dir %d Minuten nachlass gegeben.",SpielerInfo[playerid][sName],Zeit);
	SendClientMessage(pID,COLOR_YELLOW,string);
	SpielerInfo[pID][sKnast] -= Zeit;
	TimeToKnast(pID);
	return 1;
}

ocmd@2:r,funk(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sFraktion] == 5)
	{
	    new text[128], string[144];
	   	if(SpielerInfo[playerid][sMuted] > 0)
	    {
	        format(string,sizeof(string),"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
	        SendClientMessage(playerid,COLOR_RED,string);
	        return 1;
	    }
	    if(sscanf(params,"s[128]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /funk [Text]");
	    format(string,sizeof(string),"* Funkchat %s %s: %s",RangName(playerid),SpielerInfo[playerid][sName],text);
		for(new ss = 0; ss < MAX_PLAYERS; ss++)
	    {
	        if(SpielerInfo[playerid][sFraktion] == 2 && SpielerInfo[ss][sFraktion] == 2)
	        {
	            SendClientMessage(ss,0x0073FFFF,string);
	        }
	        else if(SpielerInfo[playerid][sFraktion] == 5 && SpielerInfo[ss][sFraktion] == 5)
	        {
	            SendClientMessage(ss,0x0073FFFF,string);
	        }
	        else if(SpielerInfo[playerid][sFraktion] == 6 && SpielerInfo[ss][sFraktion] == 6)
	        {
	            SendClientMessage(ss,0x0073FFFF,string);
	        }
	        else if(SpielerInfo[playerid][sFraktion] == 5 && SpielerInfo[ss][sFraktion] == 5)
	        {
	            SendClientMessage(ss,0x0073FFFF,string);
	        }
	    }
	    format(string,sizeof(string),"* %s %s spricht in sein Funkgerät.",RangName(playerid),SpielerInfo[playerid][sName]);
		ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd@2:gov,government(playerid,params[])
{
    new text[128], string[144];
	if(SpielerInfo[playerid][sFraktion] != 6)return NichtBerechtigt
	if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
    if(sscanf(params,"s[128]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /gov(ernment) [Nachricht]");
    format(string,sizeof(string),"* %s %s berichtet: %s",RangName(playerid),SpielerInfo[playerid][sName],text);
	SendClientMessageToAll(COLOR_BLUE,string);
    return 1;
}

ocmd:sperre(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1|| GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
			new sperre,Float:x,Float:y,Float:z,Float:a, string[80];
			if(SperreCount() == MAX_SPERREN)return SendClientMessage(playerid,COLOR_SORRY,"Es wurde bereits die maximale Anzahl an Straßensperren errichtet!");
			if(sscanf(params,"d",sperre))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sperre [1-5]");
		    if(sperre<1||sperre>5)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sperre [1-5]");
		    GetPlayerPos(playerid,x,y,z);
		  	GetPlayerFacingAngle(playerid,a);
			switch(sperre)
			{
				case 1:{AddSperre(playerid,1237,x,y,z-1,a);}
				case 2:{AddSperre(playerid,1459,x,y,z-0.5,a);}
				case 3:{AddSperre(playerid,1238,x,y,z-0.5,a);}
				case 4:{AddSperre(playerid,981,x,y,z-0.3,a);}
				case 5:{AddSperre(playerid,1422,x,y,z-0.7,a);}
			}
			format(string,sizeof(string),"* %s %s baut eine Sperre auf.",RangName(playerid),SpielerInfo[playerid][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
 	}
 	else NichtBerechtigt
	return 1;
}

ocmd:schild(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
			new sperre,Float:x,Float:y,Float:z,Float:a, string[80];
			if(SchilderCount() == MAX_SCHILDER)return SendClientMessage(playerid,COLOR_SORRY,"Es wurde bereits die maximale Anzahl an Straßenschilder errichtet!");
			if(sscanf(params,"d",sperre))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /schild [1-7]");
		    if(sperre<1||sperre>7)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /schild [1-7]");
		    GetPlayerPos(playerid,x,y,z);
		  	GetPlayerFacingAngle(playerid,a);
			switch(sperre)
			{
				case 1:{AddSchild(playerid,19967,x,y,z-1.5,a);}
				case 2:{AddSchild(playerid,19966,x,y,z-1.5,a);}
				case 3:{AddSchild(playerid,19972,x,y,z-1.5,a);}
				case 4:{AddSchild(playerid,19987,x,y,z-1.5,a);}
				case 5:{AddSchild(playerid,19991,x,y,z-1.5,a);}
				case 6:{AddSchild(playerid,19953,x,y,z-1.5,a);}
				case 7:{AddSchild(playerid,19954,x,y,z-1.5,a);}
			}
			format(string,sizeof(string),"* %s %s baut ein Straßenschild auf.",RangName(playerid),SpielerInfo[playerid][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
 	}
 	else NichtBerechtigt
	return 1;
}

ocmd:parkkralle(playerid,params[])
{
	new carid, string[144], Float:Position[3];
	if(SpielerInfo[playerid][sFraktion] != 2)return NichtBerechtigt
	if(GetPVarInt(playerid,"CopDuty") != 1)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
	if(sscanf(params,"d",carid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /parkkralle [FahrzeugID]");
	if(!IsValidVehicle(carid))return SendClientMessage(playerid,COLOR_YELLOW,"Dieses Fahrzeug exestiert nicht.");
	if(FahrzeugInfo[carid][fNebenjob] != 0 || FahrzeugInfo[carid][fAutohaus] != 0 || FahrzeugInfo[carid][fFahrschule] != 0 || FahrzeugInfo[carid][fSupmobil] != 0
	|| FahrzeugInfo[carid][fZiviroller] != 0 || FahrzeugInfo[carid][fImportCar] != 0 || FahrzeugInfo[carid][fKurrierCar] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Du kannst an dieses Fahrzeug keine Parkkralle befestigen.");
	GetVehiclePos(carid,Position[0],Position[1],Position[2]);
	if(!IsPlayerInRangeOfPoint(playerid,5.0,Position[0],Position[1],Position[2]))return SendClientMessage(playerid,COLOR_GREY,"Du befindest an keinem Fahrzeug.");
	if(FahrzeugInfo[carid][fParkkralle] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Das Fahrezug hat bereits eine Parkkralle am Fahrzeug. Benutze: /parkkralleab");
	FahrzeugInfo[carid][fParkkralle] = 1;
	Motor[carid] = false;
	GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(carid, false, false, alarm, doors, bonnet, boot, objective);
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "* %s %s baut eine Parkkralle an das Fahrzeug.", RangName(playerid),SpielerInfo[playerid][sName]);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

ocmd:parkkralleab(playerid,params[])
{
	new carid, string[144], Float:Position[3];
	if(SpielerInfo[playerid][sFraktion] != 2)return NichtBerechtigt
	if(GetPVarInt(playerid,"CopDuty") != 1)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
	if(sscanf(params,"d",carid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /parkkralleab [FahrzeugID]");
	if(!IsValidVehicle(carid))return SendClientMessage(playerid,COLOR_YELLOW,"Dieses Fahrzeug exestiert nicht.");
	GetVehiclePos(carid,Position[0],Position[1],Position[2]);
	if(!IsPlayerInRangeOfPoint(playerid,5.0,Position[0],Position[1],Position[2]))return SendClientMessage(playerid,COLOR_GREY,"Du befindest an keinem Fahrzeug.");
	if(FahrzeugInfo[carid][fParkkralle] == 0)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrezug hat keine Parkkralle am Fahrzeug.");
	FahrzeugInfo[carid][fParkkralle] = 0;
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "* %s %s entfernt die Parkkralle vom Fahrzeug.", RangName(playerid),SpielerInfo[playerid][sName]);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

ocmd:f(playerid,params[])
{
	if(IsPlayerInAnyGang(playerid) || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
	{
	    new text[128], string[144];
	    if(sscanf(params,"s[128]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /f [Text]");
	    format(string,200,"* %s %s: %s",RangName(playerid),SpielerInfo[playerid][sName],text);
	    SendClientMessage(playerid,COLOR_INFO,string);
		for(new ss = 0; ss < MAX_PLAYERS; ss++)
	    {
	        if(SpielerInfo[ss][sFraktion] == SpielerInfo[playerid][sFraktion])
	        {
	            if(playerid != ss)
				{
		        	SendClientMessage(ss,COLOR_INFO,string);
				}
			}
	    }
	    return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:kidnap(playerid,params[])
{
	if(IsPlayerInAnyGang(playerid))
	{
	    if(GetPVarInt(playerid,"TriedToNap") != 0)return SendClientMessage(playerid,COLOR_GREY,"Nach einer gescheiterten Entführung musst du 30 Sekunden nachdenken.");
	    new pID, Platz;
	    if(sscanf(params,"ui",pID,Platz))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /kidnap [SpielerID] [Sitzplatz | Hinten Links = 1 | Hinten Rechts = 2]");
        if(!IsPlayerConnected(pID))return NichtOnline
        if(GetDistanceBetweenPlayers(playerid, pID) >= 8)return NichtNahe
        new Float:armour;
		GetPlayerArmour(pID, armour);
		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		new PLAYER_STATE:State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
		if(armour > 0)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler hat eine Schutzweste an.");
		if(Platz < 1 || Platz > 2)return SendClientMessage(playerid,COLOR_GREY,"Sitzplatz: Du kannst jemanden nur auf der Rückbank fesseln.");
		new rand = random(5), string[128];
		if(rand == 0)
		{
		    format(string,sizeof(string),"%s zieht den %s in sein Fahrzeug und fesselt ihn.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		    TogglePlayerControllable(pID,false);
		    if(Platz == 1){AC_PutPlayerInVehicleEx(pID,GetPlayerVehicleID(playerid),2);}
		    else if(Platz == 2){AC_PutPlayerInVehicleEx(pID,GetPlayerVehicleID(playerid),3);}
		    ProxDetector(20.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
		    return 1;
		}
		else
		{
		    format(string,sizeof(string),"%s scheitert bei dem Versuch %s in sein Fahrzeug zu ziehen und zu fesseln.",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
		    SetTimerEx("TryToNap",30000,false,"i",playerid);
		    SetPVarInt(playerid,"TriedToNap",1);
		    ProxDetector(20.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
		    return 1;
	    }
	}
	else SendClientMessage(playerid,COLOR_GREY,"Du gehörst keiner Gang/Mafia an.");
	return 1;
}

ocmd:heal(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
	if(GetPVarInt(playerid,"MedicDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	new pID, Preis, string[144], Float:Health;
	if(sscanf(params,"ud",pID,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /heal [SpielerID] [Preis]");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dich nicht selber heilen.");
	if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
	if(Preis < 0 || Preis > 500)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /heal [SpielerID] [Preis(1-500$]");
	GetPlayerHealth(pID,Health);
	if(Health > 93)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler benötigt keine Heilung.");
	format(string,sizeof(string),"Du bietest %s eine Heilung in Höhe von %d$ an.",SpielerInfo[pID][sName],Preis);
	SendClientMessage(playerid,COLOR_INFO,string);
	format(string,sizeof(string),"%s %s biete dir eine Heilung in Höhe von %d$ an.",RangName(playerid),SpielerInfo[playerid][sName],Preis);
	SendClientMessage(pID,COLOR_INFO,string);
	SendClientMessage(pID,COLOR_INFO,"Benutze '/accept heal' um die Heilung anzunehmen.");
	SetPVarInt(playerid,"Patient",pID);
	SetPVarInt(pID,"Arzt",playerid);
	SetPVarInt(playerid,"HealthPreis",Preis);
	SetPVarInt(pID,"HealthPreis",Preis);
	return 1;
}

ocmd:paket(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
	if(GetPVarInt(playerid,"MedicDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
	new pID, Preis, string[144];
	if(sscanf(params,"ud",pID,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /paket [SpielerID] [Preis]");
	if(pID == playerid)return SendClientMessage(playerid,COLOR_SORRY,"* Du kannst dir nicht selber ein Paket verkaufen.");
	if(!IsPlayerConnected(pID))return NichtOnline
	if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
	if(Preis < 0 || Preis > 500)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /paket [SpielerID] [Preis(1-500$]");
	if(SpielerInfo[pID][sPaket] == 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler besitzt bereits ein Erste-Hilfe-Paket.");
	format(string,sizeof(string),"Du bietest %s ein Erste-Hilfe-Paket für %d$ an.",SpielerInfo[pID][sName],Preis);
	SendClientMessage(playerid,COLOR_INFO,string);
	format(string,sizeof(string),"%s %s biete dir ein Erste-Hilfe-Paket für %d$ an.",RangName(playerid),SpielerInfo[playerid][sName],Preis);
	SendClientMessage(pID,COLOR_INFO,string);
	SendClientMessage(pID,COLOR_INFO,"Benutze '/accept paket' um das Erste-Hilfe-Paket zu kaufen.");
	SetPVarInt(pID,"ErsteHilfePaket",playerid);
	SetPVarInt(pID,"ErsteHilfePaketPreis",Preis);
	return 1;
}

ocmd:take(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
	    new pID, licname[24];
	    if(sscanf(params,"us",pID,licname))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /take [SpielerID] [Autoschein|Bikeschein|Flugschein|LKWschein|BootSchein|WaffenSchein|Perso|Alle]");
	    if(!IsPlayerConnected(pID))return NichtOnline
	    new string[128];
	    if(strcmp(licname,"Autoschein",true)==0)
		{
		    SpielerInfo[pID][sCarLic] = 0;
			format(string,sizeof(string),"%s %s hat dir deinen Autoschein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein Autoschein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
		}
		else if(strcmp(licname,"Bikeschein",true)==0)
		{
	        SpielerInfo[pID][sBikeLic] = 0;
			format(string,sizeof(string),"%s %s hat dir deinen Bikeschein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein Bikeschein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
		}
		else if(strcmp(licname,"Flugschein",true)==0)
		{
	        SpielerInfo[pID][sFlugLic] = 0;
			format(string,sizeof(string),"%s %s hat dir Spieler deinen Flugschein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein Flugschein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
		}
		else if(strcmp(licname,"LKWschein",true)==0)
		{
	        SpielerInfo[pID][sTruckLic] = 0;
			format(string,sizeof(string),"%s %s hat dir deinen LKWschein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein LKWschein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
	  	}
		else if(strcmp(licname,"BootSchein",true)==0)
		{
	        SpielerInfo[pID][sBootLic] = 0;
			format(string,sizeof(string),"%s %s hat dir deinen BootSchein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein BootSchein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
		}
		else if(strcmp(licname,"WaffenSchein",true)==0)
		{
	        SpielerInfo[pID][sWeaponLic] = 0;
			format(string,sizeof(string),"%s %s hat dir deinen Waffenschein abgenommen.",RangName(playerid),SpielerInfo[playerid][sName]);
	        SendClientMessage(pID,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast dem %s sein Waffenschein abgenommen.",SpielerInfo[pID][sName]);
	        SendClientMessage(playerid,COLOR_SUPER,string);
		}
	}
	else NichtBerechtigt
	return 1;
}

ocmd:robc4(playerid,params[])
{
	new Float:Pos[3],string[128],cops,pID,pID2;
	if(SpielerInfo[playerid][sFraktion] != 20)return NichtBerechtigt
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich in keinem Fahrzeug!");
	if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer des Fahrzeugs!");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	if(!IsVehicleInRangeOfPoint(C4Transporter,10.0,Pos[0],Pos[1],Pos[2]))return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht in der Nähe des C4-Transporters!");
    if(gettime() > robStatusC4)
	{
		foreach(new c : Player)
		{
			if(SpielerInfo[c][sFraktion] == 2 || SpielerInfo[c][sFraktion] == 6)
			{
			    if(GetPVarInt(c,"CopDuty") == 1)
			    {
					cops++;
				}
			}
		}
		if(cops < 2)return SendClientMessage(playerid,COLOR_SORRY,"Es müssen mindestens 2 Beamte online sein!");
		if(sscanf(params,"uu",pID,pID2))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /robc4 [SpielerID/Name(Beifahrer)][SpielerID/Name(Dieb)]");
	    if(!IsPlayerConnected(pID))return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Beifahrer) nicht eingeloggt!");
	    if(GetPVarInt(pID,"Eingeloggt") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Beifahrer) nicht eingeloggt!");
		if(IsPlayerNPC(pID))return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist ein Bot!");
	    if(!IsPlayerConnected(pID2))return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Dieb) nicht eingeloggt!");
	    if(GetPVarInt(pID2,"Eingeloggt") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Dieb) nicht eingeloggt!");
		if(IsPlayerNPC(pID2))return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler ist ein Bot!");
		if(pID == playerid || pID2 == playerid || pID == pID2)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dich nicht selbst als Beifahrer/Dieb angeben!");
		if(SpielerInfo[pID][sFraktion] != 20)return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Beifahrer) ist nicht in deiner Fraktion!");
		if(SpielerInfo[pID2][sFraktion] != 20)return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Dieb) ist nicht in deiner Fraktion!");
		if(!IsPlayerInVehicle(pID,GetPlayerVehicleID(playerid)))return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Beifahrer) ist nicht in deinem Fahrzeug!");
	    if(!IsPlayerInVehicle(pID2,GetPlayerVehicleID(playerid)))return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler(Beifahrer) ist nicht in deinem Fahrzeug!");
		if(GetPlayerState(pID) != PLAYER_STATE_PASSENGER)return SendClientMessage(playerid,COLOR_SORRY,"Der Spieler ist nicht dein Beifahrer!");
		robStatusC4 = gettime() + (60*60*4);
		SpielerInfo[playerid][sC4RobState] = true;
		SpielerInfo[pID][sC4RobState] = true;
		SpielerInfo[pID2][sC4RobState] = true;
		SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid) +6);
		SetPlayerWantedLevelEx(pID, GetPlayerWantedLevelEx(playerid) +6);
		SetPlayerWantedLevelEx(pID2, GetPlayerWantedLevelEx(playerid) +6);
		SendClientMessage(playerid,COLOR_SORRY,"Du raubst den C4-Transporter aus.");
		SendClientMessage(playerid,COLOR_SORRY,"Ihr versucht den C4-Transporter zu überfallen.");
		SendClientMessage(playerid,COLOR_SORRY,"Die Staatsmächte wurden kontaktiert,haltet 3 Minuten durch um den Transporter leer zu räumen.");
	    SendClientMessage(playerid,COLOR_SORRY,"Bleib die 5 Minuten so nah wie möglich am Transporter ohne zu sterben,da der Raub sonst abbricht.");
	    SendClientMessage(pID,COLOR_SORRY,"Du raubst den C4-Transporter aus.");
		SendClientMessage(pID,COLOR_SORRY,"Ihr versucht den C4-Transporter zu überfallen.");
		SendClientMessage(pID,COLOR_SORRY,"Die Staatsmächte wurden kontaktiert,haltet 3 Minuten durch um den Transporter leer zu räumen.");
	    SendClientMessage(pID,COLOR_SORRY,"Bleib die 5 Minuten so nah wie möglich am Transporter ohne zu sterben,da der Raub sonst abbricht.");
	    SendClientMessage(pID2,COLOR_SORRY,"Du raubst den C4-Transporter aus.");
		SendClientMessage(pID2,COLOR_SORRY,"Ihr versucht den C4-Transporter zu überfallen.");
		SendClientMessage(pID2,COLOR_SORRY,"Die Staatsmächte wurden kontaktiert,haltet 3 Minuten durch um den Transporter leer zu räumen.");
	    SendClientMessage(pID2,COLOR_SORRY,"Bleib die 5 Minuten so nah wie möglich am Transporter ohne zu sterben,da der Raub sonst abbricht.");
		PutPlayerInVehicle(pID2,C4Transporter,1);
		C4robTimer = SetTimerEx("RobC4Transporter",1000,true,"iii",playerid,pID,pID2);
		PlayerHearMusicInRange(Pos[0],Pos[1],Pos[2],1035,5,1,2000);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DER C4-TRANSPORTER WIRD ÜBERFALLEN.");
		return 1;
	}
	new c4robtime = robStatusC4-gettime();
	format(string,sizeof(string),"Du kannst den C4-Transporter erst wieder in %i:%02d Minuten ausrauben.",floatround(c4robtime/60),floatround(c4robtime%60));
	return SendClientMessage(playerid,COLOR_SORRY,string);
}
	
ocmd:tazer(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	{
		if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
		{
			new string[128];
		    if(GetPVarInt(playerid,"Tazer") == 1)//Tazer in der Hand
		    {
		        if(GetPVarInt(playerid,"DeagleAmmo") == 0)//Keine Deagle gehabt
		        {
		            SendClientMessage(playerid,COLOR_INFO,"Du hast deinen Tazer reingelegt.");
			        RemovePlayerWeapon(playerid,WEAPON_SILENCED);
			        DeletePVar(playerid,"Tazer");
				}
				else
				{
				    GivePlayerWeapon(playerid,WEAPON_DEAGLE,GetPVarInt(playerid,"DeagleAmmo"));
					DeletePVar(playerid,"DeagleAmmo");
				    SendClientMessage(playerid,COLOR_INFO,"Du hast deinen Tazer reingelegt und deine Desert Eagle wieder rausgenommen.");
			        DeletePVar(playerid,"Tazer");
				}
				format(string,sizeof(string),"* %s %s sichert seinen Tazer und steckt ihn in den Holster.",RangName(playerid),SpielerInfo[playerid][sName]);
				ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    }
		    else
		    {
		    	new OldDeagle, OldAmmo;
				GetPlayerWeaponData(playerid, WEAPON_SLOT_PISTOL, WEAPON:OldDeagle, OldAmmo);
		        if(OldDeagle == 24)
		        {
					SetPVarInt(playerid,"DeagleAmmo",OldAmmo);
		            SetPVarInt(playerid,"Tazer",1);
		        	SendClientMessage(playerid,COLOR_INFO,"Du hast deine Desert Eagle reingelegt und deinen Tazer wieder rausgenommen.");
		            RemovePlayerWeapon(playerid,WEAPON_DEAGLE);
		            GivePlayerWeapon(playerid,WEAPON_SILENCED,50);
			        return 1;
				}
				else
				{
				    SetPVarInt(playerid,"Tazer",1);
		 			SendClientMessage(playerid,COLOR_INFO,"Du hast deinen Tazer rausgenommen.");
					GivePlayerWeapon(playerid,WEAPON_SILENCED,50);
				}
				format(string,sizeof(string),"* %s %s zieht seinen Tazer aus dem Polster und entsichert ihn.",RangName(playerid),SpielerInfo[playerid][sName]);
				ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:notrufliste(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 5 || SpielerInfo[playerid][sFraktion] == 6)
    {
        if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
        {
            new string[164], merker = true;
    		if(SpielerInfo[playerid][sFraktion] == 2)
	        {
			    SendClientMessage(playerid,COLOR_WHITE,">>>>> {FF0000}Notrufe{FFFFFF} <<<<<");
			    foreach(new i : Player)
				{
					if(GetPVarInt(i,"NotrufID") == 1)
					{
					    format(string,sizeof(string),"Anrufer: %s | ID: %d | Streifenwagen",SpielerInfo[i][sName],i);
					    SendClientMessage(playerid,COLOR_YELLOW,string);
					    merker = false;
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine Notrufe eingegangen.");
				    return 1;
				}
			    return 1;
			}
 			else if(SpielerInfo[playerid][sFraktion] == 6)
	        {
			    SendClientMessage(playerid,COLOR_WHITE,">>>>> {FF0000}Notrufe{FFFFFF} <<<<<");
			    foreach(new i : Player)
				{
					if(GetPVarInt(i,"NotrufID") == 2)
					{
					    format(string,sizeof(string),"Anrufer: %s | ID: %d",SpielerInfo[i][sName],i);
					    SendClientMessage(playerid,COLOR_YELLOW,string);
					    merker = false;
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine Notrufe eingegangen.");
				    return 1;
				}
			    return 1;
			}
			else if(SpielerInfo[playerid][sFraktion] == 5)
			{
			    SendClientMessage(playerid,COLOR_WHITE,">>>>> {FF0000}Notrufe{FFFFFF} <<<<<");
			    foreach(new i : Player)
				{
					if(GetPVarInt(i,"NotrufID") == 3)
					{
					    format(string,sizeof(string),"Anrufer: %s | ID: %d",SpielerInfo[i][sName],i);
					    SendClientMessage(playerid,COLOR_YELLOW,string);
					    merker = false;
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine Notrufe eingegangen.");
				    return 1;
				}
			    return 1;
			}
 		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd:notruf(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 5 || SpielerInfo[playerid][sFraktion] == 6)
    {
        if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1)
        {
			new pID, Float:x, Float:y, Float:z, string[144];
		   	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /notruf [SpielerID/Name]");
		   	if(!IsPlayerConnected(pID))return NichtOnline
   			if(SpielerInfo[playerid][sFraktion] == 2)
	        {
	            if(GetPVarInt(pID,"NotrufID") != 1)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler benötigt keinen Streifenwagen.");
	            GetPlayerPos(pID,x,y,z);
	            DeletePVar(pID,"NotrufID");
  				NotrufSperre[playerid][0] = 0;
				KillTimer(NotrufTimer[playerid][0]);
	            format(string,sizeof(string),"%s %s hat deinen Anruf entgegengenommen. Bitte warte an deiner aktuellen Position.",RangName(playerid),SpielerInfo[playerid][sName]);
	            SendClientMessage(pID,COLOR_SUPER,string);
	            format(string,sizeof(string),"Du hast den Notruf von %s entgegengenommen. Er befindet sich am roten Marker.",SpielerInfo[pID][sName]);
	            SendClientMessage(playerid,COLOR_SUPER,string);
	            SetPlayerCheckpoint(playerid,x,y,z,3.0);
	            return 1;
	        }
 			else if(SpielerInfo[playerid][sFraktion] == 6)
	        {
	            if(GetPVarInt(pID,"NotrufID") != 2)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler benötigt nicht das FBI.");
	            GetPlayerPos(pID,x,y,z);
	            DeletePVar(pID,"NotrufID");
  				NotrufSperre[playerid][1] = 0;
				KillTimer(NotrufTimer[playerid][0]);
	            format(string,sizeof(string),"%s %s hat deinen Anruf entgegengenommen. Bitte warte an deiner aktuellen Position.",RangName(playerid),SpielerInfo[playerid][sName]);
	            SendClientMessage(pID,COLOR_SUPER,string);
	            format(string,sizeof(string),"Du hast den Notruf von %s entgegengenommen. Er befindet sich am roten Marker.",SpielerInfo[pID][sName]);
	            SendClientMessage(playerid,COLOR_SUPER,string);
	            SetPlayerCheckpoint(playerid,x,y,z,3.0);
	            return 1;
	        }
	        else if(SpielerInfo[playerid][sFraktion] == 5)
	        {
	            if(GetPVarInt(pID,"NotrufID") != 3)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler benötigt keinen Sanitäter.");
	            GetPlayerPos(pID,x,y,z);
	            DeletePVar(pID,"NotrufID");
				NotrufSperre[playerid][2] = 0;
				KillTimer(NotrufTimer[playerid][1]);
	            format(string,sizeof(string),"%s %s hat deinen Anruf entgegengenommen. Bitte warte an deiner aktuellen Position.",RangName(playerid),SpielerInfo[playerid][sName]);
	            SendClientMessage(pID,COLOR_SUPER,string);
	            format(string,sizeof(string),"Du hast den Notruf von %s entgegengenommen. Er befindet sich am roten Marker.",SpielerInfo[pID][sName]);
	            SendClientMessage(playerid,COLOR_SUPER,string);
	            SetPlayerCheckpoint(playerid,x,y,z,3.0);
	            return 1;
	        }
		    return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

ocmd@2:letzterfahrer,lf(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] >= 1)
    {
        if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1)
        {
 			new vehid, string[144];
		   	if(sscanf(params,"d",vehid))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /letzterfahrer [FahrzeugID]");
		   	if(strlen(LastDriver[vehid]) > 2)
		   	{
		        format(string,sizeof(string),"Der letzte Fahrer vom Fahrzeug (ID:%d) war: %s",vehid,LastDriver[vehid]);
		        SendClientMessage(playerid,COLOR_INFO,string);
			}
            else
            {
  		        format(string,sizeof(string),"Der letzte Fahrer vom Fahrzeug (ID:%d) war: Niemand",vehid);
		        SendClientMessage(playerid,COLOR_INFO,string);
            }
            return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

//Allgemeine Befehle
ocmd:afk(playerid,params[])
{
    if(Afk[playerid] == 0)
    {
        Afk[playerid]=1;
        lastUpdate[playerid] = GetTickCount();
        new hour,minute,second;
        new string1[10];
        gettime(hour,minute,second);
        format(string1, sizeof string1, "%s%d:%s%d:%s%d", (hour < 10) ? ("0") : (""), hour, (minute < 10) ? ("0") : (""), minute, (second < 10) ? ("0") : (""), second);
        new string[125];
        format(string,sizeof(string),"* Spieler ist Abwesend seit [{FF0000}%s{FFFFFF}] *",string1);
        Afklabel[playerid] = Create3DTextLabel(string, COLOR_WHITE, 30.0, 40.0, 0.3, 20.0, 0);
        Attach3DTextLabelToPlayer(Afklabel[playerid], playerid, 0.0, 0.0, 0.4);
        TogglePlayerControllable(playerid, false);
        SendClientMessage(playerid,COLOR_INFO,"Hinweis: Du bist nun Abwesend gemeldet.");
    }
    return 1;
}

ocmd:back(playerid,params[])
{
	if(Afk[playerid] != 1)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht AFK.");
	new afkstring[164], nr = random(89999) + 10000;
	SetPVarInt(playerid,"BackNummer",nr);
	format(afkstring, sizeof(afkstring), "{FFFFFF}Du bist als Abwesend gemeldet.\nGebe diesen Code ein um wieder ins Spiel hinein zu kommen.\nCode: {FF0000}%d",nr);
	ShowPlayerDialog(playerid,DIALOG_ANTIAFK,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | AFK",afkstring,"Bestätigen","");
	return 1;
}

ocmd:whisper(playerid,params[])
{
	new textgstring[144], text[114], pID;
    if(SpielerInfo[playerid][sMuted] > 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist noch gemutet.");
    if(sscanf(params,"us[114]",pID,text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /whisper [SpielerID/Name] [Text]");
   	if(!IsPlayerConnected(playerid))return NichtOnline
	if(GetDistanceBetweenPlayers(playerid, pID) >= 2)return NichtNahe
	format(textgstring,sizeof(textgstring),"%s flüstert dir zu: %s",SpielerInfo[playerid][sName],text);
	SendClientMessage(pID,COLOR_WHITE,textgstring);
	format(textgstring,sizeof(textgstring),"Du hast dem %s was ins Ohr geflüstert.",SpielerInfo[pID][sName]);
    SendClientMessage(playerid,COLOR_WHITE,textgstring);
	return 1;
}

ocmd@2:l,leise(playerid,params[])
{
	new textgstring[144], text[114];
    if(SpielerInfo[playerid][sMuted] > 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist noch gemutet.");
    if(sscanf(params,"s[114]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /leise [Text]");
	if(GetPVarInt(playerid,"CopMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt leise: %s",text);}
	else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt: %s",text);}
	else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(textgstring,sizeof(textgstring),"Unbekannter sagt: %s",text);}
	else {format(textgstring,sizeof(textgstring),"%s sagt leise: %s",SpielerInfo[playerid][sName],text);}
	SetPlayerChatBubble(playerid, text, 0xE10000FF, 3.0, 5000);
	ProxDetector(3.0, playerid, textgstring, 0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF);
	return 1;
}

ocmd:b(playerid,params[])
{
	new textgstring[144], text[114];
    if(SpielerInfo[playerid][sMuted] > 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist noch gemutet.");
    if(sscanf(params,"s[114]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /b [Text]");
	if(GetPVarInt(playerid,"CopMaske") == 1){format(textgstring,sizeof(textgstring),"(( Unbekannter sagt: %s ))",text);}
	else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(textgstring,sizeof(textgstring),"(( Unbekannter sagt: %s ))",text);}
	else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(textgstring,sizeof(textgstring),"(( Unbekannter sagt: %s ))",text);}
	else {format(textgstring,sizeof(textgstring),"(( %s sagt: %s ))",SpielerInfo[playerid][sName],text);}
	SetPlayerChatBubble(playerid, text, 0xE10000FF, 20.0, 5000);
	ProxDetector(20.0, playerid, textgstring, 0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF);
	return 1;
}

ocmd:contract(playerid,params[])
{
    new pID, Preis, query[144];
    if(SpielerInfo[playerid][sFraktion] == 19)return SendClientMessage(playerid,COLOR_SORRY,"Als Hitman, kannst du auf niemanden einen Contract aussetzen.");
	if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Um ein Contract schreiben zu können, benötigst du das zweite Level.");
	if(sscanf(params,"dd",pID,Preis))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /contract [SpielerID/Name] [Preis]");
	if(Preis < 3000)return SendClientMessage(playerid,COLOR_GREY,"Der Contract muss min. 3.000$ Hoch sein.");
	if(GetPlayerMoneyEx(playerid) < Preis)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
	if(!IsPlayerConnected(playerid))return NichtOnline
	if(IsPlayerNPC(pID))return SendClientMessage(playerid,COLOR_GREY,"Du kannst keinen Contract auf Bots aussetzen.");
	if(GetPlayerScore(pID) < 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst keinen Contract auf Neulinge unter Level 2 aussetzen.");
    mysql_format(sqlHandle, query, 128, "SELECT `Name` FROM `contracts` WHERE `Contract` = '%s'", SpielerInfo[pID][sName]);
   	mysql_tquery(sqlHandle, query, "onPlayerSetHitmanContract", "iii", playerid, pID, Preis);
	return 1;
}

ocmd:id(playerid,params[])
{
	new pID,string[144];
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /id [SpielerName]");
	if(!IsPlayerConnected(pID))return NichtOnline
   	format(string,sizeof(string),"%s [ID:%d]",SpielerInfo[pID][sName],pID);
    SendClientMessage(playerid,COLOR_GREY,string);
	return 1;
}

ocmd:h(playerid,params[])
{
	if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
	if(GetPVarInt(playerid,"AmTelefonieren") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist mit niemandem am telefonieren.");
	new Text[128], string[144], pID = GetPVarInt(playerid,"Anrufer");
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /h [Text]");
 	format(string,sizeof(string),"HANDY: %s sagt: %s",SpielerInfo[playerid][sName],Text);
    SendClientMessage(pID,COLOR_YELLOW,string);
   	format(string,sizeof(string),"HANDY: %s sagt: %s",SpielerInfo[playerid][sName],Text);
    SendClientMessage(playerid,COLOR_YELLOW,string);
	return 1;
}

ocmd:auflegen(playerid,params[])
{
	if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
	if(GetPVarInt(playerid,"AmTelefonieren") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist mit niemandem am telefonieren.");
	new pID = GetPVarInt(playerid,"Anrufer");
 	SendClientMessage(playerid,COLOR_GREY,"Du hast aufgelegt");
    SendClientMessage(pID,COLOR_YELLOW,"Der Gesprächspartner hat aufgelegt.");
    DeletePVar(playerid,"AmTelefonieren");
    DeletePVar(pID,"AmTelefonieren");
    DeletePVar(playerid,"Anrufer");
    DeletePVar(pID,"Anrufer");
	return 1;
}

ocmd@2:p,pickup(playerid,params[])
{
	new string[128], pID = GetPVarInt(playerid,"Anrufer");
    if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
    if(GetPVarInt(playerid,"Anrufer") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du wirst von niemanden angerufen.");
    if(GetPVarInt(playerid,"AmTelefonieren") == 1)return SendClientMessage(playerid,COLOR_GREY,"Du telefonierst bereits. Benutze '/auflegen' um aufzulegen.");
    SendClientMessage(playerid,COLOR_GREY,"Benutze '/h' um am Telefon zu antworten.");
    format(string,sizeof(string),"%s hat den Anruf entgegengenommen. Benutze '/h' um am Telefon zu antworten.",SpielerInfo[playerid][sName]);
    SendClientMessage(pID,COLOR_YELLOW,string);
    SpielerInfo[pID][sGuthaben] -= 7;
    SetPVarInt(playerid,"AmTelefonieren",1);
    SetPVarInt(pID,"AmTelefonieren",1);
	return 1;
}

ocmd@2:anrufen,call(playerid,params[])
{
	new Nummer, string[128], merker = true;
    if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
    if(SpielerInfo[playerid][sGuthaben] < 7)return SendClientMessage(playerid,COLOR_GREY,"Kosten eines Anrufs: 7$");
    if(GetPVarInt(playerid,"AmTelefonieren") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du telefonierst bereits. Lege erst auf um eine andere Person anrufen zu können.");
    if(sscanf(params,"d",Nummer))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /anrufen [Handynummer]");
    foreach(new i : Player)
	{
		if(SpielerInfo[i][sHandy] == Nummer)
		{
		    if(SpielerInfo[i][icpHandy] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Es konnte keine Verbindung zum anderem Handy hergestellt werden, da es ausgeschaltet ist.");
			if(GetPVarInt(i,"AmTelefonieren") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Die Leitung ist belegt. Bitte versuche es später erneut.");
			format(string,sizeof(string),"Anruf von %s. Benutze '/pickup' um an das Handy zu gehen.",SpielerInfo[playerid][sName]);
			SendClientMessage(i,COLOR_YELLOW,string);
			SendClientMessage(playerid,COLOR_SUPER,"Bitte warte bis der Gesprächspartner an das Handy geht.");
			SetPVarInt(i,"Anrufer",playerid);
			SetPVarInt(playerid,"Anrufer",i);
			merker = false;
		}
	}
	if(merker)
	{
	    SendClientMessage(playerid,COLOR_SORRY,"Kein Anschluss unter dieser Nummer.");
	    return 1;
	}
	return 1;
}

ocmd:guthaben(playerid,params[])
{
	new string[128];
    if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
    format(string,sizeof(string),"Dein aktuelles Guthaben beträgt: {FF0000}%d$",SpielerInfo[playerid][sGuthaben]);
    SendClientMessage(playerid,COLOR_INFO,string);
	return 1;
}

ocmd:sms(playerid,params[])
{
	new Nummer, merker = true, Text[128], string[144];
	if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
	if(SpielerInfo[playerid][sGuthaben] < 3)return SendClientMessage(playerid,COLOR_GREY,"Kosten einer SMS: 3$");
    if(sscanf(params,"ds[128]",Nummer,Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /sms [Handynummer] [Text]");
    foreach(new i : Player)
	{
		if(SpielerInfo[i][sHandy] == Nummer)
		{
		    if(SpielerInfo[i][icpHandy] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Deine SMS konnte nicht zugestellt werden, da das Handy vom Spieler ausgeschaltet ist.");
			SpielerInfo[playerid][sGuthaben] -= 3;
			format(string,sizeof(string),"SMS von %s: %s",SpielerInfo[playerid][sName],Text);
			SendClientMessage(i,COLOR_YELLOW,string);
			SendClientMessage(playerid,COLOR_SUPER,"Deine SMS wurde erfolgreich zugestellt. Kosten: 3$");
		    merker = false;
		}
	}
	if(merker)
	{
	    SendClientMessage(playerid,COLOR_SORRY,"Die SMS konnte nicht zugestellt werden.");
	    return 1;
	}
	return 1;
}

ocmd:nummer(playerid,params[])
{
	new pID, string[144];
	if(SpielerInfo[playerid][sTelefonbuch] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Telefonbuch.");
    if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /nummer [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return NichtOnline
    if(SpielerInfo[pID][sHandy] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der angegebene Spieler besitzt kein Handy.");
    format(string,sizeof(string),"Name: {FF0000}%s{FFFFFF} | Handynummer: {FF0000}%d",SpielerInfo[pID][sName],SpielerInfo[pID][sHandy]);
    SendClientMessage(playerid,COLOR_WHITE,string);
	return 1;
}

ocmd@2:ooc,o(playerid,params[])
{
    if(SpielerInfo[playerid][icpOChat] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Aktiviere deinen OOC-Chat im ICP um Nachrichten zu senden.");
    if(GlobalVars[OOC] != 1 && SpielerInfo[playerid][sAdmin] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Der OOC Chat ist zurzeit deaktiviert.");
	new string[144], Text[128];
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ooc [Text]");
	if(SpielerInfo[playerid][sAdmin] == 0)
    {
		format(string,128,"[OOC] %s sagt: %s",SpielerInfo[playerid][sName],Text);
		SendOOCMessage(string);
    }
    else
    {
		format(string,128,"[OOC] {FF0000}%s %s {FFFFFF}sagt: %s",AdminName(playerid),SpielerInfo[playerid][sName],Text);
		SendOOCMessage(string);
    	return 1;
	}
	return 1;
}

ocmd:erstehilfe(playerid,params[])
{
	if(SpielerInfo[playerid][sPaket] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Erste-Hilfe-Paket.");
	SpielerInfo[playerid][sPaket] = 0;
	new string[164];
 	SetPlayerHealth(playerid,100);
	format(string,sizeof(string),"* %s versorgt seine Wunden mit dem Erste-Hilfe-Paket",SpielerInfo[playerid][sName]);
	ProxDetector(12.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
	return 1;
}

ocmd:showscheine(playerid,params[])
{
	new string[364], pID;
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /showscheine [SpielerID]");
	if(pID == playerid)return SendClientMessage(playerid,COLOR_GREY,"Benutze '/scheine' um deine Fahrscheine zu sehen.");
 	if(!IsPlayerConnected(pID))return NichtOnline
    if(GetDistanceBetweenPlayers(playerid,pID) > 12)return NichtNahe
	format(string,sizeof(string),"{FFFFFF}Autoschein:		%s{FFFFFF}\nFlugschein:		%s{FFFFFF}\nLKWschein:		%s{FFFFFF}\nBootschein:		%s{FFFFFF}\nMotorradschein:	%s{FFFFFF}\nWaffenschein:		%s [Klasse: %d]",FScheinInfo(SpielerInfo[playerid][sCarLic]),FScheinInfo(SpielerInfo[playerid][sFlugLic]),
	FScheinInfo(SpielerInfo[playerid][sTruckLic]),FScheinInfo(SpielerInfo[playerid][sBootLic]),FScheinInfo(SpielerInfo[playerid][sBikeLic]),FScheinInfo(SpielerInfo[playerid][sWeaponLic]),SpielerInfo[playerid][sWeaponLic]);
	ShowPlayerDialog(pID,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Lizenzen",string,"Weiter","");
	format(string,sizeof(string),"* %s zeigt %s seine Lizenzen",SpielerInfo[playerid][sName],SpielerInfo[pID][sName]);
	ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
	return 1;
    
}

ocmd:s(playerid,params[])
{
	new string[144], text[128];
 	if(SpielerInfo[playerid][sMuted] > 0)
    {
        format(string,128,"Du bist noch für %d Minute(n) gemutet.",SpielerInfo[playerid][sMuted]);
        SendClientMessage(playerid,COLOR_RED,string);
        return 1;
    }
	if(sscanf(params,"s[128]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /s [Text]");
	if(GetPVarInt(playerid,"CopMaske") == 1){format(string,sizeof(string),"Unbekannter schreit: %s!",text);}
	else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(string,sizeof(string),"Unbekannter sagt: %s",text);}
	else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(string,sizeof(string),"Unbekannter sagt: %s",text);}
	else format(string,sizeof(string),"%s schreit: %s!",SpielerInfo[playerid][sName],text);
	ProxDetector(30, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_GREY,COLOR_GREY);
	return 1;
}

ocmd:me(playerid,params[])
{
	new string[144], Text[128];
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /me [Text]");
	if(GetPVarInt(playerid,"CopMaske") == 1){format(string,sizeof(string),"** Unbekannter %s **",Text);}
	else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(string,sizeof(string),"** Unbekannter %s **",Text);}
	else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(string,sizeof(string),"** Unbekannter %s **",Text);}
	else format(string,sizeof(string),"* %s %s",SpielerInfo[playerid][sName],Text);
	ProxDetector(10.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
	return 1;
}

ocmd@2:eject,rauswerfen(playerid,params[])
{
    new pID, str[144];
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
 	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /eject [SpielerID/Name]");
	if(!IsPlayerInAnyVehicle(pID))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler sitzt in keinem Fahrzeug.");
	if(GetPlayerVehicleID(pID) != GetPlayerVehicleID(playerid))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler sitzt nicht in deinem Fahrzeug.");
	format(str,sizeof(str),"Du hast den Spieler %s aus dem Fahrzeug geworfen.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SUPER,str);
	format(str,sizeof(str),"Fahrer %s hat dich aus dem Fahrzeug geworfen.",SpielerInfo[playerid][sName]);
	SendClientMessage(pID,COLOR_INFO,str);
	RemovePlayerFromVehicle(pID);
	return 1;
}

ocmd:angebot(playerid,params[])
{
	new Auswahl[24], Auswahl2[24], string[224];
    if(sscanf(params,"ss",Auswahl,Auswahl2))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /angebot [Annehmen|Ablehnen] [Tankstelle|Ammunation|24/7|Haus|GHaus|Garage]");
   	if(strcmp(Auswahl, "Annehmen", true, strlen(Auswahl)) == 0)
    {
   		if(strcmp(Auswahl2, "Tankstelle", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"TankstelleAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"TankstelleAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sTankstelle] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Tankstelle");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"TankstelleAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
            format(string,sizeof(string),"Du hast dir die Tankstelle (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"TankstelleAngebot"),SpielerInfo[GetPVarInt(playerid,"TankstelleAngebotID")][sName],GetPVarInt(playerid,"TankstelleAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);
            
            SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");
            
            format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat deine Tankstelle für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"TankstelleAngebotPreis"));
            SendClientMessage(GetPVarInt(playerid,"TankstelleAngebotID"),COLOR_INFO,string);
            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"TankstelleAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"TankstelleAngebotID")][sBankkonto] += GetPVarInt(playerid,"TankstelleAngebotPreis");
            SpielerInfo[playerid][sTankstelle] = GetPVarInt(playerid,"TankstelleAngebot");
            SpielerInfo[GetPVarInt(playerid,"TankstelleAngebotID")][sTankstelle] = 0;
            
            new tsid = SpielerInfo[playerid][sTankstelle];
			Delete3DTextLabel(TankstellenInfo[tsid][tsText][0]);
			TankstellenInfo[tsid][tsText][0] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(TankstellenInfo[tsid][tsPickup][0]);
			format(string, sizeof(string), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", tsid, SpielerInfo[playerid][sName]);
			TankstellenInfo[tsid][tsPickup][0] = CreatePickup(1272, 23, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], -1);
			TankstellenInfo[tsid][tsText][0] = Create3DTextLabel(string, COLOR_WHITE, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], 10.0, 0);

			format(TankstellenInfo[tsid][tsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
			format(TankstellenInfo[tsid][tsBeschreibung], 15, "Petrol Station");
			
			TankstellenTafelUpdate(tsid);
			Streamer_Update(playerid);
			
			DeletePVar(playerid,"TankstelleAngebot");
			DeletePVar(playerid,"TankstelleAngebotID");
			DeletePVar(playerid,"TankstelleAngebotPreis");
			return 1;
    	}
    	else if(strcmp(Auswahl2, "Ammunation", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"AmmunationAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"AmmunationAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sAmmunation] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Ammunation");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"AmmunationAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
            format(string,sizeof(string),"Du hast dir das Ammunation (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"AmmunationAngebot"),SpielerInfo[GetPVarInt(playerid,"AmmunationAngebotID")][sName],GetPVarInt(playerid,"AmmunationAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);

            SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");

            format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Ammunation für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"AmmunationAngebotPreis"));
            SendClientMessage(GetPVarInt(playerid,"AmmunationAngebotID"),COLOR_INFO,string);
            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"AmmunationAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"AmmunationAngebotID")][sBankkonto] += GetPVarInt(playerid,"AmmunationAngebotPreis");
            SpielerInfo[playerid][sAmmunation] = GetPVarInt(playerid,"AmmunationAngebot");
            SpielerInfo[GetPVarInt(playerid,"AmmunationAngebotID")][sAmmunation] = 0;

            new an = SpielerInfo[playerid][sAmmunation];
            
			Delete3DTextLabel(AmmunationInfo[an][amText]);
			AmmunationInfo[an][amText] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(AmmunationInfo[an][amPickup]);
			
 			format(string, sizeof(string), "Ammunation 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, AmmunationInfo[an][amBesitzer]);
 			AmmunationInfo[an][amText] = Create3DTextLabel(string, COLOR_WHITE, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], 10.0, 0);
    		AmmunationInfo[an][amPickup] = CreatePickup(1272, 23, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], -1);
        
			format(AmmunationInfo[an][amBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);

			DeletePVar(playerid,"AmmunationAngebot");
			DeletePVar(playerid,"AmmunationAngebotID");
			DeletePVar(playerid,"AmmunationAngebotPreis");
			return 1;
    	}
	 	else if(strcmp(Auswahl2, "24/7", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"StoreAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"StoreAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sStore] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein 24/7");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"StoreAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
            format(string,sizeof(string),"Du hast dir das 24/7 (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"StoreAngebot"),SpielerInfo[GetPVarInt(playerid,"StoreAngebotID")][sName],GetPVarInt(playerid,"StoreAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);

            SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");

            format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein 24/7 für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"StoreAngebotPreis"));
            SendClientMessage(GetPVarInt(playerid,"StoreAngebotID"),COLOR_INFO,string);
            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"StoreAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"StoreAngebotID")][sBankkonto] += GetPVarInt(playerid,"StoreAngebotPreis");
            SpielerInfo[playerid][sStore] = GetPVarInt(playerid,"StoreAngebot");
            SpielerInfo[GetPVarInt(playerid,"StoreAngebotID")][sStore] = 0;

            new an = SpielerInfo[playerid][sStore];

			Delete3DTextLabel(StoreInfo[an][siText]);
			StoreInfo[an][siText] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(StoreInfo[an][siPickup]);

 			format(string, sizeof(string), "24/7 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, StoreInfo[an][siBesitzer]);
 			StoreInfo[an][siText] = Create3DTextLabel(string, COLOR_WHITE, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], 10.0, 0);
    		StoreInfo[an][siPickup] = CreatePickup(1272, 23, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], -1);

			format(StoreInfo[an][siBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);

			DeletePVar(playerid,"StoreAngebot");
			DeletePVar(playerid,"StoreAngebotID");
			DeletePVar(playerid,"StoreAngebotPreis");
			return 1;
    	}
    	else if(strcmp(Auswahl2, "Haus", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"HausAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"HausAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sHaus] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Haus");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"HausAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
            format(string,sizeof(string),"Du hast dir das Haus (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"HausAngebot"),SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);

            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"HausAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sBankkonto] += GetPVarInt(playerid,"HausAngebotPreis");
            SpielerInfo[playerid][sHaus] = GetPVarInt(playerid,"HausAngebot");
            SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sHaus] = 0;
			HausInfo[GetPVarInt(playerid,"HausAngebot")][hsMiete] = 0;
			HausInfo[GetPVarInt(playerid,"HausAngebot")][hsMietbar] = 0;
			SpielerInfo[playerid][sMieter] = 0;

            new hs = SpielerInfo[playerid][sHaus];

			Delete3DTextLabel(HausInfo[hs][hsText]);
			HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(HausInfo[hs][hsPickup]);

    		if(HausInfo[hs][hsTyp] == 1)//Appartment
	    	{
      			format(string,sizeof(string),"Du hast dir das Appartment (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"HausAngebot"),SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Appartment für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"HausAngebotID"),COLOR_INFO,string);
		    
    			format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
			}
			else if(HausInfo[hs][hsTyp] == 2)//Haus
   			{
   				format(string,sizeof(string),"Du hast dir das Haus (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"HausAngebot"),SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Haus für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"HausAngebotID"),COLOR_INFO,string);
            	
   				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
   			}
   			else if(HausInfo[hs][hsTyp] == 3)//Villa
   			{
   				format(string,sizeof(string),"Du hast dir die Villa (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"HausAngebot"),SpielerInfo[GetPVarInt(playerid,"HausAngebotID")][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat deine Villa für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"HausAngebotID"),COLOR_INFO,string);
            	
   				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
   			}
   			SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");
            HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
			format(HausInfo[hs][hsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);

			DeletePVar(playerid,"HausAngebot");
			DeletePVar(playerid,"HausAngebotID");
			DeletePVar(playerid,"HausAngebotPreis");
			return 1;
    	}
    	else if(strcmp(Auswahl2, "GHaus", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"GHausAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"GHausAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sGHaus] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Gruppenhaus");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"GHausAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
			format(string,sizeof(string),"Du hast dir das Gruppenhaus (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GHausAngebot"),SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sName],GetPVarInt(playerid,"HausAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);

            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"GHausAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sBankkonto] += GetPVarInt(playerid,"GHausAngebotPreis");
            SpielerInfo[playerid][sGHaus] = GetPVarInt(playerid,"GHausAngebot");
            SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sGHaus] = 0;
			HausInfo[GetPVarInt(playerid,"GHausAngebot")][hsMiete] = 0;
			HausInfo[GetPVarInt(playerid,"GHausAngebot")][hsMietbar] = 0;

            new hs = SpielerInfo[playerid][sGHaus];

			Delete3DTextLabel(HausInfo[hs][hsText]);
			HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(HausInfo[hs][hsPickup]);

    		if(HausInfo[hs][hsTyp] == 1)//Appartment
	    	{
      			format(string,sizeof(string),"Du hast dir das Appartment (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GHausAngebot"),SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Appartment für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"HausAngebotID"),COLOR_INFO,string);

    			format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
			}
			else if(HausInfo[hs][hsTyp] == 2)//Haus
   			{
   				format(string,sizeof(string),"Du hast dir das Haus (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GHausAngebot"),SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Gruppen für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"GHausAngebotID"),COLOR_INFO,string);

   				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
   			}
   			else if(HausInfo[hs][hsTyp] == 3)//Villa
   			{
   				format(string,sizeof(string),"Du hast dir die Villa (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GHausAngebot"),SpielerInfo[GetPVarInt(playerid,"GHausAngebotID")][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(playerid,COLOR_INFO,string);
      			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat deine Villa für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"GHausAngebotPreis"));
            	SendClientMessage(GetPVarInt(playerid,"GHausAngebotID"),COLOR_INFO,string);

   				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
    			HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
   			}
   			SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");
            HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
			format(HausInfo[hs][hsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);

			DeletePVar(playerid,"GHausAngebot");
			DeletePVar(playerid,"GHausAngebotID");
			DeletePVar(playerid,"GHausAngebotPreis");
			return 1;
    	}
    	else if(strcmp(Auswahl2, "Garage", true, strlen(Auswahl2)) == 0)
    	{
    	    if(GetPVarInt(playerid,"GarageAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"GHausAngebotID")))return NichtOnline
    	    if(SpielerInfo[playerid][sGarage] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Garage");
    	    if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"GHausAngebotPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend auf deinem Konto.");
			format(string,sizeof(string),"Du hast dir die Garage (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GarageAngebot"),SpielerInfo[GetPVarInt(playerid,"GarageAngebotID")][sName],GetPVarInt(playerid,"GarageAngebotPreis"));
            SendClientMessage(playerid,COLOR_INFO,string);

            SpielerInfo[playerid][sBankkonto] -= GetPVarInt(playerid,"GarageAngebotPreis");
            SpielerInfo[GetPVarInt(playerid,"GarageAngebotID")][sBankkonto] += GetPVarInt(playerid,"GarageAngebotPreis");
            SpielerInfo[playerid][sGarage] = GetPVarInt(playerid,"GarageAngebot");
            SpielerInfo[GetPVarInt(playerid,"GarageAngebotID")][sGarage] = 0;
			GaragenInfo[GetPVarInt(playerid,"GarageAngebot")][giMiete] = 0;
			GaragenInfo[GetPVarInt(playerid,"GarageAngebot")][giMietbar] = 0;

            new hs = SpielerInfo[playerid][sGarage];

			Delete3DTextLabel(GaragenInfo[hs][giText]);
			GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
			DestroyPickup(GaragenInfo[hs][giPickup]);

			format(string,sizeof(string),"Du hast dir die Garage (ID:{FF0000}%d{00CDFF}) vom Spieler {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} abgekauft.",GetPVarInt(playerid,"GarageAngebot"),SpielerInfo[GetPVarInt(playerid,"GarageAngebotID")][sName],GetPVarInt(playerid,"GarageAngebotPreis"));
        	SendClientMessage(playerid,COLOR_INFO,string);
  			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat deine Garage für {FF0000}%d${00CDFF} abgekauft. Das Geld wurde auf deinem Konto überwiesen.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"GarageAngebotPreis"));
        	SendClientMessage(GetPVarInt(playerid,"GarageAngebotID"),COLOR_INFO,string);

			format(string, sizeof(string), "Garage 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, GaragenInfo[hs][giBesitzer]);
			GaragenInfo[hs][giPickup] = CreatePickup(1272, 23, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], -1);

   			SendClientMessage(playerid,COLOR_INFO,"Das Geld wurde von deinem Konto abgebucht.");
            GaragenInfo[hs][giText] = Create3DTextLabel(string, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);
			format(GaragenInfo[hs][giBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);

			DeletePVar(playerid,"GarageAngebot");
			DeletePVar(playerid,"GarageAngebotID");
			DeletePVar(playerid,"GarageAngebotPreis");
			return 1;
    	}
        return 1;
    }
   	if(strcmp(Auswahl, "Ablehnen", true, strlen(Auswahl)) == 0)
    {
  		if(strcmp(Auswahl2, "Tankstelle", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"TankstelleAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"TankstelleAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");
    	    
         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"TankstelleAngebotID"),COLOR_INFO,string);
            
   			DeletePVar(playerid,"TankstelleAngebot");
			DeletePVar(playerid,"TankstelleAngebotID");
			DeletePVar(playerid,"TankstelleAngebotPreis");
    	    return 1;
    	}
    	else if(strcmp(Auswahl2, "Ammunation", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"AmmunationAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"AmmunationAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");

         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"AmmunationAngebotID"),COLOR_INFO,string);

			DeletePVar(playerid,"AmmunationAngebot");
			DeletePVar(playerid,"AmmunationAngebotID");
			DeletePVar(playerid,"AmmunationAngebotPreis");
    	    return 1;
		}
  		else if(strcmp(Auswahl2, "24/7", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"StoreAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"StoreAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");

         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"StoreAngebotID"),COLOR_INFO,string);

			DeletePVar(playerid,"StoreAngebot");
			DeletePVar(playerid,"StoreAngebotID");
			DeletePVar(playerid,"StoreAngebotPreis");
    	    return 1;
    	}
    	else if(strcmp(Auswahl2, "Haus", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"HausAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"HausAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");

         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"HausAngebotID"),COLOR_INFO,string);

			DeletePVar(playerid,"HausAngebot");
			DeletePVar(playerid,"HausAngebotID");
			DeletePVar(playerid,"HausAngebotPreis");
    	    return 1;
    	}
    	else if(strcmp(Auswahl2, "GHaus", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"GHausAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"GHausAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");

         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"GHausAngebotID"),COLOR_INFO,string);

			DeletePVar(playerid,"GHausAngebot");
			DeletePVar(playerid,"GHausAngebotID");
			DeletePVar(playerid,"GHausAngebotPreis");
    	    return 1;
    	}
    	else if(strcmp(Auswahl2, "Garage", true, strlen(Auswahl2)) == 0)
    	{
	    	if(GetPVarInt(playerid,"GarageAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
    	    if(!IsPlayerConnected(GetPVarInt(playerid,"GarageAngebotID")))return NichtOnline
    	    SendClientMessage(playerid,COLOR_SUPER,"Du hast das Angebot abgelehnt.");

         	format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} hat dein Angebot abgelehnt.",SpielerInfo[playerid][sName]);
            SendClientMessage(GetPVarInt(playerid,"GarageAngebotID"),COLOR_INFO,string);

			DeletePVar(playerid,"GarageAngebot");
			DeletePVar(playerid,"GarageAngebotID");
			DeletePVar(playerid,"GarageAngebotPreis");
    	    return 1;
    	}
        return 1;
    }
    return 1;
}

ocmd:verwaltung(playerid,params[])
{
	new Auswahl[24];
    if(sscanf(params,"s",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /verwaltung [Tankstelle|Ammunation|24/7|Haus|Ghaus|Garage]");
   	if(strcmp(Auswahl, "Tankstelle", true, strlen(Auswahl)) == 0)
    {
        if(SpielerInfo[playerid][sTankstelle] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Tankstelle.");
        ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen\nBeschreibung ändern","Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",1);
		return 1;
	}
	else if(strcmp(Auswahl, "Ammunation", true, strlen(Auswahl)) == 0)
    {
        if(SpielerInfo[playerid][sAmmunation] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Ammunation.");
        ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen","Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",2);
		return 1;
	}
	else if(strcmp(Auswahl, "24/7", true, strlen(Auswahl)) == 0)
    {
        if(SpielerInfo[playerid][sStore] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein 24/7.");
        ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen","Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",3);
		return 1;
	}
	else if(strcmp(Auswahl, "Haus", true, strlen(Auswahl)) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sHaus] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Haus.");
		format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
		ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",4);
		return 1;
	}
	else if(strcmp(Auswahl, "Ghaus", true, strlen(Auswahl)) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sGHaus] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Gruppenhaus.");
		format(string, sizeof(string), "Upgrades\nHauskasse\n%s\nVerkaufen", GHausLocked(playerid));
		ShowPlayerDialog(playerid,DIALOG_GHAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",5);
		return 1;
	}
	else if(strcmp(Auswahl, "Garage", true, strlen(Auswahl)) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sGarage] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Garage.");
		format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\n%s\nVerkaufen", GarageMietbar(playerid), GarageLocked(playerid));
		ShowPlayerDialog(playerid,DIALOG_GARAGE_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
        SetPVarInt(playerid,"Verwaltung",6);
		return 1;
	}
	return 1;
}

ocmd:kaufen(playerid,params[])
{
	new Auswahl[24], string[164];
    if(sscanf(params,"s",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /kaufen [Tankstelle|Ammunation|24/7|Haus|Garage|Grundstück]");
   	if(strcmp(Auswahl, "Tankstelle", true, strlen(Auswahl)) == 0)
    {
        if(!AnTankstellenHaus(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Tankstelle.");
        new tsid = GetNearTankstellenHausID(playerid);
        if(SpielerInfo[playerid][sTankstelle] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits eine Tankstelle.");
        if(strlen(TankstellenInfo[tsid][tsBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst diese Tankstelle nicht kaufen.");
        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir die Tankstelle (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",tsid,TankstellenInfo[tsid][tsPreis]);
	    ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    SetPVarInt(playerid,"Kaufen",1);
	    return 1;
    }
   	if(strcmp(Auswahl, "Ammunation", true, strlen(Auswahl)) == 0)
    {
        if(!AnAmmunation(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem Ammunation.");
        new an = GetNearAmmunationID(playerid);
        if(SpielerInfo[playerid][sAmmunation] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits ein Ammunation.");
        if(strlen(AmmunationInfo[an][amBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst das Ammunation nicht kaufen.");
        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir das Ammunation (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",an,AmmunationInfo[an][amPreis]);
	    ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    SetPVarInt(playerid,"Kaufen",2);
	    return 1;
    }
	if(strcmp(Auswahl, "24/7", true, strlen(Auswahl)) == 0)
    {
        if(!AnStore(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem 24/7.");
        new an = GetNearStoreID(playerid);
        if(SpielerInfo[playerid][sStore] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits ein 24/7.");
        if(strlen(StoreInfo[an][siBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst den 24/7 nicht kaufen.");
        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir das 24/7 (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",an,StoreInfo[an][siPreis]);
	    ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    SetPVarInt(playerid,"Kaufen",3);
	    return 1;
    }
	if(strcmp(Auswahl, "Haus", true, strlen(Auswahl)) == 0)
    {
        if(!AnHaus(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem Haus.");
        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
		ShowPlayerDialog(playerid,DIALOG_HAUS_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kaufauswahl","Privat\nGruppe","Weiter","Abbrechen");
	    return 1;
    }
	if(strcmp(Auswahl, "Garage", true, strlen(Auswahl)) == 0)
    {
        if(!AnGarage(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Garage.");
        new an = GetNearGarageID(playerid);
        if(SpielerInfo[playerid][sGarage] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits eine Garage.");
        if(strlen(GaragenInfo[an][giBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst die Garage nicht kaufen.");
        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir die Garage (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",an,GaragenInfo[an][giPreis]);
	    ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    SetPVarInt(playerid,"Kaufen",6);
	    return 1;
    }
    if(strcmp(Auswahl, "Grundstück", true, strlen(Auswahl)) == 0)
    {
		if(!AnGrundstuck(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem Grundstück.");
		new an = GetNearGrundstuckID(playerid);
		if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
		if(SpielerInfo[playerid][sFLeader] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist kein Leader einer Firma.");
		if(GFirmaInfo[an][igekauft] != 0) return SendClientMessage(playerid,COLOR_GREY,"Du kannst dieses Grundstück nicht kaufen.");
		if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir das Grundstück (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",an,GFirmaInfo[an][fgrpreis]);
	    ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    SetPVarInt(playerid,"Kaufen",7);
		return 1;
	}
	return 1;
}

ocmd:pay(playerid,params[])
{
	new pID,Betrag,string[144];
    if(sscanf(params,"ud",pID,Betrag))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /pay [SpielerID/Name] [Betrag]");
	if(!IsPlayerConnected(pID))return NichtOnline
    if(GetDistanceBetweenPlayers(playerid, pID) >= 7)return NichtNahe
    if(GetPlayerMoneyEx(playerid) < Betrag)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
    if(Betrag < 0 || Betrag > 1500)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst maximal 1500$ in Bar geben.");
	GivePlayerMoneyEx(playerid,-Betrag);
	GivePlayerMoneyEx(pID,Betrag);
	format(string,sizeof(string),"%s nimmt %d$ aus seiner Tasche und gibt es %s.",SpielerInfo[playerid][sName],Betrag,SpielerInfo[pID][sName]);
	ProxDetector(12, playerid, string,COLOR_SUPER,COLOR_SUPER,COLOR_SUPER,COLOR_SUPER,COLOR_SUPER);
	return 1;
}

ocmd@2:ad,werbung(playerid,params[])
{
    if(GlobalVars[Werbung] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Die Werbung ist zurzeit deaktiviert.");
	if(GlobalVars[WerbungAktiv] == 0)
	{
	    new text[128];
	    if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Du brauchst Level 2 um eine Werbung zu schalten.");
	    if(SpielerInfo[playerid][sADSperre] > 0)
	    {
	        format(text,sizeof(text),"Du bist noch für %d Minute(n) von der Werbung ausgeschlossen.",SpielerInfo[playerid][sADSperre]);
	        SendClientMessage(playerid,COLOR_RED,text);
	        return 1;
	    }
		if(sscanf(params,"s[51]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ad [Text] | Pro Zeichen 15$");
		if(strlen(text) < 10)return SendClientMessage(playerid,COLOR_GREY,"Deine Werbung muss zwischen 10 & 50 Zeichen lang sein.");
		if(strlen(text) > 51)return SendClientMessage(playerid,COLOR_GREY,"Deine Werbung muss zwischen 10 & 50 Zeichen lang sein.");
  		if(GetPlayerMoneyEx(playerid) >= strlen(text)*15)
	    {
			new string[144];
			SetTimer("WerbungTimer",120000,false);
			GlobalVars[WerbungAktiv] = 1;
			format(string,sizeof(string),"~g~Werbung: ~w~%s ~g~Kontakt: ~w~%s",text,SpielerInfo[playerid][sName]);
			TextDrawSetString(StatusWerbung, string);
			format(string,sizeof(string),"{00A900}Werbung: {FFFFFF}%s {00A900}Kontakt: {FFFFFF}%s",text,SpielerInfo[playerid][sName]);
			SendICPMessage(string);
			GivePlayerMoneyEx(playerid,-strlen(text)*15);
			format(string,sizeof(string),"Deine Werbung hat %d Zeichen gehabt und %d$ gekostet.",strlen(text),strlen(text)*15);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			return 1;
	    }
	    else SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
	    return 1;
	}
	else SendClientMessage(playerid,COLOR_GREY,"Die nächste Werbung kann noch nicht geschrieben werden.");
	return 1;
}

ocmd@2:uad,uwerbung(playerid,params[])
{
    if(GlobalVars[Werbung] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Die Werbung ist zurzeit deaktiviert.");
	if(SpielerInfo[playerid][sFraktion] != 19)return NichtBerechtigt
	if(GlobalVars[WerbungAktiv] == 0)
	{
	    new text[51];
	    if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid,COLOR_SORRY,"Du brauchst Level 2 um eine Werbung zu schalten.");
	    if(SpielerInfo[playerid][sADSperre] > 0)
	    {
	        format(text,sizeof(text),"Du bist noch für %d Minute(n) von der Werbung ausgeschlossen.",SpielerInfo[playerid][sADSperre]);
	        SendClientMessage(playerid,COLOR_RED,text);
	        return 1;
	    }
		if(sscanf(params,"s[51]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /ad [Text] | Pro Zeichen 15$");
		if(strlen(text) < 10)return SendClientMessage(playerid,COLOR_GREY,"Deine Werbung muss zwischen 10 & 50 Zeichen lang sein.");
		if(strlen(text) > 51)return SendClientMessage(playerid,COLOR_GREY,"Deine Werbung muss zwischen 10 & 50 Zeichen lang sein.");
  		if(GetPlayerMoneyEx(playerid) >= strlen(text)*15)
	    {
			new string[144];
			SetTimer("WerbungTimer",120000,false);
			GlobalVars[WerbungAktiv] = 1;
			format(string,sizeof(string),"~g~Werbung: ~w~%s ~g~Kontakt: ~w~Unbekannt",text);
			TextDrawSetString(StatusWerbung, string);
			format(string,sizeof(string),"{00A900}Werbung: {FFFFFF}%s {00A900}Kontakt: {FFFFFF}Unbekannt",text);
			SendICPMessage(string);
			GivePlayerMoneyEx(playerid,-strlen(text)*15);
			format(string,sizeof(string),"Deine Werbung hat %d Zeichen gehabt und %d$ gekostet.",strlen(text),strlen(text)*15);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			return 1;
	    }
	    else SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
	    return 1;
	}
	else SendClientMessage(playerid,COLOR_GREY,"Die nächste Werbung kann noch nicht geschrieben werden.");
	return 1;
}


ocmd:accept(playerid,params[])
{
	new Auswahl[10], string[144];
	if(sscanf(params,"s",Auswahl))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /accept [Ticket|Heal|Paket|Repair]");
	{
		if(strcmp(Auswahl, "Ticket", true, strlen(Auswahl)) == 0)
	    {
  			if(GetPVarInt(playerid,"TicketAngebot") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
			if(!IsPlayerConnected(GetPVarInt(playerid,"Officer")))return NichtOnline
			if(GetDistanceBetweenPlayers(playerid, GetPVarInt(playerid,"Officer")) >= 10)return NichtNahe
			if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid,"TicketPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
			format(string,128,"Spieler {FF0000}%s{00CDFF} hat das Ticket in höhe von {FF0000}%d${00CDFF} bezahlt.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"TicketPreis"));
			SendClientMessage(GetPVarInt(playerid,"Officer"),COLOR_INFO,string);
			format(string,128,"Du das Ticket in höhe von {FF0000}%d${00CDFF} bezahlt.",GetPVarInt(playerid,"TicketPreis"));
			SendClientMessage(playerid,COLOR_INFO,string);
			GivePlayerMoneyEx(playerid,-GetPVarInt(playerid,"TicketPreis"));
			FrakInfo[SpielerInfo[GetPVarInt(playerid,"Officer")][sFraktion]][fiFrakKasse] += GetPVarInt(playerid,"TicketPreis");
			DeletePVar(playerid,"Officer");
			DeletePVar(playerid,"TicketAngebot");
			DeletePVar(playerid,"TicketPreis");
		}
		else if(strcmp(Auswahl, "Heal", true, strlen(Auswahl)) == 0)
	    {
	        new pID = GetPVarInt(playerid,"Arzt");
  			if(GetPVarInt(playerid,"HealthPreis") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
			if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid,"HealthPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
			GivePlayerMoneyEx(playerid,-GetPVarInt(playerid,"HealthPreis"));
			GivePlayerMoneyEx(pID,GetPVarInt(playerid,"HealthPreis"));
			TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(pID,false);
			format(string,128,"%s %s beginnt mit der Heilung.",RangName(pID),SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_SUPER,string);
			format(string,128,"Du beginnst %s zu heilen.",SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_SUPER,string);
			HealthTimer[playerid] = SetTimerEx("Heilen",1000,true,"i",playerid);
			HealthTimer[pID] = SetTimerEx("Heilen",1000,true,"i",playerid);
			return 1;
	    }
   		else if(strcmp(Auswahl, "Paket", true, strlen(Auswahl)) == 0)
	    {
	        new pID = GetPVarInt(playerid,"ErsteHilfePaket");
  			if(GetPVarInt(playerid,"ErsteHilfePaketPreis") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
			if(SpielerInfo[playerid][sPaket] == 1)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits ein Erste-Hilfe-Paket.");
			if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid,"ErsteHilfePaketPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
			GivePlayerMoneyEx(playerid,-GetPVarInt(playerid,"ErsteHilfePaketPreis"));
			FrakInfo[SpielerInfo[pID][sFraktion]][fiFrakKasse] += GetPVarInt(playerid,"ErsteHilfePaketPreis");
			SpielerInfo[playerid][sPaket] = 1;
			format(string,128,"%s %s hat dir ein Erste-Hilfe-Paket gegeben.",RangName(pID),SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_SUPER,string);
			format(string,128,"Du hast %s ein Erste-Hilfe-Paket für %d$ verkauft.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"ErsteHilfePaketPreis"));
			SendClientMessage(pID,COLOR_SUPER,string);
			DeletePVar(playerid,"ErsteHilfePaket");
			DeletePVar(playerid,"ErsteHilfePaketPreis");
			return 1;
	    }
   		else if(strcmp(Auswahl, "Repair", true, strlen(Auswahl)) == 0)
	    {
	        new pID = GetPVarInt(playerid,"MechanikerID");
  			if(GetPVarInt(playerid,"MechanikerPreis") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Angebot erhalten.");
  			if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Nur im Fahrzeug möglich.");
			if(!IsPlayerConnected(pID))return NichtOnline
			if(GetDistanceBetweenPlayers(playerid, pID) > 12)return NichtNahe
			new PLAYER_STATE:State=GetPlayerState(playerid);
 			if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
			if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid,"MechanikerPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
			
			GivePlayerMoneyEx(playerid,-GetPVarInt(playerid,"MechanikerPreis"));
			FrakInfo[SpielerInfo[pID][sFraktion]][fiFrakKasse] += GetPVarInt(playerid,"MechanikerPreis");

			RepairVehicle(GetPlayerVehicleID(playerid));
			SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);

			format(string,128,"%s %s hat dein Fahrzeug für %d$ repariert.",RangName(pID),SpielerInfo[pID][sName],GetPVarInt(playerid,"MechanikerPreis"));
			SendClientMessage(playerid,COLOR_SUPER,string);
			format(string,128,"Du hast das Fahrzeug von %s für %d$ repariert.",SpielerInfo[playerid][sName],GetPVarInt(playerid,"MechanikerPreis"));
			SendClientMessage(pID,COLOR_SUPER,string);
			DeletePVar(playerid,"MechanikerID");
			DeletePVar(playerid,"MechanikerPreis");
			return 1;
	    }
	}
	return 1;
}

//Job Befehle
ocmd:jc(playerid,params[])
{
	new Text[128], string[144];
	if(SpielerInfo[playerid][sNebenjob] == 0)return NichtBerechtigt
	if(sscanf(params,"s[128]",Text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /jc [Nachricht]");
	{
		if(GetPVarInt(playerid,"KehrmaschinenDuty") == 1 || GetPVarInt(playerid,"PilotDuty") == 1 ||
		GetPVarInt(playerid,"BusfahrerDuty") == 1 || GetPVarInt(playerid,"MüllmannDuty") == 1 ||
		GetPVarInt(playerid,"LandwirtDuty") == 1 || GetPVarInt(playerid,"HolzfallerDuty") == 1)
		{
	  		if(SpielerInfo[playerid][sNebenjob] == 2)
	  		{
		 		foreach(new i : Player)
		 		{
	    			if(SpielerInfo[i][sNebenjob] != 2)continue;
				    if(GetPVarInt(playerid,"PizzaboteDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 3)
	  		{
		 		foreach(new i : Player)
		 		{
	    			if(SpielerInfo[i][sNebenjob] != 3)continue;
				    if(GetPVarInt(playerid,"KehrmaschinenDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 4)
	  		{
		 		foreach(new i : Player)
		 		{
	    			if(SpielerInfo[i][sNebenjob] != 4)continue;
				    if(GetPVarInt(playerid,"PilotDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 5)
	  		{
		 		foreach(new i : Player)
		 		{
		 		    if(SpielerInfo[i][sNebenjob] != 5)continue;
				    if(GetPVarInt(playerid,"BusfahrerDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 6)
	  		{
		 		foreach(new i : Player)
		 		{
		 		    if(SpielerInfo[i][sNebenjob] != 6)continue;
				    if(GetPVarInt(playerid,"MüllmannDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 7)
	  		{
		 		foreach(new i : Player)
		 		{
		 		    if(SpielerInfo[i][sNebenjob] != 7)continue;
				    if(GetPVarInt(playerid,"LandwirtDuty") != 1)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
		 		return 1;
	  		}
			else if(SpielerInfo[playerid][sNebenjob] == 10)
	  		{
		 		foreach(new i : Player)
		 		{
		 		    if(SpielerInfo[i][sNebenjob] != 8)continue;
					format(string,128,"[JOBCHAT]: %s sagt: %s",SpielerInfo[playerid][sName],Text);
					SendClientMessage(i,COLOR_JOB,string);
		 		}
	  		}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_SORRY,"Der Nebenjob Chat ist für dich deaktiviert, da du nicht im Dienst bist.");
		    return 1;
		}
	}
	return 1;
}
// ==================== << Tuning >>
#include <acuf>

#define INVALID_TUNING_ID -1
#define INVALID_TUNINGMENU_ID -1
#define TUNINGMENU_POSX 450.0
#define TUNINGMENU_POSY 150.0

//Reperaturpreis
#define PREIS_MOTOR 150
#define PREIS_FDOOR_R 150
#define PREIS_FDOOR_E 250
#define PREIS_HDOOR_R 150
#define PREIS_HDOOR_E 250
#define PREIS_HAUBE_R 150
#define PREIS_HAUBE_E 250
#define PREIS_KOFFER_R 150
#define PREIS_KOFFER_E 250
#define PREIS_FGLASS 150
#define PREIS_FBUMPER_R 150
#define PREIS_FBUMPER_E 150
#define PREIS_HBUMPER_R 150
#define PREIS_HBUMPER_E 150
#define PREIS_WHEEL 50
#define PREIS_LAMP 50

//Tuningpreis
#define PREIS_COLOR1 		150 //x
#define PREIS_COLOR2 		150 //x
#define PREIS_PAINT 		1000 //x
#define PREIS_HOOD 			800
#define PREIS_ROOF 			800
#define PREIS_SPOILER 		1100
#define PREIS_SIDESKIRT 	1000
#define PREIS_LAMPS     	300
#define PREIS_NITRO2     	500
#define PREIS_NITRO5     	1000
#define PREIS_NITRO10    	3000
#define PREIS_EXHAUST   	3000 //x
#define PREIS_WHEELS    	500
#define PREIS_STEREO    	600
#define PREIS_HYDRAULICS    1500
#define PREIS_FRONT_BUMPER  1500
#define PREIS_REAR_BUMPER   1500
#define PREIS_VENT_RIGHT    1500
#define PREIS_VENT_LEFT     1500


#define MenuKaufButton 	"~<~Kaufen~>~"
#define MenuKasseButton "~<~Bezahlen~>~"
#define MenuNextButton "Weiter"
#define MenuBackButton "Zurueck"
#define MenuWNextButton "~<~Weiter~>~"

#define MenuPreis 		"~r~~h~~h~~h~"
#define MenuGesPreis 	"~r~~h~"

enum TuningEnum
{
	Float:tPos[4],
	tName[32],
	tPlayerID,
	tVehicleID,
	tMenuID,
	tItemTo,
	tItemWhl,
	tColor[2],
	tColorPreis[2],
	tTuning[14],
	tTuningPreis[14],
	tReperatur[10],
	tPaintjob,
	tPaintjobPreis,
	tTor,
	Menu:tMenu
}

new TuningInfo[][TuningEnum] =
{
	{{2117.74292, -1734.44360, 12.92870, 0.00000},"  Auto Service",INVALID_PLAYER_ID,INVALID_VEHICLE_ID,INVALID_TUNINGMENU_ID},
	{{1384.47388, -1890.34192, 12.50040, 180.00000},"  Pimp MY Ride",INVALID_PLAYER_ID,INVALID_VEHICLE_ID,INVALID_TUNINGMENU_ID},
	{{214.13503, -1425.59680, 12.57110, 44.00000},"  CowCar",INVALID_PLAYER_ID,INVALID_VEHICLE_ID,INVALID_TUNINGMENU_ID},
	{{1213.43848, -1068.43860, 30.76697, 180.00000},"  Opa´s Tuning",INVALID_PLAYER_ID,INVALID_VEHICLE_ID,INVALID_TUNINGMENU_ID}
};

enum
{
	tkMenu,
	tkMenuRep,
	tkMenuLack,
	tkMenuLackSwitch1,
	tkMenuLackSwitch2,
	tkMenuLackSwitch3,
	tkMenuKaross,
	tkMenuKarossHood,
	tkMenuKarossRoof,
	tkMenuKarossSideskirt,
	tkMenuKarossLamps,
	tkMenuKarossFBumper,
	tkMenuKarossRBumper,
	tkMenuKarossRVent,
	tkMenuKarossLVent,
	tkMenuAuspuff,
	tkMenuSpoiler,
	tkMenuWheels,
	tkMenuHydraulik,
	tkMenuNitro
}

GetPosInFront(Float:z_angle, Float:distance, &Float:x, &Float:y, &Float:z)
{
	#pragma unused z
	x += distance * floatsin(-z_angle, degrees);
	y += distance * floatcos(-z_angle, degrees);

	return 1;
}

ocmd:tuning(playerid,params[])
{
	OpenPlayerTuning(playerid);
	return 1;
}

stock Knockout(zielid,playerid)
{
	SetPlayerSkin(playerid,GetPlayerSkin(zielid));
	SetPlayerSkin(zielid,135);
	TextDrawShowForPlayer(zielid,BlackScreendraw);
	GameTextForPlayer(zielid,"~r~Knockout ~w~Deine Kleidung wurde geklaut!",3000,4);
	SendClientMessage(playerid,COLOR_INFO,"Du hast dir eine Kleidung geklaut!");
	SetTimerEx("EntKnockout",10000,false,"d",zielid);
	return true;
}

stock ProxDetectorS(Float:radius,playerid,targetid)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
		new Float:Pos[3];
		GetPlayerPos(targetid,Pos[0],Pos[1],Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid,radius,Pos[0],Pos[1],Pos[2]))
		return true;
	}
	return false;
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = false;
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,false,false,false,false,0);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	GameTextForPlayer(playerid, "", 1, 1);
    return true;
}

stock OnePlayAnim(playerid,const animlib[], const animname[],Float:Speed,bool:looping,bool:lockx,bool:locky,bool:lock,lp)
{
    gPlayerUsingLoopingAnim[playerid] = true;
	ApplyAnimation(playerid,animlib,animname,Speed,looping,lockx,locky,lock,lp,SYNC_ALL);
	return true;
}

stock PlayerHearMusicInRange(Float:x,Float:y,Float:z,musicid,Float:radius,Takecount,Stopmusictime)//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
			PlayerPlaySound(i,musicid,0.0,0.0,0.0);
			if(Takecount == 1) SetTimerEx("StopPlayerPlaySound",Stopmusictime, false,"i",i);
		}
	}
	return 1;
}

stock FirmChat(color,const string[],orgid)
{
    for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    if(SpielerInfo[i][sFirma] == orgid)
			{
		        SendClientMessage(i,color,string);
			}
		}
	}
	return true;
}

stock CreateTuningGarage()
{
	new Float:Pos[3];
	for(new i=0;i<sizeof(TuningInfo);i++)
	{
        SetObjectMaterialText(
		CreateObject(12978,TuningInfo[i][tPos][0],TuningInfo[i][tPos][1],TuningInfo[i][tPos][2],0.0,0.0,TuningInfo[i][tPos][3])
		, TuningInfo[i][tName], 0, OBJECT_MATERIAL_SIZE_256x128, "Comic Sans MS", 40, true, 0xFF263739, 0xFFBDBEC6, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);

		CreateObject(13027,TuningInfo[i][tPos][0],TuningInfo[i][tPos][1],TuningInfo[i][tPos][2]+2.83,0.0,0.0,TuningInfo[i][tPos][3]+180.0);
        Pos[0] = TuningInfo[i][tPos][0];
        Pos[1] = TuningInfo[i][tPos][1];
        Pos[2] = TuningInfo[i][tPos][2];
        GetPosInFront(TuningInfo[i][tPos][3], -7.89, Pos[0], Pos[1], Pos[2]);
		TuningInfo[i][tTor] = CreateObject(13028,Pos[0], Pos[1], Pos[2]+4.5,0.0,0.0,TuningInfo[i][tPos][3] + 90);

    	Create3DTextLabel("{FFFFFF}\nBenutze '{FF0000}N{FFFFFF}' zum Tunen", 0x008080FF, Pos[0], Pos[1], TuningInfo[i][tPos][2], 10, 0);
	}
}

stock MoveTuningOpen(TuningID,bool:open)
{
	new Float:Pos[3];
	if(open)//auf
	{
		Pos[0] = TuningInfo[TuningID][tPos][0];
		Pos[1] = TuningInfo[TuningID][tPos][1];
		Pos[2] = TuningInfo[TuningID][tPos][2];
		GetPosInFront(TuningInfo[TuningID][tPos][3], -7.89, Pos[0], Pos[1], Pos[2]);
	    MoveObject(TuningInfo[TuningID][tTor], Pos[0], Pos[1], Pos[2]+4.5,3.0,0.0,0.0,TuningInfo[TuningID][tPos][3]+90);
	}
	else//zu
	{
		Pos[0] = TuningInfo[TuningID][tPos][0];
		Pos[1] = TuningInfo[TuningID][tPos][1];
		Pos[2] = TuningInfo[TuningID][tPos][2];
        GetPosInFront(TuningInfo[TuningID][tPos][3], -7.89, Pos[0], Pos[1], Pos[2]);
	    MoveObject(TuningInfo[TuningID][tTor], Pos[0], Pos[1], Pos[2]+1.53,3.0,0.0,0.0,TuningInfo[TuningID][tPos][3]+90);
	}
}

stock Menu:CreateTuningMenu(TuningID)
{
	new string[128];
    TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Art");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "Preis");


	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Reperatur");AddMenuItem(TuningInfo[TuningID][tMenu], 1,"~>~");

	if(!isVehicleTuning(TuningInfo[TuningID][tVehicleID]))
	{
		TuningInfo[TuningID][tMenuID] = tkMenu;

    	SetTuningCamera(TuningID,6.0,-35.0,3.0);
		return TuningInfo[TuningID][tMenu];
	}
    AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Tuning Entfernen");AddMenuItem(TuningInfo[TuningID][tMenu], 1,"~>~");

	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tColorPreis][0]+TuningInfo[TuningID][tColorPreis][1]+TuningInfo[TuningID][tPaintjobPreis]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Lackierung");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	format(string,sizeof(string),MenuPreis"%d$",
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HOOD] +
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_ROOF] +
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SIDESKIRT] +
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_LAMPS] +
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_FRONT_BUMPER]+
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_REAR_BUMPER] +
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_RIGHT]+
	TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_LEFT]
	);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Karosserie");AddMenuItem(TuningInfo[TuningID][tMenu], 1,string);
	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_EXHAUST]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Auspuff");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SPOILER]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Spoiler");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_WHEELS]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Felgen");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HYDRAULICS]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Hydraulik");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_NITRO]);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Nitro");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);

	new gespreis = 0;
	for(new i=0;i<14;i++)
	{
	    gespreis += TuningInfo[TuningID][tTuningPreis][i];
	}
	gespreis += TuningInfo[TuningID][tColorPreis][0];
	gespreis += TuningInfo[TuningID][tColorPreis][1];
	gespreis += TuningInfo[TuningID][tPaintjobPreis];
    format(string,sizeof(string),MenuGesPreis"%d$",gespreis);
	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKasseButton);	AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);

	TuningInfo[TuningID][tMenuID] = tkMenu;

    SetTuningCamera(TuningID,6.0,-35.0,3.0);
	return TuningInfo[TuningID][tMenu];
}

stock SetTuningCamera(TuningID,Float:distance,Float:rotation=0.0,Float:high = 1.0)
{
	new Float:xPos[4];
	GetVehiclePos(TuningInfo[TuningID][tVehicleID],xPos[0],xPos[1],xPos[2]);
 	GetVehicleZAngle(TuningInfo[TuningID][tVehicleID],xPos[3]);
	SetPlayerCameraLookAt(TuningInfo[TuningID][tPlayerID],xPos[0],xPos[1],xPos[2]);
    GetPosInFront(xPos[3] + rotation ,distance ,xPos[0],xPos[1],xPos[2]);
	SetPlayerCameraPos(TuningInfo[TuningID][tPlayerID],xPos[0],xPos[1],xPos[2]+high);
	return 1;
}

stock OpenPlayerTuning(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))return 0;
	new vehicleid = GetPlayerVehicleID(playerid);

	new TuningID = GetFreeTuningID(playerid);
	if(TuningID == INVALID_TUNING_ID)return 0;

	SetVehiclePos(vehicleid,TuningInfo[TuningID][tPos][0],TuningInfo[TuningID][tPos][1],TuningInfo[TuningID][tPos][2]);
	SetVehicleZAngle(vehicleid,TuningInfo[TuningID][tPos][3]);

    TuningInfo[TuningID][tVehicleID] = vehicleid;
    TuningInfo[TuningID][tPlayerID] = playerid;
	for(new i=0;i<14;i++)
	{
	    TuningInfo[TuningID][tTuning][i] = FahrzeugInfo[vehicleid][fTuning][i];
	    TuningInfo[TuningID][tTuningPreis][i] = 0;
	}
	TuningInfo[TuningID][tColor][0] = FahrzeugInfo[vehicleid][fColor][0];
	TuningInfo[TuningID][tColorPreis][0] = 0;
	TuningInfo[TuningID][tColor][1] = FahrzeugInfo[vehicleid][fColor][1];
	TuningInfo[TuningID][tColorPreis][1] = 0;
	TuningInfo[TuningID][tPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];
	TuningInfo[TuningID][tPaintjobPreis] = 0;


	//________ Tor Kamera
	new Float:Pos[3];
	Pos[0] = TuningInfo[TuningID][tPos][0];
    Pos[1] = TuningInfo[TuningID][tPos][1];
    Pos[2] = TuningInfo[TuningID][tPos][2];
    GetPosInFront(TuningInfo[TuningID][tPos][3], -7.89, Pos[0], Pos[1], Pos[2]);
	SetPlayerCameraLookAt(TuningInfo[TuningID][tPlayerID],Pos[0],Pos[1],Pos[2]);
    GetPosInFront(TuningInfo[TuningID][tPos][3] - 30, -10.0, Pos[0], Pos[1], Pos[2]);
	SetPlayerCameraPos(TuningInfo[TuningID][tPlayerID],Pos[0],Pos[1],Pos[2] + 6);

    SetTimerEx("OpenPlayerTuningEx",2000,false,"d",TuningID);
    MoveTuningOpen(TuningID,false);

	TogglePlayerControllable(playerid, false);
	return 1;
}

forward OpenPlayerTuningEx(TuningID);
public OpenPlayerTuningEx(TuningID)
{
	ShowMenuForPlayer(CreateTuningMenu(TuningID), TuningInfo[TuningID][tPlayerID]);
	return 1;
}

stock OnPlayerTuningKey(playerid)
{
	new TuningID = GetPlayerTuningID(playerid);
	if(TuningID!= INVALID_TUNING_ID)
   	{
   	    new vehicleid = TuningInfo[TuningID][tVehicleID];
   	    if(TuningInfo[TuningID][tMenuID] == tkMenu)
   	    {
		   	for(new i=0;i<14;i++)
			{
		    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE:i));
		   		AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][i]);
			}
	    	ChangeVehiclePaintjob(vehicleid, FahrzeugInfo[vehicleid][fPaintjob]);
			ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1]);


			MoveTuningOpen(TuningID,true);
   	    	TogglePlayerControllable(playerid, true);
   	    	SetCameraBehindPlayer(playerid);
   	        HideMenuForPlayer(TuningInfo[TuningID][tMenu],playerid);
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
            TuningInfo[TuningID][tVehicleID] = INVALID_VEHICLE_ID;
			TuningInfo[TuningID][tPlayerID] = INVALID_PLAYER_ID;
			TuningInfo[TuningID][tMenuID] = INVALID_TUNINGMENU_ID;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch1)
   	    {
   	        TuningInfo[TuningID][tColorPreis][0] = 0;
			TuningInfo[TuningID][tColor][0] = FahrzeugInfo[vehicleid][fColor][0];
			ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0], TuningInfo[TuningID][tColor][1]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch2)
   	    {
   	        TuningInfo[TuningID][tColorPreis][1] = 0;
			TuningInfo[TuningID][tColor][1] = FahrzeugInfo[vehicleid][fColor][1];
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], FahrzeugInfo[vehicleid][fColor][1]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch3)
   	    {
   	        TuningInfo[TuningID][tPaintjobPreis] = 0;
			TuningInfo[TuningID][tPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];	TuningInfo[TuningID][tColor][0] = FahrzeugInfo[vehicleid][fColor][0];
	    	ChangeVehiclePaintjob(vehicleid, FahrzeugInfo[vehicleid][fPaintjob]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuAuspuff)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_EXHAUST));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_EXHAUST] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_EXHAUST];
            TuningInfo[TuningID][tTuningPreis][CARMODTYPE_EXHAUST] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_EXHAUST));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_EXHAUST]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuSpoiler)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SPOILER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_SPOILER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_SPOILER];
      		TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SPOILER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SPOILER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_SPOILER]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuWheels)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_WHEELS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_WHEELS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_WHEELS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_WHEELS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_WHEELS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_WHEELS]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuHydraulik)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HYDRAULICS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_HYDRAULICS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_HYDRAULICS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HYDRAULICS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HYDRAULICS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_HYDRAULICS]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuNitro)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_NITRO));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_NITRO] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_NITRO];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_NITRO] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_NITRO));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_NITRO]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossHood)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HOOD));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_HOOD] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_HOOD];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HOOD] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HOOD));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_HOOD]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRoof)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_ROOF));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_ROOF] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_ROOF];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_ROOF] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_ROOF));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_ROOF]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossSideskirt)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SIDESKIRT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_SIDESKIRT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_SIDESKIRT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SIDESKIRT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SIDESKIRT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_SIDESKIRT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLamps)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_LAMPS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_LAMPS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_LAMPS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_LAMPS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_LAMPS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_LAMPS]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossFBumper)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_FRONT_BUMPER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_FRONT_BUMPER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_FRONT_BUMPER];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_FRONT_BUMPER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_FRONT_BUMPER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_FRONT_BUMPER]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRBumper)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_REAR_BUMPER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_REAR_BUMPER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_REAR_BUMPER];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_REAR_BUMPER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_REAR_BUMPER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_REAR_BUMPER]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRVent)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_RIGHT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_RIGHT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_VENT_RIGHT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_RIGHT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_RIGHT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_VENT_RIGHT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLVent)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_LEFT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_LEFT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_VENT_LEFT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_LEFT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_LEFT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_VENT_LEFT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   		DestroyMenu(TuningInfo[TuningID][tMenu]);
		ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
    }

	return 1;
}



stock TuningEnterPress(playerid)
{
   	new TuningID = GetPlayerTuningID(playerid);
	if(TuningID!= INVALID_TUNING_ID)
   	{
   	    new vehicleid = TuningInfo[TuningID][tVehicleID];
   	    if(TuningInfo[TuningID][tMenuID] == tkMenu)
   	    {
		   	for(new i=0;i<14;i++)
			{
		    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE:i));
		   		AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][i]);
			}
	    	ChangeVehiclePaintjob(vehicleid, FahrzeugInfo[vehicleid][fPaintjob]);
			ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1]);


			MoveTuningOpen(TuningID,true);
   	    	TogglePlayerControllable(playerid, true);
   	    	SetCameraBehindPlayer(playerid);
   	        HideMenuForPlayer(TuningInfo[TuningID][tMenu],playerid);
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
            TuningInfo[TuningID][tVehicleID] = INVALID_VEHICLE_ID;
			TuningInfo[TuningID][tPlayerID] = INVALID_PLAYER_ID;
			TuningInfo[TuningID][tMenuID] = INVALID_TUNINGMENU_ID;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch1)
   	    {
   	        TuningInfo[TuningID][tColorPreis][0] = 0;
			TuningInfo[TuningID][tColor][0] = FahrzeugInfo[vehicleid][fColor][0];
			ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0], TuningInfo[TuningID][tColor][1]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch2)
   	    {
   	        TuningInfo[TuningID][tColorPreis][1] = 0;
			TuningInfo[TuningID][tColor][1] = FahrzeugInfo[vehicleid][fColor][1];
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], FahrzeugInfo[vehicleid][fColor][1]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch3)
   	    {
   	        TuningInfo[TuningID][tPaintjobPreis] = 0;
			TuningInfo[TuningID][tPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];	TuningInfo[TuningID][tColor][0] = FahrzeugInfo[vehicleid][fColor][0];
	    	ChangeVehiclePaintjob(vehicleid, FahrzeugInfo[vehicleid][fPaintjob]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
   	    }
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuAuspuff)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_EXHAUST));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_EXHAUST] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_EXHAUST];
            TuningInfo[TuningID][tTuningPreis][CARMODTYPE_EXHAUST] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_EXHAUST));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_EXHAUST]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuSpoiler)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SPOILER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_SPOILER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_SPOILER];
      		TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SPOILER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SPOILER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_SPOILER]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuWheels)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_WHEELS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_WHEELS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_WHEELS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_WHEELS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_WHEELS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_WHEELS]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuHydraulik)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HYDRAULICS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_HYDRAULICS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_HYDRAULICS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HYDRAULICS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HYDRAULICS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_HYDRAULICS]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuNitro)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_NITRO));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_NITRO] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_NITRO];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_NITRO] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_NITRO));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_NITRO]);
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossHood)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HOOD));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_HOOD] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_HOOD];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HOOD] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HOOD));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_HOOD]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRoof)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_ROOF));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_ROOF] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_ROOF];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_ROOF] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_ROOF));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_ROOF]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossSideskirt)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SIDESKIRT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_SIDESKIRT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_SIDESKIRT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SIDESKIRT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SIDESKIRT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_SIDESKIRT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLamps)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_LAMPS));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_LAMPS] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_LAMPS];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_LAMPS] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_LAMPS));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_LAMPS]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossFBumper)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_FRONT_BUMPER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_FRONT_BUMPER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_FRONT_BUMPER];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_FRONT_BUMPER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_FRONT_BUMPER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_FRONT_BUMPER]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRBumper)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_REAR_BUMPER));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_REAR_BUMPER] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_REAR_BUMPER];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_REAR_BUMPER] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_REAR_BUMPER));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_REAR_BUMPER]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRVent)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_RIGHT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_RIGHT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_VENT_RIGHT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_RIGHT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_RIGHT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_VENT_RIGHT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   	    else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLVent)
   	    {
   	    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_LEFT));
   	    	TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_LEFT] = FahrzeugInfo[TuningID][fTuning][CARMODTYPE_VENT_LEFT];
   	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_LEFT] = 0;
		   	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_LEFT));
		   	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][CARMODTYPE_VENT_LEFT]);

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
   		DestroyMenu(TuningInfo[TuningID][tMenu]);
		ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
    }
	return 1;
}

stock TuningSelectedMenuRow(playerid,TuningID, row)
{
	new string[128];
    DestroyMenu(TuningInfo[TuningID][tMenu]);
    new vehicleid = TuningInfo[TuningID][tVehicleID];

	if(TuningInfo[TuningID][tMenuID] == tkMenu)
	{
	    switch(row)
	    {
	        case 0://Reperatur
	        {
	            TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX-100, TUNINGMENU_POSY, 210.0, 10.0);
	            SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Reperatur");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

				for(new i = 0;i<10;i++)
				{
				    TuningInfo[TuningID][tReperatur][i] = 0;
				}

				new Ges_Preis;

                new panels, tires, _lights, _doors, _bonnet, _boot;
				GetVehicleDamageStatus (vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires ) ;
				new driver_door, passenger_door /*, behind_driver_door, behind_passenger_door*/ = 0 ;
				driver_door = _doors >> 16 & 0x7;
				passenger_door = _doors >> 24 & 0x7;

 				_bonnet = _doors & 0x7;
				_boot = _doors >> 8 & 0x7;

				new windshield, front_bumper, rear_bumper;
				windshield = panels >> 16 & 0xF;
				front_bumper = panels >> 20 & 0xF;
				rear_bumper = panels >> 24 & 0xF;

				new tyre1, tyre2, tyre3, tyre4;
				tyre1 = tires >> 0 & 0x1;
				tyre2 = tires >> 1 & 0x1;
				tyre3 = tires >> 2 & 0x1;
				tyre4 = tires >> 3 & 0x1;

				new light1, light2, light3, light4;
				light1 = _lights >> 0 & 0x1;
				light2 = _lights >> 1 & 0x1;
				light3 = _lights >> 2 & 0x1;
				light4 = _lights >> 3 & 0x1;


				new Float:Heal;
				GetVehicleHealth (vehicleid, Heal);

				if(Heal<900)
				{
				    TuningInfo[TuningID][tReperatur][0]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_MOTOR);Ges_Preis=PREIS_MOTOR;
		       		AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Motor reparieren");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Fahrertür
				if(driver_door==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][1]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_FDOOR_E);Ges_Preis+=PREIS_FDOOR_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Fahrertuer ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(driver_door>=2)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][1]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_FDOOR_R);Ges_Preis+=PREIS_FDOOR_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Fahrertuer repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Beifahrertür
				if(passenger_door==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][2]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HDOOR_E);Ges_Preis+=PREIS_HDOOR_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Beifahrertuer ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(passenger_door>=2)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][2]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HDOOR_R);Ges_Preis+=PREIS_HDOOR_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Beifahrertuer repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Motorhaube
				if(_bonnet==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][3]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HAUBE_E);Ges_Preis+=PREIS_HAUBE_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Motorhaube ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(_bonnet>=2)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][3]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HAUBE_R);Ges_Preis+=PREIS_HAUBE_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Motorhaube repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Kofferraum
				if(_boot==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][4]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_KOFFER_E);Ges_Preis+=PREIS_KOFFER_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Kofferraum ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(_boot>=2)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][4]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_KOFFER_R);Ges_Preis+=PREIS_KOFFER_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Kofferraum repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Windschutzscheibe
				if(windshield!=0)
				{
				    TuningInfo[TuningID][tReperatur][5]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_FGLASS);Ges_Preis+=PREIS_FGLASS;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Windschutzscheibe ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Front Stoßstange
				if(front_bumper==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][6]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_FBUMPER_E);Ges_Preis+=PREIS_FBUMPER_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Stossstange vorne ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(front_bumper>=1)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][6]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_FBUMPER_R);Ges_Preis+=PREIS_FBUMPER_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Stossstange vorne repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}

				//Rear Stoßstange
				if(rear_bumper==4)//weg
				{
				    TuningInfo[TuningID][tReperatur][7]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HBUMPER_E);Ges_Preis+=PREIS_HBUMPER_E;
	                AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Stossstange hinten ersetzt");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(rear_bumper>=1)//kaputt
				{
				    TuningInfo[TuningID][tReperatur][7]=2;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_HBUMPER_R);Ges_Preis+=PREIS_HBUMPER_R;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Stossstange hinten repariert");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				//Räder
				new rad=0;
				if(tyre1==1)
				{
					rad++;
				}
				if(tyre2==1)
				{
					rad++;
				}
				if(tyre3==1)
				{
					rad++;
				}
				if(tyre4==1)
				{
					rad++;
				}
				new radstring[128];
				if(rad==1)
				{
			        TuningInfo[TuningID][tReperatur][8]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_WHEEL);Ges_Preis+=PREIS_WHEEL;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "1 Rad ersetzen");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(rad!=0)
				{
			      	TuningInfo[TuningID][tReperatur][8]=rad;
				    format(string,sizeof(string),MenuPreis"%d$",rad*PREIS_WHEEL);Ges_Preis+=rad*PREIS_WHEEL;
				    format(radstring,sizeof(radstring),"%d Raeder ersetzen",rad);
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, radstring);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				//lampen
				new light=0;
				if(light1==1)
				{
					light++;
				}
				if(light2==1)
				{
					light++;
				}
				if(light3==1)
				{
					light++;
				}
				if(light4==1)
				{
					light++;
				}
				if(light==1)
				{
			        TuningInfo[TuningID][tReperatur][9]=1;
				    format(string,sizeof(string),MenuPreis"%d$",PREIS_LAMP);Ges_Preis+=PREIS_LAMP;
					AddMenuItem(TuningInfo[TuningID][tMenu], 0, "1 Lampe ersetzen");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				}
				else if(light!=0)
				{
			      	TuningInfo[TuningID][tReperatur][9]=light;
				    format(string,sizeof(string),MenuPreis"%d$",light*PREIS_LAMP);Ges_Preis+=light*PREIS_LAMP;
				    format(radstring,sizeof(radstring),"%d Lampen ersetzen",light);
				}

				if(Ges_Preis == 0)
				{
   					DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
				}

				format(string,sizeof(string),MenuPreis"%d$",Ges_Preis);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Alles");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	            SetPVarInt(playerid,"Ges_Rep_Preis",Ges_Preis);

                TuningInfo[TuningID][tMenuID] = tkMenuRep;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-35.0,3.0);
				return 1;
	        }
	        case 1://Entfernen
	        {
	        	for(new i=0;i<14;i++)
				{
			    	RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE:i));
			    	TuningInfo[TuningID][tTuning][i] = 0;
			    	TuningInfo[TuningID][tTuningPreis][i] = 0;
				}
		    	ChangeVehiclePaintjob(vehicleid, 3);
				TuningInfo[TuningID][tPaintjob] = 3;
				TuningInfo[TuningID][tPaintjobPreis] = 0;

				ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
				return 1;
	        }
	        case 2://Lackierungen
	        {
	            TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Lackierungen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tColorPreis][0]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Farbe1");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tColorPreis][1]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Farbe2");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tPaintjobPreis]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Vinyl");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tMenuID] = tkMenuLack;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-35.0,3.0);
				return 1;
	        }
            case 3://Karosserie
            {
	            TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Karosserie");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
				format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_LAMPS]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Lampen");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HOOD]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Motorhaube");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_ROOF]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Dach");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SIDESKIRT]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "Seite");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_FRONT_BUMPER]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "V.Stossstange");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_REAR_BUMPER]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "H.Stosssstange");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_RIGHT]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "R.Abzug");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
	    		format(string,sizeof(string),MenuPreis"%d$",TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_LEFT]);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, "L.Abzug");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tMenuID] = tkMenuKaross;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-35.0,3.0);
				return 1;
            }
            case 4://Auspuff
            {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Auspuff");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_EXHAUST)
				    {
				        merker = true;
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, GetComponentName(component));AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_EXHAUST);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuAuspuff;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,-6.0,20.0,0.0);
				return 1;
            }
            case 5://Spoiler
            {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Spoiler");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_SPOILER)
				    {
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
                        merker = true;
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_SPOILER);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuSpoiler;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,-6.0,-20.0,2.0);
				return 1;
            }
            case 6://Felgen
            {
				if(!isAVehicle(TuningInfo[TuningID][tVehicleID]))
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Felgen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~y~");
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_WHEELS);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tItemWhl] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuWheels;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,4.0,-35.0,0.0);
				return 1;
            }
            case 7://Hydraulik
            {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Hydraulik");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_HYDRAULICS)
				    {
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!isAVehicle(TuningInfo[TuningID][tVehicleID]))
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_HYDRAULICS);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuHydraulik;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,40.0,3.0);
				return 1;
            }
            case 8://Nitro
            {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Nitro");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(!isAVehicle(TuningInfo[TuningID][tVehicleID]))
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
				format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO2);
		    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "2x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
    			format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO5);
		    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "5x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
    			format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO10);
		    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, "10x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);

				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuNitro;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,-6.0,-20.0,2.0);
				return 1;
            }
	        default:
	        {

				new gespreis = 0;
				for(new i=0;i<14;i++)
				{
					gespreis += TuningInfo[TuningID][tTuningPreis][i];
				}
				gespreis += TuningInfo[TuningID][tColorPreis][0];
				gespreis += TuningInfo[TuningID][tColorPreis][1];
				gespreis += TuningInfo[TuningID][tPaintjobPreis];

	            if(GetPlayerMoneyEx(playerid) < gespreis)
				{
					for(new i=0;i<14;i++)
					{
						RemoveVehicleComponent(vehicleid,GetVehicleComponentInSlot(vehicleid,CARMODTYPE:i));
						AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][i]);
					}
					ChangeVehiclePaintjob(vehicleid, FahrzeugInfo[vehicleid][fPaintjob]);
					ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1]);


					MoveTuningOpen(TuningID,true);
					TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);

					TuningInfo[TuningID][tVehicleID] = INVALID_VEHICLE_ID;
					TuningInfo[TuningID][tPlayerID] = INVALID_PLAYER_ID;
					TuningInfo[TuningID][tMenuID] = INVALID_TUNINGMENU_ID;

					return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				GivePlayerMoneyEx(playerid,-gespreis);
				for(new i=0;i<14;i++)
				{
					FahrzeugInfo[vehicleid][fTuning][i] = TuningInfo[TuningID][tTuning][i];
				}
	            FahrzeugInfo[vehicleid][fPaintjob] = TuningInfo[TuningID][tPaintjob];
                FahrzeugInfo[vehicleid][fColor][0] = TuningInfo[TuningID][tColor][0];
                FahrzeugInfo[vehicleid][fColor][1] = TuningInfo[TuningID][tColor][1];

				MoveTuningOpen(TuningID,true);
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);

				TuningInfo[TuningID][tVehicleID] = INVALID_VEHICLE_ID;
				TuningInfo[TuningID][tPlayerID] = INVALID_PLAYER_ID;
				TuningInfo[TuningID][tMenuID] = INVALID_TUNINGMENU_ID;
				return 1;
	        }
	    }
	    return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuRep)
	{//#########################################################################################################################
		new panels, tires, _doors, _lights, _bonnet, _boot;
	    GetVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);

		new driver_door, passenger_door /*, behind_driver_door, behind_passenger_door*/ = 0 ;
		driver_door = _doors >> 16 & 0x7;
		passenger_door = _doors >> 24 & 0x7;

		_bonnet = _doors & 0x7;
		_boot = _doors >> 8 & 0x7;

		new windshield, front_bumper, rear_bumper;
		windshield = panels >> 16 & 0xF;
		front_bumper = panels >> 20 & 0xF;
		rear_bumper = panels >> 24 & 0xF;



		new mrow = 0;
        new repairid = -1;

    	for(new i=0;i<10;i++)
    	{
			if(TuningInfo[TuningID][tReperatur][i]>0)
			{
			   	if(mrow == row)
			   	{
					repairid = i;
			   	}
     			mrow++;

			}
    	}
		if(repairid == -1)
		{
			if(GetPlayerMoneyEx(playerid) < GetPVarInt(playerid,"Ges_Rep_Preis"))
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
			}
			else
			{
				GivePlayerMoneyEx(playerid,-GetPVarInt(playerid,"Ges_Rep_Preis"));
				SetVehicleHealth(vehicleid,1000);
				DeletePVar(playerid,"Ges_Rep_Preis");
        		RepairVehicle(vehicleid);
			}
		}
		else if(repairid == 0)//Motor
		{
			if(GetPlayerMoneyEx(playerid) < PREIS_MOTOR)
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
			}
			else
			{
				GivePlayerMoneyEx(playerid,-PREIS_MOTOR);
				SetVehicleHealth(vehicleid,1000);
			}
		}
		else if(repairid == 1)//FDOOR
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_FDOOR_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_FDOOR_R);
	   				_doors = encode_doors(_bonnet, _boot, 0, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_FDOOR_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_FDOOR_E);
	   				_doors = encode_doors(_bonnet, _boot, 0, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 2)//HDOOR
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HDOOR_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HDOOR_R);
	   				_doors = encode_doors(_bonnet, _boot, driver_door, 0);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HDOOR_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HDOOR_E);
	   				_doors = encode_doors(_bonnet, _boot, driver_door, 0);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 3)//HAUBE
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HAUBE_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HAUBE_R);
	   				_doors = encode_doors(0, _boot, driver_door, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HAUBE_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HAUBE_E);
	   				_doors = encode_doors(0, _boot, driver_door, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 4)//KOFFER
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_KOFFER_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_KOFFER_R);
	   				_doors = encode_doors(_bonnet, 0, driver_door, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_KOFFER_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_KOFFER_E);
	   				_doors = encode_doors(_bonnet, 0, driver_door, passenger_door);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 5)//FGLASS
		{
			if(GetPlayerMoneyEx(playerid) < PREIS_FGLASS)
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
			}
			else
			{
				GivePlayerMoneyEx(playerid,-PREIS_FGLASS);
				panels = encode_panels(0, 0, 0, 0, 0, front_bumper, rear_bumper);
	   			TuningInfo[TuningID][tReperatur][repairid] = 0;
        		RepairVehicle(vehicleid);
	   			UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
			}
		}
		else if(repairid == 6)//FBUMPER
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_FBUMPER_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_FBUMPER_R);
					panels = encode_panels(0, 0, 0, 0, windshield, 0, rear_bumper);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_FBUMPER_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_FBUMPER_E);
					panels = encode_panels(0, 0, 0, 0, windshield, 0, rear_bumper);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 7)//HBUMPER
		{
            if(TuningInfo[TuningID][tReperatur][repairid] == 1)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HBUMPER_R)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HBUMPER_R);
					panels = encode_panels(0, 0, 0, 0, windshield, front_bumper, 0);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
            else if(TuningInfo[TuningID][tReperatur][repairid] == 2)
            {
				if(GetPlayerMoneyEx(playerid) < PREIS_HBUMPER_E)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
				}
				else
				{
					GivePlayerMoneyEx(playerid,-PREIS_HBUMPER_E);
					panels = encode_panels(0, 0, 0, 0, windshield, front_bumper, 0);
	   				TuningInfo[TuningID][tReperatur][repairid] = 0;
        			RepairVehicle(vehicleid);
	   				UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
				}
            }
		}
		else if(repairid == 8)//WHEEL
		{
			if(GetPlayerMoneyEx(playerid) < (PREIS_WHEEL*TuningInfo[TuningID][tReperatur][repairid]))
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
			}
			else
			{
				GivePlayerMoneyEx(playerid,-(PREIS_WHEEL*TuningInfo[TuningID][tReperatur][repairid]));
				tires = encode_tires(0, 0, 0, 0); // fix all tires
	   			TuningInfo[TuningID][tReperatur][repairid] = 0;
        		RepairVehicle(vehicleid);
	   			UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
			}
		}
		else if(repairid == 9)//LAMP
		{
			if(GetPlayerMoneyEx(playerid) < (PREIS_LAMP*TuningInfo[TuningID][tReperatur][repairid]))
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
			}
			else
			{
				GivePlayerMoneyEx(playerid,-(PREIS_LAMP*TuningInfo[TuningID][tReperatur][repairid]));
				_lights = encode_lights(0, 0, 0, 0); // fix all lights
	   			TuningInfo[TuningID][tReperatur][repairid] = 0;
       			RepairVehicle(vehicleid);
	   			UpdateVehicleDamageStatus(vehicleid, VEHICLE_PANEL_STATUS:panels, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights, VEHICLE_TYRE_STATUS:tires);
			}
		}

		TuningInfo[TuningID][tMenuID] = tkMenu;
		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX-100, TUNINGMENU_POSY, 210.0, 10.0);
		OnPlayerSelectedMenuRow(playerid, 0);
	//#ä################################################################################################################################
	    return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuLack)
	{
		switch(row)
	    {
	        case 0://Color1
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
	    		format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][0]);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Farbe1");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_COLOR1);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch1;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				return 1;
	        }
	        case 1://Color2
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
	    		format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][1]);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Farbe2");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_COLOR2);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch2;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				return 1;
	        }
	        case 2://Paintjob
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
	    		format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tPaintjob]);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Vinyl");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_PAINT);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch3;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				return 1;
	        }
	    }
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch1)
	{
	    if(row == 2)
	    {
	        TuningInfo[TuningID][tColorPreis][0] = PREIS_COLOR1;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
	    }
    	TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Farbe1");
		if(row == TuningInfo[TuningID][tItemTo])
	    {
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tColor][0] ++;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][0]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
	    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], TuningInfo[TuningID][tColor][1]);
		}
		else
		{
			TuningInfo[TuningID][tItemTo] = 1;
			TuningInfo[TuningID][tColor][0] --;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][0]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], TuningInfo[TuningID][tColor][1]);
		}

	    format(string,sizeof(string),MenuPreis"%d$",PREIS_COLOR1);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch1;
		ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch2)
	{
	    if(row == 2)
	    {
	        TuningInfo[TuningID][tColorPreis][1] = PREIS_COLOR2;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
	    }
    	TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Farbe2");
	    format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][0]);
		if(row == TuningInfo[TuningID][tItemTo])
	    {
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tColor][1] ++;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][1]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
	    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], TuningInfo[TuningID][tColor][1]);
		}
		else
		{
			TuningInfo[TuningID][tItemTo] = 1;
			TuningInfo[TuningID][tColor][1] --;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][1]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			ChangeVehicleColours(vehicleid, TuningInfo[TuningID][tColor][0], TuningInfo[TuningID][tColor][1]);
		}
	    format(string,sizeof(string),MenuPreis"%d$",PREIS_COLOR2);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch2;
		ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuLackSwitch3)
	{
	    if(row == 2)
	    {
	        TuningInfo[TuningID][tPaintjobPreis] = PREIS_PAINT;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 2);
			return 1;
	    }
    	TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Vinyl");
	    format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tColor][0]);
		if(row == TuningInfo[TuningID][tItemTo])
	    {
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tPaintjob] ++;
			if(TuningInfo[TuningID][tPaintjob]>=3)TuningInfo[TuningID][tPaintjob]=0;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tPaintjob]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
	    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    	ChangeVehiclePaintjob(vehicleid, TuningInfo[TuningID][tPaintjob]);
		}
		else
		{
			TuningInfo[TuningID][tItemTo] = 1;
			TuningInfo[TuningID][tPaintjob] --;
			if(TuningInfo[TuningID][tPaintjob]<0)TuningInfo[TuningID][tPaintjob]=2;
	    	format(string,sizeof(string),"~y~%d",TuningInfo[TuningID][tPaintjob]);
	    	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    	ChangeVehiclePaintjob(vehicleid, TuningInfo[TuningID][tPaintjob]);
		}
	    format(string,sizeof(string),MenuPreis"%d$",PREIS_PAINT);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		TuningInfo[TuningID][tMenuID] = tkMenuLackSwitch3;
		ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKaross)
	{
		switch(row)
	    {
	        case 0://Lampe
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Lampen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_LAMPS)
				    {
				    	merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_LAMPS);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossLamps;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-5.0,1.0);
				return 1;
	        }
	        case 1://Motorhaube
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Motorhaube");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_HOOD)
				    {
				    	merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_HOOD);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossHood;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-10.0,3.0);
				return 1;
	        }
	        case 2://Dach
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Dach");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_ROOF)
				    {
				    	merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_ROOF);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossRoof;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-35.0,3.0);
				return 1;
	        }
	        case 3://Seite
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Seite");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_SIDESKIRT)
				    {
				    	merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_SIDESKIRT);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossSideskirt;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,5.0,-45.0,0.0);
				return 1;
	        }
	        case 4://V.Stossstange
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "V.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_FRONT_BUMPER)
				    {
				    	merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_FRONT_BUMPER);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossFBumper;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,-5.0,1.0);
				return 1;
	        }
	        case 5://H.Stossstange
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "H.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_REAR_BUMPER)
				    {
				        merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_REAR_BUMPER);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossRBumper;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,-6.0,-5.0,1.0);
				return 1;
	        }
	        case 6://R.Abzug
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "R.Abzug");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_VENT_RIGHT)
				    {
				        merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_VENT_RIGHT);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossRVent;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,5.0,3.0);
				return 1;
	        }
	        case 7://L.Abzug
	        {
	    		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "L.Abzug");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

                new component, count=1,bool:merker = false;
				while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
				{
				    if(GetVehicleComponentType(component) == CARMODTYPE_VENT_LEFT)
				    {
				        merker = true;
				        format(string,sizeof(string),"%s",GetComponentName(component));
						AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
					}
					count++;
				}
				if(!merker)
				{
		   			DestroyMenu(TuningInfo[TuningID][tMenu]);
					ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
					return 1;
	   			}
	    		format(string,sizeof(string),MenuPreis"%d$",PREIS_VENT_LEFT);
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tItemTo] = 0;
				TuningInfo[TuningID][tMenuID] = tkMenuKarossLVent;
				ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
				SetTuningCamera(TuningID,6.0,5.0,3.0);
				return 1;
	        }
	    }
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLamps)// tkMenuKarossLamps PREIS_LAMPS CARMODTYPE_LAMPS
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Lampen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_LAMPS)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_LAMPS] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_LAMPS);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossLamps;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_LAMPS] = PREIS_LAMPS;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossHood)// PREIS_HOOD CARMODTYPE_HOOD tkMenuKarossHood
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Motorhaube");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_HOOD)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_HOOD] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_HOOD);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossHood;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HOOD] = PREIS_HOOD;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRoof)// PREIS_ROOF CARMODTYPE_ROOF tkMenuKarossRoof
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Dach");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_ROOF)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_ROOF] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_ROOF);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossRoof;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_ROOF] = PREIS_ROOF;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossSideskirt)//CARMODTYPE_SIDESKIRT PREIS_SIDESKIRT tkMenuKarossSideskirt
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Seite");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_SIDESKIRT)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_SIDESKIRT] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_SIDESKIRT);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossSideskirt;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SIDESKIRT] = PREIS_SIDESKIRT;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossFBumper)// CARMODTYPE_FRONT_BUMPER PREIS_FRONT_BUMPER tkMenuKarossFBumper
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "V.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_FRONT_BUMPER)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_FRONT_BUMPER] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_FRONT_BUMPER);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossFBumper;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_FRONT_BUMPER] = PREIS_FRONT_BUMPER;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRBumper)// CARMODTYPE_REAR_BUMPER PREIS_REAR_BUMPER tkMenuKarossFBumper
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "H.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_REAR_BUMPER)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_REAR_BUMPER] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_REAR_BUMPER);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossRBumper;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_REAR_BUMPER] = PREIS_REAR_BUMPER;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossRVent)//CARMODTYPE_VENT_RIGHT PREIS_VENT_RIGHT tkMenuKarossRVent
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "H.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_VENT_RIGHT)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_RIGHT] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_VENT_RIGHT);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossRVent;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_RIGHT] = PREIS_VENT_RIGHT;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuKarossLVent)//CARMODTYPE_VENT_LEFT PREIS_VENT_LEFT tkMenuKarossRVent
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "H.Stossstange");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_VENT_LEFT)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_VENT_LEFT] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_VENT_LEFT);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuKarossLVent;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_VENT_LEFT] = PREIS_VENT_LEFT;

			TuningInfo[TuningID][tMenuID] = tkMenu;
			OnPlayerSelectedMenuRow(playerid, 3);
			return 1;
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuAuspuff)
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Auspuff");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_EXHAUST)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_EXHAUST] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_EXHAUST);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuAuspuff;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_EXHAUST] = PREIS_EXHAUST;
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuSpoiler)
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Spoiler");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_SPOILER)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_SPOILER] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}
		if(merker == 0)
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_SPOILER);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuSpoiler;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_SPOILER] = PREIS_SPOILER;
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuWheels)
	{
	    if(row == 2)
	    {
	        TuningInfo[TuningID][tTuningPreis][CARMODTYPE_WHEELS] = PREIS_WHEELS;
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
	    }
    	TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);

		new component, count=1, merker;
		new componentf,componentex;
        new bool:isComp = false;
        if(row == TuningInfo[TuningID][tItemTo])
	    {
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tItemWhl]++;
			while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
			{
			    if(GetVehicleComponentType(component) == CARMODTYPE_WHEELS)
			    {
			        if(componentf == 0)componentf = component;
					if(merker == TuningInfo[TuningID][tItemWhl] && isComp == false)
					{
						isComp = true;
						componentex = component;
					}
					merker++;
			    }
				count++;
			}
			if(merker == 0)
			{
	   			DestroyMenu(TuningInfo[TuningID][tMenu]);
				ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
				return 1;
   			}
			if(isComp)
			{
		    	format(string,sizeof(string),"~y~%s",GetComponentName(componentex));
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Felgen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tTuning][CARMODTYPE_WHEELS] = componentex;
				AddVehicleComponent(vehicleid, componentex);
			}
			else
			{
		    	format(string,sizeof(string),"~y~%s",GetComponentName(componentf));
				SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Felgen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
				TuningInfo[TuningID][tTuning][CARMODTYPE_WHEELS] = componentf;
				AddVehicleComponent(vehicleid, componentf);
				TuningInfo[TuningID][tItemWhl] = 0;
			}

	    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

		}
		else
		{
			TuningInfo[TuningID][tItemTo] = 1;
			TuningInfo[TuningID][tItemWhl]--;
			while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
			{
			    if(GetVehicleComponentType(component) == CARMODTYPE_WHEELS)
			    {
			        if(TuningInfo[TuningID][tItemWhl] >= 0)
			        {
						if(merker == TuningInfo[TuningID][tItemWhl])
						{
							componentex = component;
						}
			        }
			        componentf = component;
					merker++;
			    }
				count++;
			}
			if(merker == 0)
			{
	   			DestroyMenu(TuningInfo[TuningID][tMenu]);
				ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
				return 1;
   			}
	        if(TuningInfo[TuningID][tItemWhl] < 0)
	        {
	            TuningInfo[TuningID][tItemWhl] = merker-1;
	            componentex = componentf;
	        }
		    format(string,sizeof(string),"~y~%s",GetComponentName(componentex));
			SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Felgen");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tTuning][CARMODTYPE_WHEELS] = componentex;
			AddVehicleComponent(vehicleid, componentex);

			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuBackButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
	    	AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuNextButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
		}


	    format(string,sizeof(string),MenuPreis"%d$",PREIS_WHEELS);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		TuningInfo[TuningID][tMenuID] = tkMenuWheels;
		ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuHydraulik)
	{
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Hydraulik");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");
        new component, count=1, merker;
        new bool:isComp = false;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_HYDRAULICS)
		    {
				format(string,sizeof(string),"%s",GetComponentName(component));
				AddMenuItem(TuningInfo[TuningID][tMenu], 0, string);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");

				if(merker == row)
				{
				    TuningInfo[TuningID][tTuning][CARMODTYPE_HYDRAULICS] = component;
				    AddVehicleComponent(vehicleid, component);
				    isComp = true;
				}
				merker++;
		    }
			count++;
		}

		if(!isAVehicle(TuningInfo[TuningID][tVehicleID]))
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}
		if(isComp)
		{
			format(string,sizeof(string),MenuPreis"%d$",PREIS_HYDRAULICS);
			AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
			TuningInfo[TuningID][tItemTo] = 0;
			TuningInfo[TuningID][tMenuID] = tkMenuHydraulik;
			ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);
		}
		else
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_HYDRAULICS] = PREIS_HYDRAULICS;
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
		}
		return 1;
	}
	else if(TuningInfo[TuningID][tMenuID] == tkMenuNitro)
	{
		if(row == 3)
		{
			TuningInfo[TuningID][tTuningPreis][CARMODTYPE_NITRO] = TuningInfo[TuningID][tItemTo];
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}
  		TuningInfo[TuningID][tMenu] = CreateMenu(TuningInfo[TuningID][tName], 2, TUNINGMENU_POSX, TUNINGMENU_POSY, 110.0, 10.0);
		SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 0, "Nitro");	SetMenuColumnHeader(TuningInfo[TuningID][tMenu], 1, "~r~");

		new component, count=1;
		while(GetVehicleCompatibleUpgrades(GetVehicleModel(TuningInfo[TuningID][tVehicleID]), count, component))
		{
		    if(GetVehicleComponentType(component) == CARMODTYPE_NITRO)
		    {

				if((row == 0) && (strfind(GetComponentName(component), "2x", true) != -1))
				{
					TuningInfo[TuningID][tItemTo] = PREIS_NITRO2;
				    TuningInfo[TuningID][tTuning][CARMODTYPE_NITRO] = component;
				    AddVehicleComponent(vehicleid, component);
				}
				if((row == 1) && (strfind(GetComponentName(component), "5x", true) != -1))
				{
					TuningInfo[TuningID][tItemTo] = PREIS_NITRO5;
				    TuningInfo[TuningID][tTuning][CARMODTYPE_NITRO] = component;
				    AddVehicleComponent(vehicleid, component);
				}
				if((row == 2) && (strfind(GetComponentName(component), "10x", true) != -1))
				{
					TuningInfo[TuningID][tItemTo] = PREIS_NITRO10;
				    TuningInfo[TuningID][tTuning][CARMODTYPE_NITRO] = component;
				    AddVehicleComponent(vehicleid, component);
				}
			}
			count++;
		}
		if(!isAVehicle(TuningInfo[TuningID][tVehicleID]))
		{
   			DestroyMenu(TuningInfo[TuningID][tMenu]);
			ShowMenuForPlayer(CreateTuningMenu(TuningID), playerid);
			return 1;
		}

		format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO2);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, "2x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO5);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, "5x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);
		format(string,sizeof(string),MenuPreis"%d$",PREIS_NITRO10);
		AddMenuItem(TuningInfo[TuningID][tMenu], 0, "10x");AddMenuItem(TuningInfo[TuningID][tMenu], 1, string);

		AddMenuItem(TuningInfo[TuningID][tMenu], 0, MenuKaufButton);AddMenuItem(TuningInfo[TuningID][tMenu], 1, "~r~");
		TuningInfo[TuningID][tMenuID] = tkMenuNitro;
		ShowMenuForPlayer(TuningInfo[TuningID][tMenu], playerid);

		return 1;
	}
	return 1;
}

stock GetPlayerTuningID(playerid)
{
	for(new i=0;i<sizeof(TuningInfo);i++)
	{
	    if(TuningInfo[i][tPlayerID] == playerid)
	    {
    		return i;
	    }
	}
	return INVALID_TUNING_ID;
}

stock GetFreeTuningID(playerid)
{
	for(new i=0;i<sizeof(TuningInfo);i++)
	{
	    if(TuningInfo[i][tPlayerID] == INVALID_PLAYER_ID)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,10.0, TuningInfo[i][tPos][0],TuningInfo[i][tPos][1],TuningInfo[i][tPos][2]-2.0))
	        {
	        	return i;
	        }
	    }
	}
	return INVALID_TUNING_ID;
}

stock isVehicleTuning(vehicleid)
{
	if(FahrzeugInfo[vehicleid][fNebenjob] != 0 || FahrzeugInfo[vehicleid][fAutohaus] != 0 || FahrzeugInfo[vehicleid][fZiviroller] != 0
	|| FahrzeugInfo[vehicleid][fFahrschule] != 0 || FahrzeugInfo[vehicleid][fImportCar] != 0 || FahrzeugInfo[vehicleid][fKurrierCar] != 0)
	{
	    return false;
	}
	return true;
}

stock isAVehicle(tmpcar)
{
	if((IsABoot(tmpcar))||(IsALKW(tmpcar))||(IsAFlugzeug(tmpcar))||(IsAHelikopter(tmpcar))||IsAFahrrad(tmpcar)||(IsAMotorrad(tmpcar)))
	{
	    return 0;
	}
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
encode_doors(bonnet2, boot2, driver_door, passenger_door)
{
    return bonnet2 | (boot2 << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
// ==================== << Tuning >>
// ==================== << San-News >>
forward Lottostart();

ocmd:muell(playerid,params[])
{
	if(!LottoFind)return 1;
	if(!IsPlayerInRangeOfPoint(playerid,2.0,827.2465,11.5067,1004.8573)&&IsPlayerInRangeOfPoint(playerid,2.0,824.8449,7.8176,1004.8573)&&IsPlayerInRangeOfPoint(playerid,2.0,833.9316,10.7185,1004.1797))
	{
	    return 1;
	}
	LottoFind = false;
	new rand = random(9);
	if(rand>0)
	{
	    return 1;
	}
	new diff = SpielerInfo[playerid][sLotto][0] + SpielerInfo[playerid][sLotto][1] + SpielerInfo[playerid][sLotto][2];
    if(diff!=0)return 1;
    
	new Lotto[3];
    Lotto[0] = random(9);
Lotto1_start:
	Lotto[1] = random(9);
    if(Lotto[0] == Lotto[1])goto Lotto1_start;
Lotto2_start:
 	Lotto[2]= random(9);
    if(Lotto[0] == Lotto[2])goto Lotto2_start;
    if(Lotto[1] == Lotto[2])goto Lotto2_start;
    
    SpielerInfo[playerid][sLotto][0] = Lotto[0];SpielerInfo[playerid][sLotto][1] = Lotto[1];SpielerInfo[playerid][sLotto][2] = Lotto[2];
	SendClientMessage(playerid,COLOR_GREY,"* Du hast einen Lottoschein gefunden.");
    showlottoschein(playerid);
    return 1;
}


ocmd:lottoschein(playerid,params[])
{
    new diff = SpielerInfo[playerid][sLotto][0] + SpielerInfo[playerid][sLotto][1] + SpielerInfo[playerid][sLotto][2];
    if(diff==0)return SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt keinen Lottoschein");
	if(GetPVarInt(playerid,"Lottoschein"))
	{
	    hidelottoschein(playerid);
	}
	else
	{
	    showlottoschein(playerid);
	}
	return 1;
}

ocmd:lotto(playerid,params[])
{
	new Lotto[3];
    if(sscanf(params,"ddd",Lotto[0],Lotto[1],Lotto[2]))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /lotto [0-9] [0-9] [0-9] | Preis: 120$");
	buylottoschein(playerid,Lotto[0],Lotto[1],Lotto[2]);
	return 1;
}

ocmd:searchwerbetafel(playerid,params[])
{
	new string[128],wtafel;
    if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
	if(sscanf(params,"i",wtafel))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /searchwtafel [TafelID]");
	if(wtafel < 0 || wtafel > (MAX_WERBETAFELN)-1)
	{
		format(string,sizeof(string),"Benutze: /searchwtafel [TafelID 0-%d]",MAX_WERBETAFELN-1);
		return SendClientMessage(playerid,COLOR_YELLOW,string);
	}
    if(IsPlayerInRangeOfPoint(playerid,20.0,Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz]))return SendClientMessage(playerid,COLOR_GREY,"Du bist bereits an der angegebenen Werbetafel.");
	format(string,sizeof(string),"Die Werbetafel Nr.%d wurde auf deiner Karte rot markiert.",wtafel);
	SendClientMessage(playerid,COLOR_SUPER,string);
	SetPlayerCheckpoint(playerid,Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz],3.0);
	return 1;
}

ocmd:clearwtafel(playerid,params[])
{
	new string[128],wtafel;
    if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
	if(sscanf(params,"d",wtafel))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /clearwtafel [TafelID]");
	if(wtafel < 0 || wtafel > (MAX_WERBETAFELN)-1)
	{
		format(string,sizeof(string),"BENUTZE: /clearwerbetafel [Tafelid 0-%i]",MAX_WERBETAFELN-1);
		return SendClientMessage(playerid,COLOR_RED,string);
	}
	if(!IsPlayerInRangeOfPoint(playerid,50.0,Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz]))return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich nicht an der angegebene Werbetafel.");
	format(string,sizeof(string),"Du hast die Werbetafel %d wieder frei gemacht.",wtafel);
	SendClientMessage(playerid,COLOR_SUPER,string);
    DestroyDynamicObject(Werbetafelobject[wtafel]);
    strmid(Werbetafeln[wtafel][wtafeltext],"Hier könnte Ihre Werbung stehen!",0,strlen("Hier könnte Ihre Werbung stehen!"),64);
	Werbetafelobject[wtafel] = CreateDynamicObject(Werbetafeln[wtafel][wtafelobjectid],Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz],Werbetafeln[wtafel][wtafelxrot],Werbetafeln[wtafel][wtafelyrot],Werbetafeln[wtafel][wtafelzrot]);
	SetDynamicObjectMaterialText(Werbetafelobject[wtafel],Werbetafeln[wtafel][wtafeltmindex],Werbetafeln[wtafel][wtafeltext],Werbetafeln[wtafel][wtafeltmsize],Werbetafeln[wtafel][wtafeltfonts],Werbetafeln[wtafel][wtafeltfontsize],Werbetafeln[wtafel][wtafeltbold],Werbetafeln[wtafel][wtafeltfontcolor],Werbetafeln[wtafel][wtafeltbackcolor],Werbetafeln[wtafel][wtafeltaligment]);
	return 1;
}

ocmd:listwtafel(playerid,params[])
{
	#pragma unused params
	new string[128];
    if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
	SendClientMessage(playerid,COLOR_WHITE,"|__________ {FF0000}Werbetafeln{FFFFFF} __________|");
	for(new wtafel=0;wtafel<sizeof(Werbetafeln);wtafel++)
	{
		format(string,sizeof(string),"Werbetafel Nr.{FF0000}%d{FFFFFF} | Text: {FF0000}%s",wtafel,Werbetafeln[wtafel][wtafeltext]);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}

ocmd:wtafeltext(playerid,params[])
{
	new string[128],text[61],wtafel;
    if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
 	if(sscanf(params,"ds[61]",wtafel,text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /wtafeltext [TafelID] [Text]");
	if(wtafel < 0 || wtafel > (MAX_WERBETAFELN)-1)
	{
		format(string,sizeof(string),"Benutze: /wtafeltext [TafelID 0-%d] [Text]",MAX_WERBETAFELN-1);
		return SendClientMessage(playerid,COLOR_YELLOW,string);
	}
	if(!IsPlayerInRangeOfPoint(playerid,50.0,Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz]))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der angegebene Werbetafel.");
	if(strlen(text) > 60)return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /wtafeltext [TafelID] [Text (max. 60 Zeichen)]");
    format(string,sizeof(string),"Die neue Werbung auf der Werbetafel (ID:%d) lautet: '%s'",wtafel,text);
	SendClientMessage(playerid,COLOR_SUPER,string);
    DestroyDynamicObject(Werbetafelobject[wtafel]);
    strmid(Werbetafeln[wtafel][wtafeltext],text,0,strlen(text),sizeof(text));
    Werbetafelobject[wtafel] = CreateDynamicObject(Werbetafeln[wtafel][wtafelobjectid],Werbetafeln[wtafel][wtafelx],Werbetafeln[wtafel][wtafely],Werbetafeln[wtafel][wtafelz],Werbetafeln[wtafel][wtafelxrot],Werbetafeln[wtafel][wtafelyrot],Werbetafeln[wtafel][wtafelzrot]);
	SetDynamicObjectMaterialText(Werbetafelobject[wtafel],Werbetafeln[wtafel][wtafeltmindex],Werbetafeln[wtafel][wtafeltext],Werbetafeln[wtafel][wtafeltmsize],Werbetafeln[wtafel][wtafeltfonts],Werbetafeln[wtafel][wtafeltfontsize],Werbetafeln[wtafel][wtafeltbold],Werbetafeln[wtafel][wtafeltfontcolor],Werbetafeln[wtafel][wtafeltbackcolor],Werbetafeln[wtafel][wtafeltaligment]);
    SaveWerbetafel();
	return 1;
}

ocmd:startlotto(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] == 8 || SpielerInfo[playerid][sAdmin] >= 5)
    {
	    new string[200];
	    format(string,200,"Die Lotto Ziehung wurde gestartet!");
	    sendNewsMessage(string);
	    SetTimer("Lottostart",10000,false);
		return 1;
	}
	else NichtBerechtigt
	return 1;
}

public Lottostart()
{
    new Lotto[3];
    Lotto[0] = random(9);
	Lotto1_start:
	Lotto[1] = random(9);
    if(Lotto[0] == Lotto[1])goto Lotto1_start;
	Lotto2_start:
 	Lotto[2]= random(9);
    if(Lotto[0] == Lotto[2])goto Lotto2_start;
    if(Lotto[1] == Lotto[2])goto Lotto2_start;

	new diff,gewinner1, richtige;
    new string[200];
    sendNewsMessage(" ============ Lotto 3/9 ============");
    format(string,200," Die Gewinnnummern: %d, %d, %d",Lotto[0],Lotto[1],Lotto[2]);
    sendNewsMessage(string);
    foreach(new i : Player)
    {
    	diff = SpielerInfo[i][sLotto][0] + SpielerInfo[i][sLotto][1] + SpielerInfo[i][sLotto][2];
		if(diff>0)
		{
		    richtige = 0;
  			format(string,200," Deine Losnummer: %d, %d, %d",SpielerInfo[i][sLotto][0],SpielerInfo[i][sLotto][1],SpielerInfo[i][sLotto][2]);
			SendClientMessage(i,COLOR_NEWS,string);
		    if((SpielerInfo[i][sLotto][0]==Lotto[0])||(SpielerInfo[i][sLotto][1]==Lotto[0])||(SpielerInfo[i][sLotto][2]==Lotto[0]))
		    {
		       richtige++;
      		}
      		if((SpielerInfo[i][sLotto][0]==Lotto[1])||(SpielerInfo[i][sLotto][1]==Lotto[1])||(SpielerInfo[i][sLotto][2]==Lotto[1]))
		    {
		       richtige++;
		    }
      		if((SpielerInfo[i][sLotto][0]==Lotto[2])||(SpielerInfo[i][sLotto][1]==Lotto[2])||(SpielerInfo[i][sLotto][2]==Lotto[2]))
		    {
		       richtige++;
 			}
 			if(richtige==3)
 			{
 				SetPVarInt(i,"Lottogewinn",1);
		        gewinner1++;
 			}
 			else if(richtige==2)
			{
		 		LottoJackpot -= 120;
            	GivePlayerMoneyEx(i,120);
    			SendClientMessage(i,COLOR_NEWS," Herzlichen Glückwunsch du hast 2 richtige und bekommst dein Geld zurück!");
  	 		}
		    SpielerInfo[i][sLotto][0]=0;
		    SpielerInfo[i][sLotto][1]=0;
	     	SpielerInfo[i][sLotto][2]=0;
	     	hidelottoschein(i);
		}
    }
    if(gewinner1==0)
	{
		sendNewsMessage(" Der Lottojackpot wurde nicht geknackt.");
		format(string,200," Der momentane Lottojackpot bleibt bei %d$!",LottoJackpot);
    	sendNewsMessage(string);
    	sendNewsMessage(" ================================");
    	setJackpotScreen();
    	return 1;
	}
	diff = floatround(LottoJackpot / gewinner1, floatround_ceil);
	format(string,200," In dieser Runde gab es %d Gewinner!",gewinner1);
    sendNewsMessage(string);
	format(string,200," Die Gewinner bekommen den betrag von %d$!",diff);
    sendNewsMessage(string);
    foreach(new i : Player)
    {
        if(GetPVarInt(i,"Lottogewinn")==1)
        {
            DeletePVar(i,"Lottogewinn");
            GivePlayerMoneyEx(i,diff);
    		SendClientMessage(i,COLOR_NEWS,"Herzlichen Glückwunsch du hast 3 richtige!");
        }
    }
    sendNewsMessage(" ================================");
    LottoJackpot = 0;
    setJackpotScreen();
	return 1;
}
ocmd:n(playerid,params[])
{
	if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
    new text[128], string[144];
    if(sscanf(params,"s[128]",text))return SendClientMessage(playerid,COLOR_YELLOW,"Benutze: /n [Text]");
    if(FahrzeugInfo[GetPlayerVehicleID(playerid)][fFraktion] != 8)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 10.0,255.6963,1755.3304,701.0929))
	    {
	    	return SendClientMessage(playerid,COLOR_YELLOW,"Du bist nicht in einem News-Fahrzeug!");
	    }
	}
    format(string,200,"News Reporter %s: %s",SpielerInfo[playerid][sName],text);
    sendNewsMessage(string);
    return 1;
}
ocmd:live(playerid,params[])
{
    if(SpielerInfo[playerid][sFraktion] != 8)return NichtBerechtigt
    

   	if(GetPVarInt(playerid,"News_Live") == 1)
	{
	    SendClientMessage(playerid,COLOR_YELLOW,"Du bist nicht mehr auf Sendung!");
   	    DeletePVar(playerid,"News_Live");
   	    return 1;
	}
   	if(FahrzeugInfo[GetPlayerVehicleID(playerid)][fFraktion] != 8)return SendClientMessage(playerid,COLOR_YELLOW,"Du bist nicht in einem News-Fahrzeug!");
	if(isNewsLive(playerid))return SendClientMessage(playerid,COLOR_YELLOW,"Dieses Fahrzeug ist bereit Live auf Sendung!");

	SetPVarInt(playerid,"News_Live",1);
    SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun Live auf Sendung!");
    return 1;
}
stock isNewsLive(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6.0,656.7354,-1352.5840,1695.4037))return 1;
	new pvehicleid = GetPlayerVehicleID(playerid);
	if(pvehicleid == 0)return 0;
	foreach(new i : Player)
    {
        if(GetPVarInt(i,"News_Live") == 1)
        {
            if(GetPlayerVehicleID(i) == pvehicleid)
            {
                return 1;
            }
        }
	}
	return 0;
}
stock sendNewsMessage(const message[])
{
	foreach(new i : Player)
    {
	   	SendClientMessage(i,COLOR_NEWS,message);
    }
	return;
}

stock setJackpotScreen()
{
	if(LottoWandJackpot[0]!=0)
	{
	 	DestroyObject(LottoWandJackpot[0]);
	 	DestroyObject(LottoWandJackpot[1]);
	}
	
	new str[64];
	format(str,sizeof(str),"Jackpot\n%d$",LottoJackpot);

	LottoWandJackpot[0] = CreateObject(18244, 826.2974, -1.8443, 1005.5643, 90.0, -180.0000, -1.0);
	SetObjectMaterialText(LottoWandJackpot[0],  str, 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 48, true, -65536, -1, OBJECT_MATERIAL_TEXT_ALIGN_CENT);

	LottoWandJackpot[1] = CreateObject(7901, 648.1074, -1357.6789, 25.5318, 0.0000, 0.0000, -90.1999);
	SetObjectMaterialText(LottoWandJackpot[1], str, 0, OBJECT_MATERIAL_SIZE_512x256, "Arial", 130, true, 0xFFD78E10, 0x0, OBJECT_MATERIAL_TEXT_ALIGN_CENT);
	return 1;
}

stock showlottoschein(playerid)
{
	SetPVarInt(playerid,"Lottoschein",1);
	new tdstring[128];
    format(tdstring, sizeof(tdstring), "Losnummer~n~0%d - 0%d - 0%d~n~~n~Betrag:~t~120$"
	, SpielerInfo[playerid][sLotto][0],SpielerInfo[playerid][sLotto][1],SpielerInfo[playerid][sLotto][2]);
    PlayerTextDrawSetString(playerid, PLottoSchein[playerid], tdstring);
    PlayerTextDrawShow(playerid,PLottoSchein[playerid]);
	TextDrawShowForPlayer(playerid, LottoSchein[0]);
	TextDrawShowForPlayer(playerid, LottoSchein[1]);
	TextDrawShowForPlayer(playerid, LottoSchein[2]);
	TextDrawShowForPlayer(playerid, LottoSchein[3]);
	TextDrawShowForPlayer(playerid, LottoSchein[4]);
	TextDrawShowForPlayer(playerid, LottoSchein[5]);
	TextDrawShowForPlayer(playerid, LottoSchein[6]);
	SendClientMessage(playerid,COLOR_GREY,"* Du kannst dein Lottoschein mit '/lottoschein' wieder einstecken.");
	return;
}
stock hidelottoschein(playerid)
{
	DeletePVar(playerid,"Lottoschein");
    PlayerTextDrawHide(playerid,PLottoSchein[playerid]);
	TextDrawHideForPlayer(playerid, LottoSchein[0]);
	TextDrawHideForPlayer(playerid, LottoSchein[1]);
	TextDrawHideForPlayer(playerid, LottoSchein[2]);
	TextDrawHideForPlayer(playerid, LottoSchein[3]);
	TextDrawHideForPlayer(playerid, LottoSchein[4]);
	TextDrawHideForPlayer(playerid, LottoSchein[5]);
	TextDrawHideForPlayer(playerid, LottoSchein[6]);
	return;
}

stock buylottoschein(playerid,Lotto0,Lotto1,Lotto2)
{
	if(!AmLTM(playerid))return SendClientMessage(playerid,COLOR_YELLOW,"Du bist nicht an der Lottoscheinausgabe");
    if(GetPlayerMoneyEx(playerid) < 120)return SendClientMessage(playerid,COLOR_SORRY,"Ein Lottoschein kostet 120$.");
	new diff = SpielerInfo[playerid][sLotto][0] + SpielerInfo[playerid][sLotto][1] + SpielerInfo[playerid][sLotto][2];
    if(diff>0)return SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt bereits einen Lottoschein");
	if(Lotto0==Lotto1)return SendClientMessage(playerid,COLOR_YELLOW,"Du brauchst 3 verschiedene Zahlen");
	else if(Lotto1==Lotto2)return SendClientMessage(playerid,COLOR_YELLOW,"Du brauchst 3 verschiedene Zahlen");
	else if(Lotto2==Lotto0)return SendClientMessage(playerid,COLOR_YELLOW,"Du brauchst 3 verschiedene Zahlen");
	SpielerInfo[playerid][sLotto][0] = Lotto0;SpielerInfo[playerid][sLotto][1] = Lotto1;SpielerInfo[playerid][sLotto][2] = Lotto2;
    LottoJackpot+=120;
	mysql_SetInt("config", "ValueInt",LottoJackpot, "Config", "LottoGewinn");
    GivePlayerMoneyEx(playerid,-120);
    LottoFind=true;
    showlottoschein(playerid);
    setJackpotScreen();
	return 1;
}
// ==================== << San-News >>

public OnPlayerCommandText(playerid, cmdtext[])
{
    new Float:Health;
    new tmpcar = GetPlayerVehicleID(playerid);
    if(strcmp("/downtime", cmdtext, true, 10) == 0)
    {
        if(SpielerInfo[playerid][sAdmin] != 6)return NichtBerechtigt
        new string[128];
        foreach(new i : Player){ClearChat(i,50);}
        SendClientMessageToAll(COLOR_YELLOW,"Downtime wurde gestartet. Alle Spieler die kein Teammitglied sind wurden gekickt.");
        SendClientMessageToAll(COLOR_YELLOW,"Das aktuelle Passwort vom Server wurde aufgrund der Downtime geändert. Mehr Infos unter "SERV_WURL"!");
        SendClientMessage(playerid,COLOR_SUPER,"Neues Passwort: "SERV_PASS"");
        SendRconCommand("password "SERV_PASS"");
        format(string,128,"%s %s hat die Downtime gestartet.",AdminName(playerid),SpielerInfo[playerid][sName]);
        print(string);
        foreach(new i : Player)
        {
            if(SpielerInfo[i][sAdmin] < 1)
            {
                ShowPlayerDialog(i,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Zurzeit geschlossen",""SERV_NAME" ist momentan geschlossen. Mögliche Gründe dafür sind:\nBackups, Wartungsarbeiten, DDoS-Angriffe oder anderes. Weitere Informationen solltest du unter "SERV_WURL" finden. Dein Team von "SERV_NAME".","Close","");
    			KickPlayer(i,"");
    			return 1;
            }
		}
		return 1;
    }
   	else if(strcmp("/save-all", cmdtext, true, 10) == 0)
    {
        if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
  		SendClientMessageToAll(COLOR_RED,"Server: Es wurde eine Server Speicherung eingeleitet.");
		SendClientMessageToAll(COLOR_RED,"Server: Es könnte in den paar Sekunden zu Laggs kommen.");
		ServerSpeichernStatus = 1;
	    ServerSpeichernTimer = SetTimer("ServerSpeichern",2000,true);
	    return 1;
	}
	else if(strcmp("/supmobil", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
		if(GetPVarInt(playerid,"AdminDuty") != 1)return AdminDienst
	    if(GetPVarInt(playerid,"Supmobil") != 0)
	    {
			DeleteVehicle(GetPVarInt(playerid,"Supmobil"));
			DeletePVar(playerid,"Supmobil");
			Streamer_Update(playerid);
			SendClientMessage(playerid,COLOR_SORRY,"Supmobil wurde gelöscht.");
			return 1;
	    }
	    else
	    {
	    
     		new vehicleid, Float:Position[4];
			GetPlayerPos(playerid,Position[0],Position[1],Position[2]);
			GetPlayerFacingAngle(playerid,Position[3]);
			vehicleid = CreateVehicle(560,Position[0],Position[1],Position[2],Position[3],6,6,-1);
			FahrzeugInfo[vehicleid][fModelID] = 560;
			LinkVehicleToInterior(vehicleid,GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(vehicleid,GetPlayerVirtualWorld(playerid));
			FahrzeugInfo[vehicleid][fTank] = VehicleData[FahrzeugInfo[vehicleid][fModelID]-400][vehLiter];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
			AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
			
			FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
			FahrzeugInfo[vehicleid][fPosition][0] = Position[0]; FahrzeugInfo[vehicleid][fPosition][1] = Position[1]; FahrzeugInfo[vehicleid][fPosition][2] = Position[2]; FahrzeugInfo[vehicleid][fPosition][3] = Position[3]; FahrzeugInfo[vehicleid][fColor][1] = 6;
			format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Support"); FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 6; FahrzeugInfo[vehicleid][fPaintjob] = 3;
			FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter]; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0;
			FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 1; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0; FahrzeugInfo[vehicleid][fPreis] = 0;
			FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

			FahrzeugInfo[vehicleid][fTuning][0] = 1138;
			FahrzeugInfo[vehicleid][fTuning][1] = 0;
			FahrzeugInfo[vehicleid][fTuning][2] = 1032;
			FahrzeugInfo[vehicleid][fTuning][3] = 1026;
			FahrzeugInfo[vehicleid][fTuning][4] = 0;
			FahrzeugInfo[vehicleid][fTuning][5] = 1010;
			FahrzeugInfo[vehicleid][fTuning][6] = 1028;
			FahrzeugInfo[vehicleid][fTuning][7] = 0;
			FahrzeugInfo[vehicleid][fTuning][8] = 0;
			FahrzeugInfo[vehicleid][fTuning][9] = 0;
			FahrzeugInfo[vehicleid][fTuning][10] = 1169;
			FahrzeugInfo[vehicleid][fTuning][11] = 1141;
			FahrzeugInfo[vehicleid][fTuning][12] = 0;
			FahrzeugInfo[vehicleid][fTuning][13] = 0;

			SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);

			AddVehicleComponent(vehicleid, 1010);
			AddVehicleComponent(vehicleid, 1026);
			AddVehicleComponent(vehicleid, 1027);
			AddVehicleComponent(vehicleid, 1028);
			AddVehicleComponent(vehicleid, 1032);
			AddVehicleComponent(vehicleid, 1138);
			AddVehicleComponent(vehicleid, 1141);
			AddVehicleComponent(vehicleid, 1169);

			SetPVarInt(playerid,"Supmobil",vehicleid);
			Motor[vehicleid] = false;
			Licht[vehicleid] = false;
			DOOR[vehicleid] = false;
			Motorhaube[vehicleid] = false;
			Kofferraum[vehicleid] = false;

			FahrzeugInfo[vehicleid][fSupMobilObj][0] = CreateDynamicObject(19483,Position[0],Position[1],Position[2],0,0,Position[3],-1,-1,-1,100,100);
			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fSupMobilObj][0], vehicleid, 1.06, -0.10, 0.03, 0.0, 0.0, 0.0);
			SetDynamicObjectMaterialText(FahrzeugInfo[vehicleid][fSupMobilObj][0],0,"{FF0000}"SERV_STAG" {FFFFFF}Support",OBJECT_MATERIAL_SIZE_256x128,\
			"Arial", 28, 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			FahrzeugInfo[vehicleid][fSupMobilObj][1] = CreateDynamicObject(19483,Position[0],Position[1],Position[2],0,0,Position[3],-1,-1,-1,100,100);
			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fSupMobilObj][1], vehicleid, -1.06, -0.10, 0.03, 180.0, -180.0, 0.0);
			SetDynamicObjectMaterialText(FahrzeugInfo[vehicleid][fSupMobilObj][1],0,"{FF0000}"SERV_STAG" {FFFFFF}Support",OBJECT_MATERIAL_SIZE_256x128,\
			"Arial", 28, 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			
			Streamer_Update(playerid);
			SendClientMessage(playerid,COLOR_SUPER,"Supmobil wurde erstellt.");
			return 1;
	 	}
	}
    else if(strcmp("/aduty", cmdtext, true, 10) == 0)
    {
		new string[128];
		if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
		if(GetPVarInt(playerid,"AdminDuty") == 1)
		{
		    SetPlayerHealth(playerid,100);
  			if(GetPVarInt(playerid,"Supmobil") != 0)
	    	{
				DeleteVehicle(GetPVarInt(playerid,"Supmobil"));
				DeletePVar(playerid,"Supmobil");
				SendClientMessage(playerid,COLOR_SORRY,"Supmobil wurde gelöscht.");
			}
   			format(string,sizeof(string),"%s",SpielerInfo[playerid][sName]);
		    SetPlayerName(playerid, string);
		    format(string,128,"%s %s hat sich vom Support abgemeldet.",AdminName(playerid),SpielerInfo[playerid][sName]);
			SendClientMessageToAll(COLOR_RED,string);
			DeletePVar(playerid,"AdminDuty");
			foreach(new i : Player){SetPlayerMarkerForPlayer(i,playerid,0xFFFFFFFF);}
			switch(SpielerInfo[playerid][sAdmin])
			{
				case 1: {aDuty[playerid] = CreateDynamic3DTextLabel("Supporter",0x7DFF00C7,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
				case 2: {aDuty[playerid] = CreateDynamic3DTextLabel("Moderator",0x00FFFFD3,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
				case 3: {aDuty[playerid] = CreateDynamic3DTextLabel("Administrator",0x00AFFFEE,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
				case 4: {aDuty[playerid] = CreateDynamic3DTextLabel("Head-Administrator",0xFF00F5D9,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
				case 5: {aDuty[playerid] = CreateDynamic3DTextLabel("Entwickler",0xFF9600FF,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
				case 6: {aDuty[playerid] = CreateDynamic3DTextLabel("Projektleiter",0xD60A00CF,30.0,40.0,50.0,20.0,.attachedplayer = playerid,.worldid = GetPlayerVirtualWorld(playerid),.interiorid = GetPlayerInterior(playerid));}
			}
		}
		else
		{
		    DestroyDynamic3DTextLabel(aDuty[playerid]);
		    format(string,sizeof(string),"[mVR]%s",SpielerInfo[playerid][sName]);
		    SetPlayerName(playerid, string);
		    SetPlayerHealth(playerid,10000);
		    format(string,128,"%s %s hat sich zum Support angemeldet.",AdminName(playerid),SpielerInfo[playerid][sName]);
			SendClientMessageToAll(COLOR_RED,string);
			SetPVarInt(playerid,"AdminDuty",1);
			foreach(new i : Player){SetPlayerMarkerForPlayer(i,playerid,0xD70000FF);}
		}
		return 1;
	}
	else if(strcmp("/fixcar", cmdtext, true, 10) == 0 || strcmp("/fixveh", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sAdmin] < 1)return NichtBerechtigt
		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du sitzt in keinem Fahrzeug.");
		RepairVehicle(GetPlayerVehicleID(playerid));
		return 1;
	}
	else if(strcmp("/icp", cmdtext, true, 10) == 0)
	{
	    if(GetPVarInt(playerid,"ICPEdit") == 0)
	    {
		    SelectTextDraw(playerid, 0xFFFFFFFF);
		    PlayerTextDrawSetSelectable(playerid, ICPMessageEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPHitsoundEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPOChatEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPCameraEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPHandyEdit[playerid], true);
		    PlayerTextDrawSetSelectable(playerid, ICPSave[playerid], true);

		    PlayerTextDrawShow(playerid, ICPBox[playerid]);
	        PlayerTextDrawShow(playerid, ICPTitel[playerid]);
	        PlayerTextDrawShow(playerid, ICPMessage[playerid]);
	        PlayerTextDrawShow(playerid, ICPHitsound[playerid]);
	        PlayerTextDrawShow(playerid, ICPOChat[playerid]);
	        PlayerTextDrawShow(playerid, ICPCamera[playerid]);
	        PlayerTextDrawShow(playerid, ICPHandy[playerid]);
		    PlayerTextDrawShow(playerid, ICPSave[playerid]);

		    if(SpielerInfo[playerid][icpNachrichten] == 1){PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpHitsound] == 1){PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpOChat] == 1){PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpCamera] == 1){PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~g~] Aktiviert");}
		    else PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~r~] Deaktiviert");
		    if(SpielerInfo[playerid][icpHandy] == 1){PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~g~] Angeschaltet");}
		    else PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~r~] Ausgeschaltet");

		    PlayerTextDrawShow(playerid, ICPMessageEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPHitsoundEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPOChatEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPCameraEdit[playerid]);
		    PlayerTextDrawShow(playerid, ICPHandyEdit[playerid]);
		    SetPVarInt(playerid,"ICPEdit",1);
		    return 1;
		}
		else if(GetPVarInt(playerid,"ICPEdit") == 1)
		{
		    SendClientMessage(playerid,COLOR_ICP,"Damit deine Einstellungen übernommen werden klicke auf 'Speichern & Verlassen'.");
		    return 1;
		}
	}
	else if(strcmp("/admins", cmdtext, true, 10) == 0)
	{
	    new string[128];
		SendClientMessage(playerid,COLOR_INFO,"** Admin & Supporter Online-Liste **");
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sAdmin] > 0 && IsPlayerAdmin(i))
		    {
		        format(string,sizeof(string),"%s | %s | %s | [Tickets: %d] | {FF0000}RCON",SpielerInfo[i][sName],AdminName(i),AdmDuty(i),SpielerInfo[i][sTicketsBearbeitet]);
		        SendClientMessage(playerid,COLOR_WHITE,string);
			}
		    else if(SpielerInfo[i][sAdmin] > 0 && !IsPlayerAdmin(i))
		    {
		        format(string,sizeof(string),"%s | %s | %s | [Tickets: %d]",SpielerInfo[i][sName],AdminName(i),AdmDuty(i),SpielerInfo[i][sTicketsBearbeitet]);
		        SendClientMessage(playerid,COLOR_WHITE,string);
		    }
		}
		SendClientMessage(playerid,COLOR_INFO,"____________________________________");
		return 1;
	}
	else if(strcmp("/spawnchange", cmdtext, true, 10) == 0)
	{
	    ShowPlayerDialog(playerid,DIALOG_SPAWNCHANGE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Benutzerverwaltung","Zivilisten-Spawn\nFraktion\nHaus/Wohnung\nGruppenhaus","Weiter","Zurück");
		return 1;
	}
 	else if(strcmp("/ct", cmdtext, true, 10) == 0)
	{
	    if(GetPVarInt(playerid,"SupTicket") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein offenes Support-Ticket.");
		if(GetPVarInt(playerid,"SupTicketOpen") == 1)
		{
			new string[128];
			format(string,sizeof(string),"[SUPPORT] %s hat sein Support-Ticket gelöscht.",SpielerInfo[playerid][sName]);
			SendClientMessage(GetPVarInt(playerid,"SupTicketAdmin"),COLOR_YELLOW,string);
			SendClientMessage(playerid,COLOR_YELLOW,"[SUPPORT] Du hast dein Support-Ticket gelöscht.");
			DeleteSupTicket(playerid);
			DeletePVar(playerid,"SupTicket");
			DeletePVar(playerid,"SupTicketOpen");
			SetPVarInt(GetPVarInt(playerid,"SupTicketAdmin"),"SupTicketTaked",-1);
			DeletePVar(playerid,"SupTicketAdmin");
			return 1;
		}
		else if(GetPVarInt(playerid,"SupTicketOpen") == 0)
		{
			new string[128];
			format(string,sizeof(string),"%s hat sein unbeantwortetes Support-Ticket zurückgezogen.",SpielerInfo[playerid][sName]);
			SendAdminMessage(COLOR_INFO,string);
			SendClientMessage(playerid,COLOR_YELLOW,"[SUPPORT] Du hast dein Support-Ticket gelöscht.");
			DeleteSupTicket(playerid);
			DeletePVar(playerid,"SupTicket");
			DeletePVar(playerid,"SupTicketOpen");
			return 1;
		}
	}
	else if(strcmp("/frakv", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFraktion] == 0)return NichtBerechtigt
  		if(SpielerInfo[playerid][sLeader] == 0)return NichtBerechtigt
  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
  		{
   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			return 1;
  		}
	  	else if(SpielerInfo[playerid][sFraktion] == 5)
  		{
   			ShowPlayerDialog(playerid,DIALOG_SARDV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter | Rangnamen bearbeiten\nFeuerwehr | Rangnamen bearbeiten\nSanitäter | Skinordnung festlegen\nFeuerwehr | Skinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			return 1;
  		}
 		else if(SpielerInfo[playerid][sFraktion] > 5 && SpielerInfo[playerid][sFraktion] != 19)
  		{
   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			return 1;
  		}
  		else if(SpielerInfo[playerid][sFraktion] == 19)
  		{
 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			return 1;
  		}
	  	else if(SpielerInfo[playerid][sFraktion] == 20)
  		{
 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			return 1;
  		}
  		return 1;
	}
	else if(strcmp("/gruppenv", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sGruppe] == 0)return NichtBerechtigt
  		if(SpielerInfo[playerid][sGLeader] == 0)return NichtBerechtigt
  		new gid = SpielerInfo[playerid][sGruppe];
		if(GruppenInfo[gid][gUpgrade][0] == 0){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten","Weiter","Abbrechen");}
		else if(GruppenInfo[gid][gUpgrade][0] == 1){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten\nGehaltverwaltung","Weiter","Abbrechen");}
		return 1;
	}
	else if(strcmp("/firmenv", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
	    if(SpielerInfo[playerid][sFLeader] == 0)return NichtBerechtigt
		ShowPlayerDialog(playerid,DIALOG_FIRMAV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung","Fahrzeugverwaltung\nRangnamen bearbeiten\nFirma überschreiben\nAuftragsbedingungen","Weiter","Abbrechen");
	    return 1;
	}
	else if(strcmp("/knastzeit", cmdtext, true, 10) == 0)
	{
		new string[128];
		if(SpielerInfo[playerid][sKnast] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Gefängnis.");
		format(string, 128, "Du bist noch für %d Minute(n) im Gefängnis.",SpielerInfo[playerid][sKnast]);
		SendClientMessage(playerid, COLOR_RED, string);
		return 1;
	}
	else if(strcmp("/knastinfo", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Verbrecher    Verbleibende Zeit");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(SpielerInfo[i][sKnast] > 0)
				{
				    new string[128];
					format(string, 128, "%s       |    %d Minute(n)",SpielerInfo[i][sName],SpielerInfo[i][sKnast]);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/flock", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFraktion] == 0)return NichtBerechtigt
		new Float:x,Float:y,Float:z, merker = true;
		for(new i = 1;i<MAX_VEHICLES;i++)
		{
		    if(!IsValidVehicle(i))continue;
		   	GetVehiclePos(i,x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
			{
			    if(FahrzeugInfo[i][fFraktion] == 0)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug gehört keiner Fraktion an.");
			    if(FahrzeugInfo[i][fFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");

     			if(DOOR[i] == false)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,true,bonnet,boot,objective);
				    DOOR[i] = true;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
					return 1;
				}
				else if(DOOR[i] == true)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,false,bonnet,boot,objective);
				    DOOR[i] = false;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
				    return 1;
				}
			}
		}
		if(merker)
    	{
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Nähe eines Fraktionsfahrzeugs.");
    	}
		return 1;
	}
	else if(strcmp("/glock", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sGruppe] == 0)return NichtBerechtigt
		new Float:x,Float:y,Float:z, merker = true;
		for(new i = 1;i<MAX_VEHICLES;i++)
		{
		    if(!IsValidVehicle(i))continue;
		   	GetVehiclePos(i,x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
			{
			    if(FahrzeugInfo[i][fGruppe] == 0)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug gehört keiner Gruppe an.");
			    if(FahrzeugInfo[i][fGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
                if(FahrzeugInfo[i][fRang] > SpielerInfo[playerid][sGRank])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt nicht den erforderlichen Rang");
                
     			if(DOOR[i] == false)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,true,bonnet,boot,objective);
				    DOOR[i] = true;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
					return 1;
				}
				else if(DOOR[i] == true)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,false,bonnet,boot,objective);
				    DOOR[i] = false;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
				    return 1;
				}
			}
		}
		if(merker)
    	{
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Nähe eines Gruppenfahrzeuges.");
    	}
		return 1;
	}
	else if(strcmp("/firmlock", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
		new Float:x,Float:y,Float:z, merker = true;
		for(new i = 1;i<MAX_VEHICLES;i++)
		{
		    if(!IsValidVehicle(i))continue;
		   	GetVehiclePos(i,x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
			{
			    if(FahrzeugInfo[i][fFirma] == 0)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug gehört keiner Firma an.");
			    if(FahrzeugInfo[i][fFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
                if(FahrzeugInfo[i][fRang] > SpielerInfo[playerid][sFRank])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt nicht den erforderlichen Rang");

     			if(DOOR[i] == false)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,true,bonnet,boot,objective);
				    DOOR[i] = true;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
					return 1;
				}
				else if(DOOR[i] == true)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,false,bonnet,boot,objective);
				    DOOR[i] = false;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
				    return 1;
				}
			}
		}
		if(merker)
    	{
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Nähe eines Firmenfahrzeuges.");
    	}
		return 1;
	}
	else if(strcmp("/fpark", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fFraktion] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
		if(FahrzeugInfo[tmpcar][fFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		new Float:Position[4], vehicleid;
		GetVehiclePos(tmpcar,Position[0],Position[1],Position[2]);
		GetVehicleZAngle(tmpcar,Position[3]);
		vehicleid = CreateVehicle(FahrzeugInfo[tmpcar][fModelID],Position[0],Position[1],Position[2],Position[3],FahrzeugInfo[tmpcar][fColor][0],FahrzeugInfo[tmpcar][fColor][1],-1);
        CreateFrakNummernSchild(vehicleid,FahrzeugInfo[tmpcar][fFraktion]);
		FahrzeugInfo[vehicleid][fDatabaseID] = FahrzeugInfo[tmpcar][fDatabaseID];
		FahrzeugInfo[vehicleid][fErstellt] = FahrzeugInfo[tmpcar][fErstellt];
		FahrzeugInfo[vehicleid][fModelID] = FahrzeugInfo[tmpcar][fModelID];
		FahrzeugInfo[vehicleid][fPosition][0] = Position[0];
		FahrzeugInfo[vehicleid][fPosition][1] = Position[1];
		FahrzeugInfo[vehicleid][fPosition][2] = Position[2];
		FahrzeugInfo[vehicleid][fPosition][3] = Position[3];
		FahrzeugInfo[vehicleid][fColor][0] = FahrzeugInfo[tmpcar][fColor][0];
		FahrzeugInfo[vehicleid][fColor][1] = FahrzeugInfo[tmpcar][fColor][1];
		FahrzeugInfo[vehicleid][fPaintjob] = FahrzeugInfo[tmpcar][fPaintjob];
		FahrzeugInfo[vehicleid][fKennzeichen] = FahrzeugInfo[tmpcar][fKennzeichen];
		FahrzeugInfo[vehicleid][fAbgeschleppt] = FahrzeugInfo[tmpcar][fAbgeschleppt];
		FahrzeugInfo[vehicleid][fParkkralle] = FahrzeugInfo[tmpcar][fParkkralle];
		FahrzeugInfo[vehicleid][fKilometer] = FahrzeugInfo[tmpcar][fKilometer];
		FahrzeugInfo[vehicleid][fTank] = FahrzeugInfo[tmpcar][fTank];
		FahrzeugInfo[vehicleid][fRang] = FahrzeugInfo[tmpcar][fRang];
		for(new i=0;i<14;i++){
		FahrzeugInfo[vehicleid][fTuning][i] = FahrzeugInfo[tmpcar][fTuning][i];}
		FahrzeugInfo[vehicleid][fFraktion] = FahrzeugInfo[tmpcar][fFraktion];
		FahrzeugInfo[vehicleid][fAutohaus] = FahrzeugInfo[tmpcar][fAutohaus];
		FahrzeugInfo[vehicleid][fNebenjob] = FahrzeugInfo[tmpcar][fNebenjob];
		FahrzeugInfo[vehicleid][fGarage] = FahrzeugInfo[tmpcar][fGarage];
		FahrzeugInfo[vehicleid][fGPark] = FahrzeugInfo[tmpcar][fGPark];
		FahrzeugInfo[vehicleid][fFahrschule] = FahrzeugInfo[tmpcar][fFahrschule];
		FahrzeugInfo[vehicleid][fSupmobil] = FahrzeugInfo[tmpcar][fSupmobil];
		FahrzeugInfo[vehicleid][fZiviroller] = FahrzeugInfo[tmpcar][fZiviroller];
		FahrzeugInfo[vehicleid][fImportCar] = FahrzeugInfo[tmpcar][fImportCar];
		FahrzeugInfo[vehicleid][fKurrierCar] = FahrzeugInfo[tmpcar][fKurrierCar];
		FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[tmpcar][fPreis];
		FahrzeugInfo[vehicleid][fLabel] = FahrzeugInfo[tmpcar][fLabel];
		FahrzeugInfo[vehicleid][fBesitzer] = FahrzeugInfo[tmpcar][fBesitzer];
		FahrzeugInfo[vehicleid][fBesitzerID] = FahrzeugInfo[tmpcar][fBesitzerID];
		FahrzeugInfo[vehicleid][fPizzaObjekt] = FahrzeugInfo[tmpcar][fPizzaObjekt];
		FahrzeugInfo[vehicleid][fkGeld] = FahrzeugInfo[tmpcar][fkGeld];
		FahrzeugInfo[vehicleid][fkC4] = FahrzeugInfo[tmpcar][fkC4];
		FahrzeugInfo[vehicleid][fJobEXP] = FahrzeugInfo[tmpcar][fJobEXP];
		DeleteVehicle(tmpcar);
		AddTuning(vehicleid);
		AddOther(vehicleid);
		AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
        SendClientMessage(playerid,COLOR_SUPER,"Das Fraktionsfahrzeug wurde erfolgreich umgeparkt.");
	    return 1;
	}
	else if(strcmp("/gpark", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sGRank] < 6)return NichtBerechtigt
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fGruppe] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Gruppenfahrzeug.");
		if(FahrzeugInfo[tmpcar][fGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		new Float:Position[4], vehicleid;
		GetVehiclePos(tmpcar,Position[0],Position[1],Position[2]);
		GetVehicleZAngle(tmpcar,Position[3]);
		vehicleid = CreateVehicle(FahrzeugInfo[tmpcar][fModelID],Position[0],Position[1],Position[2],Position[3],FahrzeugInfo[tmpcar][fColor][0],FahrzeugInfo[tmpcar][fColor][1],-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 5, FahrzeugInfo[tmpcar][fKennzeichen]);
		SetVehicleNumberPlate(vehicleid,FahrzeugInfo[tmpcar][fKennzeichen]);
		FahrzeugInfo[vehicleid][fDatabaseID] = FahrzeugInfo[tmpcar][fDatabaseID];
		FahrzeugInfo[vehicleid][fErstellt] = FahrzeugInfo[tmpcar][fErstellt];
		FahrzeugInfo[vehicleid][fModelID] = FahrzeugInfo[tmpcar][fModelID];
		FahrzeugInfo[vehicleid][fPosition][0] = Position[0];
		FahrzeugInfo[vehicleid][fPosition][1] = Position[1];
		FahrzeugInfo[vehicleid][fPosition][2] = Position[2];
		FahrzeugInfo[vehicleid][fPosition][3] = Position[3];
		FahrzeugInfo[vehicleid][fColor][0] = FahrzeugInfo[tmpcar][fColor][0];
		FahrzeugInfo[vehicleid][fColor][1] = FahrzeugInfo[tmpcar][fColor][1];
		FahrzeugInfo[vehicleid][fPaintjob] = FahrzeugInfo[tmpcar][fPaintjob];
		FahrzeugInfo[vehicleid][fKennzeichen] = FahrzeugInfo[tmpcar][fKennzeichen];
		FahrzeugInfo[vehicleid][fAbgeschleppt] = FahrzeugInfo[tmpcar][fAbgeschleppt];
		FahrzeugInfo[vehicleid][fParkkralle] = FahrzeugInfo[tmpcar][fParkkralle];
		FahrzeugInfo[vehicleid][fKilometer] = FahrzeugInfo[tmpcar][fKilometer];
		FahrzeugInfo[vehicleid][fTank] = FahrzeugInfo[tmpcar][fTank];
		FahrzeugInfo[vehicleid][fRang] = FahrzeugInfo[tmpcar][fRang];
		for(new i=0;i<14;i++){
		FahrzeugInfo[vehicleid][fTuning][i] = FahrzeugInfo[tmpcar][fTuning][i];}
		FahrzeugInfo[vehicleid][fFraktion] = FahrzeugInfo[tmpcar][fFraktion];
		FahrzeugInfo[vehicleid][fGruppe] = FahrzeugInfo[tmpcar][fGruppe];
		FahrzeugInfo[vehicleid][fFirma] = FahrzeugInfo[tmpcar][fFirma];
		FahrzeugInfo[vehicleid][fAutohaus] = FahrzeugInfo[tmpcar][fAutohaus];
		FahrzeugInfo[vehicleid][fNebenjob] = FahrzeugInfo[tmpcar][fNebenjob];
		FahrzeugInfo[vehicleid][fGarage] = FahrzeugInfo[tmpcar][fGarage];
		FahrzeugInfo[vehicleid][fGPark] = FahrzeugInfo[tmpcar][fGPark];
		FahrzeugInfo[vehicleid][fFahrschule] = FahrzeugInfo[tmpcar][fFahrschule];
		FahrzeugInfo[vehicleid][fSupmobil] = FahrzeugInfo[tmpcar][fSupmobil];
		FahrzeugInfo[vehicleid][fZiviroller] = FahrzeugInfo[tmpcar][fZiviroller];
		FahrzeugInfo[vehicleid][fImportCar] = FahrzeugInfo[tmpcar][fImportCar];
 	 	FahrzeugInfo[vehicleid][fKurrierCar] = FahrzeugInfo[tmpcar][fKurrierCar];
		FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[tmpcar][fPreis];
		FahrzeugInfo[vehicleid][fLabel] = FahrzeugInfo[tmpcar][fLabel];
		FahrzeugInfo[vehicleid][fBesitzer] = FahrzeugInfo[tmpcar][fBesitzer];
		FahrzeugInfo[vehicleid][fBesitzerID] = FahrzeugInfo[tmpcar][fBesitzerID];
		FahrzeugInfo[vehicleid][fPizzaObjekt] = FahrzeugInfo[tmpcar][fPizzaObjekt];
		FahrzeugInfo[vehicleid][fkGeld] = FahrzeugInfo[tmpcar][fkGeld];
		FahrzeugInfo[vehicleid][fkC4] = FahrzeugInfo[tmpcar][fkC4];
		FahrzeugInfo[vehicleid][fJobEXP] = FahrzeugInfo[tmpcar][fJobEXP];
		DeleteVehicle(tmpcar);
		AddTuning(vehicleid);
		AddOther(vehicleid);
		AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
        SendClientMessage(playerid,COLOR_SUPER,"Das Gruppenfahrzeug wurde erfolgreich umgeparkt.");
	    return 1;
	}
	else if(strcmp("/firmpark", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFRank] < 6)return NichtBerechtigt
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fFirma] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Firmenfahrzeug.");
		if(FahrzeugInfo[tmpcar][fFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		new Float:Position[4], vehicleid;
		GetVehiclePos(tmpcar,Position[0],Position[1],Position[2]);
		GetVehicleZAngle(tmpcar,Position[3]);
		vehicleid = CreateVehicle(FahrzeugInfo[tmpcar][fModelID],Position[0],Position[1],Position[2],Position[3],FahrzeugInfo[tmpcar][fColor][0],FahrzeugInfo[tmpcar][fColor][1],-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 5, FahrzeugInfo[tmpcar][fKennzeichen]);
		SetVehicleNumberPlate(vehicleid,FahrzeugInfo[tmpcar][fKennzeichen]);
		FahrzeugInfo[vehicleid][fDatabaseID] = FahrzeugInfo[tmpcar][fDatabaseID];
		FahrzeugInfo[vehicleid][fErstellt] = FahrzeugInfo[tmpcar][fErstellt];
		FahrzeugInfo[vehicleid][fModelID] = FahrzeugInfo[tmpcar][fModelID];
		FahrzeugInfo[vehicleid][fPosition][0] = Position[0];
		FahrzeugInfo[vehicleid][fPosition][1] = Position[1];
		FahrzeugInfo[vehicleid][fPosition][2] = Position[2];
		FahrzeugInfo[vehicleid][fPosition][3] = Position[3];
		FahrzeugInfo[vehicleid][fColor][0] = FahrzeugInfo[tmpcar][fColor][0];
		FahrzeugInfo[vehicleid][fColor][1] = FahrzeugInfo[tmpcar][fColor][1];
		FahrzeugInfo[vehicleid][fPaintjob] = FahrzeugInfo[tmpcar][fPaintjob];
		FahrzeugInfo[vehicleid][fKennzeichen] = FahrzeugInfo[tmpcar][fKennzeichen];
		FahrzeugInfo[vehicleid][fAbgeschleppt] = FahrzeugInfo[tmpcar][fAbgeschleppt];
		FahrzeugInfo[vehicleid][fParkkralle] = FahrzeugInfo[tmpcar][fParkkralle];
		FahrzeugInfo[vehicleid][fKilometer] = FahrzeugInfo[tmpcar][fKilometer];
		FahrzeugInfo[vehicleid][fTank] = FahrzeugInfo[tmpcar][fTank];
		FahrzeugInfo[vehicleid][fRang] = FahrzeugInfo[tmpcar][fRang];
		for(new i=0;i<14;i++){
		FahrzeugInfo[vehicleid][fTuning][i] = FahrzeugInfo[tmpcar][fTuning][i];}
		FahrzeugInfo[vehicleid][fFraktion] = FahrzeugInfo[tmpcar][fFraktion];
		FahrzeugInfo[vehicleid][fGruppe] = FahrzeugInfo[tmpcar][fGruppe];
		FahrzeugInfo[vehicleid][fFirma] = FahrzeugInfo[tmpcar][fFirma];
		FahrzeugInfo[vehicleid][fAutohaus] = FahrzeugInfo[tmpcar][fAutohaus];
		FahrzeugInfo[vehicleid][fNebenjob] = FahrzeugInfo[tmpcar][fNebenjob];
		FahrzeugInfo[vehicleid][fGarage] = FahrzeugInfo[tmpcar][fGarage];
		FahrzeugInfo[vehicleid][fGPark] = FahrzeugInfo[tmpcar][fGPark];
		FahrzeugInfo[vehicleid][fFahrschule] = FahrzeugInfo[tmpcar][fFahrschule];
		FahrzeugInfo[vehicleid][fSupmobil] = FahrzeugInfo[tmpcar][fSupmobil];
		FahrzeugInfo[vehicleid][fZiviroller] = FahrzeugInfo[tmpcar][fZiviroller];
		FahrzeugInfo[vehicleid][fImportCar] = FahrzeugInfo[tmpcar][fImportCar];
 	 	FahrzeugInfo[vehicleid][fKurrierCar] = FahrzeugInfo[tmpcar][fKurrierCar];
		FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[tmpcar][fPreis];
		FahrzeugInfo[vehicleid][fLabel] = FahrzeugInfo[tmpcar][fLabel];
		FahrzeugInfo[vehicleid][fBesitzer] = FahrzeugInfo[tmpcar][fBesitzer];
		FahrzeugInfo[vehicleid][fBesitzerID] = FahrzeugInfo[tmpcar][fBesitzerID];
		FahrzeugInfo[vehicleid][fPizzaObjekt] = FahrzeugInfo[tmpcar][fPizzaObjekt];
		FahrzeugInfo[vehicleid][fkGeld] = FahrzeugInfo[tmpcar][fkGeld];
		FahrzeugInfo[vehicleid][fkC4] = FahrzeugInfo[tmpcar][fkC4];
		FahrzeugInfo[vehicleid][fJobEXP] = FahrzeugInfo[tmpcar][fJobEXP];
		DeleteVehicle(tmpcar);
		AddTuning(vehicleid);
		AddOther(vehicleid);
		AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
        SendClientMessage(playerid,COLOR_SUPER,"Das Firmenfahrzeug wurde erfolgreich umgeparkt.");
	    return 1;
	}
	else if(strcmp("/lock", cmdtext, true, 10) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist in keinem Fahrzeug.");
		if(DOOR[tmpcar] == true)
	    {
	        GetVehicleParamsEx(tmpcar,engine,lights,alarm,doors,bonnet,boot,objective);
		    if(Licht[tmpcar] == false)
		    {
			    SetVehicleParamsEx(tmpcar,engine,false,alarm,doors,bonnet,boot,objective);
				SetTimerEx("LockLicht",1000,false,"i",tmpcar);
			}
			DOOR[tmpcar] = false;
			SetVehicleParamsEx(tmpcar,engine,lights,alarm,false,bonnet,boot,objective);
		    if(IsAHelikopter(tmpcar)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
		    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
	    }
	    else if(DOOR[tmpcar] == false)
	    {
	        GetVehicleParamsEx(tmpcar,engine,lights,alarm,doors,bonnet,boot,objective);
		    if(Licht[tmpcar] == false)
		    {
			    SetVehicleParamsEx(tmpcar,engine,true,alarm,doors,bonnet,boot,objective);
				SetTimerEx("LockLicht",1000,false,"i",tmpcar);
			}
			DOOR[tmpcar] = true;
			SetVehicleParamsEx(tmpcar,engine,lights,alarm,true,bonnet,boot,objective);
		    if(IsAHelikopter(tmpcar)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
		    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
	    }
	    return 1;
	}
 	else if(strcmp("/ahlock", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
		new Float:x,Float:y,Float:z, merker = true;
	    for(new fv;fv<MAX_VEHICLES;fv++)
		{
			if(FahrzeugInfo[fv][fAutohaus] == 0)continue;
		   	GetVehiclePos(fv,x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
			{
			    merker = false;
			    if(DOOR[tmpcar] == true)
			    {
			        GetVehicleParamsEx(tmpcar,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[tmpcar] == false)
				    {
					    SetVehicleParamsEx(tmpcar,engine,false,alarm,doors,bonnet,boot,objective);
						SetTimerEx("LockLicht",1000,false,"i",tmpcar);
					}
					DOOR[tmpcar] = false;
					SetVehicleParamsEx(tmpcar,engine,lights,alarm,false,bonnet,boot,objective);
				    if(IsAHelikopter(tmpcar)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
			    }
			    else
			    {
			        GetVehicleParamsEx(tmpcar,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[tmpcar] == false)
				    {
					    SetVehicleParamsEx(tmpcar,engine,true,alarm,doors,bonnet,boot,objective);
						SetTimerEx("LockLicht",1000,false,"i",tmpcar);
					}
					DOOR[tmpcar] = true;
					SetVehicleParamsEx(tmpcar,engine,lights,alarm,true,bonnet,boot,objective);
				    if(IsAHelikopter(tmpcar)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
			    }
			}
		}
		if(merker)
    	{
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Nähe eines Autohausfahrzeugs.");
    	}
		return 1;
	}
	else if(strcmp("/fahrzeug", cmdtext, true, 10) == 0)
    {
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich in keinem Fahrzeug.");
        if(IsAFahrrad(GetPlayerVehicleID(playerid)))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrrad nicht möglich.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer des Fahrzeuges.");
        new veh = GetPlayerVehicleID(playerid), string[264];
        format(string,sizeof(string),"{FFFFFF}Motor:		[%s{FFFFFF}]\nLicht:		[%s{FFFFFF}]\nTüren:		[%s{FFFFFF}]\nMotorhaube:	[%s{FFFFFF}]\nKofferraum:	[%s{FFFFFF}]\nRadio:		[%s{FFFFFF}]",FahrzeugStatus(1,veh),FahrzeugStatus(2,veh),FahrzeugStatus(3,veh),FahrzeugStatus(4,veh),FahrzeugStatus(5,veh),FahrzeugStatus(6,veh));
		ShowPlayerDialog(playerid,DIALOG_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fahrzeugverwaltung",string,"Bestätigen","Abbrechen");
        return 1;
    }
   	else if(strcmp("/carradio", cmdtext, true, 10) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
	    if(IsAFahrrad(tmpcar))return SendClientMessage(playerid,COLOR_GREY,"Das Fahrrad besitzt kein Radio.");
	    if(GetPlayerVehicleSeat(playerid) == 0 || GetPlayerVehicleSeat(playerid) == 1)
	    {
			ShowPlayerDialog(playerid,DIALOG_CARRADIO,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fahrzeugradio","{FFFFFF}BaseLovers.FM\nILoveRadio\nILoveMashup\nTechnoBase.FM\nHouseTime.FM\nMyTrendBeatz.FM\nRadio ausschalten","Abspielen","Abbrechen");
	    	return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Nur der Fahrer und der Beifahrer können das Radio bedienen.");
		return 1;
	}
 	else if(strcmp("/motor", cmdtext, true, 10) == 0 || strcmp("/engine", cmdtext, true, 10) == 0)
    {
        new string[128];
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich in keinem Fahrzeug.");
        if(IsAFahrrad(tmpcar))return 1;
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer des Fahrzeuges.");
		if(FahrzeugInfo[tmpcar][fFraktion] > 0 && FahrzeugInfo[tmpcar][fFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fFraktion] > 0 && FahrzeugInfo[tmpcar][fRang] > SpielerInfo[playerid][sRank])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt nicht den erforderlichen Rank.");
		if(FahrzeugInfo[tmpcar][fGruppe] > 0 && FahrzeugInfo[tmpcar][fGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fGruppe] > 0 && FahrzeugInfo[tmpcar][fRang] > SpielerInfo[playerid][sGRank])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt nicht den erforderlichen Rank.");
		if(FahrzeugInfo[tmpcar][fFirma] > 0 && FahrzeugInfo[tmpcar][fFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
        if(FahrzeugInfo[tmpcar][fFirma] > 0 && FahrzeugInfo[tmpcar][fRang] > SpielerInfo[playerid][sFRank])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt nicht den erforderlichen Rank.");
		if(FahrzeugInfo[tmpcar][fNebenjob] > 0 && FahrzeugInfo[tmpcar][fNebenjob] != SpielerInfo[playerid][sNebenjob])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fBesitzerID] > 0 && FahrzeugInfo[tmpcar][fBesitzerID] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fSupmobil] != 0 && SpielerInfo[playerid][sAdmin] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fBankrob] != 0 && FahrzeugInfo[tmpcar][fBankrob] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fParkkralle] == 1)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug hat eine Parkkralle am Reifen.");
		if(FahrzeugInfo[tmpcar][fTank] <= 0)return SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug hat keinen Tank mehr.");
		if(Motor[tmpcar] == true)
		{
		    PlayerTextDrawHide(playerid, Tacho[playerid][10]);
			PlayerTextDrawHide(playerid, Tacho[playerid][11]);
			if(Licht[tmpcar] == true)
			{
			    GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(tmpcar, false, false, alarm, doors, bonnet, boot, objective);
				GameTextForPlayer(playerid,"Motor ~r~ausgeschaltet",3000,6);
				Motor[tmpcar] = false;
				if(GetPVarInt(playerid,"CopMaske") == 1){format(string,sizeof(string),"Unbekannter stellt den Motor ab.");}
				else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(string,sizeof(string),"Unbekannter stellt den Motor ab.");}
				else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(string,sizeof(string),"Unbekannter stellt den Motor ab.");}
				else{format(string,128,"%s stellt den Motor ab.",SpielerInfo[playerid][sName]);}
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 12.0, 3000);
				Licht[tmpcar] = false;
				return 1;
			}
		    else if(Licht[tmpcar] == false)
			{
   				GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(tmpcar, false, lights, alarm, doors, bonnet, boot, objective);
				GameTextForPlayer(playerid,"Motor ~r~ausgeschaltet",3000,6);
				Motor[tmpcar] = false;
				format(string,128,"%s stellt den Motor ab.",SpielerInfo[playerid][sName]);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 12.0, 3000);
				return 1;
		    }
		}
		else if(Motor[tmpcar] == false)
		{
  			if(FahrzeugInfo[tmpcar][fImportCar] == 0 || FahrzeugInfo[tmpcar][fKurrierCar] == 0)
		    {
			    GetVehicleHealth(tmpcar, Health);
			    if(Health <= 350)return GameTextForPlayer(playerid,"Motor ~r~zerstoert",3000,6);
			}
		    if(Licht[tmpcar] == true)
		    {
		        Licht[tmpcar] = true;
		    	GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(tmpcar, true, true, alarm, doors, bonnet, boot, objective);
		    }
		    else
		    {
			    GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(tmpcar, true, lights, alarm, doors, bonnet, boot, objective);
			}
			PlayerTextDrawShow(playerid, Tacho[playerid][10]);
			GameTextForPlayer(playerid,"Motor ~g~eingeschaltet",3000,6);
			Motor[tmpcar] = true;
			if(GetPVarInt(playerid,"CopMaske") == 1){format(string,sizeof(string),"Unbekannter betätigt die Zündung.");}
			else if(GetPVarInt(playerid,"HitmanMaske") == 1){format(string,sizeof(string),"Unbekannter betätigt die Zündung.");}
			else if(GetPVarInt(playerid,"GruppenMaske") == 1){format(string,sizeof(string),"Unbekannter betätigt die Zündung.");}
			else{format(string,128,"%s betätigt die Zündung.",SpielerInfo[playerid][sName]);}
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 12.0, 3000);
			return 1;
		}
		return 1;
	}
	else if(strcmp("/licht", cmdtext, true, 10) == 0 || strcmp("/lights", cmdtext, true, 10) == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(tmpcar) == 478)return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich in keinem Fahrzeug.");
		new PLAYER_STATE:State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
		if(Motor[tmpcar] == false)return SendClientMessage(playerid,COLOR_GREY,"Um das Licht einschalten zu können, muss als erstes der Motor gestartet werden.");
		if(Licht[tmpcar] == true)
		{
		    PlayerTextDrawHide(playerid, Tacho[playerid][11]);
		    GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(tmpcar, engine, false, alarm, doors, bonnet, boot, objective);
			GameTextForPlayer(playerid,"Licht ~r~ausgeschaltet",3000,6);
			Licht[tmpcar] = false;
			return 1;
		}
		else if(Licht[tmpcar] == false)
		{
		    PlayerTextDrawShow(playerid, Tacho[playerid][11]);
		    GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(tmpcar, engine, true, alarm, doors, bonnet, boot, objective);
			GameTextForPlayer(playerid,"Licht ~g~eingeschaltet",3000,6);
			Licht[tmpcar] = true;
			return 1;
		}
	}
	else if(strcmp("/nagelband", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
				if(GetPlayerInterior(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du kannst hier keine Nagelbänder errichten!");
				if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
			    if(NagelBandCount() == MAX_NAGELBAENDER)return SendClientMessage(playerid,COLOR_SORRY,"Es wurde bereits die maximal Anzahl an Nagelbändern erstellt!");
				AddNagelBand(playerid);
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delnagelband", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
				RemoveNagelBand(playerid);
				return 1;
  			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delallnagelband", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
		    if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
			    new string[128];
				RemoveAllNagelBand();
				SendClientMessageToAll(COLOR_BLUE, "");
				SendClientMessageToAll(COLOR_BLUE, "_______[ Regierungsnachricht ]_______");
				format(string,sizeof(string),"%s %s hat alle Nagelbänder entfernt.",RangName(playerid),SpielerInfo[playerid][sName]);
				SendClientMessageToAll(COLOR_BLUE,string);
				return 1;
  			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delsperre", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
				RemoveSperre(playerid);
				new string[128];
				format(string,sizeof(string),"* %s %s baut eine Sperre ab.",RangName(playerid),SpielerInfo[playerid][sName]);
				ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delallsperre", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
			    new string[128];
				RemoveAllSperre();
				SendClientMessageToAll(COLOR_BLUE, "");
				SendClientMessageToAll(COLOR_BLUE, "_______[ Regierungsnachricht ]_______");
				format(string,sizeof(string),"%s %s hat alle Straßensperren entfernt.",RangName(playerid),SpielerInfo[playerid][sName]);
				SendClientMessageToAll(COLOR_BLUE,string);
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delschild", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
				RemoveSchild(playerid);
				new string[128];
				format(string,sizeof(string),"* %s %s baut ein Straßenschild ab.",RangName(playerid),SpielerInfo[playerid][sName]);
				ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/delallschilder", cmdtext, true, 10) == 0)
    {
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
			if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
			{
			    new string[128];
				RemoveAllSchilder();
				SendClientMessageToAll(COLOR_BLUE, "");
				SendClientMessageToAll(COLOR_BLUE, "_______[ Regierungsnachricht ]_______");
				format(string,sizeof(string),"%s %s hat alle Straßenschilder entfernt.",RangName(playerid),SpielerInfo[playerid][sName]);
				SendClientMessageToAll(COLOR_BLUE,string);
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
	else if(strcmp("/sirenehupe", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 5 || SpielerInfo[playerid][sFraktion] == 6)
		{
		    if(GetPVarInt(playerid,"SireneHupe") == 0)
		    {
		        SendClientMessage(playerid,COLOR_YELLOW,"Du schaltest die Sirene nun mit der Hupe an/aus.");
                SetPVarInt(playerid,"SireneHupe",1);
		        return 1;
		    }
		    else if(GetPVarInt(playerid,"SireneHupe") == 1)
		    {
		        DeletePVar(playerid,"SireneHupe");
		        SendClientMessage(playerid,COLOR_YELLOW,"Du schaltest die Sirene wieder mit /sirene an und aus.");
		        return 1;
		    }
		}
		return NichtBerechtigt
	}
	else if(strcmp("/usirene", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
			new PLAYER_STATE:State = GetPlayerState(playerid);
			if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
			if(FahrzeugInfo[tmpcar][fSireneBool] == false)
			{
				if(GetVehicleModel(tmpcar) == 560)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(19288,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][2] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][3] = CreateDynamicObject(19292,0,0,0,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][0], tmpcar,0 ,2.6,0,0,0,0);//Vorne Mitte
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1], tmpcar,0.7,2.6,0,0,0,0);//Vorne Licht Beifahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][2], tmpcar,-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][3], tmpcar,0,0.9,0.4,0,0,0);//Mittig im Fenster
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				else if(GetVehicleModel(tmpcar) == 426)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][2] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1], tmpcar,0 ,2.6,0,0,0,0);//Vorne Mitte
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][2], tmpcar,0.7,2.6,0,0,0,0);//Vorne Licht Beifahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][3], tmpcar,-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				return 1;
			}
			else if(FahrzeugInfo[tmpcar][fSireneBool] == true)
			{
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][0]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][1]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][2]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][3]);
				FahrzeugInfo[tmpcar][fSirene][0] = -1;
				FahrzeugInfo[tmpcar][fSirene][1] = -1;
				FahrzeugInfo[tmpcar][fSirene][2] = -1;
				FahrzeugInfo[tmpcar][fSirene][3] = -1;
				FahrzeugInfo[tmpcar][fSireneBool] = false;
				SendClientMessage(playerid,COLOR_GREY,"Sirene abgeschraubt.");
				return 1;
			}
			return 1;
		}
	}
	else if(strcmp("/sirene", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 5 || SpielerInfo[playerid][sFraktion] == 6)
		{
			if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
			new PLAYER_STATE:State = GetPlayerState(playerid);
			if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
			if(FahrzeugInfo[tmpcar][fSireneBool] == false)
			{
				if(GetVehicleModel(tmpcar) == 560)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(19288,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(19419,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][2] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][3] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][4] = CreateDynamicObject(19292,0,0,0,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][0], tmpcar,0 ,2.6,0,0,0,0);//Vorne Mitte
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1],tmpcar,0.0,0.0,0.85,0,0,0);//Dach sirene
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][2], tmpcar,0.7,2.6,0,0,0,0);//Vorne Licht Beifahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][3], tmpcar,-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][4], tmpcar,0,0.9,0.4,0,0,0);//Mittig im Fenster
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				else if(GetVehicleModel(tmpcar) == 426)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(19419,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][2] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][3] = CreateDynamicObject(19288,0,0,0,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][0], tmpcar,0 ,2.6,0,0,0,0);//Vorne Mitte
     				AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1],tmpcar,0.0,0.0,0.85,0,0,0);//Dach sirene
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][2], tmpcar,0.7,2.6,0,0,0,0);//Vorne Licht Beifahrerseite
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][3], tmpcar,-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				else if(GetVehicleModel(tmpcar) == 552)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(18646,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(18646,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][0], tmpcar, -0.750000,0.899999,1.350000,0.000000,0.000000,0.000000);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1], tmpcar, 0.749999,0.899999,1.350000,0.000000,0.000000,0.000000);
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				else if(GetVehicleModel(tmpcar) == 525)
				{
					FahrzeugInfo[tmpcar][fSirene][0] = CreateDynamicObject(18646,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					FahrzeugInfo[tmpcar][fSirene][1] = CreateDynamicObject(18646,0,0,-1000,0,0,0,-1,-1,-1,100,100);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][0], tmpcar, 0.655000,-0.495000,1.435000,0.000000,0.000000,0.000000);
					AttachDynamicObjectToVehicle(FahrzeugInfo[tmpcar][fSirene][1], tmpcar, -0.469999,-0.495000,1.435000,0.000000,0.000000,0.000000);
					FahrzeugInfo[tmpcar][fSireneBool] = true;
					SendClientMessage(playerid,COLOR_GREY,"Du schraubst eine Sirene auf das Dach...");
					return 1;
				}
				return 1;
			}
			else if(FahrzeugInfo[tmpcar][fSireneBool] == true)
			{
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][0]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][1]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][2]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][3]);
				DestroyDynamicObject(FahrzeugInfo[tmpcar][fSirene][4]);
				FahrzeugInfo[tmpcar][fSirene][0] = -1;
				FahrzeugInfo[tmpcar][fSirene][1] = -1;
				FahrzeugInfo[tmpcar][fSirene][2] = -1;
				FahrzeugInfo[tmpcar][fSirene][3] = -1;
				FahrzeugInfo[tmpcar][fSirene][4] = -1;
				FahrzeugInfo[tmpcar][fSireneBool] = false;
				SendClientMessage(playerid,COLOR_GREY,"Sirene abgeschraubt.");
				return 1;
			}
			return 1;
		}
		return NichtBerechtigt
	}
	else if(strcmp("/delad", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sAdmin] < 4)return NichtBerechtigt
		if(GlobalVars[WerbungAktiv] == 0)return SendClientMessage(playerid,COLOR_GREY,"Es wurde keine Werbung erstellt.");
	    new string[128];
	    format(string,sizeof(string),"%s %s hat die Werbung gelöscht.",AdminName(playerid),SpielerInfo[playerid][sName]);
		SendICPMessage(string);
		GlobalVars[WerbungAktiv] = 0;
		TextDrawSetString(StatusWerbung, "~g~Werbung: ~w~Keine - Benutze /ad um eine Werbung zu schalten.");
		return 1;
	}
	else if(strcmp("/freikaufen", cmdtext, true, 10) == 0)
	{
 		if(!IsPlayerInRangeOfPoint(playerid,3.0,1564.0399,-1660.1068,1261.2506))return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht an der Verwahrstelle.");
		ShowPlayerDialog(playerid,DIALOG_FREIKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Freikaufen","Fraktionsfahrzeug\nPrivatfahrzeug\nGruppenfahrzeug","Weiter","Abbrechen");
		return 1;
	}
	else if(strcmp("/abschleppen", cmdtext, true, 10) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] != 2)return NichtBerechtigt
        if(GetPVarInt(playerid,"CopDuty") != 1)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem TowTruck.");
		if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == 0)return SendClientMessage(playerid,COLOR_GREY,"Du hast kein Fahrzeug am Haken.");
		new car = GetVehicleTrailer(GetPlayerVehicleID(playerid));
  		if(FahrzeugInfo[car][fFraktion] != 0 || FahrzeugInfo[car][fGruppe] != 0 || FahrzeugInfo[car][fFirma] != 0 || strlen(FahrzeugInfo[car][fBesitzer]) != 0)
		{
			SetPlayerCheckpoint(playerid,1585.4338,-1608.5460,13.3828,5.0);
			SendClientMessage(playerid,COLOR_INFO,"Bringe das Fahrzeug zum roten Marker.");
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		    return 1;
		}
		else SendClientMessage(playerid,COLOR_SORRY,"Du kannst dieses Fahrzeug nicht abschleppen.");
		return 1;
	}
	else if(strcmp("/fcarsell", cmdtext, true, 10) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sFraktion] == 0)return NichtBerechtigt
        if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fFraktion] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
		if(FahrzeugInfo[tmpcar][fFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_GREY,"Das Fraktionsfahrzeug gehört nicht deiner Fraktion.");
        SetPVarInt(playerid,"FahrzeugVerkaufen",1);
        format(string,sizeof(string),"{FFFFFF}Möchtest du den {009BFF}%s{FFFFFF} für {009BFF}%d${FFFFFF} verkaufen ?",FahrzeugName[FahrzeugInfo[tmpcar][fModelID]-400],FahrzeugInfo[tmpcar][fPreis]/2);
        ShowPlayerDialog(playerid,DIALOG_FAHRZEUG_VERKAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Fraktionsfahrzeug",string,"Ja","Nein");
		return 1;
	}
	else if(strcmp("/firmcarsell", cmdtext, true, 10) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
        if(SpielerInfo[playerid][sFRank] < 6)return NichtBerechtigt
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fFirma] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Firmenfahrzeug.");
		if(FahrzeugInfo[tmpcar][fFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_GREY,"Das Firmenfahrzeug gehört nicht deiner Firma.");
        SetPVarInt(playerid,"FahrzeugVerkaufen",4);
        format(string,sizeof(string),"{FFFFFF}Möchtest du den {009BFF}%s{FFFFFF} für {009BFF}%d${FFFFFF} verkaufen ?",FahrzeugName[FahrzeugInfo[tmpcar][fModelID]-400],FahrzeugInfo[tmpcar][fPreis]/2);
        ShowPlayerDialog(playerid,DIALOG_FAHRZEUG_VERKAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Firmenfahrzeug",string,"Ja","Nein");
		return 1;
	}
	else if(strcmp("/gcarsell", cmdtext, true, 10) == 0)
    {
        new string[164];
        if(SpielerInfo[playerid][sGruppe] == 0)return NichtBerechtigt
        if(SpielerInfo[playerid][sGRank] < 6)return NichtBerechtigt
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
		if(FahrzeugInfo[tmpcar][fGruppe] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Gruppenfahrzeug.");
		if(FahrzeugInfo[tmpcar][fGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_GREY,"Das Gruppenfahrzeug gehört nicht deiner Fraktion.");
        SetPVarInt(playerid,"FahrzeugVerkaufen",3);
        format(string,sizeof(string),"{FFFFFF}Möchtest du den {009BFF}%s{FFFFFF} für {009BFF}%d${FFFFFF} verkaufen ?",FahrzeugName[FahrzeugInfo[tmpcar][fModelID]-400],FahrzeugInfo[tmpcar][fPreis]/2);
        ShowPlayerDialog(playerid,DIALOG_FAHRZEUG_VERKAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Gruppenfahrzeug",string,"Ja","Nein");
		return 1;
	}
	else if(strcmp("/carsell", cmdtext, true, 10) == 0)
    {
        new string[164];
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
        new carid = GetPlayerVehicleID(playerid);
        if(strlen(FahrzeugInfo[carid][fBesitzer]) == 0)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Privatfahrzeug.");
		if(FahrzeugInfo[carid][fBesitzerID] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Besitzer dieses Fahrzeugs.");
		SetPVarInt(playerid,"FahrzeugVerkaufen",2);
     	format(string,sizeof(string),"{FFFFFF}Möchtest du den {009BFF}%s{FFFFFF} für {009BFF}%d${FFFFFF} verkaufen ?",FahrzeugName[FahrzeugInfo[tmpcar][fModelID]-400],FahrzeugInfo[tmpcar][fPreis]/2);
        ShowPlayerDialog(playerid,DIALOG_FAHRZEUG_VERKAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Privatfahrzeug",string,"Ja","Nein");
		return 1;
	}
	else if(strcmp("/bank", cmdtext, true, 10) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,1778.7935,-1703.7747,13.5609) || IsPlayerInRangeOfPoint(playerid,5.0,1780.3076,-1703.8090,13.5629))
	 	{
	 	    if(SpielerInfo[playerid][sPerso] == 0)return ShowPlayerDialog(playerid,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Du besitzt derzeit noch kein Bankkonto. Du benötigst allerdings einen Personalausweis\nzur Personenidentifikation um dir ein Bankkonto anlegen zu können.","Weiter","");
			if(SpielerInfo[playerid][sBankPin] == 0 && SpielerInfo[playerid][sQuest] == 2)return ShowPlayerDialog(playerid,DIALOG_BANKKONTO_ERSTELLEN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Du besitzt derzeit noch kein Bankkonto. Damit du deine Finanzen in Zukunft lagern und auch besser\nverwalten kannst, musst du dir ein Konto anlegen. Gebe dazu einen 4-Stelligen gewünschten Zahlen-PIN ein.","Weiter","Abbrechen");
			if(SpielerInfo[playerid][sBankPin] == 0 && SpielerInfo[playerid][sQuest] != 2)return SendClientMessage(playerid,COLOR_SORRY,"Komm wieder, wenn du bei der Quest angelangt bist.");
			ShowPlayerDialog(playerid,DIALOG_BANKLOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe deinen PIN für dein Konto an um fortzufahren.","Weiter","Zurück");
			return 1;
	 	}
	 	else SendClientMessage(playerid,COLOR_SORRY,"Du bist an keinem Bankschalter.");
	 	return 1;
	}
 	else if(strcmp("/atm", cmdtext, true, 10) == 0)
	{
		if(!AmATM(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du bist an keinem Bankautomat.");
		if(SpielerInfo[playerid][sBankPin] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt derzeit noch kein Bankkonto. Fahr zur Bank und lass dir ein Bankkonto erstellen.");
		ShowPlayerDialog(playerid,DIALOG_BANKLOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe deinen PIN für dein Konto an um fortzufahren.","Weiter","Zurück");
		return 1;
	}
 	else if(strcmp("/aufheben", cmdtext, true, 10) == 0)
	{
		if(!AmGeldSack(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du bist an keinem Geldsack.");
		if(GetPVarInt(playerid,"HatGeldsack") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst immer nur einen Geldsack tragen.");
		new sackid = GetGeldSack(playerid), string[124];
		if(BankRobGeldSack[sackid] == 0)return 1;
		if(SpielerInfo[playerid][sFraktion] != SpielerInfo[BankAttacker][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Nur Mitglieder der Gang des Bankräubers kann den Geldsack aufheben.");
		new Float:x,Float:y,Float:z;
		GetVehiclePos(BankRobVan,x,y,z);
		SetPVarInt(playerid,"HatGeldsack",1);
		SetPVarInt(playerid,"Geldsack",sackid);
		BankRobGeldSackSpawned[0]--;
	    DestroyDynamicObject(BankRobGeldSack[sackid]);
	    BankRobGeldSack[sackid] = 0;
	    Delete3DTextLabel(BankRobGeldSackLabel[sackid]);
	    BankRobGeldSackLabel[sackid] = Text3D:INVALID_3DTEXT_ID;
		SetPlayerAttachedObject(playerid,0,1550,1,0.070999,-0.285000,0.016999,3.200000,84.000015,0.699999,0.913000,0.907999,0.778000);
		SetPlayerCheckpoint(playerid,x,y,z,5.0);
		format(string,sizeof(string),"~w~ GELDBEUTEL IN DER BANK: ~b~ %d",BankRobGeldSackSpawned[0]);
        PlayerTextDrawSetString(BankAttacker, BankraubTD[BankAttacker][4], string);
		return 1;
	}
	else if(strcmp("/aufsammeln", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sNebenjob] != 7)return NichtBerechtigt
	    if(GetPVarInt(playerid,"LandwirtStufe") != 3)return SendClientMessage(playerid,COLOR_SORRY,"Es befinden sich noch nicht genug Heuballen auf dem Feld.");
	    if(GetPVarInt(playerid,"LandwirtHatWalton") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Besorg dir erst einen Walton, um die Heuballen aufheben zu können.");
	    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		if(!AmHeuballen(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du bist an keinem Heuballen.");
		if(GetPVarInt(playerid,"HatHeuballen") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst immer nur einen Heuballen tragen.");
		new ballenid = GetHeuballen(playerid);
		if(LandwirtObjekt[playerid][ballenid] == 0)return 1;
		new Float:x,Float:y,Float:z, vehid = GetPVarInt(playerid,"LandwirtAuto");
		GetXYInFrontOfVehicle(vehid,x,y,z,-2.02);
		SetPVarInt(playerid,"HatHeuballen",1);
		SetPVarInt(playerid,"HeuballenID",ballenid);
	    DestroyDynamicObject(LandwirtObjekt[playerid][ballenid]);
	    LandwirtObjekt[playerid][ballenid] = -1;
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        SetPlayerAttachedObject(playerid,4,2901,6,0.055999,0.055999,-0.334999,-40.699996,87.699966,14.099964,1.000000,1.000000,1.000000);
		SetPlayerCheckpoint(playerid,x,y,z,2.0);
  		WaltonKofferraumPos[vehid][0] = x;
	    WaltonKofferraumPos[vehid][1] = y;
	    WaltonKofferraumPos[vehid][2] = z;
		return 1;
	}
	else if(strcmp("/pfcp", cmdtext, true, 10) == 0)
	{
	    if(ProbefahrtCar[playerid] != INVALID_VEHICLE_ID)
	    {
	        if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus - Los Santos
	        {
		        SetPlayerCheckpoint(playerid,1945.9243,-1569.7150,13.5977,4.0);
		        SendClientMessage(playerid,COLOR_GREY,"INFO: Der Checkpoint zum beenden der Probefahrt wurde auf der Karte makiert.");
		        return 1;
			}
			else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler - Los Santos
			{
   				SetPlayerCheckpoint(playerid,1845.0406,-1397.4750,13.3906,4.0);
		        SendClientMessage(playerid,COLOR_GREY,"INFO: Der Checkpoint zum beenden der Probefahrt wurde auf der Karte makiert.");
		        return 1;
			}
			else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
			{
   				SetPlayerCheckpoint(playerid,-1581.5812,1166.5559,6.7440,4.0);
		        SendClientMessage(playerid,COLOR_GREY,"INFO: Der Checkpoint zum beenden der Probefahrt wurde auf der Karte makiert.");
		        return 1;
			}
	    }
	    else SendClientMessage(playerid,COLOR_GREY,"Du fährst derzeit kein Probefahrzeug.");
		return 1;
	}
	else if(strcmp("/autohaus", cmdtext, true, 10) == 0)
	{
	    new autohausdialog[340], merker2;
	    if(IsPlayerInRangeOfPoint(playerid,4.0,1864.6090,-1598.8942,13.6107))
		{
			for(new i = 1;i<MAX_VEHICLES;i++)
		    {
		        if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
		        if(FahrzeugInfo[i][fAutohaus] != 1)continue;
	            format(autohausdialog,sizeof(autohausdialog),"%s\n%s",autohausdialog,FahrzeugName[FahrzeugInfo[i][fModelID]-400]);
	            autohauscarmodelid[playerid][merker2] = FahrzeugInfo[i][fModelID];
	            autohauscarid[playerid][merker2] = i;
	            merker2++;
			}
			SetPVarInt(playerid,"Autohaus",1);
		    ShowPlayerDialog(playerid,DIALOG_AUTOHAUS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",autohausdialog,"Weiter","Abbrechen");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1811.1904,-1398.9595,13.6169))
		{
			for(new i = 1;i<MAX_VEHICLES;i++)
		    {
		        if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
		        if(FahrzeugInfo[i][fAutohaus] != 2)continue;
	            format(autohausdialog,sizeof(autohausdialog),"%s\n%s",autohausdialog,FahrzeugName[FahrzeugInfo[i][fModelID]-400]);
	            autohauscarmodelid[playerid][merker2] = FahrzeugInfo[i][fModelID];
	            autohauscarid[playerid][merker2] = i;
	            merker2++;
			}
			SetPVarInt(playerid,"Autohaus",2);
		    ShowPlayerDialog(playerid,DIALOG_AUTOHAUS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Motorradhändler",autohausdialog,"Weiter","Abbrechen");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-1538.5326,1161.8965,7.1947))
		{
			for(new i = 1;i<MAX_VEHICLES;i++)
		    {
		        if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
		        if(FahrzeugInfo[i][fAutohaus] != 3)continue;
	            format(autohausdialog,sizeof(autohausdialog),"%s\n%s",autohausdialog,FahrzeugName[FahrzeugInfo[i][fModelID]-400]);
	            autohauscarmodelid[playerid][merker2] = FahrzeugInfo[i][fModelID];
	            autohauscarid[playerid][merker2] = i;
	            merker2++;
			}
			SetPVarInt(playerid,"Autohaus",3);
		    ShowPlayerDialog(playerid,DIALOG_AUTOHAUS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",autohausdialog,"Weiter","Abbrechen");
		    return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du befindest dich in keinem Autohaus/Motorradhändler.");
		return 1;
	}
	
	else if(strcmp("/ctf", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] < 9)return SendClientMessage(playerid,COLOR_GREY,"* Du bist in keiner Gang / Mafia.");
		new Zone = IsPlayerInGangZoneEx(playerid);
		if(Zone < 1)return SendClientMessage(playerid,COLOR_SORRY,"* Du befindest dich in keinem Ganggebiet.");
		if(GangZoneInfo[Zone][gzFightTime] < 1)return SendClientMessage(playerid,COLOR_GREY,"* Hier wird zurzeit nicht gekämpft!");
		if(GangZoneInfo[Zone][gzCTFTry] > 0)return SendClientMessage(playerid,COLOR_GREY,"* Die Flagge kann noch nicht erobert werden!");
		if(!IsPlayerInRangeOfPoint(playerid,7.0,GangZoneInfo[Zone][gzCTFX],GangZoneInfo[Zone][gzCTFY],GangZoneInfo[Zone][gzCTFZ]))return SendClientMessage(playerid,COLOR_GREY,"* Du bist nicht an der Gebietbox!");
		if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzAttacker])
		{
			GangZoneInfo[Zone][gzCTFTry] = 1;
		    SetTimerEx("CTFTryTimeOut",300000,false,"d",Zone);
		    new string[128], anzeige[16], anzeige2[16];
		    format(string,sizeof(string),"[GANGFIGHT] %s hat die Flagge erobert! +1 Kill %s!",SpielerInfo[playerid][sName],FrakName(SpielerInfo[playerid][sFraktion]));
			if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzOwner]){GangZoneInfo[Zone][gzOwnerPunkte]++;}
			else if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzAttacker]){GangZoneInfo[Zone][gzAttackerPunkte]++;}
			format(anzeige,sizeof(anzeige),"%d Kills",GangZoneInfo[Zone][gzOwnerPunkte]); format(anzeige2,sizeof(anzeige2),"%d Kills",GangZoneInfo[Zone][gzAttackerPunkte]);
			foreach(new i : Player)
		    {
		        if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
		        {
		            SendClientMessage(i,COLOR_GANGFIGHT,string);
		            PlayerTextDrawSetString(i, Gangfight[i][4], anzeige);
		            PlayerTextDrawSetString(i, Gangfight[i][5], anzeige2);
		        }
		    }
		}
		else SendClientMessage(playerid,COLOR_GREY,"* Deine Gang / Mafia ist nicht an diesem Gangfight beteiltigt!");
	   	return 1;
	}
	
	else if(strcmp("/gangfight", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)return SendClientMessage(playerid,COLOR_SORRY,"Du bist in keiner Gang.");
		new Zone = IsPlayerInGangZoneEx(playerid);
		if(Zone < 0)return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich in keinem Ganggebiet.");
		if(GangZoneInfo[Zone][gzGebiet] == 1)
		{
		    if(SpielerInfo[playerid][sFraktion] == 17 || SpielerInfo[playerid][sFraktion] == 18)
	  		{
			    SendClientMessage(playerid,COLOR_SORRY,"Dies ist ein Ganggebiet & kein Mafiengebiet.");
			    return 1;
		    }
		}
		else if(GangZoneInfo[Zone][gzGebiet] == 2)
		{
  			if(SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 17)
	  		{
			    SendClientMessage(playerid,COLOR_SORRY,"Dies ist ein Mafiengebiet & kein Ganggebiet.");
			    return 1;
		    }
		}
		if(GangZoneInfo[Zone][gzOwner] > 8 && GangZoneInfo[Zone][gzOwner] < 19)
		{
			if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[Zone][gzOwner])return SendClientMessage(playerid,COLOR_SORRY,"Dieses Ganggebiet ist bereits in eurer Gewalt.");
			if(GangZoneInfo[Zone][gzLastFight] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieses Ganggebiet hatte gerade einen Kampf hinter sich.");
			if(GangZoneInfo[Zone][gzAttacker] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieses Ganggebiet wird bereits angegriffen.");
   			if(FrakInfo[GangZoneInfo[Zone][gzOwner]][fiGFAktiv] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Die Gebietbesitzer haben bereits einen anderen Gangfight.");
			if(FrakInfo[GangZoneInfo[Zone][gzAttacker]][fiGFAktiv] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Ihr habt bereits einen Gangfight!");
			new owner, angreifer;
			foreach(new i : Player)
			{
			    if(SpielerInfo[i][sFraktion] < 9 || SpielerInfo[i][sFraktion] == 19 || SpielerInfo[i][sFraktion] == 20)continue;
			    if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner])
			    {
					owner++;
			    }
			    if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
			    {
			        angreifer++;
			    }
			}
			if(angreifer > 0 && owner > 0)
			{
				new string[212], string2[212], gfstring[60], gfstring2[60];
				GangZoneInfo[Zone][gzAttacker] = SpielerInfo[playerid][sFraktion];
				GangZoneInfo[Zone][gzOwnerPunkte] = 0;
				GangZoneInfo[Zone][gzAttackerPunkte] = 0;
				format(string,sizeof(string),"Die Fraktion %s greift eines euer Ganggebiete an! Schaltet Sie aus, oder Ihr verliert 2000$ und das Gebiet!",FrakName(SpielerInfo[playerid][sFraktion]));
		        format(string2,sizeof(string2),"Ihr habt ein Gangfight gegen die %s gestartet! Schaltet Sie aus, dann gewinnt Ihr 2000$ und das Gebiet!",FrakName(GangZoneInfo[Zone][gzOwner]));
				format(gfstring,sizeof(gfstring),"%s",FrakName(GangZoneInfo[Zone][gzOwner]));
				format(gfstring2,sizeof(gfstring2),"%s",FrakName(GangZoneInfo[Zone][gzAttacker]));
				FrakInfo[GangZoneInfo[Zone][gzOwner]][fiGFAktiv] = 1;
				FrakInfo[GangZoneInfo[Zone][gzAttacker]][fiGFAktiv] = 1;
				GangZoneInfo[Zone][gzFightTime] = 35;
				GangZoneInfo[Zone][gzTimer] = SetTimerEx("GangfightTime",60000,false,"i",Zone);
				foreach(new i : Player)
				{
				    UpdateGangZones(i);
				    if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
				    {
				        StartGangfight(i);
				    }
				    if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner])
				    {
				        SendClientMessage(i,COLOR_GANGFIGHT,string);
				    }
				    else if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
				    {
		                SendClientMessage(i,COLOR_GANGFIGHT,string2);
					}
		        	PlayerTextDrawSetString(playerid, Gangfight[playerid][6], "Noch ~r~35 Minuten ~w~verbleibend");
				}
				return 1;
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Es müssen min. 2 Gegner & min. 2 aus deiner Fraktion online sein.");
			return 1;
		}
		else
		{
		    GangZoneInfo[Zone][gzOwner] = SpielerInfo[playerid][sFraktion];
		    SendClientMessage(playerid,COLOR_YELLOW,"Dieses Ganggebiet gehört nun euch! Verteidigt es in Zukunft mit eurem Leben!");
		    new string[4];
			new iValue = GangZoneInfo[Zone][gzID];
			valstr(string,iValue);
		    mysql_SetInt("gangzones", "Owner", SpielerInfo[playerid][sFraktion], "GID", string);
		    return 1;
		}
	}
	else if(strcmp("/gebietinfo", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)return SendClientMessage(playerid,COLOR_SORRY,"Du bist in keiner Gang.");
        new Zone = IsPlayerInGangZoneEx(playerid);
		if(Zone == -255)return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich in keinem Ganggebiet.");
		if(SpielerInfo[playerid][sRank] < 6)return NichtBerechtigt
		if(GangZoneInfo[Zone][gzOwner] == SpielerInfo[playerid][sFraktion])
		{
		    SetPVarInt(playerid,"GBInfoZone",Zone);
		    ShowPlayerDialog(playerid,DIALOG_GEBIET,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Gebietverwaltung","Gebietinfo\nWert auszahlen","Weiter","Schliessen");
		}
		else
		{
		    SetPVarInt(playerid,"GBInfoZone",Zone);
		    ShowPlayerDialog(playerid,DIALOG_GEBIET,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Gebietverwaltung","Gebietinfo","Weiter","Schliessen");
		}
		return 1;
	}
	else if(strcmp("/marker", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sAdmin] < 2)return NichtBerechtigt
	    if(GetPVarInt(playerid,"MarkerSetted") == 0)
	    {
			GetPlayerPos(playerid, markerX[playerid], markerY[playerid], markerZ[playerid]);
			GetPlayerFacingAngle(playerid,markerA[playerid]);
			markerInt[playerid] = GetPlayerInterior(playerid);
			markerVw[playerid] = GetPlayerVirtualWorld(playerid);
	        SetPVarInt(playerid,"MarkerSetted",1);
	        SendClientMessage(playerid,COLOR_YELLOW,"Marker gesetzt. Benutze '/marker' um dich auf diese Position zu porten.");
	        return 1;
	    }
	    else if(GetPVarInt(playerid,"MarkerSetted") == 1)
	    {
	        SetPlayerPos(playerid, markerX[playerid], markerY[playerid], markerZ[playerid]);
	        SetPlayerFacingAngle(playerid,markerA[playerid]);
	        SetPlayerInterior(playerid, markerInt[playerid]);
	        SetPlayerVirtualWorld(playerid, markerVw[playerid]);
	        if(IsPlayerInAnyVehicle(playerid))
			{
			    SetVehiclePos(tmpcar,markerX[playerid], markerY[playerid], markerZ[playerid]+5);
			    SetVehicleZAngle(tmpcar,markerA[playerid]);
			    LinkVehicleToInterior(tmpcar,0);
			    SetVehicleVirtualWorld(tmpcar,0);
			    AC_PutPlayerInVehicleEx(playerid, tmpcar, 0);
			}
	        SendClientMessage(playerid,COLOR_YELLOW,"Du hast dich geportet. Der Marker-Eintrag wurde gelöscht.");
	        DeletePVar(playerid,"MarkerSetted");
	        return 1;
	    }
	}
	else if(strcmp("/tanken", cmdtext, true, 10) == 0)
	{
	    new veh = GetPlayerVehicleID(playerid);
	    new PLAYER_STATE:State=GetPlayerState(playerid);
		if(!AnTankstelle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Tankstelle.");
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
	    if(State!=PLAYER_STATE_DRIVER)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
	    if(Motor[veh] == true)return SendClientMessage(playerid,COLOR_GREY,"Der Motor muss beim Tanken ausgeschaltet werden.");
	    SetPVarInt(playerid,"Tanken",1);
		ShowPlayerDialog(playerid,DIALOG_TANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Tanksystem","Benzin\nDiesel\nKerosin","Weiter","Abbrechen");
    	return 1;
	}
	else if(strcmp("/tankstelleninfo", cmdtext, true, 10) == 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    
		if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
    	if(GetVehicleModel(vehicleid) == 515)
    	{
	        new tstelledialog[800], merker = true;
			for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
		    {
		        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
		        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
		        {
		            if(tsid < 6)
		            {
		                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
						merker = false;
					}
				}
			}
			if(merker)
			{
			    SendClientMessage(playerid,COLOR_SORRY,"Im moment benötigt keine Tankstelle Treibstoff.");
			    return 1;
			}
			else
			{
		    	ShowPlayerDialog(playerid,DIALOG_TANKSTELLENINFO,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Seite 2","Abbrechen");
			    return 1;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Tanker. (Roter LKW)");
		return 1;
	}
	else if(strcmp("/beliefern", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
		if(GetPVarInt(playerid,"TruckerAngebot") != 0)return SendClientMessage(playerid,COLOR_GREY,"Beende erst deine Route, um eine neue zu beginnen.");
  		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
  		if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 515)
		{
			ShowPlayerDialog(playerid,DIALOG_TRUCKER_LIEFERUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Lieferauswahl","Kraftstoffe (Tankstelle)\nWaren (24/7)\nWaren (Ammunation)","Bestätigen","Abbrechen");
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Roadtrain.");
		return 1;
	}
	else if(strcmp("/auffüllen", cmdtext, true, 10) == 0)
	{
	    new veh = GetPlayerVehicleID(playerid);
	    if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
		if(!AnTankstelle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Tankstelle.");
		if(GetPVarInt(playerid,"TStelleBetanken") == 1)return 1;
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
	    if(GetVehicleModel(veh) != 515)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Roadtrain.");
	    if(!IsTrailerAttachedToVehicle(veh))return SendClientMessage(playerid,COLOR_GREY,"Du hast keinen Anhänger angekuppelt.");
	    if(GetVehicleTrailer(veh) != SpielerLKWTrailer[playerid])return SendClientMessage(playerid,COLOR_SORRY,"Das ist nicht dein Anhänger.");
	    if(Motor[veh] == true)return SendClientMessage(playerid,COLOR_GREY,"Der Motor muss beim auffüllen ausgeschaltet werden.");
	    if(GetPVarInt(playerid,"TrailerKapazität") == 0)return SendClientMessage(playerid,COLOR_SORRY,"In deinem Anhänger befindet sich kein Treibstoff mehr. Bringe den Anhänger zum roten Marker.");
		new tsid = GetNearTankstelleID(playerid);
		if(GetPVarInt(playerid,"TrailerBetanken") == 1)//Benzin
	    {
	        if(TankstellenInfo[tsid][tsIsFillingB] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Diesel Tankstelle wird gerade schon mit Benzin aufgefüllt. Bitte warte einen Moment.");
	        if(TankstellenInfo[tsid][tsBenzinLiter] == 10000)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle benötigt kein Benzin.");
			TogglePlayerControllable(playerid, false);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			SetTimerEx("TrailerBetanken",20000,false,"i",playerid);
			GameTextForPlayer(playerid, "Die Tankstelle wird aufgefuellt~n~~n~~r~Bitte warten...", 20000, 5);
			TankstellenInfo[tsid][tsIsFillingB] = 1;
			SetPVarInt(playerid,"TStelleBetanken",1);
	    }
	    else if(GetPVarInt(playerid,"TrailerBetanken") == 2)//Diesel
	 	{
	 	    if(TankstellenInfo[tsid][tsIsFillingD] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Diesel Tankstelle wird gerade schon mit Diesel aufgefüllt. Bitte warte einen Moment.");
            if(TankstellenInfo[tsid][tsDieselLiter] == 10000)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle benötigt kein Diesel.");
			TogglePlayerControllable(playerid, false);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			SetTimerEx("TrailerBetanken",20000,false,"i",playerid);
			GameTextForPlayer(playerid, "Die Tankstelle wird aufgefuellt~n~~n~~r~Bitte warten...", 20000, 5);
			TankstellenInfo[tsid][tsIsFillingD] = 1;
			SetPVarInt(playerid,"TStelleBetanken",1);
	 	}
	 	else if(GetPVarInt(playerid,"TrailerBetanken") == 3)//Kerosin
	 	{
	 	    if(TankstellenInfo[tsid][tsIsFillingK] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Diesel Tankstelle wird gerade schon mit Kerosin aufgefüllt. Bitte warte einen Moment.");
            if(TankstellenInfo[tsid][tsKerosinLiter] == 10000)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle benötigt kein Kerosin.");
 			TogglePlayerControllable(playerid, false);
 			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			SetTimerEx("TrailerBetanken",20000,false,"i",playerid);
			GameTextForPlayer(playerid, "Die Tankstelle wird aufgefuellt~n~~n~~r~Bitte warten...", 20000, 5);
			TankstellenInfo[tsid][tsIsFillingK] = 1;
			SetPVarInt(playerid,"TStelleBetanken",1);
	 	}
		return 1;
	}
	else if(strcmp("/jduty", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		if(IsPlayerInRangeOfPoint(playerid,3.0,369.0709,-114.6389,1001.4995))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 2)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Pizzabote.");
  			if(GetPVarInt(playerid,"PizzaboteDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1378.4637,-1640.7590,13.5469))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 3)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Kehrmaschinenfahrer.");
  			if(GetPVarInt(playerid,"KehrmaschinenDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1957.0295,-2183.6008,13.5469))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 4)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Pilot.");
  			if(GetPVarInt(playerid,"PilotDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1523.1068,-2325.8340,13.5469))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 5)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Busfahrer.");
  			if(GetPVarInt(playerid,"BusfahrerDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1734.5929,-2060.1526,13.5910))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 6)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Müllmann.");
  			if(GetPVarInt(playerid,"MüllmannDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-62.7901,76.2742,3.1172))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 7)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Landwirt.");
  			if(GetPVarInt(playerid,"LandwirtDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1106.1093,-299.7448,74.5391))
		{
		    if(SpielerInfo[playerid][sNebenjob] != 10)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Holzfäller.");
  			if(GetPVarInt(playerid,"HolzfallerDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		return 1;
	}
	else if(strcmp("/stadthalle", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,362.2921,173.6492,1008.3828))
	    {
			if(GetPVarInt(playerid,"Rathaus") == 0)
	 	    {
		 	    SetPVarInt(playerid,"Rathaus",1);
		 		ClearChat(playerid,10);
		 	    InterpolateCameraPos(playerid, 369.133270, 173.748519, 1010.823974, 364.557189, 169.982406, 1010.493774, 1000);
				InterpolateCameraLookAt(playerid, 364.636047, 173.921264, 1008.645629, 361.581481, 173.667617, 1008.892395, 1000);
				TogglePlayerControllable(playerid, false);
				if(SpielerInfo[playerid][sPerso] == 0)
				{
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][0]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][1]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][3]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
		            
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Willkommen im Rathaus von Los Santos. Wie ich sehe bist du neu hier.");
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Um dich überall ausweisen zu können, benötigst du einen Personalausweis.");
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich werde dir nun einen Personalausweis erstellen. Dieser Kostet: {FF0000}50${FFFFFF}.");
					if(GetPlayerMoneyEx(playerid) < 50)
					{
		                SetTimerEx("Personalausweis", 15000, false, "i", playerid);
						SetPVarInt(playerid,"Warten",1);
					}
					else
					{
					    SetTimerEx("Personalausweis", 15000, false, "i", playerid);
					}
				}
				if(SpielerInfo[playerid][sPerso] == 1)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Willkommen im Rathaus von Los Santos. Was kann ich für dich tun?");
				    ShowMenuForPlayer(Rathaus,playerid);
					return 1;
				}
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Stadthalle an der Rezeption.");
		return 1;
	}
	else if(strcmp("/schwarzmarkt", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,-1634.1162,-2241.6426,31.4766))
	    {
			if(GetPVarInt(playerid,"Schwarzmarkt") == 0)
	 	    {
		 	    SetPVarInt(playerid,"Schwarzmarkt",1);
		 		ClearChat(playerid,10);
		 	    InterpolateCameraPos(playerid, 369.133270, 173.748519, 1010.823974, 364.557189, 169.982406, 1010.493774, 1000);
				InterpolateCameraLookAt(playerid, 364.636047, 173.921264, 1008.645629, 361.581481, 173.667617, 1008.892395, 1000);
				TogglePlayerControllable(playerid, false);
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Willkommen im Schwarzmarkt. Was kann ich für dich tun Bruder?");
			    ShowMenuForPlayer(Schwarzmarkt,playerid);
				return 1;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Schwarzmarkt.");
		return 1;
	}
	else if(strcmp("/ah", cmdtext, true, 10) == 0 || strcmp("/ahelp", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sAdmin] == 0)return NichtBerechtigt
	    SendClientMessage(playerid,COLOR_RED,"=============================== | "SERV_NAME" - Admin Befehle | ===============================");
	    if(SpielerInfo[playerid][sAdmin] == 1)//Supporter
	    {
	        SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
	        SendClientMessage(playerid,COLOR_WHITE,"/supmobil | /aduty");
		}
	    else if(SpielerInfo[playerid][sAdmin] == 2)//Moderation
	    {
			SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
			SendClientMessage(playerid,COLOR_WHITE,"/gotoort | /gethere | /setint | /kick | /freeze | /tv | /supmobil | /aduty | /checkgun");
			SendClientMessage(playerid,COLOR_WHITE,"/marker | /respawncar | /getcar");
	    }
	    else if(SpielerInfo[playerid][sAdmin] == 3)//Administration
	    {
			SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
			SendClientMessage(playerid,COLOR_WHITE,"/gotoort | /gethere | /gotopos | /setint | /kick | /freeze | /tv | /supmobil | /aduty");
			SendClientMessage(playerid,COLOR_WHITE,"/respawncar | /getcar");
	    }
	    else if(SpielerInfo[playerid][sAdmin] == 4)//Head-Administration
	    {
			SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
			SendClientMessage(playerid,COLOR_WHITE,"/gotoort | /gethere | /gotopos | /setint | /kick | /freeze | /tv | /acheck | setskin");
			SendClientMessage(playerid,COLOR_WHITE,"/setvw | /sethp | /setarmour | /tban | /otban | /untimeban | /mute | /unmute | godtest");
			SendClientMessage(playerid,COLOR_WHITE,"/carrespawn | /clearchat | /supmobil | /aduty | /checkgun | /marker | /fixcar | /delad");
			SendClientMessage(playerid,COLOR_WHITE,"/respawncar | /getcar /adsperre /adentsperre");
		}
	    else if(SpielerInfo[playerid][sAdmin] == 5)//Entwicklung
	    {
			SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
			SendClientMessage(playerid,COLOR_WHITE,"/gotoort | /gethere | /gotopos | /setint | /kick | /freeze | /tv | /acheck | setskin");
			SendClientMessage(playerid,COLOR_WHITE,"/setvw | /sethp | /setarmour | /tban | /otban | /untimeban | /mute | /unmute | godtest");
			SendClientMessage(playerid,COLOR_WHITE,"/carrespawn | /clearchat | /ainvite | /uninvite | /veh | /carcontrol | /ban | /oban | /unban");
			SendClientMessage(playerid,COLOR_WHITE,"/lic | /refill | /giveexp | /supmobil | /aduty | /checkgun | /marker | /fixcar | /delad");
			SendClientMessage(playerid,COLOR_WHITE,"/respawncar | /getcar /adsperre /adentsperre");
	    }
	    else if(SpielerInfo[playerid][sAdmin] == 6)//Projektleitung
	    {
			SendClientMessage(playerid,COLOR_WHITE,"/apn | /slap | /admin | /goto | /sup | /tickets | /taketicket | /giveticket | /closeticket");
			SendClientMessage(playerid,COLOR_WHITE,"/gotoort | /gethere | /gotopos | /setint | /kick | /freeze | /tv | /acheck | setskin");
			SendClientMessage(playerid,COLOR_WHITE,"/setvw | /sethp | /setarmour | /tban | /otban | /untimeban | /mute | /unmute | godtest");
			SendClientMessage(playerid,COLOR_WHITE,"/carrespawn | /clearchat | /ainvite | /uninvite | /veh | /carcontrol | /ban | /oban | /unban");
			SendClientMessage(playerid,COLOR_WHITE,"/lic | /refill | /giveexp | /givemats | /givemoney | /makeleader | /createcar | /deletecar");
			SendClientMessage(playerid,COLOR_WHITE,"/edittstelle | /deltstelle | /createammu | /editammu | /delammu | /createstore | /editstore");
			SendClientMessage(playerid,COLOR_WHITE,"/delstore | /createhaus | /edithaus | /delhaus | | /creategarage| /editgarage | /delgarage");
			SendClientMessage(playerid,COLOR_WHITE,"/givegun | /getinfo | /warn | /makeadmin | /supmobil | /aduty | /checkgun | /marker | /fixcar");
			SendClientMessage(playerid,COLOR_WHITE,"/fixcar | /delad | /save-all | /ahlock | /tog | /downtime | /givedonator | /givepremium");
			SendClientMessage(playerid,COLOR_WHITE,"/takedonator | /takepremium | /respawncar | /getcar | /adsperre | /adentsperre | /frakliste");
			SendClientMessage(playerid,COLOR_WHITE,"/creategfirma | /createlager | /dellager");
	    }
	    return 1;
	}
	else if(strcmp("/help", cmdtext, true, 10) == 0 || strcmp("/hilfe", cmdtext, true, 10) == 0)
	{
	    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Hilfe","Allgemeine Befehle\nFraktions Befehle\nNebenjob Befehle\nFahrzeug Befehle\nGeschäft Befehle\nGruppen Befehle","Weiter","Abbrechen");
	    return 1;
	}
	else if(strcmp("/fahrschule", cmdtext, true, 10) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,3.0,1490.5149,1305.8287,1093.2964))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Prüfungsschalter.");
		ShowPlayerDialog(playerid,DIALOG_FAHRSCHULE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fahrschule","{FFFFFF}Autoschein		| Kosten: {FF0000}1000${FFFFFF}\nFlugschein		| Kosten: {FF0000}3000${FFFFFF}\nLKWschein		| Kosten: {FF0000}2000${FFFFFF}\nMotorradschein	| Kosten: {FF0000}800$\nBootschein		| Kosten: {FF0000}600$","Weiter","Abbrechen");
		return 1;
    }
	else if(strcmp("/scheine", cmdtext, true, 10) == 0)
	{
		new string2[7][128];
		new str[864];
		format(string2[0],128,"{FFFFFF}Lizenzen von {FF0000}%s",SpielerInfo[playerid][sName]);
		format(string2[1],128,"{FFFFFF}Autoschein:			%s{FFFFFF}	{FF0000}%d{FFFFFF}/10 Strafpunkt(e)",FScheinInfo(SpielerInfo[playerid][sCarLic]),SpielerInfo[playerid][stvoCarLic]);
		format(string2[2],128,"{FFFFFF}Motorradschein:		%s{FFFFFF}	{FF0000}%d{FFFFFF}/10 Strafpunkt(e)",FScheinInfo(SpielerInfo[playerid][sBikeLic]),SpielerInfo[playerid][stvoBikeLic]);
		format(string2[3],128,"{FFFFFF}Flugschein:			%s{FFFFFF}	{FF0000}%d{FFFFFF}/10 Strafpunkt(e)",FScheinInfo(SpielerInfo[playerid][sFlugLic]),SpielerInfo[playerid][stvoFlugLic]);
		format(string2[4],128,"{FFFFFF}LKWschein:			%s{FFFFFF}	{FF0000}%d{FFFFFF}/10 Strafpunkt(e)",FScheinInfo(SpielerInfo[playerid][sTruckLic]),SpielerInfo[playerid][stvoTruckLic]);
		format(string2[5],128,"{FFFFFF}Bootsschein:			%s{FFFFFF}	{FF0000}%d{FFFFFF}/10 Strafpunkt(e)",FScheinInfo(SpielerInfo[playerid][sBootLic]),SpielerInfo[playerid][stvoBootLic]);
		format(string2[6],128,"{FFFFFF}Waffenschein:			%s [Klasse: %d]",FScheinInfo(SpielerInfo[playerid][sWeaponLic]),SpielerInfo[playerid][sWeaponLic]);
		format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s\n%s",string2[0],string2[1],string2[2],string2[3],string2[4],string2[5],string2[6]);
		ShowPlayerDialog(playerid,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Lizenzen",str,"Weiter","");
		return 1;
	}
	else if(strcmp("/cpaus", cmdtext, true, 10) == 0)
	{
	    SendClientMessage(playerid,COLOR_SUPER,"Der rote Marker wurde entfernt.");
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else if(strcmp("/carlock", cmdtext, true, 10) == 0)
	{
		new Float:x,Float:y,Float:z, merker = true;
		for(new i = 1;i<MAX_VEHICLES;i++)
		{
		    if(!IsValidVehicle(i))continue;
		   	GetVehiclePos(i,x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
			{
			    if(FahrzeugInfo[i][fBesitzerID] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
     			if(DOOR[i] == false)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,true,bonnet,boot,objective);
				    DOOR[i] = true;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~r~abgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~abgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
					return 1;
				}
				else if(DOOR[i] == true)
				{
				    GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
				    if(Licht[i] == false)
				    {
					    SetVehicleParamsEx(i,engine,true,alarm,doors,bonnet,boot,objective);
        				SetTimerEx("LockLicht",1000,false,"i",i);
					}
					SetVehicleParamsEx(i,engine,lights,alarm,false,bonnet,boot,objective);
				    DOOR[i] = false;
				    if(IsAHelikopter(i)){GameTextForPlayer(playerid,"~w~Helikopter~n~~g~aufgeschlossen",2000,6);}
				    else GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~aufgeschlossen",2000,6);
				    merker = false;
				    foreach(new id : Player){if(IsPlayerInRangeOfPoint(id,12.0,x,y,z)){PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);}}
				    return 1;
				}
			}
		}
		if(merker)
    	{
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der Nähe eines Fahrzeugs.");
    	}
		return 1;
	}
	else if(strcmp("/parken", cmdtext, true, 10) == 0)
	{
 		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Fahrzeug.");
	 	new vehicleid = GetPlayerVehicleID(playerid), Float:Position[4];
	 	if(FahrzeugInfo[vehicleid][fBesitzerID] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du kannst das Fahrzeug nicht umparken.");
	 	GetVehiclePos(vehicleid,Position[0],Position[1],Position[2]);
		GetVehicleZAngle(vehicleid,Position[3]);
		new newvehicleid = CreateVehicle(FahrzeugInfo[vehicleid][fModelID],Position[0],Position[1],Position[2],Position[3],FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1],-1);
        SetVehicleNumberPlate(newvehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);
		if(FahrzeugInfo[vehicleid][fNeonStatus] == true)
		{
		    DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][0]);
		    DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][1]);
		    FahrzeugInfo[vehicleid][fNeonObj][0] = INVALID_OBJECT_ID;
		    FahrzeugInfo[vehicleid][fNeonObj][1] = INVALID_OBJECT_ID;
			FahrzeugInfo[newvehicleid][fNeonObj][0] = CreateDynamicObject(FahrzeugInfo[vehicleid][fNeonColor],0,0,0,0,0,0);
			FahrzeugInfo[newvehicleid][fNeonObj][1] = CreateDynamicObject(FahrzeugInfo[vehicleid][fNeonColor],0,0,0,0,0,0);
			AttachDynamicObjectToVehicle(FahrzeugInfo[newvehicleid][fNeonObj][0], newvehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(FahrzeugInfo[newvehicleid][fNeonObj][1], newvehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
		}
		FahrzeugInfo[newvehicleid][fDatabaseID] = FahrzeugInfo[vehicleid][fDatabaseID];
		FahrzeugInfo[newvehicleid][fErstellt] = FahrzeugInfo[vehicleid][fErstellt];
		FahrzeugInfo[newvehicleid][fModelID] = FahrzeugInfo[vehicleid][fModelID];
		FahrzeugInfo[newvehicleid][fPosition][0] = Position[0];
		FahrzeugInfo[newvehicleid][fPosition][1] = Position[1];
		FahrzeugInfo[newvehicleid][fPosition][2] = Position[2];
		FahrzeugInfo[newvehicleid][fPosition][3] = Position[3];
		FahrzeugInfo[newvehicleid][fColor][0] = FahrzeugInfo[vehicleid][fColor][0];
		FahrzeugInfo[newvehicleid][fColor][1] = FahrzeugInfo[vehicleid][fColor][1];
		FahrzeugInfo[newvehicleid][fPaintjob] = FahrzeugInfo[vehicleid][fPaintjob];
		FahrzeugInfo[newvehicleid][fBesitzerID] = FahrzeugInfo[vehicleid][fBesitzerID];
		format(FahrzeugInfo[newvehicleid][fBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
		format(FahrzeugInfo[newvehicleid][fKennzeichen], 10, FahrzeugInfo[vehicleid][fKennzeichen]);
		FahrzeugInfo[newvehicleid][fAbgeschleppt] = FahrzeugInfo[vehicleid][fAbgeschleppt];
		FahrzeugInfo[newvehicleid][fParkkralle] = FahrzeugInfo[vehicleid][fParkkralle];
		FahrzeugInfo[newvehicleid][fKilometer] = FahrzeugInfo[vehicleid][fKilometer];
		FahrzeugInfo[newvehicleid][fTank] = FahrzeugInfo[vehicleid][fTank];
		FahrzeugInfo[newvehicleid][fRang] = FahrzeugInfo[vehicleid][fRang];
		for(new i=0;i<14;i++){
		FahrzeugInfo[newvehicleid][fTuning][i] = FahrzeugInfo[vehicleid][fTuning][i];}
		FahrzeugInfo[newvehicleid][fFraktion] = FahrzeugInfo[vehicleid][fFraktion];
		FahrzeugInfo[newvehicleid][fGruppe] = FahrzeugInfo[vehicleid][fGruppe];
		FahrzeugInfo[newvehicleid][fFirma] = FahrzeugInfo[vehicleid][fFirma];
		FahrzeugInfo[newvehicleid][fAutohaus] = FahrzeugInfo[vehicleid][fAutohaus];
		FahrzeugInfo[newvehicleid][fNebenjob] = FahrzeugInfo[vehicleid][fNebenjob];
		FahrzeugInfo[newvehicleid][fGarage] = FahrzeugInfo[vehicleid][fGarage];
		FahrzeugInfo[newvehicleid][fGPark] = FahrzeugInfo[vehicleid][fGPark];
		FahrzeugInfo[newvehicleid][fFahrschule] = FahrzeugInfo[vehicleid][fFahrschule];
		FahrzeugInfo[newvehicleid][fSupmobil] = FahrzeugInfo[vehicleid][fSupmobil];
		FahrzeugInfo[newvehicleid][fZiviroller] = FahrzeugInfo[vehicleid][fZiviroller];
		FahrzeugInfo[newvehicleid][fImportCar] = FahrzeugInfo[vehicleid][fImportCar];
		FahrzeugInfo[newvehicleid][fKurrierCar] = FahrzeugInfo[vehicleid][fKurrierCar];
		FahrzeugInfo[newvehicleid][fPreis] = FahrzeugInfo[vehicleid][fPreis];
		FahrzeugInfo[newvehicleid][fLabel] = FahrzeugInfo[vehicleid][fLabel];
		FahrzeugInfo[newvehicleid][fBesitzerID] = FahrzeugInfo[vehicleid][fBesitzerID];
		FahrzeugInfo[newvehicleid][fPizzaObjekt] = FahrzeugInfo[vehicleid][fPizzaObjekt];
		FahrzeugInfo[newvehicleid][fkGeld] = FahrzeugInfo[vehicleid][fkGeld];
		FahrzeugInfo[newvehicleid][fkC4] = FahrzeugInfo[vehicleid][fkC4];
		FahrzeugInfo[newvehicleid][fJobEXP] = FahrzeugInfo[vehicleid][fJobEXP];
		DeleteVehicle(vehicleid);
		AddTuning(newvehicleid);
		AC_PutPlayerInVehicleEx(playerid,newvehicleid,0);
		SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug wurde erfolgreich umgeparkt.");
		return 1;
	}
	else if(strcmp("/kofferraum", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
	    new merker = true, Float:Position[4];
 		for(new i=1; i<MAX_VEHICLES; i++)
        {
        	if(!IsValidVehicle(i))continue;
        	if(FahrzeugInfo[i][fDatabaseID] == 0)continue;
			GetXYInFrontOfVehicle(i,Position[0],Position[1],Position[2],-2.02);
            if(IsPlayerInRangeOfPoint(playerid,3.0,Position[0],Position[1],Position[2]))
            {
  				if(FahrzeugInfo[i][fBesitzerID] == playerid || FahrzeugInfo[i][fFraktion] == SpielerInfo[playerid][sFraktion] || FahrzeugInfo[i][fGruppe] == SpielerInfo[playerid][sGruppe] || FahrzeugInfo[i][fFirma] == SpielerInfo[playerid][sFirma])
  				{
	  				if(IsAFahrrad(i))return SendClientMessage(playerid,COLOR_GREY,"Fahrräder besitzen kein Kofferraum.");
		  			if(IsAMotorrad(i))return SendClientMessage(playerid,COLOR_GREY,"Zweiräder besitzen kein Kofferraum.");
		  			if(IsABoot(i))return SendClientMessage(playerid,COLOR_GREY,"Boote besitzen kein Kofferraum.");
	  				if(IsAHelikopter(i))return SendClientMessage(playerid,COLOR_GREY,"Helikopters kein keine Kofferraum.");
		  			if(IsAFlugzeug(i))return SendClientMessage(playerid,COLOR_GREY,"Flugzeuge besitzen kein Kofferraum.");
		  			if(IsALKW(i))return SendClientMessage(playerid,COLOR_GREY,"Trucks besitzen kein Kofferraum.");
	  				SetPVarInt(playerid,"FahrzeugID",i);
	  				ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Geld\nWaffen\nDrogen\nMaterialien\nC4","Weiter","Schließen");
					GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
	    			SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, true, objective);
	    			Kofferraum[i] = true;
	  				merker = false;
	  				return 1;
				}
				else SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
				return 1;
			}
		}
		if(merker)
		{
		    SendClientMessage(playerid,COLOR_GREY,"Du befindest dich an keinem Kofferraum.");
		    return 1;
		}
		return 1;
	}
	/*else if(strcmp("/lift", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
        if(IsPlayerInRangeOfPoint(playerid,5.0,1180.35889, -1365.29614, 15.10730) || IsPlayerInRangeOfPoint(playerid,5.0,1183.6061,-1368.8070,24.0095))
        {
            MoveObject(MedicFahrstuhl,1180.31750, -1365.50513, 24.90000,7.00,0,0,90.0);
            SetTimer("MedicFahrstuhlT",9500,0);
            return 1;
	    }
	    return 1;
	}*/

	else if(strcmp("/einkaufen", cmdtext, true, 10) == 0)
	{
        if(!IsPlayerInRangeOfPoint(playerid,3.0,-22.1672,-138.5988,1003.5469))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest nicht im 24/7 an der Kasse.");
        new an = GetPVarInt(playerid,"StoreID");
        DeletePVar(playerid,"StoreBesitzer");
		if(strlen(StoreInfo[an][siBesitzer]) > 2)//Besitzer
        {
            SetPVarInt(playerid,"StoreBesitzer",1);
            ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
        }
		else//Staat
		{
		    ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
		}
	    return 1;
	}
	else if(strcmp("/bankrob", cmdtext, true, 10) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,5.0,1773.0109,-1699.5596,13.5509))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht in der Bank am Tresor.");
	    if(SpielerInfo[playerid][sFraktion] < 9)return NichtBerechtigt
	    if(CopDuty != 0 || FBIDuty != 0)
	    {
		    if(Bankrob == 1)return SendClientMessage(playerid,COLOR_SORRY,"Die Bank kann zurzeit nicht überfallen werden.");
			SetTimer("BankrobTimer",3600000,false);
			PlayerBankRobTimer[playerid] = SetTimerEx("PlayerBankrob",1000,true,"i",playerid);
	        Bankrob = 1;
	        BankRobAmLaufen = 1;
	        SetPVarInt(playerid,"Bankrob",1);
	        BankAttacker = playerid;
	        SendClientMessage(playerid,COLOR_SORRY,"Du raubst die Bank aus! Warte bis das erste Geld eingepackt wurde.");
			SetPlayerPos(playerid,1771.5452,-1700.5923,13.5509);
		    SetPlayerFacingAngle(playerid,87.7365);
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][0]);
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][1]);
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][2]);
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][3]);
		    PlayerTextDrawSetString(playerid, BankraubTD[playerid][3], "~w~ GELD IM VAN: ~b~ 0$");
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][4]);
		    PlayerTextDrawSetString(playerid, BankraubTD[playerid][4], "~w~ GELDBEUTEL IN DER BANK: ~b~ 0");
		    PlayerTextDrawShow(playerid, BankraubTD[playerid][5]);
		    PlayerTextDrawSetString(playerid, BankraubTD[playerid][5], "~w~ NOCH ~b~ 60 Sekunden ~w~ BIS ZUM NEUEN GELDBEUTEL");
		    PlayerBankRobSec[playerid] = 60;
		    new string[264];
	    	SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid) +6);
	    	SendClientMessage(playerid,COLOR_SORRY,"Die Überwachungskamera hat dich bemerkt und die Bilder an die Polizei weitergegeben.");
	    	SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DIE BANK IN LOS SANTOS MELDET EINEN BANKÜBERFALL.");
	    	format(string,sizeof(string),"ZENTRALE: Der Bankräuber wurde identifiziert. Verbrecher %s",SpielerInfo[playerid][sName]);
			SendCopMessage(COLOR_BLUE,string);
		    return 1;
  		}
  		else SendClientMessage(playerid,COLOR_SORRY,"Es muss min. 1 Beamter im Dienst sein.");
  		return 1;
	}
	else if(strcmp("/members", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFraktion] == 0)return NichtBerechtigt
		new string[144];
		SendClientMessage(playerid,COLOR_INFO,"** Members Online-Liste **");
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
		    {
		        format(string,sizeof(string),"%s %s",RangName(i),SpielerInfo[i][sName]);
		        SendClientMessage(playerid,COLOR_WHITE,string);
		    }
		}
		SendClientMessage(playerid,COLOR_INFO,"____________________________________");
		return 1;
	}
	else if(strcmp("/gmembers", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sGruppe] == 0)return NichtBerechtigt
		new string[144];
		SendClientMessage(playerid,COLOR_INFO,"** Gruppenmembers Online-Liste **");
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sGruppe] == SpielerInfo[playerid][sGruppe])
		    {
		        format(string,sizeof(string),"%s %s",GRangName(i),SpielerInfo[i][sName]);
		        SendClientMessage(playerid,COLOR_WHITE,string);
		    }
		}
		SendClientMessage(playerid,COLOR_INFO,"____________________________________");
		return 1;
	}
	else if(strcmp("/fmembers", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sFirma] == 0)return NichtBerechtigt
		new string[144];
		SendClientMessage(playerid,COLOR_INFO,"** Firmenmembers Online-Liste **");
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFirma] == SpielerInfo[playerid][sFirma])
		    {
		        format(string,sizeof(string),"%s %s",FRangName(i),SpielerInfo[i][sName]);
		        SendClientMessage(playerid,COLOR_WHITE,string);
		    }
		}
		SendClientMessage(playerid,COLOR_INFO,"____________________________________");
		return 1;
	}
	else if(strcmp("/tog", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
		ShowPlayerDialog(playerid,DIALOG_TOG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Adminverwaltung","OOC Chat\nWerbung","Weiter","Schließen");
		return 1;
	}
	else if(strcmp("/buygun", cmdtext, true, 10) == 0)
	{
        if(GetPlayerInterior(playerid) != 1)return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht im Ammunation.");
        if(!IsPlayerInRangeOfPoint(playerid,3.0,295.7924,-38.2544,1001.5156))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Kasse.");
		if(SpielerInfo[playerid][sWeaponLic] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Um dir hier Waffen kaufen zu können, benötigst du einen Waffenschein.");

		if(SpielerInfo[playerid][sWeaponLic] == 1){ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung{00FE00}\nSchlagring\nMesser\nBaseballschläger{FE0000}\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\n{00FE00}Fallschirm","Kaufen","Verlassen");}
        if(SpielerInfo[playerid][sWeaponLic] == 2){ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung{00FE00}\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle{FE0000}\nMP5\nAK-47\nM4\nSniper\n{00FE00}Fallschirm","Kaufen","Verlassen");}
        if(SpielerInfo[playerid][sWeaponLic] == 3){ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung{00FE00}\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4{FE0000}\nSniper\n{00FE00}Fallschirm","Kaufen","Verlassen");}
        if(SpielerInfo[playerid][sWeaponLic] == 4){ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung{00FE00}\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");}
		return 1;
	}
	else if(strcmp("/kiste", cmdtext, true, 10) == 0)
	{
 		if(GetPlayerInterior(playerid) != 3)return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Fraktionskiste.");
 		if(!IsPlayerInRangeOfPoint(playerid,3.0,2493.24243, -1707.50134, 1014.58276))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht an der Fraktionskiste.");
		new merker = true;
  		for(new i=9;i<MAX_FRAKS;i++)
    	{
			if(GetPlayerVirtualWorld(playerid) == i && SpielerInfo[playerid][sFraktion] == i)
 			{
 			    ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
				merker = false;
				return 1;
   			}
		}
		if(merker){SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Schlüssel zu dieser Fraktionskiste.");}
		return 1;
	}
	else if(strcmp("/heilen", cmdtext, true, 10) == 0)
	{
 		if(GetPVarInt(playerid,"InHaus") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich in keinem Haus.");
 		new hs = GetPVarInt(playerid,"HausID");
	    if(IsPlayerInRangeOfPoint(playerid,5.0,HausInfo[hs][hsIPos_X],HausInfo[hs][hsIPos_Y],HausInfo[hs][hsIPos_Z]))
	    {
	        if(HausInfo[hs][hsHealth] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Das Haus besitzt kein Health-Upgrade.");
	        SendClientMessage(playerid,COLOR_SUPER,"Du hast dich geheilt.");
   			SetPlayerHealth(playerid,100);
			return 1;
	    }
	    else SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Eingang vom Haus.");
	    return 1;
	}
	else if(strcmp("/mieten", cmdtext, true, 10) == 0)
	{
	    new string[164], hs = GetNearHausID(playerid);
	    if(!AnHaus(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich an keinem Haus.");
	    if(HausInfo[hs][hsMietbar] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst dich hier nicht einmieten.");
	    if(SpielerInfo[playerid][sHaus] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Haus und kannst dich daher nirgendswo einmieten.");
		if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
	    format(string,sizeof(string),"{FFFFFF}Möchtest du dich für %d$ hier einmieten ?",HausInfo[hs][hsMiete]);
		ShowPlayerDialog(playerid,DIALOG_HAUS_MIETEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Haussystem",string,"Ja","Nein");
		return 1;
	}
	else if(strcmp("/pizza", cmdtext, true, 10) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,3.0,379.7354,-116.4596,1001.4922))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Pizza Punkt.");
	    if(SpielerInfo[playerid][sNebenjob] != 2)return NichtBerechtigt
	    if(GetPVarInt(playerid,"PizzaboteDuty") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht als Pizzabote im Dienst.");
	    if(GetPVarInt(playerid,"PizzaTragen") != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst max. 5 Pizzen tragen.");
	    if(GetPVarInt(playerid,"PizzaGeholt") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Liefere die Pizzen erst aus, um neue zu erhalten.");
	    SetPVarInt(playerid,"PizzaGeholt",1);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
	    GameTextForPlayer(playerid, "~r~Bitte warten...", 10000, 5);
	    PizzaBekommenTimer[playerid] = SetTimerEx("PizzaBekommen",2000,true,"i",playerid);
	    return 1;
 	}
 	else if(strcmp("/reinlegen", cmdtext, true, 10) == 0)
	{
 		if(SpielerInfo[playerid][sNebenjob] == 2)
 		{
		    if(GetPVarInt(playerid,"PizzaboteDuty") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht als Pizzabote im Dienst.");
		    if(GetPVarInt(playerid,"PizzaTragen") != 5)return SendClientMessage(playerid,COLOR_SORRY,"Hole dir erst die Pizzen aus der Pizzaria.");
		    new Float:x, Float:y, Float:z, merker = true;
	        for(new i=1; i<MAX_VEHICLES; i++)
	        {
	            if(FahrzeugInfo[i][fNebenjob] == 2)
				GetXYInFrontOfVehicle(i,x,y,z,-2.02);
	            if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
	            {
					if(FahrzeugInfo[i][fJobFahrer] != 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
					}
					else
					{
	            	    new Text[64];
					 	FahrzeugInfo[i][fJobFahrer] = playerid;
		    			SetPVarInt(playerid,"PizzaAuto",i);
		    			GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
		    			SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, true, objective);
					    TogglePlayerControllable(playerid, false);
		    			GameTextForPlayer(playerid, "~r~Bitte warten...", 10000, 5);
		    			PizzaReinlegenTimer[playerid] = SetTimerEx("PizzaReinlegen",2000,true,"i",playerid);
						format(Text, sizeof(Text), "Jobfahrzeug von\n{FE0000}%s", SpielerInfo[playerid][sName]);
	    				Update3DTextLabelText(FahrzeugInfo[i][fLabel], COLOR_WHITE, Text);
		           		merker = false;
		                return 1;
					}
	            }
	        }
	        if(merker)
			{
	            SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Kofferraum eines Dienstwagens.");
	            return 1;
	        }
	    	return 1;
		}
		else if(SpielerInfo[playerid][sNebenjob] == 7)
		{
  			if(GetPVarInt(playerid,"LandwirtHatWalton") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast noch keinen Walton als Jobfahrzeug.");
		    if(GetPVarInt(playerid,"HatHeuballen") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Hebe erst einen Heuballen auf, um sie anschließend in den Walton legen zu können.");
		    new Float:x, Float:y, Float:z, merker = true;
			GetXYInFrontOfVehicle(GetPVarInt(playerid,"LandwirtAuto"),x,y,z,-2.02);
            if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
            {
        	    new vehid = GetPVarInt(playerid,"LandwirtAuto");
    			GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);
    			SetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, true, objective);
			    TogglePlayerControllable(playerid, false);
    			GameTextForPlayer(playerid, "~r~Bitte warten...", 3000, 5);
    			SetTimerEx("HeuballenReinlegen",2000,false,"i",playerid);
           		merker = false;
                return 1;
	        }
	        if(merker)
			{
	            SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Kofferraum des Waltons.");
	            return 1;
	        }
	    	return 1;
		}
		return NichtBerechtigt
 	}
 	else if(strcmp("/ausliefern", cmdtext, true, 10) == 0)
	{
 		if(SpielerInfo[playerid][sNebenjob] != 2)return NichtBerechtigt
	    if(GetPVarInt(playerid,"PizzaboteDuty") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist nicht als Pizzabote im Dienst.");
	    if(GetPVarInt(playerid,"PizzaTragen") != 0)return SendClientMessage(playerid,COLOR_SORRY,"Lege die Pizzen erst mit '/reinlegen' in den Kofferraum.");
	    if(GetPVarInt(playerid,"PizzaGeholt") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Geh in die Pizzaria und hole dir erst die Pizzen.");
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Dienstfahrzeug.");
	    if(GetVehicleModel(tmpcar) != 589)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Dienstfahrzeug.");
	    if(GetPVarInt(playerid,"PizzaAusliefern") == 1)
		{
			SendClientMessage(playerid,COLOR_SORRY,"Bringe die Pizza erst zum Kunden um eine neue Pizza ausliefern zu können.");
			SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
			return 1;
		}
		loop_start2:
        for(new mf=1;mf<MAX_HAUSER;mf++)
        {
            new hs = 1+random(MAX_HAUSER);
            if(HausInfo[hs][hsErstellt] == false || HausInfo[hs][hsOrt] != 1)goto loop_start2;
			PizzaKundenPos[playerid][0] = HausInfo[hs][hsPos_X];
			PizzaKundenPos[playerid][1] = HausInfo[hs][hsPos_Y];
			PizzaKundenPos[playerid][2] = HausInfo[hs][hsPos_Z];
			SetPlayerCheckpoint(playerid,HausInfo[hs][hsPos_X],HausInfo[hs][hsPos_Y],HausInfo[hs][hsPos_Z],3.0);
   			SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
	 	    SetPVarInt(playerid,"PizzaAusliefern",1);
			return 1;
	 	}
	    return 1;
 	}
	else if(strcmp("/bestellen", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,377.0177,-67.6665,1001.5151))
	    {
		    ShowMenuForPlayer(BSNMenu,playerid);
		    TogglePlayerControllable(playerid, false);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,369.4442,-6.2557,1001.8516))
  		{
  		    NichtBerechtigt
  		    return 1;
  		}
		else SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier nichts bestellen.");
		return 1;
	}
	else if(strcmp("/startjob", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sNebenjob] == 0)return NichtBerechtigt
		if(SpielerInfo[playerid][sNebenjob] == 3)
		{
		    if(GetPVarInt(playerid,"KehrmaschinenDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keiner Kehrmaschine.");
			new vehicleid = GetPlayerVehicleID(playerid);
	 		if(FahrzeugInfo[vehicleid][fNebenjob] != 3)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keiner Kehrmaschine.");
	 		if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
			if(GetPVarInt(playerid,"KfahrerArbeitet") == 1)
			{
				new id = GetPVarInt(playerid,"KehrmaschinenAuftrag");
			    SendClientMessage(playerid,COLOR_SUPER,"Du hast bereits eine Route gestartet. Fahr zum roten Marker um den Müll aufzukehren.");
			    SetPlayerCheckpoint(playerid,MuellRouteInfo[id][mrPos_X],MuellRouteInfo[id][mrPos_Y],MuellRouteInfo[id][mrPos_Z],1.5);
			    return 1;
			}
			new string[164];
			if(FahrzeugInfo[vehicleid][fNebenjob] == 3)
			{
			    FahrzeugInfo[vehicleid][fJobFahrer] = playerid;
	 		    SetPVarInt(playerid,"Kehrmaschine",vehicleid);
		    	format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter", SpielerInfo[playerid][sName]);
		    	Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, string);
			}
			for(new id=0; id<sizeof(MuellRouteInfo); id++)
	 		{
	 		    MuellObjekt[playerid][id] = CreateDynamicObject(MuellRouteInfo[id][mrObjekt], MuellRouteInfo[id][mrPos_X],MuellRouteInfo[id][mrPos_Y],MuellRouteInfo[id][mrPos_Z], MuellRouteInfo[id][mrRPos_X],MuellRouteInfo[id][mrRPos_Y],MuellRouteInfo[id][mrRPos_Z], -1, -1, playerid, 200.0);
			}
			SetPVarInt(playerid,"KfahrerArbeitet",1);
			SetPlayerCheckpoint(playerid,MuellRouteInfo[0][mrPos_X],MuellRouteInfo[0][mrPos_Y],MuellRouteInfo[0][mrPos_Z],1.5);
			SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Kehre den Müll auf der sich am roten Marker befindet.");
		    return 1;
		}
		else if(SpielerInfo[playerid][sNebenjob] == 4)
		{
  			if(GetPVarInt(playerid,"PilotDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(FahrzeugInfo[tmpcar][fNebenjob] != 4)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
    		if(GetPVarInt(playerid,"PilotArbeitet") != 0)
			{
			    SendClientMessage(playerid,COLOR_SUPER,"Flieg zum roten Marker um deine Route fortzusetzen.");
			    if(GetPVarInt(playerid,"PilotArbeitet") == 1){SetPlayerCheckpoint(playerid,2061.6660,-2593.2915,14.2723,7.0);}
			    else if(GetPVarInt(playerid,"PilotArbeitet") == 2){SetPlayerCheckpoint(playerid,-1642.5271,-149.6707,14.8681,7.0);}
			    else if(GetPVarInt(playerid,"PilotArbeitet") == 3){SetPlayerCheckpoint(playerid,1388.8792,1683.4226,11.5457,7.0);}
			    else if(GetPVarInt(playerid,"PilotArbeitet") == 4){SetPlayerCheckpoint(playerid,2061.6660,-2593.2915,14.2723,7.0);}
			    return 1;
			}
			new string[164];
 		    SetPVarInt(playerid,"FlugID",tmpcar);
 		    SetPVarInt(playerid,"PilotArbeitet",1);
	    	format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}", SpielerInfo[playerid][sName]);
	    	Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, string);
			SetPlayerCheckpoint(playerid,2061.6660,-2593.2915,14.2723,7.0);
			SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Flieg die einzelnen Airports ab. Begib dich nun zum roten Marker.");
		    return 1;
		}
		else if(SpielerInfo[playerid][sNebenjob] == 5)
		{
  			if(GetPVarInt(playerid,"BusfahrerDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(FahrzeugInfo[tmpcar][fNebenjob] != 5)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
    		if(GetPVarInt(playerid,"BusfahrerLinie") != 0 && GetPVarInt(playerid,"AnBusHaltestelle") != 1)
			{
  				new id = GetBusRouteID(GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
				if(id == -1)return printf("Fehler aufgetreten! BusfarerID ist fail.%d %d",GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
			    SetPlayerCheckpoint(playerid,BusRouteInfo[id][bPos_X],BusRouteInfo[id][bPos_Y],BusRouteInfo[id][bPos_Z],5.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Du hast bereits eine Linie ausgewählt. Begib dich zur nächsten Haltestelle.");
			    return 1;
			}
			new string[364];
			format(string,sizeof(string),"{FFFFFF}Linie {FF0000}1 {FFFFFF}| Benötigte Erfahrung: {FF0000}0\n{FFFFFF}Linie {FF0000}2 {FFFFFF}| Benötigte Erfahrung: {FF0000}15\n{FFFFFF}Linie {FF0000}3 {FFFFFF}| Benötigte Erfahrung: {FF0000}40\n{FFFFFF}Linie {FF0000}4 {FFFFFF}| Benötigte Erfahrung: {FF0000}70\n");
			ShowPlayerDialog(playerid,DIALOG_LINIEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Busfahrer",string,"Starten","Abbrechen");
		    return 1;
		}
		else if(SpielerInfo[playerid][sNebenjob] == 6)
		{
  			if(GetPVarInt(playerid,"MüllmannDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(FahrzeugInfo[tmpcar][fNebenjob] != 6)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
		    
		    if(GetPVarInt(playerid,"MüllmannArbeitet") == 1 && GetPVarInt(playerid,"MüllBeutel") == 10)
		    {
		        SendClientMessage(playerid,COLOR_SORRY,"Bringe den Müllwagen erst zurück zur Firma um anschließen dein Gehalt zu erhalten.");
		        SetPlayerCheckpoint(playerid,1770.9084,-2022.5839,14.1376,3.0);
		        return 1;
		    }
		    else if(GetPVarInt(playerid,"MüllmannArbeitet") == 1 && GetPVarInt(playerid,"MüllBeutelHand") == 0)
			{
				SendClientMessage(playerid,COLOR_SORRY,"Hole erst den Müll bei dem Haus ab um den nächsten Müll holen zu können.");
				SetPlayerCheckpoint(playerid,MuellHausPos[playerid][0],MuellHausPos[playerid][1],MuellHausPos[playerid][2],1.5);
				return 1;
			}
			else if(GetPVarInt(playerid,"MüllmannArbeitet") == 1 && GetPVarInt(playerid,"MüllBeutelHand") == 1)
			{
				new Float:x, Float:y, Float:z;
				GetXYInFrontOfVehicle(tmpcar,x,y,z,-4.5);
				MuellAutoPos[playerid][0] = x;
				MuellAutoPos[playerid][1] = y;
				MuellAutoPos[playerid][2] = z;
			
				SendClientMessage(playerid,COLOR_SORRY,"Bring den Müllbeutel zum Müllwagen.");
				SetPlayerCheckpoint(playerid,MuellAutoPos[playerid][0],MuellAutoPos[playerid][1],MuellAutoPos[playerid][2],3.0);
				return 1;
			}
			loop_start:
	        for(new mf=1;mf<MAX_HAUSER;mf++)
	        {
	            new hs = 1+random(MAX_HAUSER), string[144];
	            if(HausInfo[hs][hsErstellt] == false || HausInfo[hs][hsOrt] != 1)goto loop_start;
				MuellHausPos[playerid][0] = HausInfo[hs][hsPos_X];
				MuellHausPos[playerid][1] = HausInfo[hs][hsPos_Y];
				MuellHausPos[playerid][2] = HausInfo[hs][hsPos_Z];
				SetPlayerCheckpoint(playerid,HausInfo[hs][hsPos_X],HausInfo[hs][hsPos_Y],HausInfo[hs][hsPos_Z],1.5);
	   			SendClientMessage(playerid,COLOR_SUPER,"Hole den Müll nun vom Haus ab. Das Haus befindet sich am roten Marker.");
		 	    SetPVarInt(playerid,"MüllmannArbeitet",1);
		 	    SetPVarInt(playerid,"Müllauto",tmpcar);
 	    		format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter", SpielerInfo[playerid][sName]);
 				Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, string);
				break;
		 	}
		}
		else if(SpielerInfo[playerid][sNebenjob] == 7)
		{
  			if(GetPVarInt(playerid,"LandwirtDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
		    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(FahrzeugInfo[tmpcar][fNebenjob] != 7)return SendClientMessage(playerid,COLOR_GREY,"Du sitzt in keinem Jobfahrzeug.");
		    if(GetPlayerVehicleSeat(playerid) != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Fahrer dieses Fahrzeugs.");
		    if(GetPVarInt(playerid,"LandwirtArbeitet") == 0 && GetVehicleModel(tmpcar) != 531)return SendClientMessage(playerid,COLOR_GREY,"Steige in einen Traktor ein, um loszulegen.");
		    if(GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtStufe") == 1)
		    {
      			new id = GetPVarInt(playerid,"LandwirtCheckpoint");
	    		SetPlayerCheckpoint(playerid,LandwirtInfo[id][lPos_X],LandwirtInfo[id][lPos_Y],LandwirtInfo[id][lPos_Z],2.5);
		        SendClientMessage(playerid,COLOR_SORRY,"Beende erst die Arbeit um eine neue zu beginnen. Fahre zum roten Marker.");
		        return 1;
		    }
		    if(GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtAbgabe") == 1)
		    {
		        SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
				SendClientMessage(playerid,COLOR_INFO,"Bringe den Traktor zum roten Marker um ihn abzugeben.");
		        return 1;
		    }
		    if(GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtAbgabe") == 2)
		    {
		        SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
				SendClientMessage(playerid,COLOR_INFO,"Bringe den Mähdrescher zum roten Marker um ihn abzugeben.");
		        return 1;
		    }
		    if(GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtAutoHolen") == 1)
		    {
		        GameTextForPlayer(playerid,"~w~Steige nun in ein ~r~Meadrescher ~w~ein",3000,4);
		        return 1;
	  		}
	    	if(GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtAutoHolen") == 2)
		    {
				GameTextForPlayer(playerid,"~w~Steige nun in ein ~r~Walton ~w~ein",3000,4);
		        return 1;
	  		}
	  		if(GetPVarInt(playerid,"HeuballenImWalton") == 23)
			{
			    SetPVarInt(playerid,"HeuballenAbgabe",1);
				SetPlayerCheckpoint(playerid,-23.2852,-274.7156,5.4197,3.5);
				SendClientMessage(playerid,COLOR_INFO,"Sehr gut, das waren alle Heuballen. Bringe die nun zum roten Marker.");
				return 1;
			}
			new string[128];
      		FahrzeugInfo[tmpcar][fJobFahrer] = playerid;
   			format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}", SpielerInfo[playerid][sName]);
			Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, string);
		    SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
		    GameTextForPlayer(playerid,"~w~Dann mal ran an die ~r~Arbeit",3000,4);
		    SendClientMessage(playerid,COLOR_INFO,"Begib dich zum roten Marker.");
		    SetPVarInt(playerid,"LandwirtAuto",tmpcar);
		    SetPVarInt(playerid,"LandwirtArbeitet",1);
		    SetPVarInt(playerid,"LandwirtStufe",1);
	    }
   		else if(SpielerInfo[playerid][sNebenjob] == 10)
		{
		    if(GetPVarInt(playerid,"HolzfallerDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht im Dienst.");
            if(GetPVarInt(playerid,"HolzfallerArbeitet") == 1 && GetPVarInt(playerid,"HolzfallerStufe") == 1)
            {
				SendClientMessage(playerid,COLOR_SORRY,"Beende erst die Arbeit um eine neue zu beginnen. Begebe dich zum Mapicon/roten Marker.");
                return 1;
			}
		    GameTextForPlayer(playerid,"~w~Dann mal ran an die ~r~Arbeit!",3000,4);
		    SendClientMessage(playerid,COLOR_INFO,"Ein Mapicon wurde zu den jeweiligen Bäumen gesetzt.");
		    SetPlayerMapIcon(playerid, 6,982.6970,-346.9818,69.0015, 19, 0, MAPICON_LOCAL);
		    ErstellungObjekteHolz(playerid);
      		BaumWeg[playerid] = 0;
		    SetPVarInt(playerid,"HolzfallerArbeitet",1);
		    SetPVarInt(playerid,"HolzfallerStufe",1);
		}
		return 1;
 	}
	else if(strcmp("/stadtplan", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sStadtplan] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Stadtplan.");
	    ShowPlayerDialog(playerid,DIALOG_STADTPLAN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Stadtplan","Stadthalle\nBank\nFahrschule\nAutohaus - Los Santos\nMotorradhändler - Los Santos\nAutohaus - San Fierro","Weiter","Zurück");
	    return 1;
	}
	else if(strcmp("/navi", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sNavi] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Navigationsgerät. Kaufe dir eines im 24/7.");
	    ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");
	    return 1;
	}
	else if(strcmp("/einkaufen", cmdtext, true, 10) == 0)
	{
        if(!IsPlayerInRangeOfPoint(playerid,3.0,-22.1672,-138.5988,1003.5469))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest nicht im 24/7 an der Kasse.");
        new an = GetPVarInt(playerid,"StoreID");
        DeletePVar(playerid,"StoreBesitzer");
		if(strlen(StoreInfo[an][siBesitzer]) > 2)//Besitzer
        {
            SetPVarInt(playerid,"StoreBesitzer",1);
            ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
        }
		else//Staat
		{
		    ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
		}
	    return 1;
	}
	else if(strcmp("/waffenschein", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,1566.0325,-1659.9797,1261.2506) || IsPlayerInRangeOfPoint(playerid,3.0,252.1846,117.4193,1003.2188) || IsPlayerInRangeOfPoint(playerid,3.0,292.4972,180.1965,1007.1794))
	    {
	        if(SpielerInfo[playerid][sWeaponLic] == 0)
	        {
	            if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid,COLOR_SORRY,"* Du brauchst Level 2 für einen Waffenschein Klasse 1.");
	            if(SpielerInfo[playerid][sPBKills] > 50)return SendClientMessage(playerid,COLOR_GREY,"* Du brauchst mindestens 50 Paintball-Kills.");
				if(GetPlayerMoneyEx(playerid) < 4000)return SendClientMessage(playerid,COLOR_GREY,"* Du musst 4.000$ in Bar mitbringen.");
				GivePlayerMoneyEx(playerid,-4000);
				SendClientMessage(playerid,COLOR_GREEN,"* Du hast dir einen Waffenschein Klasse 1 gekauft!");
				SendClientMessage(playerid,COLOR_GREEN,"* Beachte das dir Klasse 1 nur den Kauf von Schlagwaffen ermöglicht!");
				SpielerInfo[playerid][sWeaponLic] = 1;
	        }
	        else if(SpielerInfo[playerid][sWeaponLic] == 1)
	        {
	            if(GetPlayerScore(playerid) < 3)return SendClientMessage(playerid,COLOR_SORRY,"* Du brauchst Level 3 für einen Waffenschein Klasse 2.");
	            if(SpielerInfo[playerid][sPBKills] > 100)return SendClientMessage(playerid,COLOR_GREY,"* Du brauchst mindestens 100 Paintball-Kills.");
				if(GetPlayerMoneyEx(playerid) < 8000)return SendClientMessage(playerid,COLOR_GREY,"* Du musst 8.000$ in Bar mitbringen.");
				GivePlayerMoneyEx(playerid,-8000);
				SendClientMessage(playerid,COLOR_GREEN,"* Du hast dir einen Waffenschein Klasse 2 gekauft!");
				SendClientMessage(playerid,COLOR_GREEN,"* Beachte das dir Klasse 2 nur den Kauf von Schlag und Handfeuerwaffen ermöglicht!");
				SpielerInfo[playerid][sWeaponLic] = 2;
	        }
	        else if(SpielerInfo[playerid][sWeaponLic] == 2)
	        {
	            if(GetPlayerScore(playerid) < 4)return SendClientMessage(playerid,COLOR_SORRY,"* Du brauchst Level 4 für einen Waffenschein Klasse 3.");
	            if(SpielerInfo[playerid][sPBKills] > 200)return SendClientMessage(playerid,COLOR_GREY,"* Du brauchst mindestens 200 Paintball-Kills.");
				if(GetPlayerMoneyEx(playerid) < 16000)return SendClientMessage(playerid,COLOR_GREY,"* Du musst 16.000$ in Bar mitbringen.");
				GivePlayerMoneyEx(playerid,-16000);
				SendClientMessage(playerid,COLOR_GREEN,"* Du hast dir einen Waffenschein Klasse 3 gekauft!");
				SendClientMessage(playerid,COLOR_GREEN,"* Beachte das dir Klasse 3 nur den Kauf von Schlagwaffen, Handfeuerwaffen und Sturmgewehren ermöglicht!");
				SpielerInfo[playerid][sWeaponLic] = 3;
	        }
	        else if(SpielerInfo[playerid][sWeaponLic] == 3)
	        {
	            if(GetPlayerScore(playerid) < 6)return SendClientMessage(playerid,COLOR_SORRY,"* Du brauchst Level 6 für einen Waffenschein Klasse 4.");
	            if(SpielerInfo[playerid][sPBKills] > 500)return SendClientMessage(playerid,COLOR_GREY,"* Du brauchst mindestens 500 Paintball-Kills.");
				if(GetPlayerMoneyEx(playerid) < 32000)return SendClientMessage(playerid,COLOR_GREY,"* Du musst 32.000$ in Bar mitbringen.");
				GivePlayerMoneyEx(playerid,-32000);
				SendClientMessage(playerid,COLOR_GREEN,"* Du hast dir einen Waffenschein Klasse 4 gekauft!");
				SendClientMessage(playerid,COLOR_GREEN,"* Ab sofort kannst du alle Waffen erwerben. Das bedeutet; Schlagwaffen, Handfeuerwaffen, Sturm und Langschützengewehre!");
				SpielerInfo[playerid][sWeaponLic] = 4;
	        }
	        else if(SpielerInfo[playerid][sWeaponLic] == 4)return SendClientMessage(playerid,COLOR_GREY,"* Du besitzt bereits die höchste Waffenschein-Klasse!");
	        return 1;
	    }
	    else SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier keinen Waffenschein kaufen.");
	    return 1;
	}
	else if(strcmp("/service", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Handy.");
		ShowPlayerDialog(playerid,DIALOG_SERVICE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Service","Polizei\nFBI\nRettungsdienst","Weiter","Abbrechen");
	    return 1;
	}
	else if(strcmp("/repairkit", cmdtext, true, 10) == 0)
	{
	    if(SpielerInfo[playerid][sRepairkit] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Repairkit.");
	    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du kannst kein Fahrzeug innen reparieren.");
	    new string[144];
	    if(Motorhaube[tmpcar] == true)
	    {
		    RepairVehicle(tmpcar);
		    SetVehicleHealth(tmpcar,800);
		    SpielerInfo[playerid][sRepairkit] = 0;
			format(string,sizeof(string),"* %s repariert mit einem Repairkit ein Fahrzeug.",SpielerInfo[playerid][sName]);
			ProxDetector(10.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
		    return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Die Motorhaube vom Fahrzeuge muss geöffnet sein.");
		return 1;
	}
	else if(strcmp("/verlassen", cmdtext, true, 10) == 0)
	{
	    new string[128];
	    if(GetPVarInt(playerid,"Paintball") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich nicht in der Paintballarena.");
		foreach(new i : Player)
		{
			if(GetPVarInt(i,"Paintball") == 0)continue;
			if(GetPVarInt(i,"Paintball") != GetPVarInt(playerid,"Paintball"))continue;
			if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))continue;
			format(string,sizeof(string),"%s hat die Paintballarena verlassen.",SpielerInfo[playerid][sName]);
			SendClientMessage(i,COLOR_YELLOW,string);
		}
		if(GetPVarInt(playerid,"Paintball") == 1){PaintballSpieler[0]--;}
		else if(GetPVarInt(playerid,"Paintball") == 2){PaintballSpieler[1]--;}
		else if(GetPVarInt(playerid,"Paintball") == 3){PaintballSpieler[2]--;}
		else if(GetPVarInt(playerid,"Paintball") == 4){PaintballSpieler[3]--;}
		else if(GetPVarInt(playerid,"Paintball") == 5){PaintballSpieler[4]--;}
		DeletePVar(playerid,"Paintball");
		ResetPlayerWeapons(playerid);
		SetPlayerArmour(playerid,0);
		SetPlayerHealth(playerid,100);
		SetPlayerInterior(playerid,0);
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerPos(playerid,1024.3059,-982.7781,42.6476);
		SetPlayerFacingAngle(playerid,358.5271);
	    return 1;
	}
	else if(strcmp("/roller", cmdtext, true, 10) == 0)
	{
	    if(GetPVarInt(playerid,"Ziviroller") != 0)return SendClientMessage(playerid,COLOR_GREY,"* Du hast bereits einen Roller. Du kannst es mit '/delroller' löschen.");
 		if(!IsPlayerInRangeOfPoint(playerid,5.0,1025.5607,-1169.8518,18.7379))return SendClientMessage(playerid,COLOR_GREY,"* Du befindest dich nicht am Rollerverleih.");
 		if(GetPlayerScore(playerid) > 2)return SendClientMessage(playerid,COLOR_GREY,"* Du kannst dir kein Roller mehr mieten.");
		new vehicleid;

  		vehicleid = CreateVehicle(462,995.6390,-1169.9727,16.5821,181.0080,1,1,-1);
  		format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "[mVR]");
		SetVehicleNumberPlate(vehicleid,"[mVR]");
		FahrzeugInfo[vehicleid][fModelID] = 481;
        FahrzeugInfo[vehicleid][fTank] = getVehicleFuelAmount(GetVehicleModel(vehicleid));

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, true, false, false, false, false, false, false);
		AC_PutPlayerInVehicleEx(playerid,vehicleid,0);

		FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
		FahrzeugInfo[vehicleid][fPosition][0] = 1675.8872; FahrzeugInfo[vehicleid][fPosition][1] = -2315.2986; FahrzeugInfo[vehicleid][fPosition][2] = 12.9821; FahrzeugInfo[vehicleid][fPosition][3] = 90.3960; FahrzeugInfo[vehicleid][fColor][1] = 1;
		FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 1; FahrzeugInfo[vehicleid][fPaintjob] = 3;
		FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0;  FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
		FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 1; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0; FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0;
		format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
		FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
		FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0;
		FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

		SetPVarInt(playerid,"Ziviroller",vehicleid);

		Motor[vehicleid] = true;
		Licht[vehicleid] = false;
		DOOR[vehicleid] = false;
		Motorhaube[vehicleid] = false;
		Kofferraum[vehicleid] = false;
		SendClientMessage(playerid,COLOR_GREY,"* Du kannst dein Roller mit '/delroller' wieder löschen und mit '/rollerlock' auf/zuschliessen.");
		
		if(SpielerInfo[playerid][sQuest] == 0)
		{
  			new string[128];
  			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
		    format(string,sizeof(string),"Hey ~b~%s",SpielerInfo[playerid][sName]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);
		    
		    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 1 ~g~erfolgreich ~w~absolviert.");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);
		    
		    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Fahr nun zur ~b~Stadthalle~w~ (roter Marker) und");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);
		    
		    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "beantrage dir dort deinen ~b~Personalausweis");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);
		    
		    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
		    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 2: ~w~Beantrage dir deinen Personalausweis");
		    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);
		    SetPlayerCheckpoint(playerid,1480.9746,-1771.4373,18.7958,2.5);
		}
	    return 1;
	}
	else if(strcmp("/delroller", cmdtext, true, 10) == 0)
	{
 		if(GetPVarInt(playerid,"Ziviroller") == 0)return SendClientMessage(playerid,COLOR_GREY,"* Du hast kein Roller ausgeliehen.");
		DeleteVehicle(GetPVarInt(playerid,"Ziviroller"));
		DeletePVar(playerid,"Ziviroller");
		SendClientMessage(playerid,COLOR_GREY,"* Du hast deinen Roller gelöscht.");
	    return 1;
	}
	else if(strcmp("/rollerlock", cmdtext, true, 10) == 0)
	{
	    if(GetPVarInt(playerid,"Ziviroller") == 0)return SendClientMessage(playerid,COLOR_GREY,"* Du hast kein Roller ausgeliehen.");
	    new vehicleid = GetPVarInt(playerid,"Ziviroller");
	    if(GetPVarInt(playerid,"ZivirollerLock") == 0)//Aufgeschlossen
	    {
	        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, true, bonnet, boot, objective);
			GameTextForPlayer(playerid,"~w~Roller ~r~abgeschlossen",3000,6);
			SetPVarInt(playerid,"ZivirollerLock",1);
	    }
	    else if(GetPVarInt(playerid,"ZivirollerLock") == 1)//Abgeschlossen
	    {
	        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, false, bonnet, boot, objective);
			GameTextForPlayer(playerid,"~w~Roller ~g~aufgeschlossen",3000,6);
			SetPVarInt(playerid,"ZivirollerLock",0);
	    }
	    return 1;
	}
	else if(strcmp("/jobstats", cmdtext, true, 10) == 0)
	{
		new string3[3][128], str[364];
		format(string3[0],128,"{FFFFFF}Jobstats von {FF0000}%s",SpielerInfo[playerid][sName]);
		format(string3[1],128,"{FFFFFF}Pilot:		{FF0000}%d EXP{FFFFFF}",SpielerInfo[playerid][sJobEXP][3]);
		format(string3[2],128,"{FFFFFF}Busfahrer:	{FF0000}%d EXP{FFFFFF}",SpielerInfo[playerid][sJobEXP][4]);
		format(str,sizeof str,"%s\n\n%s\n%s",string3[0],string3[1],string3[2]);
		ShowPlayerDialog(playerid,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Jobstats",str,"Weiter","");
	    return 1;
	}
	else if(strcmp("/stats", cmdtext, true, 10) == 0)
	{
		if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zur Stadthalle und beantrage dort deinen Personalausweis.");
		if(GetPVarInt(playerid,"StatsOpen") == 0)
		{
			ShowStats(playerid,playerid);
			SetPVarInt(playerid,"StatsOpen",1);
			SendClientMessage(playerid,COLOR_GREY,"* Du kannst deine Statistiken mit '/stats' wieder schliessen.");
		}
		else if(GetPVarInt(playerid,"StatsOpen") == 1)
		{
            PlayerTextDrawHide(playerid, StatsDraw[playerid][0]);
			PlayerTextDrawHide(playerid, StatsDraw[playerid][1]);
			PlayerTextDrawHide(playerid, StatsDraw[playerid][2]);
			PlayerTextDrawHide(playerid, StatsDraw[playerid][3]);
			PlayerTextDrawHide(playerid, StatsDraw[playerid][4]);
			SetPVarInt(playerid,"StatsOpen",0);
		}
		return 1;
  	}
	else if (strcmp("/jobbase", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sNebenjob] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Nebenjob.");
        if(SpielerInfo[playerid][sNebenjob] == 2)//Pizzabote
        {
            SetPlayerCheckpoint(playerid,2113.1394,-1769.8885,13.0996,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 3)//Kehrmaschinenfahrer
        {
            SetPlayerCheckpoint(playerid,1416.9246,-1648.7014,13.3828,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 4)//Pilot
        {
            SetPlayerCheckpoint(playerid,1957.0295,-2183.6008,13.5469,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 5)//Busfahrer
        {
            SetPlayerCheckpoint(playerid,1514.1377,-2319.1445,13.3828,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 6)//Müllmann
        {
            SetPlayerCheckpoint(playerid,1734.5929,-2060.1526,13.5910,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 7)//Landwirt
        {
            SetPlayerCheckpoint(playerid,-62.7901,76.2742,3.1172,5.0);
        }
        else if(SpielerInfo[playerid][sNebenjob] == 8)//Waffendealer
        {
            SendClientMessage(playerid,COLOR_SORRY,"Der Waffendealer Job, besitzt keine feste Jobbase.");
            return 1;
        }
        else if(SpielerInfo[playerid][sNebenjob] == 9)//Drogendealer
        {
            SendClientMessage(playerid,COLOR_SORRY,"Der Drogendealer Job, besitzt keine feste Jobbase.");
            return 1;
        }
        else if(SpielerInfo[playerid][sNebenjob] == 10)//Holzfäller
        {
            SetPlayerCheckpoint(playerid,1106.1093,-299.7448,74.5391,5.0);
            return 1;
        }
        SendClientMessage(playerid,COLOR_SUPER,"Deine Jobbase wurde dir rot auf der Karte makiert.");
        return 1;
	}
	else if (strcmp("/mp3", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sMP3] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein MP3-Player.");
        ShowPlayerDialog(playerid,DIALOG_MP3,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - MP3 Player","{00CA00}BaseLovers.FM (Empfehlung/Partner)\n{FFFFFF}ILoveRadio\nILoveMashup\nTechnoBase.FM\nHouseTime.FM\nMyTrendBeatz.FM\nYoutube Streamen\nRadio ausschalten","Weiter","Zurück");
        return 1;
    }
   	else if (strcmp("/stellen", cmdtext, true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,3.0,1567.7245,-1660.0066,1261.2506))return SendClientMessage(playerid,COLOR_GREY,"Du kannst dich hier nicht stellen.");
        if(GetPlayerWantedLevelEx(playerid) == 0)return SendClientMessage(playerid,COLOR_GREY,"Du wirst nicht von der Polizei gesucht.");
        if(CopDuty == 0)return SendClientMessage(playerid,COLOR_GREY,"Derzeit stehen keine Beamten zur Verfügung.");
        new string[144];
  		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] != 2)continue;
		    if(GetPVarInt(i,"CopDuty") == 0)continue;
			format(string,sizeof(string),"%s steht am Eingangsbereich und möchte sich stellen.",SpielerInfo[playerid][sName]);
			SendClientMessage(i,COLOR_BLUE,string);
		}
		SendClientMessage(playerid,COLOR_SUPER,"Alle verfügbaren Beamten wurden benachrichtigt. Bitte habe ein wenig Geduld.");
        return 1;
    }
   	else if (strcmp("/maut", cmdtext, true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid,3.5,1730.1222,520.3935,28.2204))//LV-LS
        {
            if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 1724.22595, 518.73871, 28.09300);
					MoveObject(MautSchranke[5], 1724.22595, 518.73871, 28.09300+0.01,0.01,0.00000, 0.00000, -22.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",1);
					return 1;
				}
				else
				{
    				if(MautStatus[5] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 1724.22595, 518.73871, 28.09300);
					MoveObject(MautSchranke[5], 1724.22595, 518.73871, 28.09300+0.01,0.01,0.00000, 0.00000, -22.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",1);
					return 1;
				}
			}
			else
			{
   				if(MautStatus[5] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 1724.22595, 518.73871, 28.09300);
				MoveObject(MautSchranke[5], 1724.22595, 518.73871, 28.09300+0.01,0.01,0.00000, 0.00000, -22.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",1);
				return 1;
   			}
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,1743.9443,515.8735,28.2149))//LS-LV
        {
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 1749.94031, 517.41351, 27.70300);
					MoveObject(MautSchranke[6], 1749.94031, 517.41351, 27.70300+0.01,0.01,0.00000, 0.00000, -22.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",2);
					return 1;
				}
				else
				{
    				if(MautStatus[6] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 1749.94031, 517.41351, 27.70300);
					MoveObject(MautSchranke[6], 1749.94031, 517.41351, 27.70300+0.01,0.01,0.00000, 0.00000, -22.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",2);
					return 1;
				}
			}
			else
			{
   				if(MautStatus[6] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 1749.94031, 517.41351, 27.70300);
				MoveObject(MautSchranke[6], 1749.94031, 517.41351, 27.70300+0.01,0.01,0.00000, 0.00000, -22.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",2);
				return 1;
   			}
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,56.1354,-1525.3245,4.9989))//LS-SF
        {
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 50.20850, -1528.00586, 4.59290);
					MoveObject(MautSchranke[0], 50.20850, -1528.00586, 4.59290+0.01,0.01,0.00000, 0.00000, 84.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",3);
					return 1;
				}
				else
				{
    				if(MautStatus[0] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 50.20850, -1528.00586, 4.59290);
					MoveObject(MautSchranke[0], 50.20850, -1528.00586, 4.59290+0.01,0.01,0.00000, 0.00000, 84.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",3);
					return 1;
				}
			}
			else
			{
   				if(MautStatus[0] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 50.20850, -1528.00586, 4.59290);
				MoveObject(MautSchranke[0], 50.20850, -1528.00586, 4.59290+0.01,0.01,0.00000, 0.00000, 84.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",3);
				return 1;
			}
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,49.5451,-1538.1730,5.1519))//SF-LS
        {
        	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
					MoveObject(MautSchranke[1], 55.64380, -1535.61462, 4.65890+0.01,0.01,0.00000, 0.00000, 80.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",4);
					return 1;
				}
				else
				{
    				if(MautStatus[1] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
					MoveObject(MautSchranke[1], 55.64380, -1535.61462, 4.65890+0.01,0.01,0.00000, 0.00000, 80.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",4);
					return 1;
				}
			}
        	else
            {
                if(MautStatus[1] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
				MoveObject(MautSchranke[1], 55.64380, -1535.61462, 4.65890+0.01,0.01,0.00000, 0.00000, 80.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",4);
				return 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,26.1980,-1338.1219,10.1589))//SFTunnel - LSTunnel
        {
            if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 32.93180, -1338.09875, 9.97200);
					MoveObject(MautSchranke[2], 32.93180, -1338.09875, 9.97200+0.01,0.01,0.00000, 0.00000, -48.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",5);
					return 1;
				}
				else
				{
    				if(MautStatus[2] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 32.93180, -1338.09875, 9.97200);
					MoveObject(MautSchranke[2], 32.93180, -1338.09875, 9.97200+0.01,0.01,0.00000, 0.00000, -48.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",5);
					return 1;
				}
			}
        	else
            {
                if(MautStatus[2] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 32.93180, -1338.09875, 9.97200);
				MoveObject(MautSchranke[2], 32.93180, -1338.09875, 9.97200+0.01,0.01,0.00000, 0.00000, -48.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",5);
				return 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,-1.1519,-1323.5649,11.2628))//LSTunnel - SFTunnel
        {
        	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
					MoveObject(MautSchranke[3], -9.03120, -1324.38770, 10.83550+0.01,0.01,0.00000, 0.00000, -51.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",6);
					return 1;
				}
				else
				{
    				if(MautStatus[3] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
    				PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
					MoveObject(MautSchranke[3], -9.03120, -1324.38770, 10.83550+0.01,0.01,0.00000, 0.00000, -51.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",6);
					return 1;
				}
			}
        	else
            {
                if(MautStatus[3] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 55.64380, -1535.61462, 4.65890);
				MoveObject(MautSchranke[3], -9.03120, -1324.38770, 10.83550+0.01,0.01,0.00000, 0.00000, -51.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",6);
				return 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid,3.5,523.5012,469.5414,18.9297) ||//LS - LV
		IsPlayerInRangeOfPoint(playerid,3.5,518.9169,475.9107,18.9297))//LV - LS
        {
        	if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
            {
                if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1)
                {
					PlayerPlaySound(playerid, 1139, 518.43420, 470.30151, 18.66560);
					MoveObject(MautSchranke[4], 518.43420, 470.30151, 18.66560+0.01,0.01,0.00000, 0.00000, 34.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",7);
					return 1;
				}
				else
				{
    				if(MautStatus[4] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
   	            	if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            	GivePlayerMoneyEx(playerid,-50);
					PlayerPlaySound(playerid, 1139, 518.43420, 470.30151, 18.66560);
					MoveObject(MautSchranke[4], 518.43420, 470.30151, 18.66560+0.01,0.01,0.00000, 0.00000, 34.00000);
					SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
					SetPVarInt(playerid,"MautStation",7);
					return 1;
				}
			}
        	else
            {
                if(MautStatus[4] == true)return SendClientMessage(playerid,COLOR_SORRY,"Die Mautstation ist derzeit geschlossen.");
	            if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Die Maut-Gebühr beträgt 50$. Komm wieder, wenn du genügend Geld dabei hast.");
	            GivePlayerMoneyEx(playerid,-50);
				PlayerPlaySound(playerid, 1139, 518.43420, 470.30151, 18.66560);
				MoveObject(MautSchranke[4], 518.43420, 470.30151, 18.66560+0.01,0.01,0.00000, 0.00000, 34.00000);
				SetTimerEx("MautSchrankeT", 5000, false,"i",playerid);
				SetPVarInt(playerid,"MautStation",7);
				return 1;
            }
        }
        return 1;
    }
   	else if (strcmp("/creategruppe", cmdtext, true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,2.5,358.5327,180.3977,1008.3828))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht in der Stadthalle am Gruppen Icon.");
        if(GetPlayerScore(playerid) < 3)return SendClientMessage(playerid,COLOR_SORRY,"Um eine Gruppe gründen zu können, benötigst du min. das dritte Level.");
        if(SpielerInfo[playerid][sGLeader] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Gruppe.");
		if(SpielerInfo[playerid][sGruppe] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist bereits in eine Gruppe. Verlasse diese vorher.");
		if(SpielerInfo[playerid][sGHaus] == 0)return SendClientMessage(playerid,COLOR_SORRY,"{FF0000}Michelle S.{FFFFFF} sagt: Komm wieder, wenn du ein Gruppenhaus besitzt.");
        if(GetPlayerMoneyEx(playerid) < 250000)return SendClientMessage(playerid,COLOR_SORRY,"{FF0000}Michelle S.{FFFFFF} sagt: Komm wieder, wenn du 250.000$ dabei hast.");
        ShowPlayerDialog(playerid,DIALOG_CREATE_GRUPPE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppe erstellen","Bitte gib unten ein Namen deiner Gruppe ein.","Weiter","Abbrechen");
        return 1;
    }
    else if (strcmp("/createfirma", cmdtext, true) == 0)
    {
        if(GetPlayerScore(playerid) < 5)return SendClientMessage(playerid,COLOR_SORRY,"Um eine Firma gründen zu können. benötigst du mind. das fünfte Level.");
		if(SpielerInfo[playerid][sFLeader] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Firma.");
		if(SpielerInfo[playerid][sFirma] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist bereits in einer Firma angestellt. Verlasse diese vorher.");
		if(GetPlayerMoneyEx(playerid) < 300000)return SendClientMessage(playerid,COLOR_SORRY,"{FF0000}Michelle S.{FFFFFF} sagt: Komm wieder, wenn du 300.000$ dabei hast.");
		ShowPlayerDialog(playerid,DIALOG_CREATE_FIRMA,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firma erstellen","Bitte gib unten ein Namen deiner Firma ein.","Weiter","Abbrechen");
		return 1;
	}
	else if (strcmp("/creategfirma", cmdtext, true) == 0)
	{
	    if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
	    SendClientMessage(playerid,COLOR_INFO,"Begib dich nun an die untere RECHTE Ecke und schreibe 'GFirma1");
	    firmaerstellen[playerid] = true;
	    gfirmapunkt[playerid] = 1;
	    for(new i = 0; i < 7; i++) gfirmapos[playerid][i] = 0;
	    return 1;
	}
   	else if (strcmp("/kuendigen", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sNebenjob] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Nebenjob.");
		if(GetPVarInt(playerid,"PizzaboteDuty") == 0 &&
		GetPVarInt(playerid,"KehrmaschinenDuty") == 0 && GetPVarInt(playerid,"PilotDuty") == 0 &&
		GetPVarInt(playerid,"BusfahrerDuty") == 0 && GetPVarInt(playerid,"MüllmannDuty") == 0 &&
		GetPVarInt(playerid,"LandwirtDuty") == 0 && GetPVarInt(playerid,"HolzfallerDuty") == 0)
		{
	        if(SpielerInfo[playerid][sDonator] == 1 || SpielerInfo[playerid][sPremium] == 1)
	        {
			 	    SpielerInfo[playerid][sQuitJob] = 0;
			 	    SpielerInfo[playerid][sNebenjob] = 0;
			 	    SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Nebenjob erfolgreich gekündigt.");
	        }
	        else
	        {
		    	if(SpielerInfo[playerid][sQuitJob] != 10)
		    	{
		    	    new str[144], wert = 10-SpielerInfo[playerid][sQuitJob];
		    	    format(str,sizeof(str),"Dir fehlen noch %d PayDays, um dein Nebenjob kündigen zu können.",wert);
		    	    SendClientMessage(playerid,COLOR_SORRY,str);
		    	    return 1;
			 	}
			 	else
			 	{
			 	    SpielerInfo[playerid][sQuitJob] = 0;
			 	    SpielerInfo[playerid][sNebenjob] = 0;
			 	    SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Nebenjob erfolgreich gekündigt.");
			 	    return 1;
			 	}
			}
			return 1;
		}
		else SendClientMessage(playerid,COLOR_SUPER,"Beende erst dein Nebenjob um ihn kündigen zu können.");
		return 1;
	}
	else if (strcmp("/neon", cmdtext, true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,3.5,1569.3154,-2154.8662,14.0352))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Neon Shop.");
        if(FahrzeugInfo[tmpcar][fBesitzerID] == -1)return SendClientMessage(playerid,COLOR_SORRY,"Nur in einem Privatfahrzeug möglich.");
        if(FahrzeugInfo[tmpcar][fBesitzerID] != playerid)return SendClientMessage(playerid,COLOR_GREY,"Du kannst nur an deine eigenen Privatfahrzeuge, Unterbodenbeleuchtung einbauen lassen.");
        if(SpielerInfo[playerid][sDonator] == 1)return ShowPlayerDialog(playerid,DIALOG_NEON,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Neon Shop","{FFFFFF}Weiß	| Kosten: {FF0000}100.000$\n{FFFFFF}Pink	| Kosten: {FF0000}100.000$","Weiter","Abbrechen");
        if(SpielerInfo[playerid][sPremium] == 1)return ShowPlayerDialog(playerid,DIALOG_NEON,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Neon Shop","{FFFFFF}Weiß	| Kosten: {FF0000}100.000$\n{FFFFFF}Blau	| Kosten: {FF0000}100.000$\n{FFFFFF}Rot	| Kosten: {FF0000}100.000$\n{FFFFFF}Gelb	| Kosten: {FF0000}100.000$\n{FFFFFF}Grün	| Kosten: {FF0000}100.000$\n{FFFFFF}Pink	| Kosten: {FF0000}100.000$","Weiter","Abbrechen");
        else SendClientMessage(playerid,COLOR_SORRY,"Du besitzt nicht den Donator-/Premiumrang.");
        return 1;
    }
   	else if (strcmp("/mats", cmdtext, true) == 0)
    {
        if(!IsPlayerInAnyGang(playerid))return NichtBerechtigt
        if(!IsPlayerInRangeOfPoint(playerid,2.5,1083.0126,-1226.7549,15.8203))return SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier keine Materialien holen.");
        if(GetPVarInt(playerid,"Materialien") == 0)
        {
            if(GetPlayerMoneyEx(playerid) < 250)return SendClientMessage(playerid,COLOR_SORRY,"Die Materialien kosten 250$. Du hast zu wenig Geld dabei.");
            if(SpielerInfo[playerid][sMaterialien] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Lege deine Waffenteile erst in die Fraktionskiste.");
			GivePlayerMoneyEx(playerid,-250);
			SetPVarInt(playerid,"Materialien",1);
   			SendClientMessage(playerid,COLOR_SUPER,"Bring die Materialien jetzt zur Farbik in San Fiero. (Roter Marker)");
   			SendClientMessage(playerid,COLOR_INFO,"Hinweis: Solltest du dich ausloggen, verlierst du deine ganzen Materialien außer die Waffenteile nicht.");
		    SetPlayerCheckpoint(playerid,-1826.3789,42.1302,15.1228,3.5);
		    return 1;
			
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GREY,"Bring die Materialien erst zur Farbik in San Fiero. (Roter Marker)");
		    SetPlayerCheckpoint(playerid,-1826.3789,42.1302,15.1228,3.5);
		    return 1;
		}
    }
   	else if (strcmp("/waffenteile", cmdtext, true) == 0)
    {
  		if(!IsPlayerInAnyGang(playerid))return NichtBerechtigt
        if(!IsPlayerInRangeOfPoint(playerid,2.5,-1826.3789,42.1302,15.1228))return SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier keine Waffenteile holen.");
        if(GetPVarInt(playerid,"Materialien") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Materialien.");
        DeletePVar(playerid,"Materialien");
        SpielerInfo[playerid][sMaterialien] = 250;
        SendClientMessage(playerid,COLOR_SUPER,"Sehr gut. Bringe die Waffenteile nun zu Fraktionskiste und lege Sie dort rein.");
        SendClientMessage(playerid,COLOR_INFO,"Hinweis: Lass dich von der Polizei nicht erwischen!");
        return 1;
    }
    else if (strcmp("/laybomb", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sBombe] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Bombe.");
        if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
        new Float:Pos[3], bombID;
        GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
        bombID = CreateObject(1252,Pos[0],Pos[1],Pos[2]-1,90.00000,0.0,0.0);
        SetPVarInt(playerid,"BombID",bombID);
		BombenTimer[playerid] = SetTimerEx("BombTimer",1000,true,"i",playerid);
		SetPVarInt(playerid,"BombCountdown",30);
		GameTextForPlayer(playerid, "Bombe explodiert in~n~~r~30 sec", 1000, 5);
        return 1;
    }
    else if (strcmp("/takebomb", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)
        {
	        if(!IsPlayerInRangeOfPoint(playerid,2.5,268.67346, 1883.53430, -30.26508))return SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier keine Bombe holen.");
	        if(GetPVarInt(playerid,"Bombe") == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst nur eine Bombe tragen. Bringe die Bombe erst zur Fraktionskiste.");
	        SendClientMessage(playerid,COLOR_SUPER,"Du hast eine Bombe aufgehoben. Bring Sie schnell zur Fraktionskiste.");
	        SendClientMessage(playerid,COLOR_INFO,"Hinweis: Solltest du dich ausloggen, ist die Bombe nicht mehr in deinem Besitz.");
	        SetPVarInt(playerid,"Bombe",1);
	        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	        return 1;
		}
		else NichtBerechtigt
		return 1;
    }
    else if (strcmp("/feueralarm", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] != 5)return NichtBerechtigt
        if(GetPVarInt(playerid,"Feueralarm") == 0)return SendClientMessage(playerid,COLOR_GREY,"Der Feueralarm ist bereits ausgeschaltet.");
        StopAudioStreamForPlayer(playerid);
        SendClientMessage(playerid,COLOR_SUPER,"Du hast den Feueralarm ausgeschaltet.");
        DeletePVar(playerid,"Feueralarm");
        return 1;
	}
 	else if (strcmp("/klamotten", cmdtext, true) == 0)
    {
    	if(IsPlayerInRangeOfPoint(playerid,2.5,206.3749,-8.0665,1001.2109))//Victim
    	{
    	    if(SpielerInfo[playerid][sGeschlecht] == 1)//Männlich
    	    {
    	    	ShowModelSelectionMenu(playerid, SkinsBoy, "Skinauswahl");
    	    }
    	    else if(SpielerInfo[playerid][sGeschlecht] == 2)//Weiblich
    	    {
				ShowModelSelectionMenu(playerid, SkinsGirl, "Skinauswahl");
    	    }
    	    return 1;
    	}
    	else SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich in keinem kleidungsgeschäft.");
    	return 1;
 	}
 	else if (strcmp("/frakliste", cmdtext, true) == 0)
    {
        if(SpielerInfo[playerid][sAdmin] < 6)return NichtBerechtigt
    	new frakliste[7][128], fraklistestr[564];
   		format(frakliste[0],128,"{FFFFFF}1. San Andreas Government Department\n2. San Andreas Police Department\n3. Keine Fraktion");
		format(frakliste[1],128,"{FFFFFF}4. Keine Fraktion\n5. San Andreas Rettungsdienst\n6. Federal Bureau of Investigation");
		format(frakliste[2],128,"{FFFFFF}7. Keine Fraktion\n8. Interglobal Television\n9. Grove Street Families");
		format(frakliste[3],128,"{FFFFFF}10. Rolling High Ballas\n11. Los Santos Vagos\n12. Los Aztecas");
		format(frakliste[4],128,"{FFFFFF}13. San Fierro Rifa\n14. Triaden\n15. Yakuza");
		format(frakliste[5],128,"{FFFFFF}16. Camorra\n17. Italian Mafia\n18. Russian Mafia\n19. International Contract Agency\n20. Terroristen");
		format(fraklistestr,sizeof fraklistestr,"%s\n%s\n%s\n%s\n%s\n%s",frakliste[0],frakliste[1],frakliste[2],frakliste[3],frakliste[4],frakliste[5]);
		ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsliste",fraklistestr,"Weiter","");
        return 1;
    }
   	else if (strcmp("/feuereinsatz", cmdtext, true) == 0)
    {
    	new bool:cout = false;
		for(new i = 0; i < MAX_FEUER; i++)
		{
			if(FeuerInfo[i][Erstellt] == true)
		    {
		        cout = true;
		    }
		}
		if(cout == true)
		{
		    SendClientMessage(playerid,COLOR_SORRY,"Die Feuerwehr wird am roten Marker benötigt.");
		    SetPlayerCheckpoint(playerid,FeuerInfo[0][oPosX],FeuerInfo[0][oPosY],FeuerInfo[0][oPosZ],2.5);
		}
		else SendClientMessage(playerid,COLOR_SORRY,"Es findet derzeit kein Einsatz statt.");
		return 1;
	}
	else if (strcmp("/durchsuchen", cmdtext, true) == 0)
    {
		if(!AnMuelltonne(playerid))return SendClientMessage(playerid,COLOR_SORRY,"Du bist an keiner Mülltonne.");
        if(SpielerInfo[playerid][sPfandflaschen] >= 15)return SendClientMessage(playerid, COLOR_SORRY,"Du kannst maximal 15 Pfandflaschen tragen.");
        if(pfanddurchsucht[playerid] == 1)return SendClientMessage(playerid, COLOR_SORRY,"Du kannst erst in 3 Minuten wieder die Mülltonnen durchsuchen.");
		if(SpielerInfo[playerid][sBeutel] == 0)return SendClientMessage(playerid, COLOR_SORRY,"Besorge dir im OBI Baumarkt ein Beutel um Pfandflaschen sammeln zu können.");
        new gefunden = 0 + random(6), string[128];
        SpielerInfo[playerid][sPfandflaschen] += gefunden;
        pfanddurchsucht[playerid] = 1;
        format(string, sizeof(string), "Du hast %d Pfandflaschen gefunden.",gefunden);
        SendClientMessage(playerid, COLOR_SUPER, string);
        SetTimerEx("pfand", 300000, false, "d", playerid);
		return 1;
    }
    else if (strcmp("/baumarkt", cmdtext, true) == 0)
    {
 		if(!IsPlayerInRangeOfPoint(playerid,1,2532.0051,-1519.2444,24.1094))return SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht im OBI Baumarkt.");
    	ShowPlayerDialog(playerid, DIALOG_OBIBAUMARKT, DIALOG_STYLE_TABLIST_HEADERS, "{007DFF}"SERV_NAME" - Baumarkt",
		"Produkt\tPreis\n\
		Schaufel\t$5000\n\
		Beutel\t$10\n\
		Helm 1\t$50\n\
		Helm 2\t$50\n\
		Helm 3\t$75\n\
		Helm 4\t$75\n\
		Helm 5\t$80",
		"Kaufen", "Abbrechen");
    	return 1;
    }
    else if (strcmp("/kampfstyles", cmdtext, true) == 0)
    {
   		if(IsPlayerInRangeOfPoint(playerid,5.0,756.8801,5.5222,1000.7000) || IsPlayerInRangeOfPoint(playerid,5.0,768.1483,-37.2912,1000.6865)
   		|| IsPlayerInRangeOfPoint(playerid,5.0,774.9591,-62.3417,1000.7184))
   		{
    		ShowPlayerDialog(playerid, DIALOG_GYM, DIALOG_STYLE_TABLIST_HEADERS, "{007DFF}"SERV_NAME" - Gym",
			"Kampfstyle\tPreis\n\
			Standart\t$10000\n\
			Boxer\t$20000\n\
			Kungfu\t$30000\n\
			Kneehead\t$40000\n\
			Roundhousekick\t$50000\n\
			Ellebogen\t$60000",
			"Erlernen", "Abbrechen");
   		}
   		else SendClientMessage(playerid,COLOR_SORRY,"Du bist in keinem Gym.");
        return 1;
    }
    else if (strcmp("/inventar", cmdtext, true) == 0)
    {
        new str[164];
        format(str,sizeof(str),
		"Name\tAnzahl\n\
		Beutel\t%d\n\
		Pfandflaschen\t%d",SpielerInfo[playerid][sBeutel],SpielerInfo[playerid][sPfandflaschen]);
		ShowPlayerDialog(playerid, 9992, DIALOG_STYLE_TABLIST_HEADERS, "{007DFF}"SERV_NAME" - Inventar",str,"Weiter", "");
        return 1;
    }
 	else if (strcmp("/createdroge", cmdtext, true) == 0)
    {
    	if(SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 19)
	    {
        	new Zone = IsPlayerInGangZoneEx(playerid), Float:Position[3], query[264];
			if(Zone < 1)return SendClientMessage(playerid,COLOR_SORRY,"* Du befindest dich in keinem Gang-/Mafiengebiet.");
			if(GangZoneInfo[Zone][gzFightTime] >= 1)return SendClientMessage(playerid,COLOR_GREY,"* Hier wird zurzeit nicht gekämpft!");
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"* Du kannst keine Drogenpflanze aus einem Fahrzeug heraus pflanzen.");
			if(GangZoneInfo[Zone][gzOwner] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Dieses Gebiet gehört euch nicht.");
			if(GangZoneInfo[Zone][gzType] != 3)return SendClientMessage(playerid,COLOR_SORRY,"Du kannst hier keine Drogen pflanzen.");
			if(GangZoneInfo[Zone][gzValue] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht genügend Samen in der Gebietskiste.");
	        if(AnDrogenPflanze(playerid))return SendClientMessage(playerid,COLOR_SORRY,"* Platziere deine Pflanze ein Stück weiter weg.");
	        if(SpielerInfo[playerid][sDrogenPflanze] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits eine Drogenpflanze.");
			for(new mf=1;mf<MAX_DROGEN;mf++)
			{
	  			if(DrogenInfo[mf][dErstellt] == true)continue;
	  			GetPlayerPos(playerid,Position[0],Position[1],Position[2]);
			    DrogenInfo[mf][dErstellt] = true;
    			DrogenInfo[mf][dPos_X] = Position[0];
				DrogenInfo[mf][dPos_Y] = Position[1];
				DrogenInfo[mf][dPos_Z] = Position[2];
				DrogenInfo[mf][dReife] = 0;
				format(DrogenInfo[mf][dBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
				
			 	DrogenInfo[mf][dObject] = CreateObject(19473, Position[0], Position[1], Position[2]-1, 0.0, 0.0, 0.0);
				mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `drogenpflanzen` (`ID`, `Besitzer`, `PosX`, `PosY`, `PosZ`) VALUES ('%d', '%e', '%f', '%f', '%f')", mf, SpielerInfo[playerid][sName], Position[0], Position[1], Position[2]-1);
	   			mysql_tquery(sqlHandle, query);

	  	 		GangZoneInfo[Zone][gzValue]--;
	  	 		SpielerInfo[playerid][sDrogenPflanze] = mf;

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
		        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0);
				format(query,sizeof(query),"Gangzone der %s [ID:%d]\nTyp: %s | Wert: %d",FrakName(GangZoneInfo[Zone][gzOwner]),Zone,GangZoneTyp(GangZoneInfo[Zone][gzType]),GangZoneInfo[Zone][gzValue]);
				Update3DTextLabelText(GangZoneInfo[Zone][gzLabel], 0xFFC800FF, query);
				format(query, sizeof(query), "Drogenpflanze von {FF0000}%s{FFFFFF}\nReife: {FF0000}%d{FFFFFF} Prozent",SpielerInfo[playerid][sName],DrogenInfo[mf][dReife]);
				DrogenInfo[mf][dText] = Create3DTextLabel(query, COLOR_WHITE, Position[0], Position[1], Position[2], 5.0, 0, false);

				SendClientMessage(playerid,COLOR_SUPER,"Du hast eine Drogenpflanze angepflanzt.");
				return 1;
			}
        }
        else NichtBerechtigt
        return 1;
	}
	else if (strcmp("/ernten", cmdtext, true, 10) == 0)
	{
 		if(SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 19)
	    {
	        new query[164];
			if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"* Du kannst die Drogenpflanze nicht aus einem Fahrzeug heraus ernten.");
			if(!AnDrogenPflanze(playerid))return SendClientMessage(playerid,COLOR_SORRY,"* Du befindest dich an keiner Drogenpflanze.");
			if(SpielerInfo[playerid][sDrogenPflanze] == 0)return SendClientMessage(playerid,COLOR_SORRY,"* Du besitzt keine Drogenpflanze.");
			new mf = GetNearDrogenPflanzeID(playerid);
			if(SpielerInfo[playerid][sDrogenPflanze] != mf)return SendClientMessage(playerid,COLOR_SORRY,"* Du kannst nur deine eigenen Drogenpflanzen ernten.");
			if(DrogenInfo[mf][dReife] < 100)return SendClientMessage(playerid,COLOR_SORRY,"* Deine Drogenpflanze ist noch nicht reif.");

		    SendClientMessage(playerid,COLOR_SUPER,"* Drogenpflanze geerntet. +10 Drogen");
		    SpielerInfo[playerid][sDrogen] += 10;
		    SpielerInfo[playerid][sDrogenPflanze] = 0;

			Delete3DTextLabel(DrogenInfo[mf][dText]);
			DrogenInfo[mf][dText] = Text3D:INVALID_3DTEXT_ID;
			
			DestroyObject(DrogenInfo[mf][dObject]);
			DrogenInfo[mf][dObject] = INVALID_OBJECT_ID;
			
			DrogenInfo[mf][dReife] = 0;
			DrogenInfo[mf][dBesitzer] = 0;
			format(DrogenInfo[mf][dBesitzer], 0, "");
			DrogenInfo[mf][dPos_X] = 0;
			DrogenInfo[mf][dPos_Y] = 0;
			DrogenInfo[mf][dPos_Z] = 0;
			DrogenInfo[mf][dErstellt] = false;
			
			mysql_format(sqlHandle, query, sizeof(query), "DELETE FROM `drogenpflanzen` WHERE `Besitzer` = '%s' ", SpielerInfo[playerid][sName]);
			mysql_tquery(sqlHandle, query);
			return 1;
		}
		else NichtBerechtigt
		return 1;
	}
 	//Animationen
	else if (strcmp("/animlist", cmdtext, true) == 0)
    {
        SendClientMessage(playerid,COLOR_WHITE,"|__ - {FF0000}German Rosalife - Animationen{FFFFFF} - __|");
        SendClientMessage(playerid,COLOR_SUPER,"/handsup, /dance[1-4], /rap, /rap2, /rap3, /wankoff, /wank, /strip[1-7], /sexy[1-8], /bj[1-4], /cellin, /cellout, /lean, /piss, /follow");
        SendClientMessage(playerid,COLOR_SUPER,"/greet, /injured, /injured2, /hitch, /bitchslap, /cpr, /gsign1, /gsign2, /gsign3, /gsign4, /gsign5, /gift, /getup");
        SendClientMessage(playerid,COLOR_SUPER,"/chairsit, /stand, /slapped, /slapass, /drunk, /gwalk, /gwalk2, /mwalk, /fwalk, /celebrate, /celebrate2, /win, /win2");
        SendClientMessage(playerid,COLOR_SUPER,"/yes, /deal, /deal2, /thankyou, /invite1, /invite2, /sit, /scratch, /bomb, /getarrested, /laugh, /lookout, /robman");
        SendClientMessage(playerid,COLOR_SUPER,"/crossarms, /crossarms2, /crossarms3, /lay, /cover, /vomit, /eat, /wave, /crack, /crack2, /smokem, /smokef, /msit, /fsit");
        SendClientMessage(playerid,COLOR_SUPER,"/chat, /fucku, /taichi, /chairsit, /relax, /bat1, /bat2, /bat3, /bat4, /bat5, /nod, /cry1, /cry2, /chant, /carsmoke, /aim");
        SendClientMessage(playerid,COLOR_SUPER,"/gang1, /gang2, /gang3, /gang4, /gang5, /gang6, /gang7, /bed1, /bed2, /bed3, /bed4, /carsit, /carsit2, /stretch, /angry");
        SendClientMessage(playerid,COLOR_SUPER,"/kiss2, /kiss3, /kiss4, /kiss5, /kiss6, /kiss7, /kiss8, /exhausted, /ghand1, /ghand2, /ghand3, /ghand4, /ghand5");
        SendClientMessage(playerid,COLOR_SUPER,"/basket1, /basket2, /basket3, /basket4, /basket5, /basket6, /akick, /box, /cockgun");
        SendClientMessage(playerid,COLOR_SUPER,"/bar1, /bar2, /bar3, /bar4, /lay2, /liftup, /putdown, /die, /joint, /die2, /aim2");
        SendClientMessage(playerid,COLOR_SUPER,"/benddown, /checkout");
        return 1;
    }
    else if(strcmp(cmdtext, "/handsup", true) == 0)
    {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		return 1;
    }

	else if(strcmp(cmdtext,"/stopanim",true) == 0)
 	{
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/dance", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
        return 1;
    }
    else if(strcmp(cmdtext, "/dance2", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
        return 1;
    }
    else if(strcmp(cmdtext, "/dance3", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
        return 1;
    }
    else if(strcmp(cmdtext, "/dance4", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
        return 1;
    }
    else if(strcmp(cmdtext, "/rap", true) == 0)
    {
        ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/rap2", true) == 0)
    {
        ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/rap3", true) == 0)
    {
        ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/wankoff", true) == 0)
    {
        ApplyAnimation(playerid,"PAULNMAC","wank_in",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/wank", true) == 0)
    {
        ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_A",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip2", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_B",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip3", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_C",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip4", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_D",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip5", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_E",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip6", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_F",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/strip7", true) == 0)
    {
        ApplyAnimation(playerid,"STRIP","strip_G",4.0,true,true,true,true,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.1,false,true,true,true,1);
        return 1;
  	}
    else if(strcmp(cmdtext, "/sexy2", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy3", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy4", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy5", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy6", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy7", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKING_ENDW",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/sexy8", true) == 0)
    {
        ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bj", true) == 0)
    {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bj2", true) == 0)
    {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bj3", true) == 0)
    {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bj4", true) == 0)
    {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/cellin", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
    }
    else if(strcmp(cmdtext, "/cellout", true) == 0)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }
    else if(strcmp(cmdtext, "/lean", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","leanIDLE", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/piss", true) == 0)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
        return 1;
    }
    else if(strcmp(cmdtext, "/follow", true) == 0)
    {
        ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/greet", true) == 0)
    {
        ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/stand", true) == 0)
    {
        ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/injured2", true) == 0)
    {
        ApplyAnimation(playerid,"SWAT","gnstwall_injurd", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/hitch", true) == 0)
    {
        ApplyAnimation(playerid,"MISC","Hiker_Pose", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bitchslap", true) == 0)
    {
        ApplyAnimation(playerid,"MISC","bitchslap",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/cpr", true) == 0)
    {
        ApplyAnimation(playerid,"MEDIC","CPR", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gsign1", true) == 0)
        {
        ApplyAnimation(playerid,"GHANDS","gsign1",4.0,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gsign2", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign2",4.0,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gsign3", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign3",4.0,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gsign4", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign4",4.0,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gsign5", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign5",4.0,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gift", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","gift_give",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/chairsit", true) == 0)
    {
        ApplyAnimation(playerid,"PED","SEAT_idle", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/injured", true) == 0)
	{
        ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/slapped", true) == 0)
    {
        ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/slapass", true) == 0)
    {
        ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,false, false, false, false,0);
        return 1;
	}
    else if(strcmp(cmdtext, "/drunk", true) == 0)
    {
        ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/skate", true) == 0)
    {
        ApplyAnimation(playerid,"SKATE","skate_run",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gwalk", true) == 0)
	{
        ApplyAnimation(playerid,"PED","WALK_gang1",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/gwalk2", true) == 0)
    {
        ApplyAnimation(playerid,"PED","WALK_gang2",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/limp", true) == 0)
    {
        ApplyAnimation(playerid,"PED","WALK_old",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/eatsit", true) == 0)
    {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/celebrate", true) == 0)
    {
        ApplyAnimation(playerid,"benchpress","gym_bp_celebrate", 4.0, true, false, false, false, 0);
        return 1;
   	}
    else if(strcmp(cmdtext, "/win", true) == 0)
    {
        ApplyAnimation(playerid,"CASINO","cards_win", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/win2", true) == 0)
    {
        ApplyAnimation(playerid,"CASINO","Roulette_win", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/yes", true) == 0)
    {
        ApplyAnimation(playerid,"CLOTHES","CLO_Buy", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/deal2", true) == 0)
    {
        ApplyAnimation(playerid,"DEALER","DRUGS_BUY", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/thankyou", true) == 0)
    {
        ApplyAnimation(playerid,"FOOD","SHP_Thank", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/invite1", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/invite2", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","Invite_No",4.1,false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/celebrate2", true) == 0)
    {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/sit", true) == 0)
    {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/scratch", true) == 0)
    {
        ApplyAnimation(playerid,"MISC","Scratchballs_01", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if (strcmp("/bomb", cmdtext, true) == 0)
    {
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, false, 0); // Place Bomb
        return 1;
    }
    else if (strcmp("/getarrested", cmdtext, true, 7) == 0)
    {
        ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, false, true, true, true, -1); // Gun Arrest
        return 1;
    }
    else if (strcmp("/laugh", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, false, false, false, false, 0); // Laugh
        return 1;
    }
    else if (strcmp("/lookout", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, false, false, false, false, 0); // Rob Lookout
        return 1;
    }
    else if (strcmp("/robman", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, true, false, false, false, 0); // Rob
        return 1;
    }
    else if (strcmp("/crossarms", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, false, true, true, true, -1); // Arms crossed
        return 1;
    }
    else if (strcmp("/crossarms2", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, false, true, true, true, -1); // Arms crossed 2
        return 1;
    }
    else if (strcmp("/crossarms3", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_01", 4.0, false, true, true, true, -1); // Arms crossed 3
        return 1;
    }
    else if (strcmp("/lay", cmdtext, true, 6) == 0)
    {
        ApplyAnimation(playerid,"BEACH", "bather", 4.0, true, false, false, false, 0); // Lay down
        return 1;
    }
    else if (strcmp("/vomit", cmdtext, true) == 0)
    {
        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, false, false, false, false, 0); // Vomit
        return 1;
    }
    else if (strcmp("/eat", cmdtext, true) == 0)
	{
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, false, false, false, false, 0); // Eat Burger
        return 1;
    }
    else if (strcmp("/wave", cmdtext, true) == 0)
	{
        ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, true, false, false, false, 0); // Wave
        return 1;
    }
    else if (strcmp("/deal", cmdtext, true) == 0)
	{
        ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
        return 1;
    }
    else if (strcmp("/crack", cmdtext, true, 6) == 0)
	{
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, true, false, false, false, 0); // Dieing of Crack
        return 1;
	}
    else if (strcmp("/smokem", cmdtext, true, 4) == 0)
	{
        ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, true, false, false, false, 0); // Smoke
        return 1;
    }
    else if (strcmp("/smokef", cmdtext, true) == 0)
	{
        ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, true, false, false, false, 0); // Female Smoking
        return 1;
    }
    else if (strcmp("/msit", cmdtext, true, 4) == 0)
	{
        ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, true, false, false, false, 0); // Male Sit
        return 1;
    }
    else if (strcmp("/fsit", cmdtext, true, 4) == 0)
	{
        ApplyAnimation(playerid,"BEACH", "ParkSit_W_loop", 4.0, true, false, false, false, 0); // Female Sit
        return 1;
    }
    else if(strcmp(cmdtext, "/chat", true) == 0)
	{
        ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/fucku", true) == 0)
	{
        ApplyAnimation(playerid,"PED","fucku",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/taichi", true) == 0)
    {
        ApplyAnimation(playerid,"PARK","Tai_Chi_Loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/chairsit", true) == 0)
    {
        ApplyAnimation(playerid,"BAR","dnk_stndF_loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/relax", true) == 0)
    {
        ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bat1", true) == 0)
    {
        ApplyAnimation(playerid,"BASEBALL","Bat_IDLE", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bat2", true) == 0)
    {
        ApplyAnimation(playerid,"BASEBALL","Bat_M", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bat3", true) == 0)
    {
        ApplyAnimation(playerid,"BASEBALL","BAT_PART", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bat4", true) == 0)
    {
        ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bat5", true) == 0)
    {
        ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/nod", true) == 0)
    {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang1", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang2", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkba",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang3", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkca",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang4", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkcb",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang5", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkda",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang6", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkea",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gang7", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/cry1", true) == 0)
    {
        ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/cry2", true) == 0)
    {
        ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bed1", true) == 0)
    {
        ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1, false, true, true, true, 1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bed2", true) == 0)
    {
        ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1, false, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/bed3", true) == 0)
    {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bed4", true) == 0)
    {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss2", true) == 0)
    {
        ApplyAnimation(playerid,"BD_FIRE","Grlfrd_Kiss_03",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss3", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss4", true) == 0)
    {
    	ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss5", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss6", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss7", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/kiss8", true) == 0)
    {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.0,false,false,false,false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/carsit", true) == 0)
    {
        ApplyAnimation(playerid,"CAR","Tap_hand", 4.0, true,false,false,false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/carsit2", true) == 0)
    {
        ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/fwalk", true) == 0)
    {
        ApplyAnimation(playerid,"ped","WOMAN_walksexy",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/mwalk", true) == 0)
    {
        ApplyAnimation(playerid,"ped","WALK_player",4.1,true, true, true, true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/stretch", true) == 0)
    {
        ApplyAnimation(playerid,"PLAYIDLES","stretch",4.0,false, false, false, false,0);
        return 1;
    }
    else if(strcmp(cmdtext, "/chant", true) == 0)
    {
        ApplyAnimation(playerid,"RIOT","RIOT_CHANT", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/angry", true) == 0)
    {
        ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.0,false, false, false, false,0);
        return 1;
    }
    else if (strcmp("/crack2", cmdtext, true, 6) == 0)
    {
        ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/ghand1", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign1LH",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/ghand2", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign2LH",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/ghand3", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign3LH",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/ghand4", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign4LH",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/ghand5", true) == 0)
    {
        ApplyAnimation(playerid,"GHANDS","gsign5LH",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/exhausted", true) == 0)
    {
        ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/carsmoke", true) == 0)
    {
        ApplyAnimation(playerid,"PED","Smoke_in_car", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/aim", true) == 0)
    {
        ApplyAnimation(playerid,"PED","gang_gunstand", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/getup", true) == 0)
    {
        ApplyAnimation(playerid,"PED","getup",4.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/basket1", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/basket2", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop", 4.0, true, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/basket3", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0, false, false, false, false, 0);
		return 1;
    }
    else if(strcmp(cmdtext, "/basket4", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/basket5", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1, false, true, true, true, 1);
        return 1;
    }
    else if(strcmp(cmdtext, "/basket6", true) == 0)
    {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1, true, true, true, true, 1);
        return 1;
    }
    else if(strcmp(cmdtext, "/akick", true) == 0)
    {
        ApplyAnimation(playerid,"FIGHT_E","FightKick",4.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/box", true) == 0)
    {
        ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,true, true, true, true ,1);
        return 1;
    }
   	else if(strcmp(cmdtext, "/cockgun", true) == 0)
    {
        ApplyAnimation(playerid, "SILENCED", "Silence_reload", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bar1", true) == 0)
    {
        ApplyAnimation(playerid, "BAR", "Barcustom_get", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bar2", true) == 0)
    {
        ApplyAnimation(playerid, "BAR", "Barcustom_order", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bar3", true) == 0)
    {
        ApplyAnimation(playerid, "BAR", "Barserve_give", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/bar4", true) == 0)
    {
        ApplyAnimation(playerid, "BAR", "Barserve_glass", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if (strcmp("/lay2", cmdtext, true, 6) == 0)
    {
        ApplyAnimation(playerid,"BEACH", "SitnWait_loop_W", 4.0, true, false, false, false, 0); // Lay down
        return 1;
    }
    else if(strcmp(cmdtext, "/liftup", true) == 0)
    {
        ApplyAnimation(playerid, "CARRY", "liftup", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/putdown", true) == 0)
    {
        ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/joint", true) == 0)
    {
        ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.0,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/die", true) == 0)
    {
        ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,false,true,true,true,1);
        return 1;
    }
    else if(strcmp(cmdtext, "/shakehead", true) == 0)
    {
        ApplyAnimation(playerid, "MISC", "plyr_shkhead", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/shakehead", true) == 0)
    {
        ApplyAnimation(playerid, "MISC", "plyr_shkhead", 3.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/die2", true) == 0)
    {
        ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, false, true, true, true, -1);
        return 1;
    }
    else if(strcmp(cmdtext, "/aim2", true) == 0)
    {
        ApplyAnimation(playerid, "SHOP", "SHP_Gun_Aim", 4.0, false, true, true, true, -1);
        return 1;
    }
    else if(strcmp(cmdtext, "/benddown", true) == 0)
    {
        ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/checkout", true) == 0)
    {
        ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, false, false, false, false, 0);
        return 1;
    }
    else if(strcmp(cmdtext, "/gangwars", true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion]  < 19)
        {
        	new string[128], idlisted[18] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"Alle aktuellen Gangwars:");
	        for(new id = 0; id < 19; id++)
			{
			    if(FrakInfo[id][fiWarGegner] > 0 && idlisted[FrakInfo[id][fiWarGegner]] != 1)
			    {
			        idlisted[FrakInfo[id][fiWarGegner]] = 1;
			        format(string,sizeof(string),"%s vs. %s | %d zu %d Kills!",FrakName(id),FrakName(FrakInfo[id][fiWarGegner]),FrakInfo[id][fiWarPoints],FrakInfo[FrakInfo[id][fiWarGegner]][fiWarPoints]);
			        SendClientMessage(playerid,COLOR_GREY,string);
			    }
			}
	        return 1;
  		}
  		else SendClientMessage(playerid,COLOR_GREY,"* Du bist in keiner Gang/Mafia!");
  		return 1;
    }
    else if(strcmp(cmdtext, "/fl", true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] == 0)return SendClientMessage(playerid,COLOR_GREY,"* Du gehörst keiner Fraktion an.");
        SendClientMessage(playerid,COLOR_INFO,"Alle Fraktionen mit IDs:");
        SendClientMessage(playerid,COLOR_WHITE,"San Andreas Regierung - 1 | Los Santos Police Dep. - 2 | San Fierro Police Dep. - 3 | Las Venturas Police Dep. - 4");
        SendClientMessage(playerid,COLOR_WHITE,"San Andreas Rettungsdienst - 5 | Special Weapons and Tactics (S.W.A.T) - 6 | San Andreas Ordnungsamt - 7 | Interglobal Television - 8");
        SendClientMessage(playerid,COLOR_WHITE,"Grove Street Family - 9 | Rolling High Ballas - 10 | Los Santos Vagos - 11 | Los Aztecas - 12 | San Fierro Rifa - 13");
        SendClientMessage(playerid,COLOR_WHITE,"Triaden - 14 | Yakuza - 15 | Camorra - 16 | Italian Mafia - 17 | Russian Mafia - 18");
        return 1;
    }
    else if(strcmp(cmdtext, "/payday", true) == 0)
    {
        new string[128];
        format(string,sizeof(string),"** PayDay-Gehaltscheck: %d$ - %d/45 Minuten bis zum nächsten PayDay. **",SpielerInfo[playerid][sPayDayGeld],SpielerInfo[playerid][sPayDay]);
		SendClientMessage(playerid,COLOR_INFO,string);
		return 1;
    }
    else if(strcmp(cmdtext, "/bk", true) == 0 || strcmp(cmdtext, "/backup", true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
        {
	        new string[128], stringbk[128];
	        format(string,sizeof(string),"ZENTRALE: %s %s benötigt sofortige Unterstützung!",RangName(playerid),SpielerInfo[playerid][sName]);
	        format(stringbk,sizeof(stringbk),"ZENTRALE: Laut GPS-Ortung befindet er sich aktuell in %s!",GetPlayerArea(playerid));
	        foreach(new i : Player)
	        {
	            if(SpielerInfo[i][sFraktion] != 2 || SpielerInfo[i][sFraktion] != 6)continue;
	            SendClientMessage(i,COLOR_WHITE," ");
	            SendClientMessage(i,COLOR_BLUE,"ZENTRALE: Achtung! An alle verfügbaren Einheiten. Es wurde ein Backup-Notruf abgesetzt!");
	            SendClientMessage(i,COLOR_BLUE,string);
	            SendClientMessage(i,COLOR_BLUE,stringbk);
	        }
	        format(string,sizeof(string),"* %s %s spricht in sein Funkgerät.",RangName(playerid),SpielerInfo[playerid][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        return 1;
   		}
        else NichtBerechtigt
        return 1;
    }
    else if(strcmp(cmdtext, "/bka", true) == 0 || strcmp(cmdtext, "/backupall", true) == 0)
    {
        if(SpielerInfo[playerid][sFraktion] != 0 || SpielerInfo[playerid][sFraktion] < 9)
        {
	        new string[128], stringbk[128];
	        format(string,sizeof(string),"ZENTRALE: %s %s benötigt sofortige Unterstützung!",RangName(playerid),SpielerInfo[playerid][sName]);
	        format(stringbk,sizeof(stringbk),"ZENTRALE: Laut GPS-Ortung befindet er sich aktuell in %s!",GetPlayerArea(playerid));
	        foreach(new i : Player)
	        {
	            if(SpielerInfo[i][sFraktion] == 0 || SpielerInfo[i][sFraktion] >= 9)continue;
	            SendClientMessage(i,COLOR_WHITE," ");
	            SendClientMessage(i,COLOR_BLUE,"ZENTRALE: Achtung! An alle verfügbaren Einheiten. Es wurde ein Backup-Notruf abgesetzt!");
	            SendClientMessage(i,COLOR_BLUE,string);
	            SendClientMessage(i,COLOR_BLUE,stringbk);
	        }
	        format(string,sizeof(string),"* %s %s spricht in sein Funkgerät.",RangName(playerid),SpielerInfo[playerid][sName]);
			ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        return 1;
   		}
        else NichtBerechtigt
        return 1;
    }
    else if(strcmp(cmdtext, "/maske", true) == 0)
    {
        new string[128];
        if(SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20 || SpielerInfo[playerid][sGruppe] == 1)
        {
			if(GetPVarInt(playerid,"FBIDuty") == 1 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20 || SpielerInfo[playerid][sGruppe] == 1)
			{
			    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
			    {
			        if(GetPVarInt(playerid,"CopMaske") == 0)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, false);}
			            SetPVarInt(playerid,"CopMaske",1);
			            format(string,sizeof(string),"* %s %s zieht eine Maske auf.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        else if(GetPVarInt(playerid,"CopMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, true);}
			            DeletePVar(playerid,"CopMaske");
			            format(string,sizeof(string),"* %s %s zieht seine Maske wieder ab.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        return 1;
				}
				else if(SpielerInfo[playerid][sFraktion] == 19)
				{
    				if(GetPVarInt(playerid,"HitmanMaske") == 0)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, false);}
			            SetPVarInt(playerid,"HitmanMaske",1);
			            format(string,sizeof(string),"* %s %s zieht eine Maske auf.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        else if(GetPVarInt(playerid,"HitmanMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, true);}
			            DeletePVar(playerid,"HitmanMaske");
			            format(string,sizeof(string),"* %s %s zieht seine Maske wieder ab.",RangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        return 1;
				}
				else if(SpielerInfo[playerid][sGruppe] == 1)
				{
    				if(GetPVarInt(playerid,"GruppenMaske") == 0)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, false);}
			            SetPVarInt(playerid,"GruppenMaske",1);
			            format(string,sizeof(string),"* %s %s zieht eine Maske auf.",GRangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        else if(GetPVarInt(playerid,"GruppenMaske") == 1)
			        {
			            foreach(new i : Player){ShowPlayerNameTagForPlayer(i, playerid, true);}
			            DeletePVar(playerid,"GruppenMaske");
			            format(string,sizeof(string),"* %s %s zieht seine Maske wieder ab.",GRangName(playerid),SpielerInfo[playerid][sName]);
						ProxDetector(12, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        }
			        return 1;
				}
			}
			else SendClientMessage(playerid,COLOR_SORRY,"* Du bist nicht im Dienst!");
			return 1;
		}
	 	else NichtBerechtigt
	 	return 1;
    }
	new commandlog[128];
	format(commandlog,sizeof(commandlog),"%s hat den Befehl '%s' benutzt.",SpielerInfo[playerid][sName],cmdtext);
    LogBefehl(commandlog);
	return SendClientMessage(playerid,COLOR_SORRY, "Dieser Befehl ist uns nicht bekannt. Schaue unter '/help' nach.");
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!IsAFahrrad(vehicleid) && doors == true)
	{
		EnterLockedV[playerid] = vehicleid;
		stopAC[playerid] = 3;
	}
	else if(!IsAFahrrad(vehicleid) && doors == false)
	{
		AC_PlayerVeh[playerid] = vehicleid;
		stopAC[playerid] = 3;
	}
	if(FahrzeugInfo[vehicleid][fNebenjob] != 0)
    {
	 	if(FahrzeugInfo[vehicleid][fNebenjob] == 2)//Pizzabote
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"PizzaboteDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du kannst das Fahrzeug erst fahren, wenn im Kofferraum deine Pizzen liegen.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
	        }
	 	}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 3)//Kehrmaschinenfahrer
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"KehrmaschinenDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				SendClientMessage(playerid,COLOR_SUPER,"Benutze '/startjob' um die Arbeit zu beginnen.");
	        }
	 	}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 4)//Pilot
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"PilotDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				SendClientMessage(playerid,COLOR_SUPER,"Benutze '/startjob' um die Arbeit zu beginnen.");
	        }
	 	}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 5)//Busfahrer
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"BusfahrerDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				if(FahrzeugInfo[vehicleid][fJobEXP] > SpielerInfo[playerid][sJobEXP][4])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du hast nicht die nötige Erfahrung, um den Bus fahren zu können.");
					return 1;
				}
				SendClientMessage(playerid,COLOR_SUPER,"Benutze '/startjob' um die Arbeit zu beginnen.");
	        }
	 	}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 6)//Müllmann
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"MüllmannDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				if(GetPVarInt(playerid,"MüllBeutelHand") == 1)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_SORRY,"Bring den Müllbeutel erst zum Müllwagen.");
					return 1;
				}
				SendClientMessage(playerid,COLOR_SUPER,"Benutze '/startjob' um die Arbeit zu beginnen.");
	        }
	 	}
	 	else if(FahrzeugInfo[vehicleid][fNebenjob] == 7)//Landwirt
	    {
	    	if(!ispassenger)
	        {
	            if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"LandwirtDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				if(GetPVarInt(playerid,"Landwirt2Time") == 1 && GetVehicleModel(vehicleid) == 532)
			    {
					new string[128];
		      		FahrzeugInfo[vehicleid][fJobFahrer] = playerid;
		   			format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}", SpielerInfo[playerid][sName]);
					Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, string);
				    SetPVarInt(playerid,"LandwirtAuto",vehicleid);
					for(new id=0; id<sizeof(LandwirtInfo); id++)
	 				{
	 				    if(LandwirtInfo[id][lStufe] == 1)
	 				    {
	 				        DestroyDynamicObject(LandwirtObjekt[playerid][id]);
	 				        LandwirtObjekt[playerid][id] = -1;
						}
						else if(LandwirtInfo[id][lStufe] == 2)
	  					{
	  					    LandwirtObjekt[playerid][id] = CreateDynamicObject(LandwirtInfo[id][lObjekt], LandwirtInfo[id][lPos_X],LandwirtInfo[id][lPos_Y],LandwirtInfo[id][lPos_Z], LandwirtInfo[id][lRPos_X],LandwirtInfo[id][lRPos_Y],LandwirtInfo[id][lRPos_Z], -1, -1, playerid, 200.0);
	  					}
					}
	    			SetPVarInt(playerid,"LandwirtCheckpoint",24);
					DeletePVar(playerid,"Landwirt2Time");
					DeletePVar(playerid,"LandwirtAutoHolen");
					SetPlayerCheckpoint(playerid,LandwirtInfo[24][lPos_X],LandwirtInfo[24][lPos_Y],LandwirtInfo[24][lPos_Z],2.5);
					GameTextForPlayer(playerid,"~r~Maehe~w~ nun die ~r~Pflanzen~w~ mit dem ~r~Maehdrescher.",3000,4);
			        SendClientMessage(playerid,COLOR_SUPER,"Mähe nun die Pflanzen mit dem Mähdrescher.");
			    }
			    if(GetPVarInt(playerid,"LandwirtStufe") == 3 && GetVehicleModel(vehicleid) == 478)
			    {
	  				new string[128];
		      		FahrzeugInfo[vehicleid][fJobFahrer] = playerid;
		   			format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}", SpielerInfo[playerid][sName]);
					Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, string);
				    SetPVarInt(playerid,"LandwirtAuto",vehicleid);
				    SetPVarInt(playerid,"LandwirtHatWalton",1);
				    DeletePVar(playerid,"LandwirtAutoHolen");
			        SendClientMessage(playerid,COLOR_SUPER,"Sammel die einzelnen Heuballen auf, und bringe sie anschließend zu deinem Walton.");
			        SendClientMessage(playerid,COLOR_INFO,"Die Heuballen kannst du mit der N Taste oder mit '/aufsammeln' aufheben.");
			        SendClientMessage(playerid,COLOR_INFO,"Benutze '/reinlegen' um die Heuballen auf den Walton zu legen.");
			    }
	        }
	 	}
	 	else if(FahrzeugInfo[vehicleid][fNebenjob] == 10)//Holzfäller
	 	{
	 	    if(!ispassenger)
	 	    {
	 	        if(FahrzeugInfo[vehicleid][fNebenjob] != SpielerInfo[playerid][sNebenjob])
	 	        {
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
					return 1;
				}
				if(GetPVarInt(playerid,"HolzfallerDuty") == 0)
				{
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid,COLOR_GREY,"Du bekommst die Schlüssel für die Fahrzeuge, wenn du in den Dienst gehst.");
					return 1;
				}
				if(FahrzeugInfo[vehicleid][fJobFahrer] != 0)
				{
				    if(FahrzeugInfo[vehicleid][fJobFahrer] != playerid)
				    {
		   				TogglePlayerControllable(playerid, false);
						TogglePlayerControllable(playerid, true);
						SendClientMessage(playerid,COLOR_GREY,"Das Fahrzeug ist bereits von einem Mitarbeiter belegt.");
						return 1;
				    }
				}
				if(GBGefallt[playerid] == 0 && GetVehicleModel(vehicleid) == 478)
				{
					SendClientMessage(playerid,COLOR_GREY,"Du hast deinen jetzigen Auftrag noch nicht erfüllt!");
					TogglePlayerControllable(playerid, false);
					TogglePlayerControllable(playerid, true);
				}
				if(HFCP2[playerid] == 1 && GetVehicleModel(vehicleid) == 478)
			    {
					new string[128];
					SetPVarInt(playerid,"HolzfallerAuto",vehicleid);
		      		FahrzeugInfo[vehicleid][fJobFahrer] = playerid;
		   			format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}", SpielerInfo[playerid][sName]);
					Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, string);
					GameTextForPlayer(playerid,"~r~Begebe dich~w~ nun zur ~r~Schreinerei!",3000,4);
					SetPlayerCheckpoint(playerid,2405.0603,-1409.6278,24.0712,3.0);
					HFCP4[playerid] = 1;
			    }
			}
		}
	}
    else if(FahrzeugInfo[vehicleid][fBankrob] != 0)
    {
        if(SpielerInfo[playerid][sFraktion] != SpielerInfo[BankAttacker][sFraktion])
        {
    		TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
		}
		else
		{
			if(!ispassenger)
			{
  				if(BankRobGeldGesamt == 0)
			    {
			    	SendClientMessage(playerid,COLOR_SORRY,"Du kannst den Van erst abliefern, wenn sich min. 1 Geldsack im Van befindet.");
				}
				else
				{
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][0]);
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][1]);
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][2]);
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][3]);
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][4]);
				    PlayerTextDrawHide(playerid, BankraubTD[playerid][5]);
				    KillTimer(PlayerBankRobTimer[playerid]);
					BankRobAmLaufen = 0;
					DeletePVar(playerid,"Bankrob");
		    		for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
			 		{
			 		    DestroyDynamicObject(BankRobGeldSack[sackid]);
			 		    Delete3DTextLabel(BankRobGeldSackLabel[sackid]);
			 		    BankRobGeldSackLabel[sackid] = Text3D:INVALID_3DTEXT_ID;
			 		}
				    SendClientMessage(playerid,COLOR_INFO,"Bringe den Van zum roten Marker, um den Bankraub abzuschließen.");
				    SetPlayerCheckpoint(playerid,873.8837,-14.7565,62.9002,5.0);
				}
			}
		}
 	}
 	else if(FahrzeugInfo[vehicleid][fImportCar] != 0)
  	{
	   if(GetPlayerScore(playerid) < 2)
	   {
  			TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,COLOR_SORRY,"Du kannst das Importfahrzeug erst ab Level 2 fahren.");
	   }
	   else
	   {
	    	new string[144];
			if(GetPVarInt(playerid,"Probefahrt") == 0)
			{
				if(!ispassenger)
				{
		   			format(string,sizeof(string),"~g~%d~w~ Minuten",ImportCarTime);
		 			if(ImportCarTime == 10){format(string,sizeof(string),"~y~%d~w~ Minuten",ImportCarTime);}
		 			if(ImportCarTime == 5){format(string,sizeof(string),"~r~%d~w~ Minuten",ImportCarTime);}

					PlayerTextDrawSetString(playerid,CountdownDraw[playerid][2],"ImportCar");
					PlayerTextDrawSetString(playerid,CountdownDraw[playerid][3],string);
					PlayerTextDrawShow(playerid,CountdownDraw[playerid][0]);
					PlayerTextDrawShow(playerid,CountdownDraw[playerid][1]);
					PlayerTextDrawShow(playerid,CountdownDraw[playerid][2]);
					PlayerTextDrawShow(playerid,CountdownDraw[playerid][3]);
				}
			}
			else
			{
				if(!ispassenger)
				{
					format(string,sizeof(string),"Die Mission läuft in {FF0000}%d{FFFFFF} Minuten ab.",ImportCarTime);
					SendClientMessage(playerid,COLOR_WHITE,string);
				}
			}
			if(!ispassenger)
			{
    			format(string,sizeof(string),"Das Importfahrzeug der Stunde wurde vom Spieler %s gestohlen.",SpielerInfo[playerid][sName]);
				SendClientMessageToAll(COLOR_ORANGE,string);
    			SendClientMessage(playerid,COLOR_INFO,"Liefere das Fahrzeug am Hafen ab, um deine Belohnung zu erhalten.");
		        SetPlayerCheckpoint(playerid,2415.0757,-2468.6069,13.3313,3.5);
		        SetPVarInt(playerid,"ImImportCar",1);
			}
	   }
  	}
	else if(FahrzeugInfo[vehicleid][fKurrierCar] != 0)
  	{
  	    new string[144], kurrierid = GetPVarInt(playerid,"KurrierID");
   		kurrierid--;
    	if(FahrzeugInfo[vehicleid][fKurrierCar] != playerid)
		{
			TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
			return 1;
		}
		if(ispassenger)
		{
			TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,COLOR_INFO,"Steige als Fahrer in das Kurrierfahrzeug, um die Mission zu starten.");
			return 1;
		}
		if(GetPVarInt(playerid,"Probefahrt") == 0)
		{
		    if(GetPVarInt(playerid,"FirstKurrierEnter") == 0)
		    {
				SendClientMessage(playerid,COLOR_ORANGE,"Bring das Kurrierfahrzeug schnell zum Abgabepunkt. (Roter Marker)");
		        SetPlayerCheckpoint(playerid,1424.7201,929.2430,10.5348,3.5);
		        SetPVarInt(playerid,"ImKurrierCar",1);
		        
	   			format(string,sizeof(string),"~g~%d~w~ Minuten",KurrierCarTime[kurrierid]);
	 			if(KurrierCarTime[kurrierid] == 10){format(string,sizeof(string),"~y~%d~w~ Minuten",KurrierCarTime[kurrierid]);}
	 			if(KurrierCarTime[kurrierid] == 5){format(string,sizeof(string),"~r~%d~w~ Minuten",KurrierCarTime[kurrierid]);}

				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][2],"KurrierCar");
				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][3],string);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][0]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][1]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][2]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][3]);
			}
			else
			{
				format(string,sizeof(string),"~g~%d~w~ Minuten",KurrierCarTime[kurrierid]);
	 			if(KurrierCarTime[kurrierid] == 10){format(string,sizeof(string),"~y~%d~w~ Minuten",KurrierCarTime[kurrierid]);}
	 			if(KurrierCarTime[kurrierid] == 5){format(string,sizeof(string),"~r~%d~w~ Minuten",KurrierCarTime[kurrierid]);}

				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][2],"KurrierCar");
				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][3],string);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][0]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][1]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][2]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][3]);
			}
		}
		else
		{
			format(string,sizeof(string),"Die Mission läuft in {FF0000}%d{FFFFFF} Minuten ab.",KurrierCarTime[kurrierid]);
			SendClientMessage(playerid,COLOR_WHITE,string);
	   }
  	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	DeletePVar(playerid,"News_Live");
    SetPlayerDrunkLevel(playerid, 0);
	KillTimer(FahrenTimer[playerid]);
	stopAC[playerid] = 2;
	AC_PlayerVeh[playerid] = -1;
	AC_PutedVehicle[playerid] = 0;
	EnterLockedV[playerid] = 0;
    if(GetPVarInt(playerid,"FSchein") != 0)
    {
		if(schulung[playerid] != 0)
		{
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FSchein");
			DeletePVar(playerid,"FahrschulCar");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Fehlerpunkte[playerid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			DeleteVehicle(vehicleid);
	        DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid,COLOR_SORRY,"Die Fahrschulprüfung wurde abgebrochen, da du das Fahrezug verlassen hast.");
		}
    }
	if(IsAMotorrad(vehicleid))
	{
        if(SpielerInfo[playerid][sHelm] > 0)
		{
			RemovePlayerAttachedObject(playerid, 3);
		}
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid,playerid,passenger_seat)
{
    for(new i=0;i<MAX_NAGELBAENDER;i++)
	{
	 	if(NagelBand[i][Erstellt] == true)
	    {
		  	if(IsVehicleInRangeOfPoint(vehicleid,2.0,NagelBand[i][oPosX],NagelBand[i][oPosY],NagelBand[i][oPosZ]))
		   	{
				UpdateVehicleDamageStatus(vehicleid,VEHICLE_PANEL_STATUS:0,VEHICLE_DOOR_STATUS:0,VEHICLE_LIGHT_STATUS:0,VEHICLE_TYRE_STATUS:ReifenPlatt(1,1,1,1));
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)
{
	new tmpcar = GetPlayerVehicleID(playerid);
	/*if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new ac_string[144];
 		if(EnterLockedV[playerid] == GetPlayerVehicleID(playerid))
 		{
   			SendClientMessage(playerid,AC_COLOR," ");
		    SendClientMessage(playerid,AC_COLOR,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Enter locked Vehicle");
      		KickPlayer(playerid,ac_string);
 		}
 		if(AC_PlayerVeh[playerid] != GetPlayerVehicleID(playerid) && !AC_PutedVehicle[playerid])
 		{
			SendClientMessage(playerid,AC_COLOR," ");
		    SendClientMessage(playerid,AC_COLOR,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Carjackhack");
      		KickPlayer(playerid,ac_string);
 		}
 		return AC_PutedVehicle[playerid] = 0;
	}*/
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
    	if(newstate == PLAYER_STATE_PASSENGER)
		{
		    new PlayerWeapon[2];
		    GetPlayerWeaponData(playerid, WEAPON_SLOT_MACHINE_GUN, WEAPON:PlayerWeapon[0], PlayerWeapon[1]);
		    if(PlayerWeapon[0] != 0){SetPlayerArmedWeapon(playerid,WEAPON:PlayerWeapon[0]);}
		    else SetPlayerArmedWeapon(playerid,WEAPON_FIST);
		}
  		if(IsAFahrrad(tmpcar))
	    {
   			GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(tmpcar, true, lights, alarm, doors, bonnet, boot, objective);
	    }
    	else
		{
  			if(!IsAFahrrad(tmpcar))
		    {
				new carname[46],Float:vHealth;
				GetVehicleHealth(tmpcar, vHealth);
				PlayerTextDrawSetPreviewModel(playerid, Tacho[playerid][1], GetVehicleModel(tmpcar));
				PlayerTextDrawSetPreviewVehicleColours(playerid, Tacho[playerid][1], FahrzeugInfo[tmpcar][fColor][0], FahrzeugInfo[tmpcar][fColor][1]);
				format(carname,sizeof(carname),"%i Kilometer",FahrzeugInfo[tmpcar][fKilometer]);
				PlayerTextDrawSetString(playerid, Tacho[playerid][9], carname);
				format(carname,sizeof(carname),"%s %.2f/%dL",TankArtName(tmpcar),FahrzeugInfo[tmpcar][fTank],VehicleData[GetVehicleModel(tmpcar)-400][vehLiter]);
				PlayerTextDrawSetString(playerid, Tacho[playerid][3], carname);
				PlayerTextDrawShow(playerid, Tacho[playerid][0]);
				PlayerTextDrawShow(playerid, Tacho[playerid][1]);
				PlayerTextDrawShow(playerid, Tacho[playerid][2]);
				PlayerTextDrawShow(playerid, Tacho[playerid][3]);
				PlayerTextDrawShow(playerid, Tacho[playerid][4]);
				format(carname,sizeof(carname),"Schaden %.0f%",((1000 - vHealth) / 10));
				PlayerTextDrawSetString(playerid, Tacho[playerid][5], carname);
				PlayerTextDrawShow(playerid, Tacho[playerid][5]);
				PlayerTextDrawShow(playerid, Tacho[playerid][6]);
				PlayerTextDrawShow(playerid, Tacho[playerid][7]);
				PlayerTextDrawShow(playerid, Tacho[playerid][8]);
				PlayerTextDrawShow(playerid, Tacho[playerid][9]);
				if(Motor[tmpcar] == true){PlayerTextDrawShow(playerid, Tacho[playerid][10]);}
				if(Licht[tmpcar] == true){PlayerTextDrawShow(playerid, Tacho[playerid][11]);}
				TachoTimer[playerid] = SetTimerEx("SpeedoMeter",MAX_TACHOTIME,true,"i",playerid);
				if(IsAMotorrad(tmpcar))
            	{
	                if(SpielerInfo[playerid][sHelm] == 0 && SpielerInfo[playerid][sTutorial] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Pass auf, dass die Polizei dich nicht erwischt. Besorge dir lieber einen Helm im OBI Baumarkt.");
                    SetPlayerAttachedObject(playerid,3,SpielerInfo[playerid][sHelm], 2, 0.07, 0.017, 0, 88, 75, 0);
				}
			}
		}
		if(FahrzeugInfo[tmpcar][fFahrschule] == 1)
		{
	        if(GetPVarInt(playerid,"FahrschulStunde") == 1)
			{
			    if(IsAMotorrad(tmpcar))
			    {
			        if(GetPVarInt(playerid,"FSchein") == 4 && GetPVarInt(playerid,"FahrschulCar") == 0)
			        {
     					RemovePlayerFromVehicle(playerid);
						CreateFCar(playerid,4);
						schulung[playerid] = 4;
						SetPlayerCheckpoint(playerid,825.0745,-1319.6958,12.9720,3.0);
						SendClientMessage(playerid, COLOR_YELLOW, "Der erste Checkpoint wurde gesetzt. Fahr Vorsichtig und halte dich an die Geschwindigkeitsbegrenzung.");
						SendClientMessage(playerid,COLOR_INFO,"* Du kannst den Motor mit '/motor' und das Licht mit '/licht' an/ausmachen.");
						return 1;
			        }
			        else
			        {
					 	RemovePlayerFromVehicle(playerid);
			    		SendClientMessage(playerid,COLOR_GREY,"Du nimmst an keiner Fahrstunde für diese Fahrzeugklasse teil.");
			    		return 1;
				    }
			    }
			    else if(IsAFlugzeug(tmpcar))
			    {
			        if(GetPVarInt(playerid,"FSchein") == 2 && GetPVarInt(playerid,"FahrschulCar") == 0)
			        {
                        RemovePlayerFromVehicle(playerid);
 						CreateFCar(playerid,2);
 						schulung[playerid] = 2;
						SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1055.9390,-1352.7063,63.7135,0,0,0,5.0);
						SendClientMessage(playerid, COLOR_YELLOW, "Der erste Checkpoint wurde gesetzt. Fliege Vorsichtig und nicht zu tief.");
						SendClientMessage(playerid,COLOR_INFO,"* Du kannst den Motor mit '/motor' anmachen.");
						return 1;
			        }
			        else
			        {
			    		RemovePlayerFromVehicle(playerid);
			    		SendClientMessage(playerid,COLOR_GREY,"Du nimmst an keiner Fahrstunde für diese Fahrzeugklasse teil.");
			    		return 1;
				    }
			    }
			    else if(IsALKW(tmpcar))
				{
				    if(GetPVarInt(playerid,"FSchein") == 3 && GetPVarInt(playerid,"FahrschulCar") == 0)
				    {
     					RemovePlayerFromVehicle(playerid);
						CreateFCar(playerid,3);
						schulung[playerid] = 3;
						SetPlayerCheckpoint(playerid,1055.9783,-1371.6139,12.9566,3.0);
						SendClientMessage(playerid,COLOR_INFO,"* Du kannst den Motor mit '/motor' und das Licht mit '/licht' an/ausmachen.");
						return 1;
			        }
			        else
			        {
			    		RemovePlayerFromVehicle(playerid);
			    		SendClientMessage(playerid,COLOR_GREY,"Du nimmst an keiner Fahrstunde für diese Fahrzeugklasse teil.");
			    		return 1;
				    }
				}
    			else if(IsABoot(tmpcar))
				{
				    if(GetPVarInt(playerid,"FSchein") != 5)
				    {
			    		RemovePlayerFromVehicle(playerid);
			    		SendClientMessage(playerid,COLOR_GREY,"Du nimmst an keiner Fahrstunde für diese Fahrzeugklasse teil.");
			    		return 1;
				    }
				    return 1;
				}
				else
				{
				    if(GetPVarInt(playerid,"FSchein") == 1 && GetPVarInt(playerid,"FahrschulCar") == 0)
				    {
     					RemovePlayerFromVehicle(playerid);
						CreateFCar(playerid,1);
						schulung[playerid] = 1;
						SetPlayerCheckpoint(playerid,1056.1189,-1349.9054,13.1140,3.0);
						SendClientMessage(playerid,COLOR_INFO,"* Du kannst den Motor mit '/motor' und das Licht mit '/licht' an/ausmachen.");
						return 1;
			        }
			        else
			        {
			    		RemovePlayerFromVehicle(playerid);
			    		SendClientMessage(playerid,COLOR_GREY,"Du nimmst an keiner Fahrstunde für diese Fahrzeugklasse teil.");
			    		return 1;
				    }
				}
			}
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Fahrstunde.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
	    SetPlayerArmedWeapon(playerid,WEAPON_FIST);
	    new name[24];
	    format(name,sizeof(name),"%s",SpielerInfo[playerid][sName]);
	    LastDriver[tmpcar] = name;
	    SetPlayerDrunkLevel(playerid, 0);
	    KillTimer(FahrenTimer[playerid]);
		if(IsALKW(tmpcar))
	    {
	        if(SpielerInfo[playerid][sTruckLic] == 0 && GetPVarInt(playerid,"FahrschulStunde") != 1)
	        {
				SendClientMessage(playerid,COLOR_GREY,"Du besitzt keinen Lastkraftwagenschein.");
	        	SendClientMessage(playerid,COLOR_GREY,"Wenn du von der Polizei kontrolliert wirst wird das Konsequenzen haben.");
                SetPlayerDrunkLevel(playerid, 8000);
                FahrenTimer[playerid] = SetTimerEx("OhneSchein",4000,true,"i",playerid);
			}
	    }
 		else if(IsAFlugzeug(tmpcar))
	    {
	        if(SpielerInfo[playerid][sFlugLic] == 0 && GetPVarInt(playerid,"FahrschulStunde") != 1)
	        {
				SendClientMessage(playerid,COLOR_GREY,"Du besitzt keinen Flugschein.");
	        	SendClientMessage(playerid,COLOR_GREY,"Wenn du von der Polizei kontrolliert wirst, wird das Konsequenzen haben.");
                SetPlayerDrunkLevel(playerid, 8000);
                FahrenTimer[playerid] = SetTimerEx("OhneSchein",4000,true,"i",playerid);
			}
		}
  		else if(IsAMotorrad(tmpcar))
	    {
	        if(SpielerInfo[playerid][sBikeLic] == 0 && GetPVarInt(playerid,"FahrschulStunde") != 1)
	        {
				SendClientMessage(playerid,COLOR_GREY,"Du besitzt keinen Motorradschein.");
	        	SendClientMessage(playerid,COLOR_GREY,"Wenn du von der Polizei kontrolliert wirst, wird das Konsequenzen haben.");
                SetPlayerDrunkLevel(playerid, 8000);
                FahrenTimer[playerid] = SetTimerEx("OhneSchein",4000,true,"i",playerid);
			}
		}
	    else if(!IsAFahrrad(tmpcar) || IsALKW(tmpcar) || IsAFlugzeug(tmpcar) || IsAMotorrad(tmpcar))
	    {
	        if(SpielerInfo[playerid][sCarLic] == 0 && GetPVarInt(playerid,"FahrschulStunde") != 1)
	        {
				SendClientMessage(playerid,COLOR_GREY,"Du besitzt keinen Führerschein.");
	        	SendClientMessage(playerid,COLOR_GREY,"Wenn du von der Polizei kontrolliert wirst, wird das Konsequenzen haben.");
                SetPlayerDrunkLevel(playerid, 8000);
                FahrenTimer[playerid] = SetTimerEx("OhneSchein",4000,true,"i",playerid);
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 1)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 1)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/beliefern' um ein Geschäft zu beliefern. Weitere Befehle unter '/help'.");
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 2)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 2)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/ausliefern' um die Pizzen auszuliefern. Weitere Befehle unter '/help'.");
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 3)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 3)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/startjob' um die Tour zu starten.");
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 4)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 4)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/startjob' um die Tour zu starten.");
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 5)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 5)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/startjob' um die Tour zu starten.");
			}
		}
		else if(FahrzeugInfo[tmpcar][fNebenjob] == 6)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 6)
            {
     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/startjob' um die Tour zu starten.");
			}
		}
 		else if(FahrzeugInfo[tmpcar][fNebenjob] == 7)
  		{
            if(SpielerInfo[playerid][sNebenjob] == 7)
            {
                if(GetPVarInt(playerid,"Landwirt2Time") == 0)
                {
	     			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid,COLOR_SUPER,"Benutze: '/startjob' um die Tour zu starten.");
			    }
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(GetPVarInt(playerid,"ImImportCar") == 1)
		{
			PlayerTextDrawHide(playerid,CountdownDraw[playerid][0]);
			PlayerTextDrawHide(playerid,CountdownDraw[playerid][1]);
			PlayerTextDrawHide(playerid,CountdownDraw[playerid][2]);
			PlayerTextDrawHide(playerid,CountdownDraw[playerid][3]);
		    DisablePlayerCheckpoint(playerid);
		    DeletePVar(playerid,"ImImportCar");
		}
	    StopAudioStreamForPlayer(playerid);
 		SetPlayerDrunkLevel(playerid, 0);
		KillTimer(FahrenTimer[playerid]);
		CarRadio[tmpcar] = 0;
		Radio[tmpcar] = false;
	    PlayerTextDrawHide(playerid, Tacho[playerid][0]);
		PlayerTextDrawHide(playerid, Tacho[playerid][1]);
		PlayerTextDrawHide(playerid, Tacho[playerid][2]);
		PlayerTextDrawHide(playerid, Tacho[playerid][3]);
		PlayerTextDrawHide(playerid, Tacho[playerid][4]);
		PlayerTextDrawHide(playerid, Tacho[playerid][5]);
		PlayerTextDrawHide(playerid, Tacho[playerid][6]);
		PlayerTextDrawHide(playerid, Tacho[playerid][7]);
		PlayerTextDrawHide(playerid, Tacho[playerid][8]);
		PlayerTextDrawHide(playerid, Tacho[playerid][9]);
		PlayerTextDrawHide(playerid, Tacho[playerid][10]);
		PlayerTextDrawHide(playerid, Tacho[playerid][11]);
	    KillTimer(TachoTimer[playerid]);
		if(CarRadio[tmpcar] == 1)//BaseLovers.FM
		{
			PlayAudioStreamForPlayer(playerid,"http://baselovers.fm/deinebeatz.pls");
			GameTextForPlayer(playerid,"~g~BaseLovers.FM",3000,3);
			CarRadio[tmpcar] = 1;
			Radio[tmpcar] = true;
		}
	    if(CarRadio[tmpcar] == 2)//ILoveRadio
		{
			PlayAudioStreamForPlayer(playerid,"http://www.iloveradio.de//listen.m3u");
			GameTextForPlayer(playerid,"~r~ILoveRadio",3000,3);
			CarRadio[tmpcar] = 2;
			Radio[tmpcar] = true;
		}
		if(CarRadio[tmpcar] == 3)//ILoveMashup
		{
			PlayAudioStreamForPlayer(playerid,"http://www.iloveradio.de/ilovemashup.m3u");
			GameTextForPlayer(playerid,"~r~ILoveMashup",3000,3);
			CarRadio[tmpcar] = 3;
			Radio[tmpcar] = true;
		}
		else if(CarRadio[tmpcar] == 4)//TechnoBase.FM
		{
			PlayAudioStreamForPlayer(playerid,"http://listen.technobase.fm/dsl.pls");
			GameTextForPlayer(playerid,"~r~TechnoBase.FM",3000,3);
			CarRadio[tmpcar] = 4;
			Radio[tmpcar] = true;
		}
		else if(CarRadio[tmpcar] == 5)//HouseTime.FM
		{
			PlayAudioStreamForPlayer(playerid,"listen.housetime.fm/dsl.pls");
			GameTextForPlayer(playerid,"~r~HouseTime.FM",3000,3);
			CarRadio[tmpcar] = 5;
			Radio[tmpcar] = true;
		}
		else if(CarRadio[tmpcar] == 6)//MyTrendBeatz.FM
		{
		    PlayAudioStreamForPlayer(playerid,"http://mytrendbeatz.fm:1050/listen.pls");
		    GameTextForPlayer(playerid,"~r~MyTrendBeatz.FM",3000,3);
			CarRadio[tmpcar] = 6;
			Radio[tmpcar] = true;
		}
		else if(CarRadio[tmpcar] == 7)//Ausschalten
		{
		    StopAudioStreamForPlayer(playerid);
			CarRadio[tmpcar] = 0;
			Radio[tmpcar] = false;
		}
	}
	return 1;
}


public OnPlayerPickUpPickup(playerid, pickupid)
{
    new str[900], string[7][164];
	if(pickupid == FallschirmPickup)//Fallschirm
 	{
 	    GivePlayerWeapon(playerid,WEAPON_PARACHUTE,1);
  		SendClientMessage(playerid, COLOR_WHITE, "Du hast einen Fallschirm erhalten. Viel Spaß & Glück beim springen.");
 	}
    else if(pickupid == ImportCarPickup)
    {
        if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid, COLOR_SORRY, "Für diese Spezial Mission benötigst min. das zweite Level.");
        SetPVarInt(playerid,"Mission",1);
		format(string[0],164,"{FFFFFF}Spezial Mission: {FB944F}Importfahrzeug der Stunde");
		format(string[1],164,"{FFFFFF}Begib dich zum Flugzeug Friedhof und suche das Importfahrzeug der Stunde. (Random zwischen den Flugzeugen)");
		format(string[2],164,"{FFFFFF}Wenn du das Flugzeug gefunden hast, steige in das Flugzeug ein und bringe es zum Abgabepunkt beim LS Hafen.");
		format(string[3],164,"{FFFFFF}--- {FF0000}BEACHTE {FFFFFF}--- {FFFFFF}Sobald du in das Fahrzeug eingestiegen bist, werden alle Spieler, sowie die");
		format(string[4],164,"{FFFFFF}Polizei benachrichtigt, dass du das Importfahrzeug der Stunde gestohlen hast. Du erhälst für das Stehlen des");
		format(string[5],164,"{FFFFFF}Fahrzeuges 2 Wanteds. Die Mission bedeutet also Geschick und Schnelligkeit.");
		format(string[6],164,"{FFFFFF}Verfügbar ab Rang: 2 | Belohnung: 6000$ - 8000$");
		format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5],string[6]);
        ShowPlayerDialog(playerid,DIALOG_MISSION,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Spezial Mission",str,"Annehmen","Ablehnen");
    }
    else if(pickupid == KurrierPickup[0] || pickupid == KurrierPickup[1] || pickupid == KurrierPickup[2])
    {
        if(GetPlayerScore(playerid) < 2)return SendClientMessage(playerid, COLOR_SORRY, "Für diese Spezial Mission benötigst min. das zweite Level.");
        if(SpielerInfo[playerid][sKurrier] == 1)return SendClientMessage(playerid, COLOR_SORRY, "Du kannst die Mission erst wieder nach deinem PayDay ausführen.");
        SetPVarInt(playerid,"Mission",2);
        format(string[0],164,"{FFFFFF}Spezial Mission: {FB944F}Kurrierdienst");
        if(pickupid == KurrierPickup[0])
		{
			SetPVarInt(playerid,"KurrierID",1);
			format(string[1],164,"{FFFFFF}Begib nach Dillimore und steige dort in das Kurrierfahrzeug ein.");
			format(string[2],164,"{FFFFFF}Anschließend musst du die Lieferung nach Las Venturas fahren.");
			format(string[3],164,"{FFFFFF}--- {FF0000}BEACHTE {FFFFFF}--- {FFFFFF}Du hast für die Abgabe der Lieferung nur 2 Minuten Zeit.");
		}
        else if(pickupid == KurrierPickup[1])
		{
			SetPVarInt(playerid,"KurrierID",2);
			format(string[1],164,"{FFFFFF}Begib nach Fort Carson und steige dort in das Kurrierfahrzeug ein.");
			format(string[2],164,"{FFFFFF}Anschließend musst du die Lieferung nach Las Venturas fahren.");
			format(string[3],164,"{FFFFFF}--- {FF0000}BEACHTE {FFFFFF}--- {FFFFFF}Du hast für die Abgabe der Lieferung nur 2 Minuten Zeit.");
		}
        else if(pickupid == KurrierPickup[2])
		{
			SetPVarInt(playerid,"KurrierID",3);
			format(string[1],164,"{FFFFFF}Begib nach oben zum Parkhaus und steige dort in das Kurrierfahrzeug ein.");
			format(string[2],164,"{FFFFFF}Anschließend musst du die Lieferung nach Los Santos fahren.");
			format(string[3],164,"{FFFFFF}--- {FF0000}BEACHTE {FFFFFF}--- {FFFFFF}Du hast für die Abgabe der Lieferung nur 4 Minuten Zeit.");
		}
		format(string[4],164,"{FFFFFF}Die Mission bedeutet also Geschick und Schnelligkeit.");
		format(string[5],164,"{FFFFFF}Verfügbar ab Rang: 2 | Belohnung: 3000$");
		format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
        ShowPlayerDialog(playerid,DIALOG_MISSION,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Spezial Mission",str,"Annehmen","Ablehnen");
    }
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	DisablePlayerCheckpoint(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid,5.0,1585.4338,-1608.5460,13.3828))
	{
	    if(SpielerInfo[playerid][sFraktion] == 2)
	    {
			new car = GetVehicleTrailer(GetPlayerVehicleID(playerid)), query[128];
			if(FahrzeugInfo[car][fFraktion] != 0 || FahrzeugInfo[car][fGruppe] != 0 || FahrzeugInfo[car][fFirma] != 0 || strlen(FahrzeugInfo[car][fBesitzer]) != 0)
			{
				PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug befindet sich nun in der Verwahrstelle.");
				if(strlen(FahrzeugInfo[car][fBesitzer]) != 0){
				format(query, sizeof(query), "SMS von 110 (SAPD): Sehr geeherte/r Bürger/in, Ihr %s befindet sich in unserer Verwahrstelle.",FahrzeugName[FahrzeugInfo[car][fModelID]-400]);
				SendClientMessage(FahrzeugInfo[car][fBesitzerID],COLOR_INFO,query);}
				FahrzeugInfo[car][fParkkralle] = 0;
				FahrzeugInfo[car][fAbgeschleppt] = 1;
				SavePrivatCarVehicle(car);
				DeleteVehicle(car);
				DisablePlayerCheckpoint(playerid);
				FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += 500;
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Du kannst dieses Fahrzeug nicht abschleppen.");
		}
  	}
	if(HFCP4[playerid] == 1)
	{
		HFCP4[playerid] = 0;
		GameTextForPlayer(playerid,"~r~Begebe dich~w~ nun in die ~r~Schreinerei ~w~hinein!",3000,4);
		SetPlayerCheckpoint(playerid,943.0914,2119.8123,1011.0850,1.0);
		PlayerPickup[playerid] = CreateDynamicPickup(1239, 1,943.0914,2119.8123,1011.0850, -1, -1, playerid);
		HFCP5[playerid] = 1;
		return true;
	}
	if(HFCP5[playerid] == 1)
	{
	    HFCP4[playerid] = 0;
	    HFCP5[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    DestroyDynamicPickup(PlayerPickup[playerid]);
	    TogglePlayerControllable(playerid, false);
	    GameTextForPlayer(playerid,"~w~Du bist nun in der ~r~Schreinerei!",3000,4);
	    SetTimerEx("SchreinereiIntro",5000,false,"i",playerid);
	    PlayerPickup[playerid] = CreateDynamicPickup(1239, 1,940.6644,2128.4592,1011.0850, -1, -1, playerid);
	    return true;
	}
	if(HFCP6[playerid] == 1)
	{
	    HFCP6[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.0,false,false,false,false,0);
        HolzNeu[playerid][0] = CreatePlayerObject(playerid,3534, 940.51831, 2129.99878, 1011.47998,   0.00000, 90.00000, 90.00000);
        SetPlayerObjectMaterial(playerid,HolzNeu[playerid][0],0,8870,"vgsecnstrct03","Gen_Scaffold_Wood_Under",0xFFFFFFFF);
        DestroyDynamicPickup(PlayerPickup[playerid]);
        MASCHINE[playerid] = 1;
        return true;
	}
	if(HFCP7[playerid] == 1) {
	    HFCP7[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    DestroyPlayerObject(playerid,HolzNeu[playerid][2]);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid, 0, 1463, 6, -0.026999,0.066000,-0.225999,72.799949,179.700119,-12.300072,0.249000,0.311000,0.286000);
		SetPlayerCheckpoint(playerid,934.9641,2118.8928,1011.0850,1.0);
		DestroyDynamicPickup(PlayerPickup[playerid]);
		HFCP8[playerid] = 1;
		return true;
	}
	if(HFCP8[playerid] == 1) {
	    HFCP8[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid,0);
		HolzNeu[playerid][3] = CreatePlayerObject(playerid,1463, 933.26508, 2118.89795, 1010.38000,   0.00000, 0.00000, 90.00000);
		SendClientMessage(playerid,COLOR_INFO,"Verlasse nun die Schreinerei und kehre zur Holzfäller-Base zurück!");
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,1080.9824,-344.4768,73.9823,3.0);
		HFCP10[playerid] = 1;
		return true;
	}
	if(HFCP10[playerid] == 1) {
	    new string[128], tmpcar = GetPVarInt(playerid,"HolzfallerAuto");
	    HFCP10[playerid] = 0;
	    grossBaum[playerid] = 0;
	    GBGefallt[playerid] = 0;
		HFCP2[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
		SetVehicleToRespawn(tmpcar);
		FahrzeugInfo[tmpcar][fJobFahrer] = 0;
		DeletePVar(playerid,"HolzfallerStufe");
 		DeletePVar(playerid,"HolzfallerArbeitet");
        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[10][jiGehalt]);
        SendClientMessage(playerid,COLOR_INFO,string);
        SpielerInfo[playerid][sPayDayGeld] += JobInfo[10][jiGehalt];
		return true;
	}
  	if(IsPlayerInRangeOfPoint(playerid,5.0,1945.9243,-1569.7150,13.5977) && ProbefahrtCar[playerid] != INVALID_VEHICLE_ID ||
	   IsPlayerInRangeOfPoint(playerid,5.0,1845.0406,-1397.4750,13.3906) && ProbefahrtCar[playerid] != INVALID_VEHICLE_ID ||
	   IsPlayerInRangeOfPoint(playerid,5.0,-1581.5812,1166.5559,6.7440) && ProbefahrtCar[playerid] != INVALID_VEHICLE_ID)
  	{
  	    KillTimer(ProbefahrtTimer[playerid]);
  	    if(ProbefahrtTime[playerid] > 0)
  	    {
  	        FahrzeugInfo[ProbefahrtCar[playerid]][fTank] = 0;
			ProbefahrtTime[playerid] = 0;
			DestroyVehicleEx(ProbefahrtCar[playerid]);
			SendClientMessage(playerid,COLOR_YELLOW,"Vielen Dank, wir hoffen Sie sind mit unserem Fahrzeug zufrieden gewesen.");
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
		    FahrzeugInfo[ProbefahrtCar[playerid]][fTank] = 0;
		    ProbefahrtTime[playerid] = 0;
			DestroyVehicleEx(ProbefahrtCar[playerid]);
			SendClientMessage(playerid,COLOR_YELLOW,"Vielen Dank, wir hoffen Sie sind mit unserem Fahrzeug zufrieden gewesen.");
			new string[128];
			format(string,sizeof(string),"Für Ihre Verspätung erheben wir eine Gebür von 1600$ von Ihrem Bankkonto.");
			SendClientMessage(playerid,COLOR_YELLOW,string);
			SpielerInfo[playerid][sBankkonto] -= 1600;
			format(string,sizeof(string),"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(playerid));
			SendClientMessage(playerid,COLOR_YELLOW,string);
			format(string,sizeof(string),"ZENTRALE: Das Autohaus meldet das der Flüchtige %s das Fahrzeug soeben zurückgebracht habe.",SpielerInfo[playerid][sName]);
			SendCopMessage(COLOR_BLUE,string);
			DisablePlayerCheckpoint(playerid);
		}
		DeletePVar(playerid,"ProbeFahrt");
		PlayerTextDrawHide(playerid, CountdownDraw[playerid][0]);
		PlayerTextDrawHide(playerid, CountdownDraw[playerid][1]);
		PlayerTextDrawHide(playerid, CountdownDraw[playerid][2]);
		PlayerTextDrawHide(playerid, CountdownDraw[playerid][3]);
		SpielerInfo[playerid][sPerso] = 1;
		SendClientMessage(playerid,COLOR_GREY,"INFO: Du hast deinen Perso wiederbekommen.");
		DisablePlayerCheckpoint(playerid);
  	}
  	if(IsPlayerInRangeOfPoint(playerid,5.0,2607.1702,-2187.9561,14.1298))
  	{
		if(SpielerInfo[playerid][sNebenjob] == 1)
		{
		    if(GetVehicleTrailer(vehicleid) != SpielerLKWTrailer[playerid])return SendClientMessage(playerid,COLOR_SORRY,"Das ist nicht dein Anhänger.");
		    TogglePlayerControllable(playerid, false);
		    ShowPlayerDialog(playerid,DIALOG_TRAILER_TTANKAUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Benzin\nDiesel\nKerosin","Weiter","");
		    DisablePlayerCheckpoint(playerid);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,2153.7937,-2290.0913,13.3805))
	{
	    if(SpielerInfo[playerid][sNebenjob] == 1)
	    {
		    Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
		    FahrzeugTank[vehicleid] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];
		    DeletePVar(playerid,"TrailerBetanken");
		    DestroyVehicleEx(SpielerLKWTrailer[playerid]);
		    SetVehicleToRespawn(vehicleid);
		    SpielerLKWTrailer[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
	  	}
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2]))
	{
	    if(SpielerInfo[playerid][sNebenjob] != 2)return NichtBerechtigt
	    if(GetPVarInt(playerid,"PizzaTragen") == 0)
	    {
			SendClientMessage(playerid,COLOR_SUPER,"Steig wieder in dein Dienstfahrzeug und öffne den Kofferraum mit '/fahrzeug'.");
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
		    new hs;
		    DeletePVar(playerid,"PizzaTragen");
		    RemovePlayerAttachedObject(playerid,0);
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    PlayAudioStreamForPlayer(playerid,"https://rosalife.de/sounds/Pizzabote.mp3");
		    SendClientMessage(playerid,COLOR_SUPER,"Sehr gut. Der nächste Kunde wartet bereits auf seine Pizza.");
		    SendClientMessage(playerid,COLOR_SUPER,"Steige jetzt wieder in das Dienstfahrzeug und begebe dich zum nächsten Kunden.");
		    DisablePlayerCheckpoint(playerid);
			loop_erneut:
            for(new mf=1;mf<MAX_HAUSER;mf++)
            {
                hs = 1+random(MAX_HAUSER);
                if(HausInfo[hs][hsErstellt] == false || HausInfo[hs][hsOrt] != 1 || HausInfo[hs][hsPos_X] == PizzaKundenPos[playerid][0] || hs == 1)goto loop_erneut;
				PizzaKundenPos[playerid][0] = HausInfo[hs][hsPos_X];
				PizzaKundenPos[playerid][1] = HausInfo[hs][hsPos_Y];
				PizzaKundenPos[playerid][2] = HausInfo[hs][hsPos_Z];
				SetPlayerCheckpoint(playerid,HausInfo[hs][hsPos_X],HausInfo[hs][hsPos_Y],HausInfo[hs][hsPos_Z],3.0);
				break;
            }
		    if(PizzaAusgeliefert[playerid] == 0){PizzaAusgeliefert[playerid] = 1;}
		    else if(PizzaAusgeliefert[playerid] == 1){PizzaAusgeliefert[playerid] = 2;}
		    else if(PizzaAusgeliefert[playerid] == 2){PizzaAusgeliefert[playerid] = 3;}
		    else if(PizzaAusgeliefert[playerid] == 3){PizzaAusgeliefert[playerid] = 4;}
		    else if(PizzaAusgeliefert[playerid] == 4)
			{
			    SendClientMessage(playerid,COLOR_SUPER,"Das waren alle Pizzen. Begebe dich nun zum roten Marker um dein Geld zu erhalten.");
			    SetPlayerCheckpoint(playerid,2095.8269,-1799.6149,13.0425,5.0);
				PizzaAusgeliefert[playerid] = 5;
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,PizzaKofferraumPos[playerid][0],PizzaKofferraumPos[playerid][1],PizzaKofferraumPos[playerid][2]))
	{
	    if(SpielerInfo[playerid][sNebenjob] != 2)return NichtBerechtigt
	    if(GetPVarInt(playerid,"PizzaTragen") == 0)
	    {
	        SetPVarInt(playerid,"PizzaTragen",1);
	        TogglePlayerControllable(playerid, false);
	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
   			PizzaRausnehmenTimer[playerid] = SetTimerEx("PizzaRausnehmen",2000,false,"i",playerid);
	    	GameTextForPlayer(playerid, "~r~Bitte warten...", 2000, 5);
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GREY,"Du hast bereits die Pizza vom Kunden auf der Hand.");
		    SendClientMessage(playerid,COLOR_GREY,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		    SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,MuellHausPos[playerid][0],MuellHausPos[playerid][1],MuellHausPos[playerid][2]))
	{
	    if(SpielerInfo[playerid][sNebenjob] != 6)return NichtBerechtigt
	    SetPVarInt(playerid,"MüllBeutelHand",1);
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, false, true, true, true, 1, SYNC_ALL);
	    ClearAnimations(playerid);
	    SetPlayerAttachedObject(playerid,0,1264,6,0.165999,0.003000,-0.184999,0.000000,0.000000,0.000000,0.498999,0.466999,0.489000);
	    SendClientMessage(playerid,COLOR_SUPER,"Sehr gut. Bringe den Müll nun in den Müllwagen.");
	    DisablePlayerCheckpoint(playerid);
		new Float:x, Float:y, Float:z;
		GetXYInFrontOfVehicle(GetPVarInt(playerid,"MüllAuto"),x,y,z,-4.5);
		MuellAutoPos[playerid][0] = x;
		MuellAutoPos[playerid][1] = y;
		MuellAutoPos[playerid][2] = z;
	    SetPlayerCheckpoint(playerid,MuellAutoPos[playerid][0],MuellAutoPos[playerid][1],MuellAutoPos[playerid][2],3.0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,MuellAutoPos[playerid][0],MuellAutoPos[playerid][1],MuellAutoPos[playerid][2]))
	{
	    new vehid = GetPVarInt(playerid,"MüllAuto"), string[144];
	    if(SpielerInfo[playerid][sNebenjob] != 6)return NichtBerechtigt
	    if(GetPVarInt(playerid,"MüllBeutel") < 10)
	    {
		    DeletePVar(playerid,"MüllBeutelHand");
		    SetPVarInt(playerid,"MüllBeutel",GetPVarInt(playerid,"MüllBeutel")+1);
			format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nMüll: {FF0000}%d{FFFFFF} Liter", SpielerInfo[playerid][sName],GetPVarInt(playerid,"MüllBeutel"));
	 		Update3DTextLabelText(FahrzeugInfo[vehid][fLabel], COLOR_WHITE, string);
	 		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, false, true, true, true, 1, SYNC_ALL);
		    ClearAnimations(playerid);
		    RemovePlayerAttachedObject(playerid,0);
	        DisablePlayerCheckpoint(playerid);
	        loop_start3:
	        for(new mf=1;mf<MAX_HAUSER;mf++)
	        {
	            new hs = 1+random(MAX_HAUSER);
	            if(HausInfo[hs][hsErstellt] == false || HausInfo[hs][hsOrt] != 1)goto loop_start3;
				MuellHausPos[playerid][0] = HausInfo[hs][hsPos_X];
				MuellHausPos[playerid][1] = HausInfo[hs][hsPos_Y];
				MuellHausPos[playerid][2] = HausInfo[hs][hsPos_Z];
				SetPlayerCheckpoint(playerid,HausInfo[hs][hsPos_X],HausInfo[hs][hsPos_Y],HausInfo[hs][hsPos_Z],1.5);
	   			SendClientMessage(playerid,COLOR_SUPER,"Begib dich nun zum nächsten Haus.");
				break;
		 	}
		}
		else
		{
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, false, true, true, true, 1, SYNC_ALL);
		    ClearAnimations(playerid);
		    RemovePlayerAttachedObject(playerid,0);
		    SetPlayerCheckpoint(playerid,1770.9084,-2022.5839,14.1376,3.0);
		    SendClientMessage(playerid,COLOR_INFO,"Dein Müllwagen ist voll. Bringe ihn zurück zur Firma, um dein Gehalt zu erhalten.");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1770.9084,-2022.5839,14.1376) && GetPVarInt(playerid,"MüllBeutel") == 10 && SpielerInfo[playerid][sNebenjob] == 6)
	{
	    TogglePlayerControllable(playerid, false);
 		GameTextForPlayer(playerid,"~r~Muellwagen wird entleert~n~~w~Bitte warten...",10000,4);
 		MuellmannTimer[playerid] = SetTimerEx("MuellEntleeren",10000,false,"i",playerid);
	    DisablePlayerCheckpoint(playerid);
	}
 	if(IsPlayerInRangeOfPoint(playerid,5.0,2095.8269,-1799.6149,13.0425) && PizzaAusgeliefert[playerid] == 5)
	{
	    if(FahrzeugInfo[vehicleid][fNebenjob] != 2)return 1;
	    new string[128], tmpcar = GetPVarInt(playerid,"PizzaAuto");
	    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
	    SetVehicleToRespawn(tmpcar);
	    FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	    DeletePVar(playerid,"PizzaTragen");
	    DeletePVar(playerid,"PizzaGeholt");
	    DeletePVar(playerid,"PizzaAusliefern");
	    PizzaKundenPos[playerid][0] = 0;
	    PizzaKundenPos[playerid][1] = 0;
	    PizzaKundenPos[playerid][2] = 0;
	    PizzaKofferraumPos[playerid][0] = 0;
	    PizzaKofferraumPos[playerid][1] = 0;
	    PizzaKofferraumPos[playerid][2] = 0;
		PizzaAusgeliefert[playerid] = 0;
        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[2][jiGehalt]);
        SendClientMessage(playerid,COLOR_INFO,string);
        SpielerInfo[playerid][sPayDayGeld] += JobInfo[2][jiGehalt];
	    DisablePlayerCheckpoint(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,1369.3030,-1648.6495,13.3828))
	{
	    if(FahrzeugInfo[vehicleid][fNebenjob] == 3)
	    {
			new string[128], tmpcar = GetPVarInt(playerid,"Kehrmaschine");
		    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter");
		    SetVehicleToRespawn(tmpcar);
	        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[3][jiGehalt]);
	        SendClientMessage(playerid,COLOR_INFO,string);
	        SpielerInfo[playerid][sPayDayGeld] += JobInfo[3][jiGehalt];
	        FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	   	    DeletePVar(playerid,"Kehrmaschine");
			DeletePVar(playerid,"KehrmaschinenAuftrag");
			DeletePVar(playerid,"KfahrerArbeitet");
		    DisablePlayerCheckpoint(playerid);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,1480.9746,-1771.4373,18.7958))
	{
	    SendClientMessage(playerid,COLOR_SUPER,"Betrete nun die Stadhalle und begib dich zu Michelle S.");
		DisablePlayerCheckpoint(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,1480.9572,-1743.6293,13.5469) || IsPlayerInRangeOfPoint(playerid,5.0,1779.4395,-1722.1451,13.5390)
	|| IsPlayerInRangeOfPoint(playerid,5.0,1276.3075,-1337.8020,13.3573) || IsPlayerInRangeOfPoint(playerid,5.0,1000.9811,-1347.8755,13.3498))
	{
	    SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Ziel erreicht.");
	    DisablePlayerCheckpoint(playerid);
	}
 	if(IsPlayerInRangeOfPoint(playerid,5.0,375.8552,-2054.8748,8.0156))
	{
	    if(GetPVarInt(playerid,"GeldImGeldsack") != 0)
	    {
			if(IsPlayerInAnyVehicle(playerid))return SetPlayerCheckpoint(playerid,375.8552,-2054.8748,8.0156,5.0);
			new str[128];
		    format(str,sizeof(str),"Gut gemacht! Du hast durch den Ladenraub +%d$ erhalten.",GetPVarInt(playerid,"GeldImGeldsack"));
		    SendClientMessage(playerid,COLOR_SUPER,str);
		    GivePlayerMoneyEx(playerid,GetPVarInt(playerid,"GeldImGeldsack"));
		    DeletePVar(playerid,"GeldImGeldsack");
		    DeletePVar(playerid,"HatGeldsack");
		    RemovePlayerAttachedObject(playerid,0);
			DisablePlayerCheckpoint(playerid);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,7.0,2061.6660,-2593.2915,14.2723) || IsPlayerInRangeOfPoint(playerid,7.0,-1642.5271,-149.6707,14.8681)
	|| IsPlayerInRangeOfPoint(playerid,7.0,1388.8792,1683.4226,11.5457))
	{
	    if(SpielerInfo[playerid][sNebenjob] == 4)
	    {
   			new tmpcar = GetPVarInt(playerid,"FlugID");
		    if(FahrzeugInfo[vehicleid][fNebenjob] != 4)return 1;
            if(GetPVarInt(playerid,"PilotArbeitet") >= 1 && GetPVarInt(playerid,"PilotArbeitet") != 4)
            {
		        TogglePlayerControllable(playerid, false);
				PilotenTimer[playerid] = SetTimerEx("PilotRoute",15000,false,"i",playerid);
				GameTextForPlayer(playerid,"~w~Das Flugzeug wird beladen. Bitte warten...",15000,4);
			}
			else if(GetPVarInt(playerid,"PilotArbeitet") == 4)
			{
 				new string[128];
			    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
			    SetVehicleToRespawn(tmpcar);
		        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[4][jiGehalt]);
		        SendClientMessage(playerid,COLOR_INFO,string);
		        SpielerInfo[playerid][sPayDayGeld] += JobInfo[4][jiGehalt];
		        SpielerInfo[playerid][sJobEXP][3] += 1;
		        if(SpielerInfo[playerid][sJobEXP][3] < 150)
				{
			        format(string,sizeof(string),"Du hast zusätzlich +1 Erfahrung bekommen. Erfahrungen: %d/150",SpielerInfo[playerid][sJobEXP][3]);
			        SendClientMessage(playerid,COLOR_INFO,string);
				}
		        else if(SpielerInfo[playerid][sJobEXP][3] >= 150)
				{
			        format(string,sizeof(string),"Du hast zusätzlich +1 Erfahrung bekommen. Erfahrungen: %d/300",SpielerInfo[playerid][sJobEXP][3]);
			        SendClientMessage(playerid,COLOR_INFO,string);
				}
				FahrzeugInfo[tmpcar][fJobFahrer] = 0;
		   	    DeletePVar(playerid,"FlugID");
				DeletePVar(playerid,"PilotArbeitet");
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	}
	if(FahrzeugInfo[vehicleid][fNebenjob] == 3)
	{
		if(IsPlayerInRangeOfPoint(playerid,1.5,MuellRouteInfo[GetPVarInt(playerid,"KehrmaschinenAuftrag")][mrPos_X],MuellRouteInfo[GetPVarInt(playerid,"KehrmaschinenAuftrag")][mrPos_Y],MuellRouteInfo[GetPVarInt(playerid,"KehrmaschinenAuftrag")][mrPos_Z]))
		{
		    new tmpcar = GetPVarInt(playerid,"Kehrmaschine");
		    if(FahrzeugInfo[tmpcar][fNebenjob] == SpielerInfo[playerid][sNebenjob])
		    {
			    new string[128];
			    SetPVarInt(playerid,"MuellLiter",GetPVarInt(playerid,"MuellLiter")+1);
			    DisablePlayerCheckpoint(playerid);
			    DestroyDynamicObject(MuellObjekt[playerid][GetPVarInt(playerid,"KehrmaschinenAuftrag")]);
			    format(string, sizeof(string), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nMüll: {FF0000}%d{FFFFFF} Liter", SpielerInfo[playerid][sName], GetPVarInt(playerid,"MuellLiter"));
				Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, string);
				if(GetPVarInt(playerid,"KehrmaschinenAuftrag") != 28)
				{
					SetPVarInt(playerid,"KehrmaschinenAuftrag",GetPVarInt(playerid,"KehrmaschinenAuftrag")+1);
					new id = GetPVarInt(playerid,"KehrmaschinenAuftrag");
					SetPlayerCheckpoint(playerid,MuellRouteInfo[id][mrPos_X],MuellRouteInfo[id][mrPos_Y],MuellRouteInfo[id][mrPos_Z],1.5);
				}
				else
				{
					SetPlayerCheckpoint(playerid,1369.3030,-1648.6495,13.3828,5.0);
				    SendClientMessage(playerid,COLOR_SUPER,"Das war alles. Bring die Kehrmaschine jetzt wieder zurück um dein Gehalt zu bekommen.");
				}
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Du sitzt in keinem Jobfahrzeug.");
		}
  	}
	if(SpielerInfo[playerid][sNebenjob] == 5)//Busfahrer
	{
	    if(GetPVarInt(playerid,"BusfahrerArbeitet") == 1)
  		{
  		    if(FahrzeugInfo[vehicleid][fNebenjob] == 5)
			{
	   			new id = GetBusRouteID(GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
				if(id == -1)return printf("Fehler aufgetreten!.%d %d",GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
				if(IsPlayerInRangeOfPoint(playerid,5.0,BusRouteInfo[id][bPos_X],BusRouteInfo[id][bPos_Y],BusRouteInfo[id][bPos_Z]))
	   			{
	 	    		new string[128], tmpcar = GetPVarInt(playerid,"BusID");
				    if(FahrzeugInfo[tmpcar][fNebenjob] != SpielerInfo[playerid][sNebenjob])return SendClientMessage(playerid,COLOR_SORRY,"Du sitzt in keinem Jobfahrzeug.");
	   			    if(GetPVarInt(playerid,"BusfahrerLinie") == 1 && GetPVarInt(playerid,"BusfahrerRoute") == 12)
	   			    {
	   			        ShowPlayerDialog(playerid,DIALOG_BUSFAHRER_ASK,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Busfahrer","Weiter Jobben\nAufhören","Bestätigen","Abbrechen");
			        	format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[5][jiGehalt]);
				        SendClientMessage(playerid,COLOR_INFO,string);
				        SpielerInfo[playerid][sPayDayGeld] += JobInfo[5][jiGehalt];
				        SpielerInfo[playerid][sJobEXP][4] += 1;

				        DeletePVar(playerid,"BusfahrerLinie");
				        DeletePVar(playerid,"BusfahrerRoute");
	   			    }
	   			    else if(GetPVarInt(playerid,"BusfahrerLinie") == 2 && GetPVarInt(playerid,"BusfahrerRoute") == 27)
	   			    {
	  				    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
					    SetVehicleToRespawn(tmpcar);
				        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[5][jiGehalt]);
				        SendClientMessage(playerid,COLOR_INFO,string);
				        SpielerInfo[playerid][sPayDayGeld] += JobInfo[5][jiGehalt];
				        SpielerInfo[playerid][sJobEXP][4] += 1;
				        DeletePVar(playerid,"BusID");
				        DeletePVar(playerid,"BusfahrerArbeitet");
				        DeletePVar(playerid,"BusfahrerLinie");
				        DeletePVar(playerid,"BusfahrerRoute");
				        FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	   			    }
	   			    else if(GetPVarInt(playerid,"BusfahrerLinie") == 3 && GetPVarInt(playerid,"BusfahrerRoute") == 38)
	   			    {
	  				    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
					    SetVehicleToRespawn(tmpcar);
				        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[5][jiGehalt]);
				        SendClientMessage(playerid,COLOR_INFO,string);
				        SpielerInfo[playerid][sPayDayGeld] += JobInfo[5][jiGehalt];
				        SpielerInfo[playerid][sJobEXP][4] += 1;
				        DeletePVar(playerid,"BusID");
				        DeletePVar(playerid,"BusfahrerArbeitet");
				        DeletePVar(playerid,"BusfahrerLinie");
				        DeletePVar(playerid,"BusfahrerRoute");
				        FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	   			    }
	   			    else if(GetPVarInt(playerid,"BusfahrerLinie") == 4 && GetPVarInt(playerid,"BusfahrerRoute") == 50)
	   			    {
	  				    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
					    SetVehicleToRespawn(tmpcar);
				        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[5][jiGehalt]);
				        SendClientMessage(playerid,COLOR_INFO,string);
				        SpielerInfo[playerid][sPayDayGeld] += JobInfo[5][jiGehalt];
				        SpielerInfo[playerid][sJobEXP][4] += 1;
				        DeletePVar(playerid,"BusID");
				        DeletePVar(playerid,"BusfahrerArbeitet");
				        DeletePVar(playerid,"BusfahrerLinie");
				        DeletePVar(playerid,"BusfahrerRoute");
				        FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	   			    }
	   			    else
	   			    {
	   			        SetPVarInt(playerid,"AnBusHaltestelle",1);
		      			TogglePlayerControllable(playerid, false);
						BusfahrerTimer[playerid] = SetTimerEx("Busfahrer",1000,true,"i",playerid);
						SetPVarInt(playerid,"BusCountdown",10);
		    			GameTextForPlayer(playerid, "Weiterfahrt in~n~~b~10 sec", 1000, 5);
					}
				}
			}
  		}
	}
	if(SpielerInfo[playerid][sNebenjob] == 7)//Landwirt
	{
		if(IsPlayerInRangeOfPoint(playerid,3.5,-105.4470,72.9262,3.1172) &&
		GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtStufe") >= 1)
		{
		    new vehid = GetPVarInt(playerid,"LandwirtAuto");
		    if(GetPVarInt(playerid,"LandwirtStufe") == 1)
		    {
			    DisablePlayerCheckpoint(playerid);
				new trailerid, Float:Pos[3];
				GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
				trailerid = CreateVehicle(610,Pos[0]+2,Pos[1]+2,Pos[2]+0.5,0,1,1,-1);
			    SendClientMessage(playerid,COLOR_SUPER,"Gut nun fahre mit dem Traktor die einzelnen Checkpoints ab.");
				SetPlayerCheckpoint(playerid,LandwirtInfo[0][lPos_X],LandwirtInfo[0][lPos_Y],LandwirtInfo[0][lPos_Z],2.5);
				SetPVarInt(playerid,"TraktorTrailer",trailerid);
			}
			else if(GetPVarInt(playerid,"LandwirtStufe") == 2)
			{
			    DestroyVehicle(GetPVarInt(playerid,"TraktorTrailer"));
	 	    	Update3DTextLabelText(FahrzeugInfo[vehid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
		    	SetVehicleToRespawn(vehid);
		    	FahrzeugInfo[vehid][fJobFahrer] = 0;
		    	DeletePVar(playerid,"TraktorTrailer");
		    	DeletePVar(playerid,"LandwirtAuto");
		    	DeletePVar(playerid,"LandwirtAbgabe");
		    	SetPVarInt(playerid,"Landwirt2Time",1);
	            SetPVarInt(playerid,"LandwirtAutoHolen",1);
		    	GameTextForPlayer(playerid,"~w~Steige nun in ein ~r~Meadrescher ~w~ein",3000,4);
			}
			else if(GetPVarInt(playerid,"LandwirtStufe") == 3)
			{
	 	    	Update3DTextLabelText(FahrzeugInfo[vehid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
		    	SetVehicleToRespawn(vehid);
		    	FahrzeugInfo[vehid][fJobFahrer] = 0;
		    	DeletePVar(playerid,"LandwirtAuto");
	            DeletePVar(playerid,"LandwirtAbgabe");
		    	SetPVarInt(playerid,"Landwirt2Time",1);
		    	SetPVarInt(playerid,"LandwirtAutoHolen",2);
		    	GameTextForPlayer(playerid,"~w~Steige nun in ein ~r~Walton ~w~ein",3000,4);
			}
			else if(GetPVarInt(playerid,"LandwirtStufe") == 5)
			{
	  			new string[128], tmpcar = GetPVarInt(playerid,"LandwirtAuto");
			    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
			    SetVehicleToRespawn(tmpcar);
			    FahrzeugInfo[tmpcar][fJobFahrer] = 0;
		 		DeletePVar(playerid,"LandwirtArbeitet");
				DeletePVar(playerid,"Landwirt2Time");
				DeletePVar(playerid,"LandwirtMerker");
				DeletePVar(playerid,"LandwirtStufe2Obj");
				DeletePVar(playerid,"LandwirtHatWalton");
				DeletePVar(playerid,"HatHeuballen");
			    WaltonKofferraumPos[playerid][0] = 0;
			    WaltonKofferraumPos[playerid][1] = 0;
			    WaltonKofferraumPos[playerid][2] = 0;
		        format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[7][jiGehalt]);
		        SendClientMessage(playerid,COLOR_INFO,string);
		        SpielerInfo[playerid][sPayDayGeld] += JobInfo[7][jiGehalt];
			    DisablePlayerCheckpoint(playerid);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.5,-23.2852,-274.7156,5.4197) && GetPVarInt(playerid,"HeuballenAbgabe") == 1)
		{
		    DeletePVar(playerid,"HeuballenAbgabe");
		    TogglePlayerControllable(playerid,false);
		    GameTextForPlayer(playerid,"~w~Walton wird entladen. Bitte warten...",10000,4);
		    LandwirtTimer[playerid] = SetTimerEx("HeuballenAbgabe",10000,false,"i",playerid);
		    DisablePlayerCheckpoint(playerid);
		}
  	}
	if(IsPlayerInRangeOfPoint(playerid,2.5,LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_X],LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_Y],LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_Z]) &&
			GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtStufe") == 1)
	{
		DisablePlayerCheckpoint(playerid);
 		new id = GetPVarInt(playerid,"LandwirtCheckpoint");
    	LandwirtObjekt[playerid][id] = CreateDynamicObject(LandwirtInfo[id][lObjekt], LandwirtInfo[id][lPos_X],LandwirtInfo[id][lPos_Y],LandwirtInfo[id][lPos_Z], LandwirtInfo[id][lRPos_X],LandwirtInfo[id][lRPos_Y],LandwirtInfo[id][lRPos_Z], -1, -1, playerid, 200.0);
    	SetPVarInt(playerid,"LandwirtCheckpoint",GetPVarInt(playerid,"LandwirtCheckpoint")+1);
		if(GetPVarInt(playerid,"LandwirtCheckpoint") == 24)
    	{
        	SetPVarInt(playerid,"LandwirtStufe",2);
       		SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
       		SetPVarInt(playerid,"LandwirtAbgabe",1);
        	SendClientMessage(playerid,COLOR_INFO,"Bringe den Traktor zum roten Marker um ihn abzugeben.");
    	}
    	else
		{
		    new id2 = GetPVarInt(playerid,"LandwirtCheckpoint");
			SetPlayerCheckpoint(playerid,LandwirtInfo[id2][lPos_X],LandwirtInfo[id2][lPos_Y],LandwirtInfo[id2][lPos_Z],2.5);
		}
    }
	if(IsPlayerInRangeOfPoint(playerid,2.5,LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_X],LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_Y],LandwirtInfo[GetPVarInt(playerid,"LandwirtCheckpoint")][lPos_Z]) &&
			GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtStufe") == 2)
	{
		if(GetPVarInt(playerid,"LandwirtMerker") == 0)
	 	{
	 	    SetPVarInt(playerid,"LandwirtMerker",1);
	 	    SetPVarInt(playerid,"LandwirtCheckpoint",48);
	 	    SetPVarInt(playerid,"LandwirtStufe2Obj",24);
            DestroyDynamicObject(LandwirtObjekt[playerid][24]);
            LandwirtObjekt[playerid][24] = -1;
        }
		else
		{
        	SetPVarInt(playerid,"LandwirtStufe2Obj",GetPVarInt(playerid,"LandwirtStufe2Obj")+1);
            DestroyDynamicObject(LandwirtObjekt[playerid][GetPVarInt(playerid,"LandwirtStufe2Obj")]);
            LandwirtObjekt[playerid][GetPVarInt(playerid,"LandwirtStufe2Obj")] = -1;
	 	}
	 	new id = GetPVarInt(playerid,"LandwirtCheckpoint");
		LandwirtObjekt[playerid][id] = CreateDynamicObject(LandwirtInfo[id][lObjekt], LandwirtInfo[id][lPos_X],LandwirtInfo[id][lPos_Y],LandwirtInfo[id][lPos_Z], LandwirtInfo[id][lRPos_X],LandwirtInfo[id][lRPos_Y],LandwirtInfo[id][lRPos_Z], -1, -1, playerid, 200.0);
		SetPVarInt(playerid,"LandwirtCheckpoint",GetPVarInt(playerid,"LandwirtCheckpoint")+1);
		if(GetPVarInt(playerid,"LandwirtCheckpoint") == 72)
    	{
        	SetPVarInt(playerid,"LandwirtStufe",3);
        	SetPVarInt(playerid,"LandwirtAbgabe",2);
       		SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
        	SendClientMessage(playerid,COLOR_INFO,"Bringe den Mähdrescher zum roten Marker um ihn abzugeben.");
    	}
    	else
		{
			new id2 = GetPVarInt(playerid,"LandwirtCheckpoint");
			SetPlayerCheckpoint(playerid,LandwirtInfo[id2][lPos_X],LandwirtInfo[id2][lPos_Y],LandwirtInfo[id2][lPos_Z],2.5);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,WaltonKofferraumPos[playerid][0],WaltonKofferraumPos[playerid][1],WaltonKofferraumPos[playerid][2]) &&
			GetPVarInt(playerid,"LandwirtArbeitet") == 1 && GetPVarInt(playerid,"LandwirtStufe") == 3 && GetPVarInt(playerid,"HatHeuballen") == 1)
 	{
		if(GetPVarInt(playerid,"LandwirtHatWalton") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast noch keinen Walton als Jobfahrzeug.");
	    if(GetPVarInt(playerid,"HatHeuballen") == 0)return SendClientMessage(playerid,COLOR_SORRY,"Hebe erst einen Heuballen auf, um sie anschließend in den Walton legen zu können.");
	    new Float:x, Float:y, Float:z, merker = true;
		GetXYInFrontOfVehicle(GetPVarInt(playerid,"LandwirtAuto"),x,y,z,-2.02);
	    if(IsPlayerInRangeOfPoint(playerid,3.0,x,y,z))
	    {
		    new vehid = GetPVarInt(playerid,"LandwirtAuto");
			GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, true, objective);
		    TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "~r~Bitte warten...", 3000, 5);
			PizzaReinlegenTimer[playerid] = SetTimerEx("HeuballenReinlegen",2000,true,"i",playerid);
	   		merker = false;
	    }
	    if(merker)
		{
	        SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht am Kofferraum des Waltons.");
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid,3.5,2415.0757,-2468.6069,13.3313))
	{
	    if(GetPVarInt(playerid,"ImImportCar") == 1)
	    {
			new PLAYER_STATE:State = GetPlayerState(playerid);
			if(State == PLAYER_STATE_DRIVER)
			{
			    if(GetPlayerVehicleID(playerid) == ImportCar)
			    {
				    new str[144], RandomMoney = 6000+random(2001);
                    SetPlayerPos(playerid,-2433.4509,2313.6296,4.9844);
				    format(str,sizeof(str),"Spieler %s hat das Importfahrzeug erfolgreich abgeliefert. Belohnung: %d$",SpielerInfo[playerid][sName],RandomMoney);
				    SendClientMessageToAll(COLOR_ORANGE,str);
		            GivePlayerMoneyEx(playerid,RandomMoney);
		            if(GetPVarInt(playerid,"Probefahrt") == 0)
		            {
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][0]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][1]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][2]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][3]);
		            }
		            KillTimer(ImportCarTimer);
		            KillTimer(TachoTimer[playerid]);
		            Importfahrzeug = false;
		            SetTimer("ImportCarTimer",3600000,false);
			     	DeleteVehicle(ImportCar);
			     	ImportCar = 0;
					DeletePVar(playerid,"ImImportCar");
				}
				else SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht im Importfahrzeug.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,3.5,1424.7201,929.2430,10.5348))
	{
	    if(GetPVarInt(playerid,"ImKurrierCar") == 1)
	    {
			new PLAYER_STATE:State = GetPlayerState(playerid);
			if(State == PLAYER_STATE_DRIVER)
			{
			    new kurrierid = GetPVarInt(playerid,"KurrierID");
			    kurrierid--;
			    if(GetPlayerVehicleID(playerid) == KurrierCar[kurrierid])
			    {
			        SpielerInfo[playerid][sKurrier] = 1;
			        if(GetPVarInt(playerid,"KurrierID") == 1){SetPlayerPos(playerid,777.7709,-1016.0993,26.3594);}
			        else if(GetPVarInt(playerid,"KurrierID") == 2){SetPlayerPos(playerid,-939.2057,1425.2814,30.4340);}
			        else if(GetPVarInt(playerid,"KurrierID") == 3){SetPlayerPos(playerid,2300.4077,1928.9025,10.8417);}
				    SendClientMessage(playerid,COLOR_ORANGE,"Du hast die Lieferung erfolgreich abgeliefert. Belohnung: 3000$");
		            GivePlayerMoneyEx(playerid,3000);
		            if(GetPVarInt(playerid,"Probefahrt") == 0)
		            {
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][0]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][1]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][2]);
						PlayerTextDrawHide(playerid,CountdownDraw[playerid][3]);
		            }
		            KillTimer(KurrierCarTimer[kurrierid]);
		            KillTimer(TachoTimer[playerid]);
		            Kurrierfahrzeug[kurrierid] = false;
			     	DeleteVehicle(KurrierCar[kurrierid]);
			     	KurrierCar[kurrierid] = 0;
					DeletePVar(playerid,"ImKurrierCar");
					DeletePVar(playerid,"KurrierID");
				}
				else SendClientMessage(playerid,COLOR_SORRY,"Du befindest dich nicht im Kurrierfahrzeug.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,5.0,873.8837,-14.7565,62.9002))
	{
 		if(SpielerInfo[playerid][sFraktion] == SpielerInfo[BankAttacker][sFraktion])
	    {
	        if(GetPlayerVehicleID(playerid) == BankRobVan)
	        {
		        new str[144];
		        if(FahrzeugInfo[vehicleid][fBankrob] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du sitzt nicht im Fluchtwagen.");
			    SendClientMessage(playerid,COLOR_SUPER,"Herzlichen Glückwunsch! Der Bankrob war erfolgreich.");
			    format(str,sizeof(str),"Du konntest insgesamt %d$ erbeuten.",BankRobGeldGesamt);
			    SendClientMessage(playerid,COLOR_INFO,str);
			    GivePlayerMoneyEx(playerid,BankRobGeldGesamt);
			    BankRobGeldGesamt = 0;
			    DeleteVehicle(BankRobVan);
		        DisablePlayerCheckpoint(playerid);
		        BankAttacker = -1;
		        BankRobVan = -1;
			}
			else SetPlayerCheckpoint(playerid,873.8837,-14.7565,62.9002,5.0);
		}
    }
	new Float:x,Float:y,Float:z;
	GetVehiclePos(BankRobVan,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid,5.0,x,y,z))
	{
	    if(SpielerInfo[playerid][sFraktion] == SpielerInfo[BankAttacker][sFraktion])
	    {
			if(GetPVarInt(playerid,"HatGeldsack") == 1)
			{
			    new str3[144];
			    new sackid = GetPVarInt(playerid,"Geldsack");
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DUCK);
			    BankRobGeldGesamt += BankRobGeld[sackid];
			    format(str3,sizeof(str3),"~w~ GELD IM VAN: ~b~ %d$",BankRobGeldGesamt);
  	    		PlayerTextDrawSetString(BankAttacker, BankraubTD[BankAttacker][3], str3);
			    format(str3,sizeof(str3),"Du hast %d$ in den Van gelegt.",BankRobGeld[sackid]);
		    	SendClientMessage(playerid,COLOR_SUPER,str3);
			    DeletePVar(playerid,"HatGeldsack");
			    DeletePVar(playerid,"Geldsack");
			    RemovePlayerAttachedObject(playerid, 0);
			    DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(schulung[playerid] == 1)
    {
		if(IsPlayerInRangeOfPoint(playerid,5.0,1056.1189,-1349.9054,13.1140))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1096.6936,-1408.5184,13.1966, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1096.6936,-1408.5184,13.1966))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1282.5098,-1408.1178,12.8328, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1282.5098,-1408.1178,12.8328))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1360.1097,-1337.4663,13.1136, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1360.1097,-1337.4663,13.1136))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1364.1161,-1096.1760,23.7639, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1364.1161,-1096.1760,23.7639))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1227.8314,-1036.6858,31.4615, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1227.8314,-1036.6858,31.4615))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1164.8789,-985.0511,38.9612, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1164.8789,-985.0511,38.9612))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1061.0765,-948.5058,42.4768, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1061.0765,-948.5058,42.4768))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,960.2766,-1008.0071,34.1365, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,960.2766,-1008.0071,34.1365))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,940.0266,-1185.6763,19.1718, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,940.0266,-1185.6763,19.1718))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1000.8427,-1330.3030,13.1099, 5.0);
		}
   		else if(IsPlayerInRangeOfPoint(playerid,5.0,1000.8427,-1330.3030,13.1099))
		{
	  		KillTimer(TachoTimer[playerid]);
			SpielerInfo[playerid][sCarLic] = 1;
			SendClientMessage(playerid, COLOR_SUPER, "Du hast die Praxis bestanden und den Autoschein erhalten.");
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FahrschulCar");
			DeletePVar(playerid,"FSchein");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Fehlerpunkte[playerid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
			RemovePlayerFromVehicle(playerid);
			DeleteVehicle(vehicleid);
			
			if(SpielerInfo[playerid][sQuest] == 1)
		    {
		        new str2[128];
				PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
                PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);
                
			    format(str2,sizeof(str2),"Glueckwunsch ~b~%s",SpielerInfo[playerid][sName]);
			    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], str2);
			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

			    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 3 ~g~erfolgreich ~w~absolviert.");
			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

			    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Begib dich nun zur ~b~Bank~w~ (roter Marker)");
			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

			    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "und beantrage ein ~b~Bankkonto");
			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

			    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 4: ~w~Beantrage ein Bankkonto");
			    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

				SpielerInfo[playerid][sQuest] = 2;

				SetPlayerCheckpoint(playerid,1779.5182,-1721.6906,13.5390,2.5);
	  		}
		}
	}
	if(schulung[playerid] == 3)
    {
		if(IsPlayerInRangeOfPoint(playerid,5.0,1055.9783,-1371.6139,12.9566))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1037.7361,-1536.4253,12.9258, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1037.7361,-1536.4253,12.9258))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1034.3275,-1772.3196,12.9454, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1034.3275,-1772.3196,12.9454))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,865.4969,-1767.9585,12.9440, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,865.4969,-1767.9585,12.9440))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,684.3067,-1741.0989,12.8874, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,684.3067,-1741.0989,12.8874))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,640.0329,-1555.0448,14.8609, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,640.0329,-1555.0448,14.8609))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,637.7332,-1249.9259,16.6834, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,637.7332,-1249.9259,16.6834))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,741.3041,-1077.6746,22.0295, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,741.3041,-1077.6746,22.0295))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,941.0172,-978.3987,38.0146, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,941.0172,-978.3987,38.0146))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1299.8253,-935.1949,39.3371, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1299.8253,-935.1949,39.3371))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1342.6346,-1100.5518,23.4181, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1342.6346,-1100.5518,23.4181))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1340.4783,-1370.0420,12.9903, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1340.4783,-1370.0420,12.9903))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1135.4951,-1393.1361,13.0683, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1135.4951,-1393.1361,13.0683))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1061.0580,-1329.7295,12.9562, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1061.0580,-1329.7295,12.9562))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1001.2863,-1316.1876,12.9561, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1001.2863,-1316.1876,12.9561))
		{
		    KillTimer(TachoTimer[playerid]);
			SpielerInfo[playerid][sTruckLic] = 1;
			SendClientMessage(playerid, COLOR_SUPER, "Du hast die Praxis bestanden und den LKWschein erhalten.");
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FSchein");
			DeletePVar(playerid,"FahrschulCar");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Fehlerpunkte[playerid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
			RemovePlayerFromVehicle(playerid);
			DeleteVehicle(vehicleid);
  		}
	}
	if(schulung[playerid] == 4)
    {
  		if(IsPlayerInRangeOfPoint(playerid,5.0,825.0745,-1319.6958,12.9720))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,625.1144,-1359.2554,12.9905, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,625.1144,-1359.2554,12.9905))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,626.3317,-1637.1393,15.5883, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,626.3317,-1637.1393,15.5883))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,498.6646,-1708.6979,11.4326, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,498.6646,-1708.6979,11.4326))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,205.6451,-1619.6407,13.9700, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,205.6451,-1619.6407,13.9700))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,243.7351,-1447.1145,12.9410, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,243.7351,-1447.1145,12.9410))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,524.8951,-1270.0219,15.6909, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,524.8951,-1270.0219,15.6909))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,725.6874,-1099.8887,19.4348, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,725.6874,-1099.8887,19.4348))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,794.6937,-1205.4093,17.1373, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,794.6937,-1205.4093,17.1373))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1001.8306,-1330.7413,12.9540, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1001.8306,-1330.7413,12.9540))
		{
		    KillTimer(TachoTimer[playerid]);
			SpielerInfo[playerid][sBikeLic] = 1;
			SendClientMessage(playerid, COLOR_SUPER, "Du hast die Praxis bestanden und den Motorradschein erhalten.");
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FahrschulCar");
			DeletePVar(playerid,"FSchein");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Fehlerpunkte[playerid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
			RemovePlayerFromVehicle(playerid);
			DeleteVehicle(vehicleid);
		}
    }
    else if(schulung[playerid] == 5)
    {
  		if(IsPlayerInRangeOfPoint(playerid,5.0,-3078.3984,631.2441,0.4050))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-3219.0916,871.5428,0.1375, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-3219.0916,871.5428,0.1375))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-3166.7493,1258.2539,0.2166, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-3166.7493,1258.2539,0.2166))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-3358.6602,1420.8948,0.2525, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-3358.6602,1420.8948,0.2525))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-3418.0669,1085.7467,0.0043, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-3418.0669,1085.7467,0.0043))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-3341.1541,760.6445,0.0294, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-3341.1541,760.6445,0.0294))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,-2921.9160,515.4715,0.0556, 5.0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-2921.9160,515.4715,0.0556))
		{
		    KillTimer(TachoTimer[playerid]);
			SpielerInfo[playerid][sBootLic] = 1;
			SendClientMessage(playerid, COLOR_SUPER, "Du hast die Praxis bestanden und den Bootschein erhalten.");
			DisablePlayerCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FahrschulCar");
			DeletePVar(playerid,"FSchein");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
			RemovePlayerFromVehicle(playerid);
			DeleteVehicle(vehicleid);
	    	SetPlayerPos(playerid,1021.5202,-1349.9446,13.5506);
		    SetPlayerFacingAngle(playerid,357.4838);
		}
    }
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(schulung[playerid] == 2)
    {
  		if(IsPlayerInRangeOfPoint(playerid,5.0,1055.9390,-1352.7063,63.7135))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1270.9484,-1351.9408,126.7743,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,1270.9484,-1351.9408,126.7743))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1498.5369,-1436.3499,179.1459,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,1498.5369,-1436.3499,179.1459))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1774.4407,-1597.8804,206.3759,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,1774.4407,-1597.8804,206.3759))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,2188.2087,-1843.3027,212.9565,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,2188.2087,-1843.3027,212.9565))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,2708.8230,-1812.6624,178.0781,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,2708.8230,-1812.6624,178.0781))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,2831.0137,-1195.6720,176.8167,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,2831.0137,-1195.6720,176.8167))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,2391.9382,-693.3754,281.2787,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,2391.9382,-693.3754,281.2787))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1520.0850,-641.3022,265.1308,0,0,0,5.0);
        }
        
		if(IsPlayerInRangeOfPoint(playerid,5.0,1520.0850,-641.3022,265.1308))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,1130.4629,-861.1239,271.4177,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,1130.4629,-861.1239,271.4177))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,988.9382,-1267.5741,190.6118,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,988.9382,-1267.5741,190.6118))
		{
        	DisablePlayerRaceCheckpoint(playerid);
        	SetPlayerRaceCheckpoint(playerid,CP_TYPE_AIR_NORMAL,976.9742,-1362.1537,21.8291,0,0,0,5.0);
        }
		if(IsPlayerInRangeOfPoint(playerid,5.0,976.9742,-1362.1537,21.8291))
		{
		    KillTimer(TachoTimer[playerid]);
			new vehicleid = GetPlayerVehicleID(playerid);
			SpielerInfo[playerid][sFlugLic] = 1;
			SendClientMessage(playerid, COLOR_SUPER, "Du hast die Praxis bestanden und den Flugschein erhalten.");
			DisablePlayerRaceCheckpoint(playerid);
			DeletePVar(playerid,"FahrschulStunde");
			DeletePVar(playerid,"FSchein");
			DeletePVar(playerid,"FahrschulCar");
			schulung[playerid] = 0;
			FahrschulCar[vehicleid] = 0;
			Fehlerpunkte[playerid] = 0;
			Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
			FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
			RemovePlayerFromVehicle(playerid);
			DeleteVehicle(vehicleid);
		}
    }
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    if(IsPlayerNPC(playerid))return 1;
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(enterexit == 0)//Verlassen
    {
		FahrzeugInfo[vehicleid][fTuning][0] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SPOILER);
		FahrzeugInfo[vehicleid][fTuning][1] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HOOD);
		FahrzeugInfo[vehicleid][fTuning][2] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_ROOF);
	 	FahrzeugInfo[vehicleid][fTuning][3] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_SIDESKIRT);
		FahrzeugInfo[vehicleid][fTuning][4] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_LAMPS);
		FahrzeugInfo[vehicleid][fTuning][5] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_NITRO);
		FahrzeugInfo[vehicleid][fTuning][6] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_EXHAUST);
		FahrzeugInfo[vehicleid][fTuning][7] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_WHEELS);
		FahrzeugInfo[vehicleid][fTuning][8] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_STEREO);
		FahrzeugInfo[vehicleid][fTuning][9] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_HYDRAULICS);
		FahrzeugInfo[vehicleid][fTuning][10] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_FRONT_BUMPER);
		FahrzeugInfo[vehicleid][fTuning][11] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_REAR_BUMPER);
		FahrzeugInfo[vehicleid][fTuning][12] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_RIGHT);
		FahrzeugInfo[vehicleid][fTuning][13] = GetVehicleComponentInSlot(vehicleid,CARMODTYPE_VENT_LEFT);
		if(FahrzeugInfo[vehicleid][fFraktion] != 0){
        ChangeVehiclePaintjob(vehicleid, 3);
        ChangeVehicleColours(vehicleid, FrakCarFarbe1(SpielerInfo[playerid][sFraktion]), FrakCarFarbe2(SpielerInfo[playerid][sFraktion]));}
    }
    return 1;
}

public OnVehicleMod(playerid, vehicleid, component)
{
	switch(component)
	{
	    case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(vehicleid, component);
	}
	if(!IsComponentidCompatible(GetVehicleModel(vehicleid), component)) RemoveVehicleComponent(vehicleid, component);

	if(GetPlayerInterior(playerid) == 0)
    {
        new string[164];
		format(string,128,"%s wurde vom Server permanent gebannt: Grund: Tuninghack",SpielerInfo[playerid][sName]);
		SendICPMessage(string);
		LogBan(string);
		SendClientMessage(playerid,COLOR_SORRY,"Du wurdest vom Server permanent gebannt. Grund: Tuninghack");
		BanPlayer(playerid,"Server","Tuninghack");
    }
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjob)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, colour1, colour2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(CurrentMenu == Rathaus)
	{
		switch(row)
		{
			case 0://Nebenjobs
			{
				if(SpielerInfo[playerid][sPerso] == 0)
				{
				    SendClientMessage(playerid,COLOR_WHITE," ");
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du benötigst für einen Nebenjob ein Personalausweis.");
					SendClientMessage(playerid,COLOR_SORRY,"Du benötigst für einen Nebenjob ein Personalausweis.");
					ShowMenuForPlayer(Rathaus,playerid);
				}
				if(SpielerInfo[playerid][sBankPin] == 0)
				{
				    SendClientMessage(playerid,COLOR_WHITE," ");
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du brauchst für einen Nebenjob ein Bankkonto.");
					ShowMenuForPlayer(Rathaus,playerid);
				}
				else
				{
					if(GetPVarInt(playerid,"PizzaboteDuty") == 0 &&
					GetPVarInt(playerid,"KehrmaschinenDuty") == 0  && GetPVarInt(playerid,"PilotDuty") == 0 &&
					GetPVarInt(playerid,"BusfahrerDuty") == 0 && GetPVarInt(playerid,"MüllmannDuty")  == 0 &&
					GetPVarInt(playerid,"LandwirtDuty") == 0 && GetPVarInt(playerid,"HolzfallerDuty")  == 0)
					{
					    if(SpielerInfo[playerid][sNebenjob] == 0)
		 				{
							TogglePlayerControllable(playerid,true);
							SetCameraBehindPlayer(playerid);
							SendClientMessage(playerid,COLOR_WHITE," ");
						    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du bist also auf der Suche nach Arbeit.");
						    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Wir bitten viele Nebenjobs in ganz San Andreas an.");
							ShowPlayerDialog(playerid,DIALOG_NEBENJOBS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Nebenjobs","Pizzabote\nKehrmaschinenfahrer\nPilot\nBusfahrer\nMüllmann\nLandwirt\nHolzfäller","Weiter","Zurück");
						}
						else
						{
							SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Kündige erst dein jetzigen Nebenjob, um dir ein neuen beantragen zu können.");
   							TogglePlayerControllable(playerid,true);
							SetCameraBehindPlayer(playerid);
							DeletePVar(playerid,"Rathaus");
						}
					}
					else SendClientMessage(playerid,COLOR_SORRY,"Gehe erst in den Feierabend, um ein neuen Nebenjob aussuchen zu können.");
				}
			}
			case 1://Ausweise
			{
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Aufwiedersehen.");
				KeineFunktion
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"Rathaus");
			}
			case 2://Versicherungen
			{
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Aufwiedersehen.");
				KeineFunktion
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"Rathaus");
			}
			case 3://Aufwiedersehen
			{
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Aufwiedersehen.");
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"Rathaus");
			}
		}
	}
	if(CurrentMenu == Schwarzmarkt)
	{
		switch(row)
		{
			case 0://Nebenjobs
			{
				if(SpielerInfo[playerid][sPerso] == 0)
				{
				    SendClientMessage(playerid,COLOR_WHITE," ");
				    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Ich brauche zur Sicherheit erst deinen Personalausweis.");
					ShowMenuForPlayer(Rathaus,playerid);
				}
				if(GetPVarInt(playerid,"PizzaboteDuty") == 0 ||
				GetPVarInt(playerid,"KehrmaschinenDuty") == 0  || GetPVarInt(playerid,"PilotDuty") == 0 ||
				GetPVarInt(playerid,"BusfahrerDuty") == 0 || GetPVarInt(playerid,"MüllmannDuty")  == 0 ||
				GetPVarInt(playerid,"LandwirtDuty") == 0 || GetPVarInt(playerid,"HolzfallerDuty") == 0)
				{
				    if(SpielerInfo[playerid][sNebenjob] == 0)
	 				{
						TogglePlayerControllable(playerid,true);
						SetCameraBehindPlayer(playerid);
						SendClientMessage(playerid,COLOR_WHITE," ");
					    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Du bist also auf der Suche nach einer Illegalen Arbeit.");
						ShowPlayerDialog(playerid,DIALOG_ILLEGALE_NEBENJOBS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Illegale Nebenjobs","Waffendealer\nDrogendealer","Weiter","Zurück");
					}
					else
					{
						SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Kündige erst dein jetzigen Nebenjob, damit du mehr Zeit für die Illegale Sache hast.");
						TogglePlayerControllable(playerid,true);
						SetCameraBehindPlayer(playerid);
						DeletePVar(playerid,"Schwarzmarkt");
					}
				}
				else SendClientMessage(playerid,COLOR_SORRY,"Gehe erst in den Feierabend, um ein neuen Nebenjob aussuchen zu können.");
			}
			case 3://Aufwiedersehen
			{
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Komm wieder, wenn du was brauchst.");
				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"Schwarzmarkt");
			}
		}
	}
	if(CurrentMenu == test4)
	{
		switch(row)
		{
			case 0:
     		{
     		    ClearAnimations(playerid);
     		    TogglePlayerControllable(playerid, true);
        		SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test4,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
    		case 1:
    		{
                ClearChat(playerid, 10);
                ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
	    		new Float:Pos[3];
		    	GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		    	SetPlayerPos(playerid,Pos[0],Pos[1]+1,Pos[2]);
                DeletePVar(playerid,"TheoriTest");
		    	SetPVarInt(playerid,"FahrschulStunde",1);
   				if(GetPVarInt(playerid,"FSchein") == 2)
    		    {
	                SendClientMessage(playerid,COLOR_SUPER,"Super! Du hast die Theorie nun hinter dir. Es folgt im direkten Anschluss die Praxis.");
					SendClientMessage(playerid,COLOR_SUPER,"Verlasse die Fahrschule und steige in den Helikopter.");
			    }
			    else
			    {
       				SendClientMessage(playerid,COLOR_SUPER,"Super! Du hast die Theorie nun hinter dir. Es folgt im direkten Anschluss die Praxis.");
					SendClientMessage(playerid,COLOR_SUPER,"Verlasse die Fahrschule und steige in das Prüffahrzeug.");
			    }
    		}
    		case 2:
    		{
      			ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
    			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test4,playerid);
        		DeletePVar(playerid,"TheoriTest");
			}
		}
	}
	if(CurrentMenu == test3)
	{
		switch(row)
		{
			case 0:
     		{
       			ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
     			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test3,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
    		case 1:
    		{
      			ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
    			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test3,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
    		case 2:
    		{
         		SendClientMessage(playerid, COLOR_SUPER, "Gratuliere für die richtige Antwort, es folgt Frage 2.");
				HideMenuForPlayer(test3,playerid);
         		ShowMenuForPlayer(test4,playerid);
    			if(GetPVarInt(playerid,"FSchein") == 2)
    		    {
 					TheoriFlugAufgaben(playerid);
 				}
 				else
 				{
 					TheoriAufgaben(playerid);
				}
			}
		}
	}
 	if(CurrentMenu == test2)
	{
		switch(row)
		{
			case 0:
     		{
    			ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
     			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test2,playerid);
        		DeletePVar(playerid,"TheoriTest");
        		
    		}
    		case 1:
    		{
      			ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
    			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test2,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
    		case 2:
    		{
				SendClientMessage(playerid, COLOR_SUPER, "Gratuliere für die richtige Antwort, es folgt Frage 2.");
				HideMenuForPlayer(test2,playerid);
				ShowMenuForPlayer(test3,playerid);
    			if(GetPVarInt(playerid,"FSchein") == 2)
    		    {
	 				TheoriFlugAufgaben(playerid);
 				}
 				else
 				{
	 				TheoriAufgaben(playerid);
	 			}
    		}
		}
	}
	if(CurrentMenu == test1)
	{
		switch(row)
		{
    		case 0:
     		{
         		SendClientMessage(playerid, COLOR_SUPER, "Gratuliere für die richtige Antwort, es folgt Frage 2.");
				HideMenuForPlayer(test1,playerid);
         		ShowMenuForPlayer(test2,playerid);
 				if(GetPVarInt(playerid,"FSchein") != 2)
    		    {
 					TheoriAufgaben(playerid);
 				}
 				else
 				{
 					TheoriFlugAufgaben(playerid);
				}
    		}
    		case 1:
    		{
   				ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
    			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test1,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
    		case 2:
    		{
   				ClearAnimations(playerid);
                TogglePlayerControllable(playerid,true);
    			SendClientMessage(playerid, COLOR_SORRY, "Du bist durchgefallen! Damit du dich und andere Verkehrsteilnehmer nicht behinderst,");
        		SendClientMessage(playerid, COLOR_SORRY, "ist es wichtig, dass du weist, wie du dich zu Verhalten hast.");
        		HideMenuForPlayer(test1,playerid);
        		DeletePVar(playerid,"TheoriTest");
    		}
		}
	}
	if(CurrentMenu == BSNMenu)//BSN Menu
    {
	    switch(row)
	    {
		    case 0://Cola
			{
				if(GetPlayerMoneyEx(playerid) < 2)
				{
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				}
				else
				{
	 				new Float:Health;
					GetPlayerHealth(playerid,Health);
					if(Health > 95)
					{
                        SetPlayerHealth(playerid,100);
					}
					SendClientMessage(playerid,COLOR_SUPER,"Hier ihre Cola. Ich wünsche ihnen noch einen angenehmen Tag. Aufwiedersehen.");
					GivePlayerMoneyEx(playerid,-2);
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerHealth(playerid,Health+5);
				}
			}
			case 1://Cheeseburger
			{
				if(GetPlayerMoneyEx(playerid) < 3)
				{
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				}
				else
				{
	 				new Float:Health;
					GetPlayerHealth(playerid,Health);
					if(Health > 90)
					{
                        SetPlayerHealth(playerid,100);
					}
					SendClientMessage(playerid,COLOR_SUPER,"Hier ihr Cheeseburger. Ich wünsche ihnen noch einen angenehmen Tag. Aufwiedersehen.");
					GivePlayerMoneyEx(playerid,-3);
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerHealth(playerid,Health+10);
				}
			}
			case 2://pommes
			{
				if(GetPlayerMoneyEx(playerid) < 5)
				{
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				}
				else
				{
					new Float:Health;
					GetPlayerHealth(playerid,Health);
					if(Health > 85)
					{
                        SetPlayerHealth(playerid,100);
					}
					SendClientMessage(playerid,COLOR_SUPER,"Hier ihre Pommes. Ich wünsche ihnen noch einen angenehmen Tag. Aufwiedersehen.");
					GivePlayerMoneyEx(playerid,-5);
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerHealth(playerid,Health+15);
				}
			}
			case 3://big mac
			{
				if(GetPlayerMoneyEx(playerid) < 6)
				{
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				}
				else
				{
					new Float:Health;
					GetPlayerHealth(playerid,Health);
					if(Health > 80)
					{
                        SetPlayerHealth(playerid,100);
					}
					SendClientMessage(playerid,COLOR_SUPER,"Hier ihr Big Mac. Ich wünsche ihnen noch einen angenehmen Tag. Aufwiedersehen.");
					GivePlayerMoneyEx(playerid,-6);
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerHealth(playerid,Health+20);
				}
			}
			case 4://Hamburger royal
			{
				if(GetPlayerMoneyEx(playerid) < 12)
				{
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				}
				else
				{
					new Float:Health;
					GetPlayerHealth(playerid,Health);
					if(Health > 65)
					{
                        SetPlayerHealth(playerid,100);
					}
					SendClientMessage(playerid,COLOR_SUPER,"Hier ihr Hamburger Royal. Ich wünsche ihnen noch einen angenehmen Tag. Aufwiedersehen.");
					GivePlayerMoneyEx(playerid,-12);
					TogglePlayerControllable(playerid,true);
					HideMenuForPlayer(BSNMenu,playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerHealth(playerid,Health+35);
				}
			}
		}
    }
    new TuningID = GetPlayerTuningID(playerid);
    if(TuningID != INVALID_TUNING_ID)
	{
       TuningSelectedMenuRow(playerid,TuningID, row);
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if(GetPVarInt(playerid,"Rathaus") == 1)
	{
	    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Aufwiedersehen.");
		TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);
		DeletePVar(playerid,"Rathaus");
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
	if((newkeys & KEY_FIRE) && SpielerInfo[playerid][sNebenjob] == 10)
	{
		if(GetPVarInt(playerid,"HolzfallerArbeitet") == 1 && GetPVarInt(playerid,"HolzfallerStufe") >= 1)
		{
		    if(GetPVarInt(playerid,"HolzfallerStufe") == 1)
			{
				if(Baum1[playerid] == 0)
				{
					if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM1))
					{
						GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
			            ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][1],993.35852, -382.82349, 69.91880,GESCHWINDIGKEIT,90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum1[playerid] = 1;
			   			return true;
					}
				}
				if(Baum2[playerid] == 0)
				{
					if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM2))
					{
						GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][2],960.28668, -372.08679, 63.55810, GESCHWINDIGKEIT, 0.00000, 90.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum2[playerid] = 1;
			   			return true;
					}
				}
				if(Baum3[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM3))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][3],982.43237, -359.07870, 68.16490, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum3[playerid] = 1;
			   			return true;
					}
				}
				if(Baum4[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM4))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][4],952.86096, -345.09460, 60.96141, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum4[playerid] = 1;
			   			return true;
					}
				}
				if(Baum5[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM5))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][5],983.79529, -328.28790, 68.14320, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum5[playerid] = 1;
			   			return true;
					}
				}
				if(Baum6[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM6))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][6],964.16803, -315.15341, 63.18056, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum6[playerid] = 1;
			   			return true;
					}
				}
				if(Baum7[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM7))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][7],990.78961, -301.31586, 69.06423, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum7[playerid] = 1;
			   			return true;
					}
				}
				if(Baum8[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM8))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][8],933.38489, -320.36514, 53.21004, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum8[playerid] = 1;
			   			return true;
					}
				}
				if(Baum9[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM9))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][9],932.79358, -357.69962, 55.07752, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum9[playerid] = 1;
			   			return true;
					}
				}
				if(Baum10[playerid] == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,BAUM10))
				    {
				    	GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
					    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,true, false, false, false,11000);
						SetTimerEx("BaumGefallt",7000,false,"i",playerid);
						BaumWeg[playerid]++;
			   			MovePlayerObject(playerid,BaumeHolz[playerid][10],948.25598, -302.43826, 57.43135, GESCHWINDIGKEIT, 90.00000, 0.00000, 0.00000);
			   			GameTextForPlayer(playerid,"~w~Baum gefaellt!",3000,4);
			   			Baum10[playerid] = 1;
			   			return true;
					}
				}
				if(grossBaum[playerid] == 1)
				{
				    if(GBGefallt[playerid] == 0)
					{
					    if(GB2[playerid] == 0)
						{
						    if(IsPlayerInRangeOfPoint(playerid,BRADIUS,GROSSBAUM))
							{
							    GB2[playerid] = 1;
						        RemovePlayerMapIcon(playerid, 1);
						        GivePlayerWeapon(playerid,WEAPON_CHAINSAW,1);
						        ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1, true, false, false, false,11000);
						        SetTimerEx("BaumGefallt",7000,false,"i",playerid);
                                MovePlayerObject(playerid,BaumeHolz[playerid][0],1063.57251, -251.00800, 81.83669,1.7,50.00000, 0.00000, 0.00000);
								GBGefallt[playerid] = 1;
								HFCP2[playerid] = 1;
								SetPlayerPos(playerid, GROSSBAUM);
								return true;
							}
						}
						return true;
					}
				}
				return true;
			}
		}
		return true;
	}
	if(BaumErledigt[playerid] == 0)
	{
		if(BaumWeg[playerid] == 10)
		{
		    BaumWeg[playerid] = 10;
		    BaumErledigt[playerid] = 1;
		   	RemovePlayerMapIcon(playerid, 6);
		   	SendClientMessage(playerid,COLOR_INFO,"Super! Fälle nun den großen Baum, ein Icon wurde auf deiner Karte gesetzt.");
			SetPlayerMapIcon(playerid, 1, 1063.57251, -251.00803, 85.67651, 19, 0, MAPICON_LOCAL );
			grossBaum[playerid] = 1;
		   	return true;
		}
	}
	if(newkeys == KEY_CTRL_BACK)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        if(GetPVarInt(playerid,"SireneHupe") == 1){OnPlayerCommandText(playerid,"/sirene");}
	    }
	}
    if(newkeys == KEY_SECONDARY_ATTACK)//Entertaste
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        TuningEnterPress(playerid);
	        return 1;
	    }
	    if(GetPVarInt(playerid,"AntiIntFlucht") == 1)return SendClientMessage(playerid,COLOR_GREY,"* Anti-Interiorflucht: Warte bis du das Gebäude betrittst/verlässt.");
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1554.1569,-1675.6135,16.1953))//LSPD Enter
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
	        SetPlayerPos(playerid,1562.4587,-1667.3173,1261.2506);
		    SetPlayerFacingAngle(playerid, 270.1388);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1561.6913,-1667.1575,1261.2506))//LSPD Ausgang
	    {
	        SetPlayerPos(playerid,1550.6349,-1675.4946,15.4941);
		    SetPlayerFacingAngle(playerid, 90.3821);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1524.4829,-1677.8102,6.2188))//LSPD Garage Enter
	    {
			SetTimerEx("Unfreeze",3000,false,"i",playerid);
			TogglePlayerControllable(playerid, false);
	        SetPlayerPos(playerid,1567.3143,-1676.5354,1261.2506);
		    SetPlayerFacingAngle(playerid,357.6581);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1567.2225,-1677.1238,1261.2506))//LSPD Garage Ausgang
	    {
	        if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	        {
		        SetPlayerPos(playerid,1525.3379,-1677.6476,5.8906);
			    SetPlayerFacingAngle(playerid,270.0940);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
		    }
		    else SendClientMessage(playerid,COLOR_SORRY,"Die Türen sind verschlossen.");
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1564.7876,-1666.4253,28.3956))//LSPD Landeplatz Exit
	    {
			SetTimerEx("Unfreeze",3000,false,"i",playerid);
			TogglePlayerControllable(playerid, false);
	        SetPlayerPos(playerid,1575.5358,-1671.6965,1261.2506);
		    SetPlayerFacingAngle(playerid,357.3447);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1575.3047,-1672.2520,1261.2506))//LSPD Landeplatz Enter
	    {
     		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
	        {
		        SetPlayerPos(playerid,1564.5984,-1665.4670,28.3956);
			    SetPlayerFacingAngle(playerid,358.1851);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
 		    }
		    else SendClientMessage(playerid,COLOR_SORRY,"Die Türen sind verschlossen.");
		}
   		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1605.6135,710.8735,13.8672))//SFPD Eingang
	    {
	        SetPlayerPos(playerid,246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 2.5729);
		    SetPlayerInterior(playerid,10);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 246.4395,107.2980,1003.2188))//SFPD Ausgang
	    {
	        SetPlayerPos(playerid,-1605.4307,711.3495,13.8672);
		    SetPlayerFacingAngle(playerid, 359.7081);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1594.1666,716.2354,-4.9063))//SFPD Garage Enter
	    {
	        SetPlayerPos(playerid,214.9014,121.9488,999.0156);
		    SetPlayerFacingAngle(playerid,267.9453);
		    SetPlayerInterior(playerid,10);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 213.9759,122.1085,999.0156))//SFPD Garage Ausgang
	    {
	        SetPlayerPos(playerid,-1593.3552,716.4270,-5.2422);
		    SetPlayerFacingAngle(playerid,270.4071);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2340.2913,2458.3687,14.9688))//LVPD Eingang
	    {
	        SetPlayerPos(playerid,288.745971,169.350997,1007.171875);
		    SetPlayerFacingAngle(playerid, 2.5729);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 288.6907,167.7179,1007.1719))//LVPD Ausgang
	    {
	        SetPlayerPos(playerid,2340.1265,2457.6370,14.9688);
		    SetPlayerFacingAngle(playerid, 180.5920);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2282.1255,2423.9487,3.4766))//LVPD Garage Eingang
	    {
	        SetPlayerPos(playerid,238.7352,139.3221,1003.0234);
		    SetPlayerFacingAngle(playerid,270.4521);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 238.7352,139.3221,1003.0234))//LVPD Garage Ausgang
	    {
	        SetPlayerPos(playerid,2282.3516,2424.0151,3.4766);
		    SetPlayerFacingAngle(playerid,357.8101);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, 627.3911,-571.7522,17.9145))//Dillimore Enter
	    {
	        SetPlayerPos(playerid,322.2275,303.8335,999.1484);
		    SetPlayerFacingAngle(playerid, 351.8964);
		    SetPlayerInterior(playerid,5);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 322.1980,302.4980,999.1484))//Dillimore Ausgang
	    {
	        SetPlayerPos(playerid,628.3005,-571.8865,17.2886);
		    SetPlayerFacingAngle(playerid, 268.1928);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2204.4993,250.6758,35.3366))//FBI Eingang
	    {
	        SetPlayerPos(playerid,-2457.1377,503.8396,25.0943);
		    SetPlayerFacingAngle(playerid, 82.3540);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2457.1377,503.8396,25.0943))//FBI Ausgang
	    {
	        SetPlayerPos(playerid,-2203.4785,250.4445,35.3366);
		    SetPlayerFacingAngle(playerid, 266.8442);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1650.2196,-1245.3818,15.4659))//Los Santos Krankenhaus Eingang
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid,1169.3988,-1322.8319,-0.8598);
			SetPlayerFacingAngle(playerid,90);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1169.3988,-1322.8319,-0.8598))//Los Santos Krankenhaus Ausgang
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
     		SetPlayerPos(playerid,1650.8616,-1245.4158,15.4659);
		    SetPlayerFacingAngle(playerid, 271.4131);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0,733.4227,-1349.4966,13.5074))//Los Santos San News Eingang
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid,689.0656,-1368.9789,1695.4110);
			SetPlayerFacingAngle(playerid,2.0993);
		    SetPlayerInterior(playerid,1);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 689.0656,-1368.9789,1695.4110))//Los Santos San News Ausgang
	    {
     		SetPlayerPos(playerid,733.4227,-1349.4966,13.5074);
		    SetPlayerFacingAngle(playerid, 270.7864);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 648.4459,-1353.8932,13.5470))//Los Santos San News Eingang2
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid,694.4180,-1369.1532,1695.4110);
			SetPlayerFacingAngle(playerid,359.5926);
		    SetPlayerInterior(playerid,1);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 694.4180,-1369.1532,1695.4110))//Los Santos San News Ausgang2
	    {
     		SetPlayerPos(playerid,648.4459,-1353.8932,13.5470);
		    SetPlayerFacingAngle(playerid, 93.4615);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 648.5452,-1360.5887,13.5873))//Los Santos Lottoausgabe Eingang2
	    {
	    	SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid,834.1218,7.3493,1004.1870);
			SetPlayerFacingAngle(playerid,89.2292);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 834.1218,7.3493,1004.1870))//Los Santos Lottoausgabe Ausgang2
	    {
     		SetPlayerPos(playerid,648.5452,-1360.5887,13.5873);
		    SetPlayerFacingAngle(playerid, 82.8899);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1644.9175,-1230.3513,21.1381))//Los Santos Krankenhaus Landeplatz Ausgang
	    {
    		SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
     		SetPlayerPos(playerid,1161.4039,-1316.7357,-0.8598);
		    SetPlayerFacingAngle(playerid, 221.1343);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1161.4039,-1316.7357,-0.8598))//Los Santos Krankenhaus Landeplatz Eingang
	    {
    		SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    TogglePlayerControllable(playerid, false);
     		SetPlayerPos(playerid,1644.9175,-1230.3513,21.1381);
		    SetPlayerFacingAngle(playerid, 268.7846);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2495.2358,-1690.7219,14.7656))//Grove Street Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 9);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1999.8800,-1114.5149,27.1250))//Ballas Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 10);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2549.6614,-1032.2898,69.5789))//Vagos Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 11);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2508.2561,-1998.5865,13.9025))//Aztecas Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 12);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2462.7795,132.3849,35.1719))//Rifa Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 13);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2192.6589,647.2322,49.4375))//Triads Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 14);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1862.1187,-145.3209,11.8984))//Yakuza Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 15);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1447.6503,362.0286,18.9134))//Camorra Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 16);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 985.9162,2000.5089,11.4609))//Italian Mafia Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 17);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 302.3475,-1154.6626,81.3429))//Russian Mafia Eingang
	    {
	        SetPlayerPos(playerid,2495.9895,-1692.4834,1014.7422);
		    SetPlayerFacingAngle(playerid,178.9615);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerVirtualWorld(playerid, 18);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1566.8313,23.2738,24.1641))//International Contract Agency Eingang
	    {
	        if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20 || SpielerInfo[playerid][sFraktion] == 5)
	        {
		        SetPlayerPos(playerid,-2158.6267,642.4954,1052.3750);
			    SetPlayerFacingAngle(playerid,179.2799);
			    SetPlayerInterior(playerid,1);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid, 1);
		    }
		    else SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Schlüssel für dieses Gebäude.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2158.6267,642.4954,1052.3750))//International Contract Agency Ausgang
	    {
	        SetPlayerPos(playerid,1566.1394,23.2611,24.1641);
		    SetPlayerFacingAngle(playerid,95.3692);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2495.9895,-1692.4834,1014.7422))//Gangbase Ausgang
	    {
	        if(GetPlayerVirtualWorld(playerid) == 9)//Grove Street
	        {
		        SetPlayerPos(playerid,2495.2358,-1690.7219,14.7656);
			    SetPlayerFacingAngle(playerid,1.0876);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 10)//Ballas
	        {
		        SetPlayerPos(playerid,1999.8800,-1114.5149,27.1250);
			    SetPlayerFacingAngle(playerid,178.1117);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 11)//Vagos
	        {
		        SetPlayerPos(playerid,2549.6614,-1032.2898,69.5789);
			    SetPlayerFacingAngle(playerid,267.7126);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 12)//Aztecas
	        {
		        SetPlayerPos(playerid,2508.2561,-1998.5865,13.9025);
			    SetPlayerFacingAngle(playerid,179.5808);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 13)//Rifa
	        {
		        SetPlayerPos(playerid,-2462.7795,132.3849,35.1719);
			    SetPlayerFacingAngle(playerid,310.5000);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 14)//Triads
	        {
		        SetPlayerPos(playerid,-2192.6589,647.2322,49.4375);
			    SetPlayerFacingAngle(playerid,179.0186);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 15)//Yakuza
	        {
		        SetPlayerPos(playerid,-1862.1187,-145.3209,11.8984);
			    SetPlayerFacingAngle(playerid,1.6362);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 16)//Camorra
	        {
		        SetPlayerPos(playerid,1447.6503,362.0286,18.9134);
			    SetPlayerFacingAngle(playerid,334.6532);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 17)//Italian
	        {
		        SetPlayerPos(playerid,985.9162,2000.5089,11.4609);
			    SetPlayerFacingAngle(playerid,270.1086);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
			else if(GetPlayerVirtualWorld(playerid) == 18)//Russian
	        {
		        SetPlayerPos(playerid,302.3475,-1154.6626,81.3429);
			    SetPlayerFacingAngle(playerid,88.8443);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2414.0754,-1425.8801,23.9848)) //Holzfäller Schreinerei
		{
			if(SpielerInfo[playerid][sNebenjob] != 10)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Holzfäller.");
			if(HFCP2[playerid] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist noch nicht soweit!");
		    SetPlayerPos(playerid,941.1444,2115.9941,1011.0850+0.4);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,941.1444,2115.9941,1011.0850)) //Holzfäller Schreinerei
		{
		    SetPlayerPos(playerid,2414.0754,-1425.8801,23.9848);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1480.9746,-1771.4373,18.7958))//Stadthalle Los Santos - Eingang
		{
		    SetPlayerPos(playerid,389.0450,173.6811,1008.3828);
		    SetPlayerFacingAngle(playerid,89.9527);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
		    SetPVarInt(playerid,"InCityHall",1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 389.0450,173.6811,1008.3828))//Stadthalle Ausgang
		{
		    if(GetPVarInt(playerid,"InCityHall") == 1)//Stadthalle Los Santos
		    {
		        SetPlayerPos(playerid,1480.9746,-1771.4373,18.7958);
			    SetPlayerFacingAngle(playerid,358.0536);
			    SetPlayerInterior(playerid,0);
			    SetCameraBehindPlayer(playerid);
		        DeletePVar(playerid,"InCityHall");
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2104.8403,-1806.5245,13.5547))//Pizzaria - Eingang
		{
  			SetPlayerPos(playerid,372.3678,-133.3004,1001.4922);
		    SetPlayerFacingAngle(playerid,89.9527);
		    SetPlayerInterior(playerid,5);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 372.3678,-133.3004,1001.4922))//Pizzaria - Ausgang
		{
  			SetPlayerPos(playerid,2104.8403,-1806.5245,13.5547);
		    SetPlayerFacingAngle(playerid,89.9527);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 461.4087,-1500.8523,31.0597))//Victim - Eingang
		{
  			SetPlayerPos(playerid,226.1634,-7.9233,1002.2109);
		    SetPlayerFacingAngle(playerid,86.4828);
		    SetPlayerInterior(playerid,5);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 227.4834,-8.1822,1002.2109))//Victim - Ausgang
		{
  			SetPlayerPos(playerid,460.3593,-1501.0861,31.0562);
		    SetPlayerFacingAngle(playerid,102.2376);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2229.9260,-1721.2809,13.5615))//Gym - Eingang - Los Santos
		{
  			SetPlayerPos(playerid,772.1558,-4.2938,1000.7288);
		    SetPlayerFacingAngle(playerid,4.0754);
		    SetPlayerInterior(playerid,5);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 772.3620,-5.0215,1000.7288))//Gym - Ausgang - Los Santos
		{
  			SetPlayerPos(playerid,2228.8411,-1722.2499,13.5625);
		    SetPlayerFacingAngle(playerid,136.8266);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2270.2954,-155.9197,35.3203))//Gym - Eingang - San Fierro
		{
  			SetPlayerPos(playerid,773.9017,-49.4196,1000.5859);
		    SetPlayerFacingAngle(playerid,3.2398);
		    SetPlayerInterior(playerid,6);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 774.1077,-50.3713,1000.5859))//Gym - Ausgang - San Fierro
		{
  			SetPlayerPos(playerid,-2269.4595,-155.7332,35.3203);
		    SetPlayerFacingAngle(playerid,268.1295);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1968.8300,2295.7092,16.4559))//Gym - Eingang - Las Venturas
		{
  			SetPlayerPos(playerid,774.0615,-77.5164,1000.6608);
		    SetPlayerFacingAngle(playerid,358.2264);
		    SetPlayerInterior(playerid,7);
		    SetCameraBehindPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 773.8901,-78.5057,1000.6623))//Gym - Ausgang - Las Venturas
		{
  			SetPlayerPos(playerid,1968.6213,2295.1587,16.4559);
		    SetPlayerFacingAngle(playerid,176.3749);
		    SetPlayerInterior(playerid,0);
		    SetCameraBehindPlayer(playerid);
		}
		else if(AnTankstellenHaus(playerid))
		{
      		SetPlayerPos(playerid,6.091179,-29.271898,1003.549438);
		    SetPlayerFacingAngle(playerid,358.0536);
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,GetNearTankstellenHausID(playerid));
		    SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid,"TankstelleID",GetNearTankstellenHausID(playerid));
			SetPVarInt(playerid,"InTankstelle",1);
  		}
  		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 6.091179,-29.271898,1003.549438))
  		{
  		    if(GetPVarInt(playerid,"InTankstelle") == 1)
  		    {
  		        new ts = GetPVarInt(playerid,"TankstelleID");
  		        SetPlayerPos(playerid,TankstellenInfo[ts][tsEPos_X],TankstellenInfo[ts][tsEPos_Y],TankstellenInfo[ts][tsEPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"TankstelleID");
				DeletePVar(playerid,"InTankstelle");
	        }
	    }
	    else if(AnAmmunation(playerid))
	    {
   			SetPlayerPos(playerid,286.148986,-40.644397,1001.515625);
		    SetPlayerFacingAngle(playerid,358.0536);
		    SetPlayerInterior(playerid,1);
		    SetPlayerVirtualWorld(playerid,GetNearAmmunationID(playerid));
		    SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid,"AmmunationID",GetNearAmmunationID(playerid));
			SetPVarInt(playerid,"InAmmunation",1);
	    }
   		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 286.148986,-40.644397,1001.515625))
  		{
  		    if(GetPVarInt(playerid,"InAmmunation") == 1)
  		    {
  		        new an = GetPVarInt(playerid,"AmmunationID");
  		        SetPlayerPos(playerid,AmmunationInfo[an][amPos_X],AmmunationInfo[an][amPos_Y],AmmunationInfo[an][amPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"AmmunationID");
				DeletePVar(playerid,"InAmmunation");
				if(GetPVarInt(playerid,"AmAusrauben") == 1){StopAudioStreamForPlayer(playerid); DeletePVar(playerid,"AmAusrauben");}
	        }
	    }
    	else if(AnStore(playerid))
	    {
   			SetPlayerPos(playerid,-25.132598,-139.066986,1003.546875);
		    SetPlayerFacingAngle(playerid,358.0536);
		    SetPlayerInterior(playerid,16);
		    SetPlayerVirtualWorld(playerid,GetNearStoreID(playerid));
		    SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid,"StoreID",GetNearStoreID(playerid));
			SetPVarInt(playerid,"InStore",1);
	    }
   		else if(IsPlayerInRangeOfPoint(playerid, 3.0, -25.132598,-139.066986,1003.546875))
  		{
  		    if(GetPVarInt(playerid,"InStore") == 1)
  		    {
  		        new an = GetPVarInt(playerid,"StoreID");
  		        SetPlayerPos(playerid,StoreInfo[an][siPos_X],StoreInfo[an][siPos_Y],StoreInfo[an][siPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"StoreID");
				DeletePVar(playerid,"InStore");
				if(GetPVarInt(playerid,"AmAusrauben") == 1){StopAudioStreamForPlayer(playerid); DeletePVar(playerid,"AmAusrauben");}
	        }
		}
	    else if(AnHaus(playerid))
	    {
	        new hs = GetNearHausID(playerid);
	        if(HausInfo[hs][hsLocked] == 0 || HausInfo[hs][hsLocked] == 1 && SpielerInfo[playerid][sHaus] == hs || HausInfo[hs][hsLocked] == 1 && SpielerInfo[playerid][sMieter] == hs  || HausInfo[hs][hsLocked] == 1 && SpielerInfo[playerid][sGHaus] == hs)
	        {
		        SetPlayerPos(playerid,HausInfo[hs][hsIPos_X],HausInfo[hs][hsIPos_Y],HausInfo[hs][hsIPos_Z]);
			    SetPlayerInterior(playerid,HausInfo[hs][hsInterior]);
			    SetPlayerVirtualWorld(playerid,hs);
			    SetCameraBehindPlayer(playerid);
				SetPVarInt(playerid,"HausID",hs);
				SetPVarInt(playerid,"InHaus",1);
				SetPlayerWeather(playerid,2);
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Das Haus ist abgeschlossen.");
	    }
   		else if(IsPlayerInRangeOfPoint(playerid, 3.0, HausInfo[GetPVarInt(playerid,"HausID")][hsIPos_X],HausInfo[GetPVarInt(playerid,"HausID")][hsIPos_Y],HausInfo[GetPVarInt(playerid,"HausID")][hsIPos_Z]))
  		{
  		    if(GetPVarInt(playerid,"InHaus") == 1)
  		    {
  		        new hs = GetPVarInt(playerid,"HausID");
  		        SetPlayerPos(playerid,HausInfo[hs][hsPos_X],HausInfo[hs][hsPos_Y],HausInfo[hs][hsPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"HausID");
				DeletePVar(playerid,"InHaus");
    			SetPlayerWetter(playerid);
	        }
	    }
	    else if(AnGarage(playerid))
	    {
	        new hs = GetNearGarageID(playerid);
	        if(GaragenInfo[hs][giLocked] == 0 || GaragenInfo[hs][giLocked] == 1 && SpielerInfo[playerid][sGarage] == hs || GaragenInfo[hs][giLocked] == 1 && SpielerInfo[playerid][sGMieter] == hs)
	        {
				SetTimerEx("Unfreeze",3000,false,"i",playerid);
				TogglePlayerControllable(playerid, false);
		        SetPlayerPos(playerid,2414.4395,2820.4709,-47.9852);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,hs);
			    SetCameraBehindPlayer(playerid);
				SetPVarInt(playerid,"GarageID",hs);
				SetPVarInt(playerid,"InGarage",1);
				SetPlayerWeather(playerid,2);
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Die Garage ist abgeschlossen.");
	    }
   		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2414.2927,2818.8550,-47.9852))
  		{
  		    if(GetPVarInt(playerid,"InGarage") == 1)
  		    {
  		        new hs = GetPVarInt(playerid,"GarageID");
  		        SetPlayerPos(playerid,GaragenInfo[hs][giPos_X],GaragenInfo[hs][giPos_Y],GaragenInfo[hs][giPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"GarageID");
				DeletePVar(playerid,"InGarage");
				SetPlayerWetter(playerid);
	        }
	    }
  	  	else if(AmRestaurant(playerid))
	    {
	        new id = GetRestaurant(playerid);
	        SetPlayerPos(playerid,FastFoodInfo[id][fIPos_X],FastFoodInfo[id][fIPos_Y],FastFoodInfo[id][fIPos_Z]);
		    SetPlayerInterior(playerid,FastFoodInfo[id][fiInterior]);
		    SetPlayerVirtualWorld(playerid,FastFoodInfo[id][fiVWorld]);
		    SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid,"RestaurantID",id);
			SetPVarInt(playerid,"InRestaurant",1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, FastFoodInfo[GetPVarInt(playerid,"RestaurantID")][fIPos_X],FastFoodInfo[GetPVarInt(playerid,"RestaurantID")][fIPos_Y],FastFoodInfo[GetPVarInt(playerid,"RestaurantID")][fIPos_Z]))
  		{
  		    if(GetPVarInt(playerid,"InRestaurant") == 1)
  		    {
  		        new id = GetPVarInt(playerid,"RestaurantID");
  		        SetPlayerPos(playerid,FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetCameraBehindPlayer(playerid);
				DeletePVar(playerid,"RestaurantID");
				DeletePVar(playerid,"InRestaurant");
				if(GetPVarInt(playerid,"AmAusrauben") == 1){StopAudioStreamForPlayer(playerid); DeletePVar(playerid,"AmAusrauben");}
	        }
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1021.5202,-1349.9446,13.5506))//Fahrschule Los Santos Enter
	    {
		    SetPlayerPos(playerid,1494.325195,1304.942871,1093.289062);
		    SetPlayerFacingAngle(playerid,357.4838);
		    SetPlayerInterior(playerid,3);
		    SetCameraBehindPlayer(playerid);
    		GameTextForPlayer(playerid, "~g~Willkommen in der Fahrschule",3000,4);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1494.5062,1304.1451,1093.2891))//Fahrschule Los Santos Ausgang
	    {
		    SetPlayerPos(playerid,1021.5202,-1349.9446,13.5506);
		    SetPlayerFacingAngle(playerid,357.4838);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,1.5,1773.0109,-1699.5596,13.5509))//Los Santos Tresor Enter
		{
		    if(BankRobAmLaufen == 0)return SendClientMessage(playerid,COLOR_GREY,"Es findet kein Bankrob statt.");
      		if(SpielerInfo[playerid][sFraktion] == SpielerInfo[BankAttacker][sFraktion] || SpielerInfo[playerid][sFraktion] == 2)
			{
	  			SetPlayerPos(playerid,1771.5452,-1700.5923,13.5509);
			    SetPlayerFacingAngle(playerid,87.7365);
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Zutritt nur für Polizisten oder Gangmitglieder des Bankräubers.");
		}
  		else if(IsPlayerInRangeOfPoint(playerid,1.5,1771.5452,-1700.5923,13.5509))//Los Santos Tresor Exit
		{
  			SetPlayerPos(playerid,1773.3085,-1699.7356,13.5509);
		    SetPlayerFacingAngle(playerid,262.7696);
		}
  		else if(IsPlayerInRangeOfPoint(playerid,3.0,1024.1505,-983.4423,42.6440))//Paintballarena - Los Santos
		{
		    if(GetPlayerWantedLevelEx(playerid) != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du wirst von der Polizei gesucht. Komm wieder wenn du nicht mehr gesucht wirst.");
		    if(GetPlayerMoneyEx(playerid) < 250)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
			if(GetPVarInt(playerid,"CopDuty") == 0 || GetPVarInt(playerid,"FBIDuty") == 0 || GetPVarInt(playerid,"MedicDuty") == 0
			|| GetPVarInt(playerid,"FireDuty") == 0 || GetPVarInt(playerid,"PizzaboteDuty") == 0 ||
			GetPVarInt(playerid,"KehrmaschinenDuty") == 0 || GetPVarInt(playerid,"PilotDuty") == 0 ||
			GetPVarInt(playerid,"BusfahrerDuty") == 0 || GetPVarInt(playerid,"MüllmannDuty") == 0 ||
			GetPVarInt(playerid,"LandwirtDuty") == 0 || GetPVarInt(playerid,"HolzfallerDuty") == 0)
			{
			    new string[264];
				format(string,sizeof(string),"{FFFFFF}Arena: {FF0000}Deagle Only{FFFFFF} 			| Spieler: {FF0000}%d\n{FFFFFF}Arena: {FF0000}Deagle & Shotgun{FFFFFF} 		| Spieler: {FF0000}%d\n{FFFFFF}Arena: {FF0000}1vs1{FFFFFF}",PaintballSpieler[0],PaintballSpieler[1]);
				ShowPlayerDialog(playerid,DIALOG_PAINTBALL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Paintball",string,"Weiter","Zurück");
			}
			else SendClientMessage(playerid,COLOR_SORRY,"Du bist noch im Dienst.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1570.7537,-1337.1708,16.4844))//Eingang Fallschirm - Los Santos
		{
			SetPlayerPos(playerid,1548.7970,-1366.0869,326.2109);
		    SetPlayerFacingAngle(playerid,90.7367);
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1548.5597,-1364.1962,326.2183))//Ausgang Fallschirm - Los Santos
		{
			SetPlayerPos(playerid,1571.1387,-1336.5957,16.4844);
		    SetPlayerFacingAngle(playerid,318.1956);
		}
		if(SpielerInfo[playerid][sNebenjob] == 4)//Pilot
		{
  			new Float:Position[4];
	 		for(new i=1; i<MAX_VEHICLES; i++)
	        {
	        	if(!IsValidVehicle(i))continue;
	        	if(FahrzeugInfo[i][fDatabaseID] == 0)continue;
	        	if(FahrzeugInfo[i][fNebenjob] != 4)continue;
	        	if(FahrzeugInfo[i][fModelID] != 577)continue;
	        	GetVehiclePos(i,Position[0],Position[1],Position[2]);
	            if(IsPlayerInRangeOfPoint(playerid,7.0,Position[0],Position[1],Position[2]))
	            {
   	        		if(FahrzeugInfo[i][fNebenjob] != SpielerInfo[playerid][sNebenjob])return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Schlüssel für dieses Fahrzeug.");
	        		if(SpielerInfo[playerid][sJobEXP][3] < FahrzeugInfo[i][fJobEXP])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht die benötigte Erfahrung für dieses Flugzeug.");
					AC_PutPlayerInVehicleEx(playerid,i,0);
	            }
			 }
		}
	}
	else if(newkeys == KEY_NO)//N Taste
	{
		new TuningID = GetPlayerTuningID(playerid);
		if(TuningID!= INVALID_TUNING_ID)
   		{
   		    OnPlayerTuningKey(playerid);
   	    }
		if(IsPlayerInRangeOfPoint(playerid,3.0,1490.5149,1305.8287,1093.2964))//Fahrschule
		{
		    OnPlayerCommandText(playerid, "/fahrschule");
		}
 		else if(IsPlayerInRangeOfPoint(playerid,5.0,362.2921,173.6492,1008.3828))//Stadthalle Rezeption
	    {
	        OnPlayerCommandText(playerid, "/stadthalle");
	    }
   		else if(IsPlayerInRangeOfPoint(playerid,5.0,-1634.1162,-2241.6426,31.4766))//Schwarzmarkt
	    {
	        OnPlayerCommandText(playerid, "/schwarzmarkt");
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,5.0,1778.7935,-1703.7747,13.5609) || IsPlayerInRangeOfPoint(playerid,5.0,1780.3076,-1703.8090,13.5629) && !IsPlayerInAnyVehicle(playerid))
	 	{
			OnPlayerCommandText(playerid, "/bank");
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.5,358.5327,180.3977,1008.3828))
		{
		    OnPlayerCommandText(playerid, "/creategruppe");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.5,1569.3154,-2154.8662,14.0352))
		{
		    OnPlayerCommandText(playerid, "/neon");
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.5,268.67346, 1883.53430, -30.26508))
		{
		    OnPlayerCommandText(playerid, "/takebomb");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,756.8801,5.5222,1000.7000) || IsPlayerInRangeOfPoint(playerid,5.0,768.1483,-37.2912,1000.6865)
   		|| IsPlayerInRangeOfPoint(playerid,5.0,774.9591,-62.3417,1000.7184))
   		{
   		    OnPlayerCommandText(playerid, "/kampfstyles");
   		}
   		else if(IsPlayerInRangeOfPoint(playerid,1,2532.0051,-1519.2444,24.1094))
   		{
   			OnPlayerCommandText(playerid, "/baumarkt");
   		}
		else if(IsPlayerInRangeOfPoint(playerid,3.5,1730.1222,520.3935,28.2204) ||
		IsPlayerInRangeOfPoint(playerid,3.5,1743.9443,515.8735,28.2149) ||
		IsPlayerInRangeOfPoint(playerid,3.5,56.1354,-1525.3245,4.9989) ||
		IsPlayerInRangeOfPoint(playerid,3.5,49.5451,-1538.1730,5.1519) ||
		IsPlayerInRangeOfPoint(playerid,3.5,26.1980,-1338.1219,10.1589) ||
		IsPlayerInRangeOfPoint(playerid,3.5,-1.1519,-1323.5649,11.2628) ||
		IsPlayerInRangeOfPoint(playerid,3.5,523.5012,469.5414,18.9297) ||
		IsPlayerInRangeOfPoint(playerid,3.5,518.9169,475.9107,18.9297))
  		{
  		    OnPlayerCommandText(playerid, "/maut");
  		}
		else if(AmATM(playerid))
  		{
  		    OnPlayerCommandText(playerid, "/atm");
  		}
		else if(AmLTM(playerid))
  		{
  			new Lotto[3];
    		Lotto[0] = random(9);
			Lotto1_start:
			Lotto[1] = random(9);
    		if(Lotto[0] == Lotto[1])goto Lotto1_start;
			Lotto2_start:
 			Lotto[2]= random(9);
    		if(Lotto[0] == Lotto[2])goto Lotto2_start;
    		if(Lotto[1] == Lotto[2])goto Lotto2_start;
			buylottoschein(playerid,Lotto[0],Lotto[1],Lotto[2]);
  		}
		else if(AmGeldSack(playerid))
  		{
  		    OnPlayerCommandText(playerid, "/aufheben");
  		}
		else if(AmHeuballen(playerid))
  		{
  		    OnPlayerCommandText(playerid, "/aufsammeln");
  		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1864.6090,-1598.8942,13.6107) || IsPlayerInRangeOfPoint(playerid,4.0,1811.1904,-1398.9595,13.6169)
		|| IsPlayerInRangeOfPoint(playerid,4.0,-1538.5326,1161.8965,7.1947))
		{
		    OnPlayerCommandText(playerid, "/autohaus");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2493.24243, -1707.50134, 1015.58276))
		{
		    OnPlayerCommandText(playerid, "/kiste");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,379.7354,-116.4596,1001.4922))
		{
		    OnPlayerCommandText(playerid, "/pizza");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,377.0177,-67.6665,1001.5151) || IsPlayerInRangeOfPoint(playerid,3.0,369.4442,-6.2557,1001.8516))
		{
		    OnPlayerCommandText(playerid, "/bestellen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-22.1672,-138.5988,1003.5469))
		{
		    OnPlayerCommandText(playerid, "/einkaufen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,1606.7407,-1672.1595,1257.7506) || IsPlayerInRangeOfPoint(playerid,5.0,231.1223,113.2377,1003.2188) ||
		IsPlayerInRangeOfPoint(playerid,5.0,210.4058,185.9881,1003.0313) || IsPlayerInRangeOfPoint(playerid,5.0,-2469.2332,514.7144,25.0943) ||
		IsPlayerInRangeOfPoint(playerid,5.0,327.1490,307.2458,999.1484))
    	{
   			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
			{
      			if(GetPVarInt(playerid,"CopDuty") == 0 || GetPVarInt(playerid,"FBIDuty") == 0)
		        {
			        ShowPlayerDialog(playerid,DIALOG_DUTY_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen\nAusrüsten","Weiter","Abbrechen");
				}
				else
				{
    				ShowPlayerDialog(playerid,DIALOG_DUTY_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen\nAusrüsten","Weiter","Abbrechen");
				}
			}
			else NichtBerechtigt
		}
        else if(IsPlayerInRangeOfPoint(playerid,12.0,1593.3000500,-1638.0999800,12.5000000))//LSPD Tor Garage
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
			{
			    if(LSPDGarageZ == 0)
			    {
	    			PlayerPlaySound(playerid, 1139, 1593.3000500,-1638.0999800,02.5000000);
					MoveObject(LSPDGarage, 1593.3000500,-1638.0999800,02.5000000,4.0,0.0000000,0.0000000,180.0000000);
					SetTimer("LSPDGarageT", 5000, false);
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,12.0,1544.3883,-1627.3789,14.1119))//LSPD Schranke Hof
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || GetPVarInt(playerid,"FreikaufSchluessel") == 1)
			{
   				if(LSPDSchrankeZ == 0)
			    {
				    PlayerPlaySound(playerid, 1139, 1593.3000500,-1638.0999800,02.5000000);
					MoveObject(LSPDSchranke, 1544.6999500,-1630.9000200,13.1000000+0.01,0.01,0.0000000,360.0000000,270.0000000);
					SetTimer("LSPDSchrankeT", 5000, false);
				}
			}
		}
  		else if(IsPlayerInRangeOfPoint(playerid,12.0,-2168.68530, 249.60730, 36.57600))//FBI Tor
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
			{
				if(FBITorZ == 0)
			    {
	    			PlayerPlaySound(playerid, 1139, -2168.68530, 249.60730, 36.57600);
					MoveObject(FBITor, -2168.68530, 249.60730, 30.57600,4.0,0.00000, 0.00000, 90.00000);
					SetTimer("FBITorT", 5000, false);
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,12.0,321.191,-1187.818,75.783))//Russen Tor
		{
			if(SpielerInfo[playerid][sFraktion] == 18)
			{
				if(RussenTorZ == 0)
			    {
	    			PlayerPlaySound(playerid, 1139, 321.191,-1187.818,75.783);
					MoveObject(RussenTor, 321.191,-1187.818,70.783,4.0,0.000,0.000,38.177);
					SetTimer("RussenTorT", 5000, false);
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,12.0,781.78333, -1384.81799, 12.88760))//News Tor 1
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sFraktion] == 8)
			{
			    PlayerPlaySound(playerid, 1139, 781.78333, -1384.81799, 12.88760);
				MoveObject(NewsTor[0], 774.87518, -1384.78162, 12.88760,3.0, 0.00000, 0.00000, 180.00000);
				SetTimer("NewsTor1T", 5000, false);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,12.0,782.37695, -1330.45349, 12.70840))//News Tor 2
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sFraktion] == 8)
			{
			    PlayerPlaySound(playerid, 1139, 782.37695, -1330.45349, 12.70840);
				MoveObject(NewsTor[1], 774.82001, -1330.23206, 12.70840,3.0, 0.00000, 0.00000, 179.60001);
				SetTimer("NewsTor2T", 5000, false);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,12.0,671.36200, -1353.85547,1696.4069))//News Tor 2
		{
			if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6 || SpielerInfo[playerid][sFraktion] == 8)
			{
			    PlayerPlaySound(playerid, 1139, 671.36200, -1353.85547,1696.4069);
				MoveObject(NewsStudioTor, 671.36200, -1353.85547,1698.88806, 6.0,0.00000, 0.00000, 0.0);
				SetTimer("NewsStudioT", 5000, false);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.7,1571.5356,-1667.2246,1261.2506) || IsPlayerInRangeOfPoint(playerid,0.7,1573.1481,-1664.8641,1261.2506))
		{
		    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		    {
				ApplyAnimation(playerid,"heist9","Use_SwipeCard",4.1,false,false,false,false,false,SYNC_ALL);
				SetTimerEx("LspdDoorTimer", 1170, false, "i", playerid);
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.7,-2458.4773,512.8635,25.0943) || IsPlayerInRangeOfPoint(playerid,0.7,-2458.5254,513.7373,25.0943))
        {
  		    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		    {
				ApplyAnimation(playerid,"heist9","Use_SwipeCard",4.1,false,false,false,false,false,SYNC_ALL);
				SetTimerEx("LspdDoorTimer2", 1170, false, "i", playerid);
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.7,1467.6787,-1806.5359,-41.9614) || IsPlayerInRangeOfPoint(playerid,0.7,1466.8057,-1808.5967,-41.9614))
        {
  		    if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		    {
				ApplyAnimation(playerid,"heist9","Use_SwipeCard",4.1, false, false, false, false, false, SYNC_ALL);
				SetTimerEx("LspdDoorTimer3", 1170, false, "i", playerid);
				return 1;
			}
		}
  		else if(IsPlayerInRangeOfPoint(playerid,5.0,1164.5529,-1335.2123,-0.8598))
		{
			if(SpielerInfo[playerid][sFraktion] == 5)
			{
			    if(SpielerInfo[playerid][sRank] >= 6)
			    {
			        if(GetPVarInt(playerid,"MedicDuty") == 0 && GetPVarInt(playerid,"FireDuty") == 0)
			        {
			    		ShowPlayerDialog(playerid,DIALOG_SARD_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","Sanitäter\nFeuerwehr","Weiter","Abbrechen");
					}
					else
					{
	    				ShowPlayerDialog(playerid,DIALOG_DUTY2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
					}
			    }
			    else
			    {
	                if(GetPVarInt(playerid,"MedicDuty") == 0 && GetPVarInt(playerid,"FireDuty") == 0)
			        {
				        ShowPlayerDialog(playerid,DIALOG_DUTY_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
					}
					else
					{
	    				ShowPlayerDialog(playerid,DIALOG_DUTY_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
					}
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,369.0709,-114.6389,1001.4995))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
			if(SpielerInfo[playerid][sNebenjob] != 2)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Pizzabote.");
            if(GetPVarInt(playerid,"PizzaboteDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1378.4637,-1640.7590,13.5469))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 3)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Kehrmaschinenfahrer.");
  			if(GetPVarInt(playerid,"KehrmaschinenDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1957.0295,-2183.6008,13.5469))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 4)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Pilot.");
  			if(GetPVarInt(playerid,"PilotDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1523.1068,-2325.8340,13.5469))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 5)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Busfahrer.");
  			if(GetPVarInt(playerid,"BusfahrerDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1734.5929,-2060.1526,13.5910))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 6)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Müllmann.");
  			if(GetPVarInt(playerid,"MüllmannDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-62.7901,76.2742,3.1172))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 7)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Landwirt.");
  			if(GetPVarInt(playerid,"LandwirtDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1106.1093,-299.7448,74.5391))
		{
		    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Im Fahrzeug nicht möglich.");
		    if(SpielerInfo[playerid][sNebenjob] != 10)return SendClientMessage(playerid,COLOR_SORRY,"Du bist kein Holzfäller.");
  			if(GetPVarInt(playerid,"HolzfallerDuty") == 0)
	        {
		        ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_JOB_DUTY,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Feierabend gehen","Weiter","Abbrechen");
			}
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
 			new TuningID2 = GetFreeTuningID(playerid);
			if(TuningID2 != INVALID_TUNING_ID)
			{
				OpenPlayerTuning(playerid);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.0,941.8840,2130.2949,1011.0850))
		{
			if(MASCHINE[playerid] == 0) return SendClientMessage(playerid,COLOR_GREY,"Du bist noch nicht soweit!");
			if(MASCHINEFERTIG[playerid] == 1) return SendClientMessage(playerid,COLOR_GREY,"Du hast diesen Auftrag schon erfüllt!");
			for(new i=0;i<17;i++){ PlayerTextDrawShow(playerid,Schreinerei[playerid][i]); }
			TextDrawHideForPlayer(playerid, Time);
			TextDrawHideForPlayer(playerid, Time2);
			SelectTextDraw(playerid,SRVFARBE);
		}
	}
	else if(newkeys == KEY_YES)//Z Taste
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
 			new TuningID2 = GetFreeTuningID(playerid);
			if(TuningID2 == INVALID_TUNING_ID){OnPlayerCommandText(playerid, "/motor");}
			else{OpenPlayerTuning(playerid);}
		}
	}
	else if(newkeys == KEY_HANDBRAKE)//Aim Taste
	{
		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		{
		    if(GetPlayerWeapon(playerid) == WEAPON_SILENCED)
		    {
				if(GetPVarInt(playerid,"TazerSperre") == 1)
				{
				    SetPlayerArmedWeapon(playerid, WEAPON_FIST);
				    SendClientMessage(playerid,COLOR_RED,"Dein Tazer ist noch nicht wieder einsatzbereit.");
				}
		    }
		}
	}
	else if((newkeys==KEY_ACTION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
 	{
 	    if(SpielerInfo[playerid][sFraktion] == 2)
 	    {
	        if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)return 1;
	        new Float:pX,Float:pY,Float:pZ;
	        GetPlayerPos(playerid,pX,pY,pZ);
	        new Float:vX,Float:vY,Float:vZ;
	        new Found=0;
	        new vid=0;
	        while((vid<MAX_VEHICLES)&&(!Found))
	        {
	        	vid++;
	         	GetVehiclePos(vid,vX,vY,vZ);
	          	if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
	           	{
	            	Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	 				{
	     				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	         		}
	      			AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
	       			SendClientMessage(playerid,COLOR_YELLOW,"Fahrzeug am Haken.");
	            }
	        }
		}
    }
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vid = GetPlayerVehicleID(playerid);
	    if(!IsAFlugzeug(vid) && !IsAFahrrad(vid) && !IsABoot(vid))
	    {
	        if(newkeys & ( KEY_LOOK_LEFT ) && newkeys & ( KEY_LOOK_RIGHT ))
	        {
	            if(Indicators_xqz[vid][2] /*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]),DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
	    		else if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]),DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
	            else
	            SetVehicleIndicator(vid,1,1);
	            return 1;
	        }
	        else if(newkeys & KEY_LOOK_RIGHT)
	        {
	        	if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]), DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
				else if(Indicators_xqz[vid][2]/*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]), DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
	            else
	            SetVehicleIndicator(vid,0,1);
	        }
	        else if(newkeys & KEY_LOOK_LEFT)
	        {
	            if(Indicators_xqz[vid][2]/*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]),DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
				else if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]),DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
	            else
	            SetVehicleIndicator(vid,1,0);
	        }
		}
    }
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	new pip[16], string[235];
	foreach(new i : Player)
	{
	    GetPlayerIp(i, pip, sizeof(pip));
     	if(!strcmp(ip, pip, true))
		{
		    if(!success)
			{
				format(string,235,"RCON: %s hat sich versucht mit dem Passwort '%s' einzuloggen. IP-Adresse: %s | GESCHEITERT",SpielerInfo[i][sName],password,ip);
				SendClientMessage(i,COLOR_SORRY,"Dein Fehlversuch dich als RCON einzuloggen, wurde an die Administration weitergegeben und samt IP-Adresse gespeichert.");
			}
		    else format(string,235,"RCON: %s hat sich versucht mit dem Passwort '%s' einzuloggen. IP-Adresse: %s | ERFOLGREICH",SpielerInfo[i][sName],password,ip);
			SendLeiterMessage(COLOR_SORRY,string);
			LogRcon(string);
			break;
		}
	}
	return 0;
}

public OnPlayerUpdate(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<MAX_NAGELBAENDER;i++)
		{
		 	if(NagelBand[i][Erstellt] == true)
		    {
			  	if(IsVehicleInRangeOfPoint(vehicleid,2.0,NagelBand[i][oPosX],NagelBand[i][oPosY],NagelBand[i][oPosZ]))
			   	{
					UpdateVehicleDamageStatus(vehicleid,VEHICLE_PANEL_STATUS:0,VEHICLE_DOOR_STATUS:0,VEHICLE_LIGHT_STATUS:0,VEHICLE_TYRE_STATUS:ReifenPlatt(1,1,1,1));
				}
			}
		}
	}
	switch(GetPlayerWeapon(playerid))
	{
 		case WEAPON_NIGHT_VISION_GOGGLES, WEAPON_THERMAL_GOGGLES:
 		{
		    new KEY:keys, KEY:ud, KEY:lr;
		    GetPlayerKeys(playerid, keys, ud, lr);
		    if((keys & KEY_FIRE) && (!IsPlayerInAnyVehicle(playerid)))
			{
				return 0;
			}
		}
	}
	if(Afk[playerid] == 0)
    {
    	lastUpdate[playerid] = GetTickCount();
    }
	return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
    new playervehicleid = GetPlayerVehicleID(playerid);
	new Float:pX, Float:pY, Float:pZ;
	GetVehiclePos(playervehicleid,pX,pY,pZ);
	if(GetPVarInt(playerid,"TrailerUpdate") == 0)
	{
	    if(GetPVarInt(playerid,"TruckerAngebot") == 1)
	    {
			if(vehicleid != SpielerLKWTrailer[playerid])
		    {
				SendClientMessage(playerid,COLOR_SORRY,"Das ist nicht dein Anhänger! Dein Anhänger befindet sich am roten Marker.");
				DetachTrailerFromVehicle(playervehicleid);
    			SetVehiclePos(playervehicleid,pX+3,pY,pZ);
			    LinkVehicleToInterior(playervehicleid,GetPlayerInterior(playerid));
			    SetVehicleVirtualWorld(playervehicleid,GetPlayerVirtualWorld(playerid));
			    AC_PutPlayerInVehicleEx(playerid, playervehicleid, 0);
		    }
		    else
		    {
				SetPVarInt(playerid,"TrailerUpdate",1);
				DisablePlayerCheckpoint(playerid);
				KeineFunktion
			}
		}
		else if(GetPVarInt(playerid,"TruckerAngebot") == 2)
		{
		    if(vehicleid != SpielerLKWTrailer[playerid])
		    {
				SendClientMessage(playerid,COLOR_SORRY,"Das ist nicht dein Anhänger! Dein Anhänger befindet sich am roten Marker.");
				DetachTrailerFromVehicle(playervehicleid);
 				SetVehiclePos(playervehicleid,pX+3,pY,pZ);
			    LinkVehicleToInterior(playervehicleid,GetPlayerInterior(playerid));
			    SetVehicleVirtualWorld(playervehicleid,GetPlayerVirtualWorld(playerid));
			    AC_PutPlayerInVehicleEx(playerid, playervehicleid, 0);
		    }
		    else
		    {
		        SetPVarInt(playerid,"TrailerUpdate",1);
		        DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,2607.1702,-2187.9561,14.1298,5.0);
				SendClientMessage(playerid,COLOR_YELLOW,"Begebe dich nun zum Hafen um deinen Anhänger aufzufüllen. Der Hafen befindet sich am roten Marker.");
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(GetPVarInt(playerid,"CopMaske") == 1 || GetPVarInt(playerid,"HitmanMaske") == 1 || GetPVarInt(playerid,"GruppenMaske") == 1)
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    switch(dialogid)
	{
		case DIALOG_BOMBE_ENT:
		{
		    new bombID = BombenIDVar[playerid];
			if(response == 0)
			{
				BombenIDVar[playerid] = -1;
				return true;
			}
			if(response == 1)
			{
				switch(listitem)
				{
				    case 0: //rot
				    {
				        if(BombenInfo[bombID][bombfarbe] == 1)
				        {
				            SendClientMessage(playerid,COLOR_SUPER,"Du hast die Bombe erfolgreich entschärft!");
		                    GangZoneDestroy(BombenInfo[bombID][bombzone]);
		                    DestroyPickup(BombenInfo[bombID][bombPickup]);
		                    BombenInfo[bombID][bombcreate] = 0;
		                    BombenInfo[bombID][bombtime] = 0;
							return true;
						}
						else if(BombenInfo[bombID][bombfarbe] != 1)
						{
							SendClientMessage(playerid,COLOR_SORRY,"Achtung! Die Bombe beginnt schneller zu blinken!");
				            BombenInfo[bombID][bombtime] = 1;
				            return true;
						}
					}
					case 1: //gelb
				    {
				        if(BombenInfo[bombID][bombfarbe] == 2)
				        {
                            SendClientMessage(playerid,COLOR_SUPER,"Du hast die Bombe erfolgreich entschärft!");
		                    GangZoneDestroy(BombenInfo[bombID][bombzone]);
		                    DestroyPickup(BombenInfo[bombID][bombPickup]);
		                    BombenInfo[bombID][bombcreate] = 0;
		                    BombenInfo[bombID][bombtime] = 0;
							return true;
						}
						else if(BombenInfo[bombID][bombfarbe] != 2)
						{
						    SendClientMessage(playerid,COLOR_SORRY,"Achtung! Die Bombe beginnt schneller zu blinken!");
				            BombenInfo[bombID][bombtime] = 1;
				            return true;
						}
					}
				    case 2: //grün
				    {
				        if(BombenInfo[bombID][bombfarbe] == 3)
				        {
							SendClientMessage(playerid,COLOR_SUPER,"Du hast die Bombe erfolgreich entschärft!");
		                    GangZoneDestroy(BombenInfo[bombID][bombzone]);
		                    DestroyPickup(BombenInfo[bombID][bombPickup]);
		                    BombenInfo[bombID][bombcreate] = 0;
		                    BombenInfo[bombID][bombtime] = 0;
							return true;
						}
						else if(BombenInfo[bombID][bombfarbe] != 3)
						{
						    SendClientMessage(playerid,COLOR_SORRY,"Achtung! Die Bombe beginnt schneller zu blinken!");
				            BombenInfo[bombID][bombtime] = 1;
				            return true;
						}
					}
				}
			}
			return true;
		}
		
		case DIALOG_BOMBE:
		{
			new bombID = BombenIDVar[playerid];
			if(response == 0)
			{
				BombenIDVar[playerid] = -1;
				return true;
			}
			if(response == 1)
			{
				switch(listitem)
				{
				    case 0: //rot
				    {
				        BombenInfo[bombID][bombcreate] = 1;
				        BombenInfo[bombID][bombtime] = 90;
				        BombenInfo[bombID][bombfarbe] = 1;
						BombenInfo[bombID][bombPickup] = CreatePickup(1654,1,BombenInfo[bombID][bombPos][0],BombenInfo[bombID][bombPos][1],BombenInfo[bombID][bombPos][2]);
						BombenInfo[bombID][bombzone] = GangZoneCreate(BombenInfo[bombID][bombPos][0]-60,BombenInfo[bombID][bombPos][1]-60,BombenInfo[bombID][bombPos][0]+60,BombenInfo[bombID][bombPos][1]+60);
						GangZoneShowForAll(BombenInfo[bombID][bombzone],0xFF000065);
						GangZoneFlashForAll(BombenInfo[bombID][bombzone],0xC3FF004F);
						OnePlayAnim(playerid,"BOMBER","BOM_Plant",4.0,false,false,false,false,0);
		   				SpielerInfo[playerid][sc4] -= 10;
						SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! AM BLINKENDEN GEBIET WURDE EINE BOMBE GELEGT!");
						return true;
					}
					case 1: //gelb
				    {
				        BombenInfo[bombID][bombcreate] = 1;
				        BombenInfo[bombID][bombtime] = 90;
				        BombenInfo[bombID][bombfarbe] = 2;
						BombenInfo[bombID][bombPickup] = CreatePickup(1654,1,BombenInfo[bombID][bombPos][0],BombenInfo[bombID][bombPos][1],BombenInfo[bombID][bombPos][2]);
						BombenInfo[bombID][bombzone] = GangZoneCreate(BombenInfo[bombID][bombPos][0]-60,BombenInfo[bombID][bombPos][1]-60,BombenInfo[bombID][bombPos][0]+60,BombenInfo[bombID][bombPos][1]+60);
						GangZoneShowForAll(BombenInfo[bombID][bombzone],0xFF000065);
						GangZoneFlashForAll(BombenInfo[bombID][bombzone],0xC3FF004F);
						OnePlayAnim(playerid,"BOMBER","BOM_Plant",4.0,false,false,false,false,0);
		   				SpielerInfo[playerid][sc4] -= 10;
						SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! AM BLINKENDEN GEBIET WURDE EINE BOMBE GELEGT!");
						return true;
					}
					case 2: //grün
				    {
				        BombenInfo[bombID][bombcreate] = 1;
				        BombenInfo[bombID][bombtime] = 90;
				        BombenInfo[bombID][bombfarbe] = 3;
						BombenInfo[bombID][bombPickup] = CreatePickup(1654,1,BombenInfo[bombID][bombPos][0],BombenInfo[bombID][bombPos][1],BombenInfo[bombID][bombPos][2]);
						BombenInfo[bombID][bombzone] = GangZoneCreate(BombenInfo[bombID][bombPos][0]-60,BombenInfo[bombID][bombPos][1]-60,BombenInfo[bombID][bombPos][0]+60,BombenInfo[bombID][bombPos][1]+60);
						GangZoneShowForAll(BombenInfo[bombID][bombzone],0xFF000065);
						GangZoneFlashForAll(BombenInfo[bombID][bombzone],0xC3FF004F);
						OnePlayAnim(playerid,"BOMBER","BOM_Plant",4.0,false,false,false,false,0);
		   				SpielerInfo[playerid][sc4] -= 10;
						SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! AM BLINKENDEN GEBIET WURDE EINE BOMBE GELEGT!");
						return true;
					}
				}
			}
			return true;
		}
		
	    case DIALOG_SERVEREDIT:
	    {
	        if(response)
			{
				switch(listitem)
				{
				    case 0:
					{
					    new string[512];
						format(string,sizeof(string),"\t\t{007DFF}"SERV_NAME" | Message of the day\n\n\nAktuelle Message:\n%s\n\nMöchtest du deinen Text anhängen oder ersetzen?",sachen[Motd]);
						return ShowPlayerDialog(playerid,DIALOG_SERVEREDIT_MOTD,DIALOG_STYLE_INPUT," ",string,"Anhängen","Ersetzen");
					}
				}
			}
		}
		case DIALOG_SERVEREDIT_MOTD:
		{
			if(!response)
			{
			    new query[256], string[256];
			    format(sachen[Motd],128,inputtext);
	   			TextDrawSetString(Logindraw[11],string);
	   			printf("Neu: %s",sachen[Motd]);
				SendClientMessage(playerid,COLOR_INFO,"Die Message of the Day wurde ersetzt!");
				mysql_format(sqlHandle, query,sizeof query,"UPDATE `stuff` SET `motd`='%s' WHERE `id`='0'",sachen[Motd]);
				mysql_tquery(sqlHandle, query);
			}
		    if(response)
		    {
		        new query[256], string[256];
		        format(sachen[Motd],sizeof(sachen[Motd]),"%s %s",sachen[Motd],inputtext);
				format(string,sizeof(string),"%s",sachen[Motd]);
				TextDrawSetString(Logindraw[11],string);
				printf("Angehangen: %s",sachen[Motd]);
				SendClientMessage(playerid,COLOR_INFO,"Die Message of the Day wurde bearbeitet!");
				mysql_format(sqlHandle, query,sizeof query,"UPDATE `stuff` SET `motd`='%s' WHERE `id`='0'",sachen[Motd]);
				mysql_tquery(sqlHandle, query);
		
		    }
		}
	    case DIALOG_REGSTEP1:
		{
		    if(response==0){Kick(playerid);}//Zurück
		    if(response==1)//Weiter
		    {
		        if(strlen(inputtext) < 8 || strlen(inputtext) > 24)
		        {
		            new reggstring[320];
					format(reggstring,sizeof(reggstring),"{FFFFFF}Willkommen auf "SERV_NAME" {007DFF}%s{FFFFFF}.\nBitte erstelle dir einen Account. Mit diesem wirst du dann am Spiel teilhaben können.\nWähle für deinen Account ein sicheres Passwort, es muss zwischen {FE0000}8 und 24 Zeichen{FFFFFF} lang sein.",SpielerInfo[playerid][sName]);
		    		ShowPlayerDialog(playerid,DIALOG_REGSTEP1,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" | Account erstellen 1/4",reggstring,"Erstellen","");
		        }
		        else
		        {
					bcrypt_hash(playerid,"OnPassswordHash",inputtext, BCRYPT_COST);
		        }
		    }
		}
		case DIALOG_REGSTEP2:
		{
		    if(response==1)//Weiter
		    {
		        if(strlen(inputtext) < 1)
		        {
		            ShowPlayerDialog(playerid,DIALOG_REGSTEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Account erstellen 2/4","{FFFFFF}Bitte gebe in der unteren Box eine gültige E-Mail Adresse ein. Du erhälst Mails von "SERV_NAME". Unter anderem\nwird auch ein Forum Account auf {FE0000}"SERV_WURL"{FFFFFF} für dich mit dieser Email-Adresse angelegt.","Absenden","");
		        }
		        else
		        {
          			if(strfind(inputtext, "@", true) != -1)
          			{
          			    new altgstring[295], email[32], password[128];
          			    GetPVarString(playerid,"Passwort",password,128);
          			    format(email,sizeof(email),"%s",inputtext);
          			    SpielerInfo[playerid][sEmail] = email;
          			    mysql_SetString("accounts", "Email", SpielerInfo[playerid][sEmail], "Name", SpielerInfo[playerid][sName]);
          			    format(altgstring,sizeof(altgstring),"{FFFFFF}Deine Email Adresse ist: {007DFF}%s{FFFFFF}\nDamit dein Account weiter vervollständigt ist, gebe nun bitte dein Geburtsdatum an. Daraus wird dann dein Alter berechnet.\nUm dein korrektes Alter zu berechnen verwende das Format TT.MM.JJJJ (Tag.Monat.Jahr).",SpielerInfo[playerid][sEmail]);
          			    ShowPlayerDialog(playerid,DIALOG_REGSTEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Account erstellen 3/4",altgstring,"Weiter","");
						DeletePVar(playerid,"Passwort");
					}
             		else ShowPlayerDialog(playerid,DIALOG_REGSTEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Account erstellen 2/4","{FFFFFF}Bitte gebe in der unteren Box eine gültige E-Mail Adresse ein. Du erhälst Mails von "SERV_NAME". Unter anderem\nwird auch ein Forum Account auf "SERV_WURL" für dich mit dieser Email-Adresse angelegt.\n\n{FFFFFF}Die Email-Adresse ist {FE0000}ungültig{FFFFFF} oder nicht registriert.","Absenden","");
		        }
		    }
		}
		case DIALOG_REGSTEP3:
		{
		    if(response==1)//Weiter
		    {
		        new altgstring[350];
		        format(altgstring,sizeof(altgstring),"{FFFFFF}Deine Email Adresse ist: {007DFF}%s{FFFFFF}\nDamit dein Account weiter vervollständigt ist, gebe nun bitte dein Geburtsdatum an. Daraus wird dann dein Alter berechnet.\nUm dein korrektes Alter zu berechnen verwende das Format TT.MM.JJJJ (Tag.Monat.Jahr).",SpielerInfo[playerid][sEmail]);
		        if(strlen(inputtext) < 1)
		        {
		            ShowPlayerDialog(playerid,DIALOG_REGSTEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Account erstellen 3/4",altgstring,"Weiter","");
		        }
		        else
		        {
		            new var[16];
		            format(var,sizeof(var),"%s",inputtext);
		            new alter = GetAge(var);
		            if(alter > 7 && alter < 99)
		            {
						mysql_SetInt("accounts", "Alter", alter, "Name", SpielerInfo[playerid][sName]);
						mysql_SetString("accounts", "Geburtsdatum", inputtext, "Name", SpielerInfo[playerid][sName]);
				        format(altgstring,sizeof(altgstring),"{FFFFFF}Du bist also {007DFF}%d{FFFFFF} Jahre alt.\nDamit dein Account weiter vervollständigt ist, brauchen wir noch dein Geschlecht.",alter);
            			ShowPlayerDialog(playerid,DIALOG_REGSTEP4,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Account erstellen 4/4",altgstring,"Männlich","Weiblich");
		            }
		            else
		            {
		        		format(altgstring,sizeof(altgstring),"{FFFFFF}Deine Email Adresse ist: {007DFF}%s{FFFFFF}\nDamit dein Account weiter vervollständigt ist, gebe nun bitte dein Geburtsdatum an. Daraus wird dann dein Alter berechnet.\nUm dein korrektes Alter zu berechnen verwende das Format TT.MM.JJJJ (Tag.Monat.Jahr).\n\nBitte gebe dein {FE0000}korrektes Geburtsdatum{FFFFFF} ein.",SpielerInfo[playerid][sEmail]);
                        ShowPlayerDialog(playerid,DIALOG_REGSTEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Account erstellen 3/4",altgstring,"Weiter","");
					}
		        }
		    }
		}
		case DIALOG_REGSTEP4:
		{
		    if(response==1)//Männlich
		    {
		        KillTimer(CamFahrten[playerid]);
		        StopAudioStreamForPlayer(playerid);
		        SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Du bist also {007DFF}Männlich{FFFFFF}.");
		        SendClientMessage(playerid,COLOR_YELLOW,"Das "SERV_NAME" Team wünscht dir viel Spaß und Erfolg.");
	            SpielerInfo[playerid][sGeschlecht] = 1;
	            mysql_SetInt("accounts", "Geschlecht", 1, "Name", SpielerInfo[playerid][sName]);
	            mysql_SetInt("accounts", "KnastSkin", 62, "Name", SpielerInfo[playerid][sName]);
	            mysql_SetInt("accounts", "SkinID", 26, "Name", SpielerInfo[playerid][sName]);
	            mysql_SetInt("accounts", "Stadt", 1, "Name", SpielerInfo[playerid][sName]);
	            SpielerInfo[playerid][sStadt] = 1;
				TogglePlayerSpectating(playerid,false);
	            SpawnPlayerEx(playerid);
		    }
		    else if(response==0)//Weiblich
		    {
      			KillTimer(CamFahrten[playerid]);
		        StopAudioStreamForPlayer(playerid);
		        SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Du bist also {007DFF}Weiblich{FFFFFF}.");
		        SendClientMessage(playerid,COLOR_YELLOW,"Das "SERV_NAME" Team wünscht dir viel Spaß und Erfolg.");
	            SpielerInfo[playerid][sGeschlecht] = 2;
	            mysql_SetInt("accounts", "Geschlecht", 2, "Name", SpielerInfo[playerid][sName]);
	            mysql_SetInt("accounts", "KnastSkin", 191, "Name", SpielerInfo[playerid][sName]);
				mysql_SetInt("accounts", "SkinID", 193, "Name", SpielerInfo[playerid][sName]);
				mysql_SetInt("accounts", "Stadt", 1, "Name", SpielerInfo[playerid][sName]);
	            SpielerInfo[playerid][sStadt] = 1;
				TogglePlayerSpectating(playerid,false);
	            SpawnPlayerEx(playerid);
		    }
		}
		case DIALOG_LOGIN:
		{
  			if(response==0){Kick(playerid);}//Zurück
		    if(response==1)//Weiter
		    {
		        if(strlen(inputtext) < 8)
		        {
					new logingstring[340];
	            	format(logingstring,sizeof(logingstring),"{FFFFFF}Willkommen zurück auf "SERV_NAME" {007DFF}%s{FFFFFF}.\nIn unserer Datenbank wurde dein Account gefunden. Bitte logge dich ein indem du das Passwort\neingibst was du bei deiner Registration gewählt hattest. Bei Fragen wende dich an unser Team.\n\n{FE0000}Passwort und Accountname stimmen nicht überein.",SpielerInfo[playerid][sName]);
	            	ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" | Einloggen",logingstring,"Weiter","");
		        }
				new query[128];
				mysql_format(sqlHandle, query, sizeof(query), "SELECT `Passwort` FROM `accounts` WHERE `Name` = '%s'", SpielerInfo[playerid][sName]);
				mysql_tquery(sqlHandle, query, "onPlayerEnterPassword", "is", playerid, inputtext);
			}
		}
		case DIALOG_FAHRSCHULE:
		{
  			if(response==0){}//Zurück
		    if(response==1)//Weiter
		    {
		    	switch(listitem)
		    	{
		        	case 0://Autoschein
					{
		        	    if(SpielerInfo[playerid][sCarLic] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits einen Autoschein.");
		        	    ShowPlayerDialog(playerid,DIALOG_FSCHEIN_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autoschein","{FFFFFF}Möchtest du den Autoschein für {FF0000}1000${FFFFFF} machen ?","Ja","Nein");
		        	    SetPVarInt(playerid,"FScheinAuswahl",1);
					}
 					case 1://Flugschein
		        	{
		        	    if(SpielerInfo[playerid][sFlugLic] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits einen Flugschein.");
		        	    ShowPlayerDialog(playerid,DIALOG_FSCHEIN_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Flugschein","{FFFFFF}Möchtest du den Flugschein für {FF0000}3000${FFFFFF} machen ?","Ja","Nein");
                        SetPVarInt(playerid,"FScheinAuswahl",2);
					}
					case 2://LKWschein
		        	{
		        	    if(SpielerInfo[playerid][sTruckLic] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits einen LKWschein.");
		        	    ShowPlayerDialog(playerid,DIALOG_FSCHEIN_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | LKWschein","{FFFFFF}Möchtest du den LKWschein für {FF0000}2000${FFFFFF} machen ?","Ja","Nein");
                        SetPVarInt(playerid,"FScheinAuswahl",3);
					}
 					case 3://Motorradschein
		        	{
		        	    if(SpielerInfo[playerid][sBikeLic] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits einen Motorradschein.");
		        	    ShowPlayerDialog(playerid,DIALOG_FSCHEIN_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Motorradschein","{FFFFFF}Möchtest du den Motorradschein für {FF0000}800${FFFFFF} machen ?","Ja","Nein");
                        SetPVarInt(playerid,"FScheinAuswahl",4);
					}
					case 4://Bootschein
		        	{
		        	    if(SpielerInfo[playerid][sBootLic] == 1)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits einen Bootschein.");
		        	    ShowPlayerDialog(playerid,DIALOG_FSCHEIN_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Motorradschein","{FFFFFF}Möchtest du den Bootschein für {FF0000}600${FFFFFF} machen ?","Ja","Nein");
                        SetPVarInt(playerid,"FScheinAuswahl",5);
					}
				}
		    }
		}
		case DIALOG_FSCHEIN_INFOS:
		{
  			if(response==0){DeletePVar(playerid,"FScheinAuswahl");}//Zurück
		    if(response==1)//Weiter
		    {
		        if(SpielerInfo[playerid][sPerso] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keinen Personalausweis. Begebe dich zu Stadthalle und beantrage dort deinen Personalausweis.");
		        if(GetPVarInt(playerid,"FScheinAuswahl") == 1)//Autoschein
		        {
					if(GetPlayerMoneyEx(playerid) < 1000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld dabei.");
					SetPVarInt(playerid,"FSchein",1);
					GivePlayerMoneyEx(playerid,-1000);
				}
    			else if(GetPVarInt(playerid,"FScheinAuswahl") == 2)//Flugschein
		        {
					if(GetPlayerMoneyEx(playerid) < 3000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld dabei.");
					SetPVarInt(playerid,"FSchein",2);
					GivePlayerMoneyEx(playerid,-3000);
				}
    			else if(GetPVarInt(playerid,"FScheinAuswahl") == 3)//LKWschein
		        {
					if(GetPlayerMoneyEx(playerid) < 2000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld dabei.");
					SetPVarInt(playerid,"FSchein",3);
					GivePlayerMoneyEx(playerid,-2000);
				}
 				else if(GetPVarInt(playerid,"FScheinAuswahl") == 4)//Motorradschein
		        {
					if(GetPlayerMoneyEx(playerid) < 800)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld dabei.");
					SetPVarInt(playerid,"FSchein",4);
					GivePlayerMoneyEx(playerid,-800);
				}
				else if(GetPVarInt(playerid,"FScheinAuswahl") == 5)//Bootschein
		        {
					if(GetPlayerMoneyEx(playerid) < 600)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld dabei.");
					SetPVarInt(playerid,"FSchein",5);
					SetPVarInt(playerid,"FahrschulStunde",1);
					GivePlayerMoneyEx(playerid,-600);
					CreateFCar(playerid,5);
					schulung[playerid] = 5;
					SetPlayerCheckpoint(playerid,-3078.3984,631.2441,0.4050,5.0);
					SendClientMessage(playerid, COLOR_YELLOW, "Der erste Checkpoint wurde gesetzt. Fahr vorsichtig.");
					SendClientMessage(playerid,COLOR_INFO,"* Du kannst den Motor mit '/motor' anmachen.");
					return 1;
				}
				if(SpielerInfo[playerid][sQuest] == 1)
				{
					PlayerTextDrawHide(playerid,QuestTextdraw[playerid][0]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][1]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][3]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
		            PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
				}
				
				new line[4][164];
				new str[564];
				SetPVarInt(playerid,"Theori",1);
				DeletePVar(playerid,"FScheinAuswahl");
				SetPlayerPos(playerid,1499.8525,1306.6119,1093.7810);
				SetPlayerFacingAngle(playerid,265.3630);
				TogglePlayerControllable(playerid,false);

				if(GetPVarInt(playerid,"FSchein") == 1)
				{
					format(line[0],164,"{FF0000}~ Willkommen ~");
					format(line[1],164,"{FFFFFF}Willkommen zum Theoretischen Teil der San Andreas Fahrprüfung.");
					format(line[2],164,"{FFFFFF}Normalerweise ist dein Verhalten im Straßenverkehr immer von der Situation abhängig.");
					format(line[3],164,"{FFFFFF}Dennoch werden wir dir zunächst die Grundlagen erklären.");
					format(str,sizeof str,"%s\n\n%s\n%s\n%s",line[0],line[1],line[2],line[3]);
					ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
				}
				else if(GetPVarInt(playerid,"FSchein") == 2)
				{
					format(line[0],164,"{FF0000}~ Willkommen ~");
					format(line[1],164,"{FFFFFF}Willkommen zum Theoretischen Teil der San Andreas Flugprüfung.");
					format(line[2],164,"{FFFFFF}Normalerweise ist dein Verhalten im Flugverkehr immer von der Situation abhängig.");
					format(line[3],164,"{FFFFFF}Dennoch werden wir dir zunächst die Grundlagen erklären.");
					format(str,sizeof str,"%s\n\n%s\n%s\n%s",line[0],line[1],line[2],line[3]);
					ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
				}
		    }
	    }
  		case DIALOG_ADMIN_PANEL:
		{
		    if(response==0){DeletePVar(playerid,"ClickedPlayer");}
			else if(response==1)//Weiter
			{
			    new string[464];
			    switch(listitem)
			    {
			        case 0://Spielerstatistik
			        {
						KeineFunktion
					}
			        case 1://Spieler Kicken
			        {
			            if(SpielerInfo[playerid][sAdmin] < SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sAdmin])return NichtBerechtigt
						format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server gekickt werden soll.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
						ShowPlayerDialog(playerid,DIALOG_APANEL_KICK_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
					}
			        case 2://Spieler Bannen
			        {
			            if(SpielerInfo[playerid][sAdmin] < SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sAdmin])return NichtBerechtigt
						format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server permanent gebannt werden soll.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
						ShowPlayerDialog(playerid,DIALOG_APANEL_BANN_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
			        }
			        case 3://Spieler Timebannen
			        {
			            if(SpielerInfo[playerid][sAdmin] < SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sAdmin])return NichtBerechtigt
						format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server Zeit gebannt werden soll.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
						ShowPlayerDialog(playerid,DIALOG_APANEL_TIMEBANN_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
			        }
			    }
			}
		}
		case DIALOG_APANEL_KICK_GRUND:
		{
  			if(response==0){DeletePVar(playerid,"ClickedPlayer");}//Zurück
		    if(response==1)//Weiter
		    {
		        new string[340];
     			if(strlen(inputtext) < 1 || strlen(inputtext) > 64)
		        {
					format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server gekickt werden soll.\n\n{FE0000}Du musst einen Grund eingeben der maximal64 Zeichen lang sein darf.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_KICK_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
				}
				else
				{
					format(string,sizeof(string),"{FFFFFF}Bist du sicher, dass du den Spieler {FE0000}%s{FFFFFF} vom Server kicken möchtest ?",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_KICK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Bestätigung",string,"Ja","Nein");
	                SetPVarString(playerid,"KickGrund",inputtext);
				}
			}
	    }
   		case DIALOG_APANEL_KICK:
		{
  			if(response==0)//Nein
  			{
			  DeletePVar(playerid,"ClickedPlayer");
			  DeletePVar(playerid,"KickGrund");
			}
		    if(response==1)//Ja
		    {
				new Grund[64], string[128];
				GetPVarString(playerid,"KickGrund",Grund,64);
				format(string,128,"%s %s hat dich vom Server gekickt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Grund);
				SendClientMessage(GetPVarInt(playerid,"ClickedPlayer"),COLOR_SORRY,string);
				format(string,128,"%s wurde von %s %s gekickt. Grund: %s",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName],AdminName(playerid),SpielerInfo[playerid][sName],Grund);
				SendICPMessage(string);
				KickPlayer(GetPVarInt(playerid,"ClickedPlayer"),string);
				DeletePVar(playerid,"KickGrund");
				DeletePVar(playerid,"ClickedPlayer");
			}
	    }
   		case DIALOG_APANEL_BANN_GRUND:
		{
  			if(response==0){DeletePVar(playerid,"ClickedPlayer");}//Zurück
		    if(response==1)//Weiter
		    {
      			new string[340];
     			if(strlen(inputtext) < 1 || strlen(inputtext) > 64)
		        {
					format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server permanent gebannt werden soll.\n\n{FE0000}Du musst einen Grund eingeben der maximal64 Zeichen lang sein darf.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_BANN_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
		        }
		        else
		        {
					format(string,sizeof(string),"{FFFFFF}Bist du sicher, dass du den Spieler {FE0000}%s{FFFFFF} vom Server permanent bannen möchtest ?",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_BANN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Bestätigung",string,"Ja","Nein");
	                SetPVarString(playerid,"BannGrund",inputtext);
                }
			}
	    }
   		case DIALOG_APANEL_BANN:
		{
  			if(response==0)//Nein
  			{
			  DeletePVar(playerid,"ClickedPlayer");
			  DeletePVar(playerid,"BannGrund");
			}
		    if(response==1)//Ja
		    {
				new Grund[64], string[128];
				GetPVarString(playerid,"BannGrund",Grund,64);
                format(string,128,"%s wurde von %s %s permanent gebannt: Grund: %s",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName],AdminName(playerid),SpielerInfo[playerid][sName],Grund);
				SendICPMessage(string);
				LogBan(string);
				format(string,128,"%s %s hat dich permanent gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],Grund);
				SendClientMessage(GetPVarInt(playerid,"ClickedPlayer"),COLOR_SORRY,string);
				BanPlayer(GetPVarInt(playerid,"ClickedPlayer"),SpielerInfo[playerid][sName],Grund);
				DeletePVar(playerid,"BannGrund");
				DeletePVar(playerid,"ClickedPlayer");
			}
	    }
   		case DIALOG_APANEL_TIMEBANN_GRUND:
		{
  			if(response==0){DeletePVar(playerid,"ClickedPlayer");}//Zurück
		    if(response==1)//Weiter
		    {
      			new string[340];
     			if(strlen(inputtext) < 1 || strlen(inputtext) > 64)
		        {
					format(string,sizeof(string),"{FFFFFF}{FFFFFF}Bitte gebe unten einen Grund an,\nwarum der Spieler {FE0000}%s{FFFFFF} vom Server Zeit gebannt werden soll.\n\n{FE0000}Du musst einen Grund eingeben der maximal64 Zeichen lang sein darf.",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_TIMEBANN_GRUND,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
		        }
		        else
		        {
					format(string,sizeof(string),"{FFFFFF}Wie lange soll der %s vom Server gebannt werden ?\n{FE0000}Angaben in Minuten (5-1440)",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_TIMEBANN_MINUTEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Minuten",string,"Weiter","Abbrechen");
	                SetPVarString(playerid,"TimeBannGrund",inputtext);
                }
			}
	    }
 		case DIALOG_APANEL_TIMEBANN_MINUTEN:
		{
  			if(response==0)//Abbrechen
  			{
			  DeletePVar(playerid,"ClickedPlayer");
			  DeletePVar(playerid,"TimeBannGrund");
			}
		    if(response==1)//Weiter
		    {
      			new string[340];
				if(strlen(inputtext) > 1 && strlen(inputtext) < 4 && IsNumeric(inputtext))
				{
					SetPVarInt(playerid,"TimeBann",strval(inputtext));
					format(string,sizeof(string),"{FFFFFF}Bist du sicher, dass du den Spieler {FE0000}%s{FFFFFF} für %d Minuten vom Server permanent bannen möchtest ?",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName],strval(inputtext));
					ShowPlayerDialog(playerid,DIALOG_APANEL_TIMEBANN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Grund",string,"Weiter","Abbrechen");
		        }
		        else
		        {
					format(string,sizeof(string),"{FFFFFF}Wie lange soll der %s vom Server gebannt werden ?\n{FE0000}Angaben in Minuten (5-1440)",SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName]);
					ShowPlayerDialog(playerid,DIALOG_APANEL_TIMEBANN_MINUTEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Minuten",string,"Weiter","Abbrechen");
                }
			}
	    }
   		case DIALOG_APANEL_TIMEBANN:
		{
  			if(response==0)//Nein
  			{
			  DeletePVar(playerid,"ClickedPlayer");
			  DeletePVar(playerid,"TimeBannGrund");
			  DeletePVar(playerid,"TimeBann");
  			}
		    if(response==1)//Ja
		    {
				new Grund[64], string[128];
				GetPVarString(playerid,"TimeBannGrund",Grund,64);
				format(string,128,"%s %s hat den %s für %d Minuten gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],SpielerInfo[GetPVarInt(playerid,"ClickedPlayer")][sName],GetPVarInt(playerid,"TimeBann"),Grund);
			    SendICPMessage(string);
			    LogTBan(string);
			    format(string,128,"%s %s hat dich für %d Minuten gebannt. Grund: %s",AdminName(playerid),SpielerInfo[playerid][sName],GetPVarInt(playerid,"TimeBann"),Grund);
			    SendClientMessage(GetPVarInt(playerid,"ClickedPlayer"),COLOR_SORRY,string);
		        TBanPlayer(GetPVarInt(playerid,"ClickedPlayer"),GetPVarInt(playerid,"TimeBann"),SpielerInfo[playerid][sName],Grund);
				DeletePVar(playerid,"TimeBann");
				DeletePVar(playerid,"BannGrund");
				DeletePVar(playerid,"ClickedPlayer");
			}
	    }
	    case DIALOG_SPAWNCHANGE:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Zivispawn
			        {
						SendClientMessage(playerid,COLOR_GREY,"Du spawnst ab sofort am Zivispawn.");
						SpielerInfo[playerid][sSpawn] = 0;
					}
     				case 1://Fraktion
			        {
						if(SpielerInfo[playerid][sFraktion] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du gehörst keiner Fraktion an.");
						SendClientMessage(playerid,COLOR_GREY,"Du spawnst ab sofort an deiner Fraktion.");
						SpielerInfo[playerid][sSpawn] = 1;
					}
 					case 2://Haus/Wohnung
			        {
			            if(SpielerInfo[playerid][sHaus] != 0 || SpielerInfo[playerid][sMieter] != 0)
			            {
							if(SpielerInfo[playerid][sHaus] > 0){SendClientMessage(playerid,COLOR_GREY,"Du spawnst ab sofort in deinem Haus.");}
							if(SpielerInfo[playerid][sMieter] > 0){SendClientMessage(playerid,COLOR_GREY,"Du spawnst ab sofort in deiner Wohnung.");}
							SpielerInfo[playerid][sSpawn] = 2;
						}
						else SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein(e) Haus/Wohnung.");
			        }
 					case 3://Gruppe
			        {
			            if(SpielerInfo[playerid][sGHaus] == 0)return SendClientMessage(playerid,COLOR_GREY,"Deine Gruppe besitzt derzeit kein Haus.");
						SpielerInfo[playerid][sSpawn] = 3;
						SendClientMessage(playerid,COLOR_GREY,"Du spawnst ab sofort im Gruppenhaus.");
			        }
				}
			}
		}
		case DIALOG_SARD_DUTY:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Sanitäter
			        {
						SetPVarInt(playerid,"MedicDienst",1);
      					ShowPlayerDialog(playerid,DIALOG_DUTY2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			        }
			        case 1://Feuerwehr
			        {
                        SetPVarInt(playerid,"FireDienst",1);
                        ShowPlayerDialog(playerid,DIALOG_DUTY2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Dienstauswahl","In den Dienst gehen","Weiter","Abbrechen");
			        }
				}
			}
		}
		case DIALOG_DUTY2:
	    {
     		if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Dienst betreten/verlassen
			        {
           				new string[200];
						if(SpielerInfo[playerid][sFraktion] == 5)
						{
							if(GetPVarInt(playerid,"MedicDienst") == 1)
							{
						        if(GetPVarInt(playerid,"MedicDuty") == 1)
						        {
                                    DeletePVar(playerid,"MedicDienst");
						            DeletePVar(playerid,"MedicDuty");
						            MedicDuty--;
									SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
							        ResetPlayerWeapons(playerid);
							        SetPlayerColor(playerid,COLOR_WHITE);
							        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
							        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							        return 1;
							    }
							    else
							    {
							        new skinid[3];
							        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
							        format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
					   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
									SetPlayerColor(playerid,COLOR_SORRY);
								    SetPVarInt(playerid,"MedicDuty",1);
								    GivePlayerWeapon(playerid,WEAPON_NITESTICK,1);
									GivePlayerWeapon(playerid,WEAPON_SPRAYCAN,99999);
								    MedicDuty++;
								    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								    return 1;
								}
							}
							if(GetPVarInt(playerid,"FireDienst") == 1)
							{
								if(GetPVarInt(playerid,"FireDuty") == 1)
						        {
						            DeletePVar(playerid,"FireDienst");
						            DeletePVar(playerid,"FireDuty");
									SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
							        ResetPlayerWeapons(playerid);
							        SetPlayerColor(playerid,COLOR_WHITE);
							        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
							        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							        return 1;
							    }
							    else
							    {
							        new skinid[3];
							        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
							        format(string,sizeof(string),"TRang%d",SpielerInfo[playerid][sRank]);
					   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
									SetPlayerColor(playerid,COLOR_SORRY);
								    SetPVarInt(playerid,"FireDuty",1);
								    GivePlayerWeapon(playerid,WEAPON_NITESTICK,1);
									GivePlayerWeapon(playerid,WEAPON_FIREEXTINGUISHER,99999);
								    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								    return 1;
								}
							}
						}
					}
				}
   			}
		}
		case DIALOG_DUTY_EQUIP:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Dienst betreten/verlassen
			        {
                        new string[200];
                        if(SpielerInfo[playerid][sFraktion] == 2)
                        {
					        if(GetPVarInt(playerid,"CopDuty") == 1)
					        {
					            DeletePVar(playerid,"CopDuty");
					            CopDuty--;
								SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
						        ResetPlayerWeapons(playerid);
						        SetPlayerArmour(playerid,0);
						        SetPlayerColor(playerid,COLOR_WHITE);
						        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
						        new skinid[3];
						        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
						        format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
				   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								SetPlayerColor(playerid,COLOR_BLUE);
							    SetPVarInt(playerid,"CopDuty",1);
							    CopDuty++;
							    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
							    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							}
						}
      					else if(SpielerInfo[playerid][sFraktion] == 6)
                        {
					        if(GetPVarInt(playerid,"FBIDuty") == 1)
					        {
					            DeletePVar(playerid,"FBIDuty");
					            FBIDuty--;
								SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
						        ResetPlayerWeapons(playerid);
						        SetPlayerArmour(playerid,0);
						        SetPlayerColor(playerid,COLOR_WHITE);
						        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
						        new skinid[3];
						        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
						        format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
				   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								SetPlayerColor(playerid,COLOR_BLUE);
							    SetPVarInt(playerid,"FBIDuty",1);
							    FBIDuty++;
							    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
							    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							}
						}
						else if(SpielerInfo[playerid][sFraktion] == 5)
						{
							if(SpielerInfo[playerid][sTeam] == 0)
							{
						        if(GetPVarInt(playerid,"MedicDuty") == 1)
						        {
						            DeletePVar(playerid,"MedicDuty");
						            MedicDuty--;
									SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
							        ResetPlayerWeapons(playerid);
							        SetPlayerColor(playerid,COLOR_WHITE);
							        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
							        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							        return 1;
							    }
							    else
							    {
							        new skinid[3];
							        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
							        format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
					   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
									SetPlayerColor(playerid,COLOR_SORRY);
								    SetPVarInt(playerid,"MedicDuty",1);
								    GivePlayerWeapon(playerid,WEAPON_NITESTICK,1);
									GivePlayerWeapon(playerid,WEAPON_SPRAYCAN,99999);
								    MedicDuty++;
								    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								    return 1;
								}
							}
							else if(SpielerInfo[playerid][sTeam] == 1)
							{
								if(GetPVarInt(playerid,"FireDuty") == 1)
						        {
						            DeletePVar(playerid,"FireDuty");
									SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
							        ResetPlayerWeapons(playerid);
							        SetPlayerColor(playerid,COLOR_WHITE);
							        format(string,128,"%s %s legt seine Dienstmarke in den Spint und tritt den Feierabend an.",RangName(playerid),SpielerInfo[playerid][sName]);
							        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
							        return 1;
							    }
							    else
							    {
							        new skinid[3];
							        format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
							        format(string,sizeof(string),"TRang%d",SpielerInfo[playerid][sRank]);
					   				SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
									SetPlayerColor(playerid,COLOR_SORRY);
								    SetPVarInt(playerid,"FireDuty",1);
								    GivePlayerWeapon(playerid,WEAPON_NITESTICK,1);
									GivePlayerWeapon(playerid,WEAPON_FIREEXTINGUISHER,99999);
								    format(string,128,"%s %s nimmt seine Dienstmarke aus dem Spint und meldet sich zum Dienst.",RangName(playerid),SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								    return 1;
								}
							}
						}
					}
     				case 1://Ausrüsten
			        {
				   		if(SpielerInfo[playerid][sFraktion] == 2 && GetPVarInt(playerid,"CopDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du musst erst in den Dienst gehen um dich ausrüsten zu können.");
				   		else if(SpielerInfo[playerid][sFraktion] == 6 && GetPVarInt(playerid,"FBIDuty") == 0)return SendClientMessage(playerid,COLOR_GREY,"Du musst erst in den Dienst gehen um dich ausrüsten zu können.");
					    if(GetPVarInt(playerid,"PDEquipt") == 1)return SendClientMessage(playerid,COLOR_RED,"Du kannst dich nur alle 3 Minuten ausrüsten.");
						new string[128], fid[11];
						format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
						format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
						ShowPlayerDialog(playerid,DIALOG_PDEQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - LSPD Ausrüstung",string,"Ausrüsten","Abbrechen");
					}
				}
			}
		}
		case DIALOG_JOB_DUTY:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Dienst betreten/verlassen
			        {
           				new string[200], skinid[3];
						if(SpielerInfo[playerid][sNebenjob] == 2)
                        {
					        if(GetPVarInt(playerid,"PizzaboteDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"PizzaboteDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,155);
								    SetPVarInt(playerid,"PizzaboteDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 3)
                        {
					        if(GetPVarInt(playerid,"KehrmaschinenDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"KehrmaschinenDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,260);
								    SetPVarInt(playerid,"KehrmaschinenDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 4)
                        {
					        if(GetPVarInt(playerid,"PilotDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"PilotDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,61);
								    SetPVarInt(playerid,"PilotDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 5)
                        {
					        if(GetPVarInt(playerid,"BusfahrerDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"BusfahrerDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,253);
								    SetPVarInt(playerid,"BusfahrerDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 6)
                        {
					        if(GetPVarInt(playerid,"MüllmannDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"MüllmannDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,15);
								    SetPVarInt(playerid,"MüllmannDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 7)
                        {
					        if(GetPVarInt(playerid,"LandwirtDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"LandwirtDuty");
					            DeleteJobFahrzeug(playerid);
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,161);
								    SetPVarInt(playerid,"LandwirtDuty",1);
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
						else if(SpielerInfo[playerid][sNebenjob] == 10)
                        {
					        if(GetPVarInt(playerid,"HolzfallerDuty") == 1)
					        {
								if(SpielerInfo[playerid][sFraktion] < 9 || SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
								{
								    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
								}
								else if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] != 19)//Gang
						  		{
									format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
									format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
									SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
								}
					            DeletePVar(playerid,"HolzfallerDuty");
					            DeleteJobFahrzeug(playerid);
					            EntfernungObjekteHolz(playerid);
					            BaumWeg[playerid] = 0;
						        format(string,128,"%s legt seine Arbeitskleidung in den Spint und tritt den Feierabend an.",SpielerInfo[playerid][sName]);
						        ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
						    }
						    else
						    {
		        				if(GetPVarInt(playerid,"CopDuty") == 1 || GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 || GetPVarInt(playerid,"FireDuty") == 1)
					        	{
					        	    SendClientMessage(playerid,COLOR_SORRY,"Du bist noch als Beamter im Dienst.");
					        	}
					        	else
					        	{
									SetPlayerSkin(playerid,161);
								    SetPVarInt(playerid,"HolzfallerDuty",1);
								    SendClientMessage(playerid,COLOR_INFO,"Benutze '/startjob' um deinen Job zu beginnen!");
								    format(string,128,"%s nimmt seine Arbeitskleidung aus dem Spint und meldet sich zum Dienst.",SpielerInfo[playerid][sName]);
								    ProxDetector(10.0, playerid, string, 0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF,0xB400FFFF);
								}
							}
						}
			        }
				}
			}
		}
		case DIALOG_FRAKV_SKINR:
		{
		    if(response==0)//Zurück
			{
		  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		 		else if(SpielerInfo[playerid][sFraktion] > 4 && SpielerInfo[playerid][sFraktion] != 19)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 19)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 20)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
			}
			else if(response==1)//Weiter
			{
			    switch(listitem)
				{
				    case 0://Rang 1
				    {
				        SetPVarInt(playerid,"Skinordnung",1);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 1://Rang 2
				    {
	       				SetPVarInt(playerid,"Skinordnung",2);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 2://Rang 3
				    {
	                    SetPVarInt(playerid,"Skinordnung",3);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
					case 3://Rang 4
				    {
	                	SetPVarInt(playerid,"Skinordnung",4);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 4://Rang 5
				    {
	                    SetPVarInt(playerid,"Skinordnung",5);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
					}
				    case 5://Rang 6
				    {
	                    SetPVarInt(playerid,"Skinordnung",6);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 6://Rang 7
				    {
	                    SetPVarInt(playerid,"Skinordnung",7);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				}
				if(SpielerInfo[playerid][sFraktion] == 1){ShowModelSelectionMenu(playerid, SkinordnungGovernment, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 2){ShowModelSelectionMenu(playerid, SkinordnungSAPD, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 3){ShowModelSelectionMenu(playerid, SkinordnungSFPD, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 4){ShowModelSelectionMenu(playerid, SkinordnungLVPD, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 5){ShowModelSelectionMenu(playerid, SkinordnungMEDIC, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 6){ShowModelSelectionMenu(playerid, SkinordnungFBI, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 8){ShowModelSelectionMenu(playerid, SkinordnungSanNews, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 9){ShowModelSelectionMenu(playerid, SkinordnungGrove, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 10){ShowModelSelectionMenu(playerid, SkinordnungBallas, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 11){ShowModelSelectionMenu(playerid, SkinordnungVagos, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 12){ShowModelSelectionMenu(playerid, SkinordnungAztecas, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 13){ShowModelSelectionMenu(playerid, SkinordnungRifa, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 14){ShowModelSelectionMenu(playerid, SkinordnungTriads, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 15){ShowModelSelectionMenu(playerid, SkinordnungDaNangBoys, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 16){ShowModelSelectionMenu(playerid, SkinordnungBikers, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 17){ShowModelSelectionMenu(playerid, SkinordnungItalia, "Skinordnung");}
			    if(SpielerInfo[playerid][sFraktion] == 18){ShowModelSelectionMenu(playerid, SkinordnungRussia, "Skinordnung");}
			}
		}
		case DIALOG_FRAKV:
		{
		    if(response==0){}//Abbrechen
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Rangnamen
			        {
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
					}
			        case 1://Skinordnung
			        {
			            if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
			            {
                            ShowPlayerDialog(playerid,DIALOG_FRAKV_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Fahrzeugzugriff\nFahrzeuge respawnen (2750$)","Weiter","Zurück");
						}
						else
						{
							new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
							format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
							format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
							format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
							format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
							format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
							format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
							format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
							format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
							format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
							ShowPlayerDialog(playerid,DIALOG_FRAKV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
						}
					}
     				case 2://Fahrzeugverwaltung
			        {
           				if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
			            {
					    	ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
					    }
					    else
					    {
					        ShowPlayerDialog(playerid,DIALOG_FRAKV_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Fahrzeugzugriff\nFahrzeuge respawnen (2750$)","Weiter","Zurück");
					    }
			        }
			        case 3://Equipt-Verwaltung oder Freikaufpreise festlegen
			        {
			            if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
			            {
		  					new string[128], fid[11];
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
							format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
	  						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
						}
						else if(SpielerInfo[playerid][sFraktion] > 4)
						{
						    ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
						}
					}
			        case 4://Gehaltverwaltung
			        {
			            if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 5 || SpielerInfo[playerid][sFraktion] == 6)
			            {
			            	ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
						}
					}
			    }
			}
		}
		case DIALOG_SARDV:
		{
		    if(response==0){}//Abbrechen
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
       				case 0://Sanitäter - Rangname
			        {
			            SetPVarInt(playerid,"FrakV",1);
 						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			        }
    				case 1://Feuerwehr - Rangname
			        {
           				SetPVarInt(playerid,"FrakV",2);
  						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			        }
       				case 2://Sanitäter - Skinordnung
			        {
       					SetPVarInt(playerid,"FrakV",1);
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			        }
    				case 3://Feuerwehr - Skinordnung
			        {
       					SetPVarInt(playerid,"FrakV",2);
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			        }
					case 4://Fahrzeugverwaltung
			        {
			        	ShowPlayerDialog(playerid,DIALOG_FRAKV_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Fahrzeugzugriff\nFahrzeuge respawnen (2750$)","Weiter","Zurück");
			        }
 					case 5://Gehalt
			        {
			            ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter Gehalt\nFeuerwehr Gehalt","Weiter","Zurück");
					}
			    }
			}
		}
		case DIALOG_SARDV_GEHALT2:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_SARDV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter | Rangnamen bearbeiten\nFeuerwehr | Rangnamen bearbeiten\nSanitäter | Skinordnung festlegen\nFeuerwehr | Skinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
       				case 0://Sanitäter - Gehalt
			        {
			            SetPVarInt(playerid,"FrakV",1);
			            ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
			        }
					case 1://Feuerwehr - Gehalt
			        {
			            SetPVarInt(playerid,"FrakV",2);
                        ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
			        }
				}
			}
		}
		case DIALOG_SARDV_GEHALT:
		{
		    if(response==0)//Zurück
		    {
				ShowPlayerDialog(playerid,DIALOG_SARDV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter | Rangnamen bearbeiten\nFeuerwehr | Rangnamen bearbeiten\nSanitäter | Skinordnung festlegen\nFeuerwehr | Skinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
		    }
		    else if(response==1)//Weiter
		    {
		        switch(listitem)
		        {
		            case 0://Gehalt pro Rang
		            {
    		        	if(GetPVarInt(playerid,"FrakV") == 1)
		        		{
							new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
							format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
							format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
							format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
							format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
							format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
							format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
							format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
							format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
							format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
							ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
						}
     					else if(GetPVarInt(playerid,"FrakV") == 2)
		        		{
							new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
							format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
							format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
							format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
							format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
							format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
							format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
							format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
							format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
							format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
							ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		        		}
		            }
				}
		    }
		}
		case DIALOG_SARDV_GEHALT_R:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter Gehalt\nFeuerwehr Gehalt","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        new string[128], inputstr[24];
		        format(inputstr,sizeof(inputstr),"%s",inputtext);
		        SetPVarInt(playerid,"FrakVGehaltRang",listitem+1);
		        format(string,sizeof(string),"{FFFFFF}Wie viel Gehalt soll der Rank '{007DFF}%s{FFFFFF}' pro Payday erhalten?",inputstr);
		        ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Setzen","Zurück");
		    }
		}
		
		case DIALOG_SARDV_GEHALT_ER:
		{
		    if(response==0)//Zurück
		    {
	        	if(GetPVarInt(playerid,"FrakV") == 1)
        		{
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
				}
				else if(GetPVarInt(playerid,"FrakV") == 2)
        		{
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
        		}
		    }
		    else if(response==1)//Setzen
		    {
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 10000 || !IsNumeric(inputtext))
		        {
		            ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","{FFFFFF}Der Betrag ist leider ungültig, wie viel Gehalt soll der Rang pro Payday erhalten?","Setzen","Zurück");
		        }
		        else
		        {
			        new string[128], GehaltRang[32];
 	        		if(GetPVarInt(playerid,"FrakV") == 1)
        			{
				        format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",GetPVarInt(playerid,"FrakVGehaltRang"));
				        format(string,sizeof(string),"%d",SpielerInfo[playerid][sFraktion]);
				        mysql_SetInt("frakinfos", GehaltRang, strval(inputtext), "FID", string);
				        format(string,sizeof(string),"Du hast ein Gehalt in Höhe von '%d$' für die Rang-ID '%d' vergeben.",strval(inputtext),GetPVarInt(playerid,"FrakVGehaltRang"));
						SendClientMessage(playerid,COLOR_INFO,string);
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"FrakV") == 2)
					{
     					format(GehaltRang,sizeof(GehaltRang),"Gehalt_TRang%d",GetPVarInt(playerid,"FrakVGehaltRang"));
				        format(string,sizeof(string),"%d",SpielerInfo[playerid][sFraktion]);
				        mysql_SetInt("frakinfos", GehaltRang, strval(inputtext), "FID", string);
				        format(string,sizeof(string),"Du hast ein Gehalt in Höhe von '%d$' für die Rang-ID '%d' vergeben.",strval(inputtext),GetPVarInt(playerid,"FrakVGehaltRang"));
						SendClientMessage(playerid,COLOR_INFO,string);
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
					}
				}
		    }
		}
		case DIALOG_SARDV_RANGSE:
		{
		    if(response==0)//Zurück
		    {
		        if(GetPVarInt(playerid,"FrakV") == 1)
		        {
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
				}
				else if(GetPVarInt(playerid,"FrakV") == 2)
		        {
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		        }
		    }
		    else if(response==1)//Weiter
		    {
		        if(strlen(inputtext) != 0 && strlen(inputtext) <= 24)
		        {
		        	if(GetPVarInt(playerid,"FrakV") == 1)
		        	{
			            new string[84], r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
			            format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
			            format(string,sizeof(string),"%d",GetPVarInt(playerid,"RangEdit"));
			            mysql_SetString("rangnamen", string, inputtext, "frakid", ranklist);
						format(string,sizeof(string),"Du hast den Rangnamen für Rang %d in '%s' geändert.",GetPVarInt(playerid,"RangEdit"),inputtext);
						SendClientMessage(playerid,COLOR_INFO,string);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"FrakV") == 2)
		        	{
           				new string[84], r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
			            format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
			            format(string,sizeof(string),"T%d",GetPVarInt(playerid,"RangEdit"));
			            mysql_SetString("rangnamen", string, inputtext, "frakid", ranklist);
						format(string,sizeof(string),"Du hast den Rangnamen für Rang %d in '%s' geändert.",GetPVarInt(playerid,"RangEdit"),inputtext);
						SendClientMessage(playerid,COLOR_INFO,string);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_SARDV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		        	}
				}
		       	else ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Benutze 1 bis 24 Zeichen für einen gültigen Rangnamen.","Weiter","Zurück");
			}
		}
		case DIALOG_SARDV_RANGS:
		{
	 		if(response==0)//Zurück
	 		{
				ShowPlayerDialog(playerid,DIALOG_SARDV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter | Rangnamen bearbeiten\nFeuerwehr | Rangnamen bearbeiten\nSanitäter | Skinordnung festlegen\nFeuerwehr | Skinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			}
	        else if(response==1)//Weiter
	        {
	        	switch(listitem)
				{
					case 0://Rang 1
	    			{
						SetPVarInt(playerid,"RangEdit",1);
						ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?","Weiter","Zurück");
	  				}
			    	case 1://Rang 2
					{
				        SetPVarInt(playerid,"RangEdit",2);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des zweiten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 2://Rang 3
				    {
				        SetPVarInt(playerid,"RangEdit",3);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des dritten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 3://Rang 4
				    {
				        SetPVarInt(playerid,"RangEdit",4);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des vierten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 4://Rang 5
				    {
				        SetPVarInt(playerid,"RangEdit",5);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des fünften Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 5://Rang 6
				    {
				        SetPVarInt(playerid,"RangEdit",6);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 6://Rang 7
				    {
				        SetPVarInt(playerid,"RangEdit",7);
				        ShowPlayerDialog(playerid,DIALOG_SARDV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				}
	 		}
		}
		case DIALOG_SARDV_SKINR:
		{
		    if(response==0)//Zurück
			{
				ShowPlayerDialog(playerid,DIALOG_SARDV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Sanitäter | Rangnamen bearbeiten\nFeuerwehr | Rangnamen bearbeiten\nSanitäter | Skinordnung festlegen\nFeuerwehr | Skinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
			}
			else if(response==1)//Weiter
			{
			    switch(listitem)
				{
				    case 0://Rang 1
				    {
				        SetPVarInt(playerid,"Skinordnung",1);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 1://Rang 2
				    {
	       				SetPVarInt(playerid,"Skinordnung",2);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 2://Rang 3
				    {
	                    SetPVarInt(playerid,"Skinordnung",3);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
					case 3://Rang 4
				    {
	                	SetPVarInt(playerid,"Skinordnung",4);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 4://Rang 5
				    {
	                    SetPVarInt(playerid,"Skinordnung",5);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
					}
				    case 5://Rang 6
				    {
	                    SetPVarInt(playerid,"Skinordnung",6);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				    case 6://Rang 7
				    {
	                    SetPVarInt(playerid,"Skinordnung",7);
						ShowPlayerDialog(playerid,-1,DIALOG_STYLE_MSGBOX,"Close","Close","Close","");
				    }
				}
    			if(GetPVarInt(playerid,"FrakV") == 1)
  			  	{
			    	ShowModelSelectionMenu(playerid, SkinordnungMEDIC, "Skinordnung");
				}
 				else if(GetPVarInt(playerid,"FrakV") == 2)
  			  	{
			    	ShowModelSelectionMenu(playerid, SkinordnungFIRE, "Skinordnung");
				}
			}
		}
		case DIALOG_FIRMA_GRUNDSTUCK:
		{
			new string[250], query[500], cmd = strval(inputtext);
			if(response == 0) return true;
			if(response == 1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMA_GRUNDSTUCK,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Grundstück erstellen","Wieviel soll das Grundstück kosten?\nMindestens 500$ und maximal 500.000$\n\n{FF0000}Nur Zahlen möglich!","Weiter","Abbrechen");
					return true;
				}
				if(cmd > 500000 || cmd < 500)
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMA_GRUNDSTUCK,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Grundstück erstellen","Wieviel soll das Grundstück kosten?\n\n{FF0000}Mindestens 500$ und maximal 500.000$","Weiter","Abbrechen");
				    return true;
				}
				format(string,sizeof(string),"Das Firmengrundstück für %d$ wurde erfolgreich erstellt (Nach Neustart verfügbar).",cmd);
				SendClientMessage(playerid,COLOR_SUPER,string);

				for(new mf=1;mf<MAX_FIRMENGR;mf++)
				{
				    if(GFirmaInfo[mf][firmengrcreate] == 0)
				    {
				    	mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `firmagrundstucke` (`firmengrid`,`create`,`firmenname`,`firmenid`,`igekauft`,`posx`,`posy`,`posx2`,`posy2`,`iposx`,`iposy`,`iposz`,`preis`) VALUES ('%d','1','Niemand','-1','0','%f','%f','%f','%f','%f','%f','%f','%d')",
						mf,gfirmapos[playerid][0],gfirmapos[playerid][1],gfirmapos[playerid][2],gfirmapos[playerid][3],gfirmapos[playerid][4],
						gfirmapos[playerid][5],gfirmapos[playerid][6],cmd);
                        mysql_tquery(sqlHandle, query);
						GFirmaInfo[mf][firmengrcreate] = 1;
						GFirmaInfo[mf][firmengrid] = mf;
						printf(query);
						return 1;
					}
				}
				return true;
			}
		}
		case DIALOG_FIRMAV:
		{
		    if(response==0){}//Abbrechen
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Fahrzeugverwaltung
			        {
			        }
			        case 1://Rangnamen bearbeiten
			        {
			        	new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFirma]);
						format(r1,sizeof(r1),"%s",mysql_GetString("frangnamen", "1", "fid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("frangnamen", "2", "fid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("frangnamen", "3", "fid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("frangnamen", "4", "fid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("frangnamen", "5", "fid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("frangnamen", "6", "fid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("frangnamen", "7", "fid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung",ranklist,"Weiter","Zurück");
			        }
			        case 2://Firma überschreiben
			        {
			            ShowPlayerDialog(playerid,DIALOG_FIRMAV_ABGEBEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Gebe nun die Spieler ID ein, an den wo die Firma überschrieben\nwerden soll. Der Spieler muss sich bereits in deiner\nFirma befinden!","Weiter","Abbrechen");
			        }
			        case 3://Auftragsbedingungen
			        {
			            ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung","Auftragsbedingungen lesen\nAuftragsbedingungen ändern","Weiter","Abbrechen");
			        }
				}
			}
		}
		case DIALOG_FIRMAV_RANGS:
		{
	 		if(response==0)//Zurück
	 		{
				ShowPlayerDialog(playerid,DIALOG_FIRMAV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung","Fahrzeugverwaltung\nRangnamen bearbeiten\nFirma überschreiben\nAuftragsbedingungen","Weiter","Abbrechen");
				return true;
			}
	        else if(response==1)//Weiter
	        {
	        	switch(listitem)
				{
					case 0://Rang 1
	    			{
						SetPVarInt(playerid,"RangEdit",1);
						ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?","Weiter","Zurück");
	  				}
			    	case 1://Rang 2
					{
				        SetPVarInt(playerid,"RangEdit",2);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des zweiten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 2://Rang 3
				    {
				        SetPVarInt(playerid,"RangEdit",3);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des dritten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 3://Rang 4
				    {
				        SetPVarInt(playerid,"RangEdit",4);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des vierten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 4://Rang 5
				    {
				        SetPVarInt(playerid,"RangEdit",5);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des fünften Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 5://Rang 6
				    {
				        SetPVarInt(playerid,"RangEdit",6);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des vorletzen Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 6://Rang 7
				    {
				        SetPVarInt(playerid,"RangEdit",7);
				        ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				}
	 		}
		}
		case DIALOG_FIRMAV_RANGSE:
		{
		    if(response==0)//Zurück
		    {
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFirma]);
				format(r1,sizeof(r1),"%s",mysql_GetString("frangnamen", "1", "fid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("frangnamen", "2", "fid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("frangnamen", "3", "fid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("frangnamen", "4", "fid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("frangnamen", "5", "fid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("frangnamen", "6", "fid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("frangnamen", "7", "fid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung",ranklist,"Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strlen(inputtext) != 0 && strlen(inputtext) <= 24)
		        {
		            new string[84], r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
		            format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFirma]);
		            format(string,sizeof(string),"%d",GetPVarInt(playerid,"RangEdit"));
		            mysql_SetString("frangnamen", string, inputtext, "fid", ranklist);
					format(string,sizeof(string),"Du hast den Rangnamen für Rang %d in '%s' geändert.",GetPVarInt(playerid,"RangEdit"),inputtext);
					SendClientMessage(playerid,COLOR_INFO,string);
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFirma]);
					format(r1,sizeof(r1),"%s",mysql_GetString("frangnamen", "1", "fid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("frangnamen", "2", "fid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("frangnamen", "3", "fid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("frangnamen", "4", "fid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("frangnamen", "5", "fid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("frangnamen", "6", "fid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("frangnamen", "7", "fid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Firmenverwaltung",ranklist,"Weiter","Zurück");
				}
		       	else ShowPlayerDialog(playerid,DIALOG_FIRMAV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?\n\nBenutze 1 bis 24 Zeichen für einen gültigen Rangnamen.","Weiter","Zurück");
			}
		}
		case DIALOG_FIRMAV_AUFTRAG:
		{
		    new string[350],
		        fid = SpielerInfo[playerid][sFirma];
			if(response == 0) return true;
			if(response == 1)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
					    format(string,sizeof(string),"{007DFF}Firma: {FFFFFF}%s\n{007DFF}Firmen Chef: {FFFFFF}%s\n{007DFF}Transport Gebühren: {FFFFFF}%d$\n{007DFF}Gebühren Lieferung LS: {FFFFFF}%d$\n{007DFF}Gebühren Lieferung SF: {FFFFFF}%d$\n{007DFF}Gebühren Lieferung LV: {FFFFFF}%d$",
					    FirmenInfo[fid][fName],FirmenInfo[fid][fOwner],FirmenInfo[fid][geburen],FirmenInfo[fid][geburenLS],FirmenInfo[fid][geburenSF],FirmenInfo[fid][geburenLV]);
			           	ShowPlayerDialog(playerid,DIALOG_SONSTIGES,DIALOG_STYLE_MSGBOX,"{007DFF}Firmenverwaltung",string,"Weiter","Abbrechen");
			           	return true;
					}
					case 1:
					{
						ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmenverwaltung","Lege nun deine Transport Gebühren fest pro festen Transport!","Weiter","Abbrechen");
						return true;
					}
				}
			}
		}
		case DIALOG_FIRMAV_AUFTRAG2:
		{
		    new string[175],
		        fid = SpielerInfo[playerid][sFirma],
		        cmd2 = strval(inputtext);
			if(response == 0) return true;
			if(response == 1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren fest pro festen Transport!\n\n{FF0000}Nur Zahlen möglich!","Weiter","Abbrechen");
					return true;
				}
				if(cmd2 > 500 || cmd2 < 50)
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren fest pro festen Transport!\n\n{FF0000}Gebühren nur zwischen 50$ und 500$!","Weiter","Abbrechen");
					return true;
		        }
		        FirmenInfo[fid][geburen] = cmd2;
		        format(string,sizeof(string),"Transport Gebühren auf %i$ festgesetzt!",cmd2);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LS fest!","Weiter","Abbrechen");
		        return true;
			}
		}
		case DIALOG_FIRMAV_AUFTRAG3:
		{
		    new string[450],
		        fid = SpielerInfo[playerid][sFirma],
		        cmd3 = strval(inputtext);
			if(response == 0) return true;
			if(response == 1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LS fest!\n\n{FF0000}Nur Zahlen möglich!","Weiter","Abbrechen");
					return true;
				}
				if(cmd3 > 500 || cmd3 < 50)
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LS fest!\n\n{FF0000}Gebühren nur zwischen 50$ und 500$!","Weiter","Abbrechen");
				    return true;
		        }
		        FirmenInfo[fid][geburenLS] = cmd3;
		        format(string,sizeof(string),"Transport Gebühren nach LS auf %i$ festgesetzt!",cmd3);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG4,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach SF fest!","Weiter","Abbrechen");
		        return true;
			}
		}
		case DIALOG_FIRMAV_AUFTRAG4:
		{
		    new string[450],
		        fid = SpielerInfo[playerid][sFirma],
		        cmd4 = strval(inputtext);
			if(response == 0) return true;
			if(response == 1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG4,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach SF fest!\n\n{FF0000}Nur zahlen möglich!","Weiter","Abbrechen");
			        return true;
				}
				if(cmd4 > 500 || cmd4 < 50)
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG4,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach SF fest!\n\n{FF0000}Gebühren nur zwischen 50$ und 500$!","Weiter","Abbrechen");
				    return true;
		        }
		        FirmenInfo[fid][geburenSF] = cmd4;
		        format(string,sizeof(string),"Transport Gebühren nach SF auf %i$ festgesetzt!",cmd4);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG5,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LV fest!","Weiter","Abbrechen");
		        return true;
			}
		}
		case DIALOG_FIRMAV_AUFTRAG5:
		{
		    new string[450],
		        fid = SpielerInfo[playerid][sFirma],
		        cmd5 = strval(inputtext);
			if(response == 0) return true;
			if(response == 1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG5,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LV fest!\n\n{FF0000}Nur zahlen möglich!","Weiter","Abbrechen");
			        return true;
				}
				if(cmd5 > 500 || cmd5 < 50)
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMAV_AUFTRAG5,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Lege nun deine Transport Gebühren nach LV fest!\n\n{FF0000}Gebühren zwischen 50$ und 500$!","Weiter","Abbrechen");
				    return true;
		        }
		        FirmenInfo[fid][geburenLV] = cmd5;
		        format(string,sizeof(string),"Transport Gebühren nach LV auf %i$ festgesetzt!",cmd5);
		        SendClientMessage(playerid,COLOR_SUPER,string);
		        SendClientMessage(playerid,COLOR_SUPER,"Transport Vertragsbedingungen festgesetzt!");
		        return true;
			}
		}
		case DIALOG_FIRMAV_ABGEBEN:
        {
			new pID = strval(inputtext),string[250];
			new abgeben = SpielerInfo[playerid][sFLeader];
			if(response==0) return true;
			if(response==1)
			{
			    if(!IsNumeric(inputtext))
			    {
			        ShowPlayerDialog(playerid,DIALOG_FIRMAV_ABGEBEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Gebe nun die Spieler ID ein, an den wo die Firma überschrieben\nwerden soll. Der Spieler muss sich bereits in deiner\nFirma befinden!\n\n{FF0000}Nur Zahlen möglich!","Weiter","Abbrechen");
					return true;
				}
				if(GetPVarInt(pID,"LoggedIn") == 0 && !IsPlayerConnected(pID))
				{
				    ShowPlayerDialog(playerid,DIALOG_FIRMAV_ABGEBEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Gebe nun die Spieler ID ein, an den wo die Firma überschrieben\nwerden soll. Der Spieler muss sich bereits in deiner\nFirma befinden!\n\n{FF0000}Der Spieler ist nicht online!","Weiter","Abbrechen");
					return true;
				}
				if(SpielerInfo[pID][sFirma] != SpielerInfo[playerid][sFirma])
				{
					ShowPlayerDialog(playerid,DIALOG_FIRMAV_ABGEBEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firmaverwalten","Gebe nun die Spieler ID ein, an den wo die Firma überschrieben\nwerden soll. Der Spieler muss sich bereits in deiner\nFirma befinden!\n\n{FF0000}Der Spieler ist nicht in deiner Firma!","Weiter","Abbrechen");
					return true;
				}
				format(string,144,"Du hast die Firma erfolgreich an %s übergeben.",SpielerInfo[pID][sName]);
				SendClientMessage(playerid,COLOR_SUPER,string);
				format(string,144,"Firmenleader %s hat dir seine Firma überschrieben.",SpielerInfo[playerid][sName]);
				SendClientMessage(pID,COLOR_SUPER,string);
				SpielerInfo[playerid][sFLeader] = 0;
				SpielerInfo[playerid][sFRank] = 1;
				SpielerInfo[pID][sFLeader] = abgeben;
				SpielerInfo[pID][sFRank] = 7;
				FirmenInfo[abgeben][fOwner] = SpielerInfo[pID][sName];
				return true;
			}
		}
		case DIALOG_GRUPPEV:
		{
		    if(response==0){}//Abbrechen
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://Upgrades
			        {
			            ShowPlayerDialog(playerid,DIALOG_GRUPPEV_UPGRADE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Gehalt bearbeiten (50000$)","Weiter","Zurück");
					}
			        case 1://Fahrzeugverwaltung
			        {
			            ShowPlayerDialog(playerid,DIALOG_GRUPPEV_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Fahrzeugzugriff\nFahrzeuge respawnen (2750$)","Weiter","Zurück");
					}
     				case 2://Rangname
			        {
			        	new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
						format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
					}
 					case 3://Gehalt
			        {
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
						format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_GRUPPEV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
					}
			    }
			}
		}
		case DIALOG_GRUPPEV_GEHALT_R:
		{
  			new gid = SpielerInfo[playerid][sGruppe];
		    if(response==0)//Zurück
		    {
  				if(GruppenInfo[gid][gUpgrade][0] == 0){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten","Weiter","Abbrechen");}
				else if(GruppenInfo[gid][gUpgrade][0] == 1){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten\nGehaltverwaltung","Weiter","Abbrechen");}
		    }
		    else if(response==1)//Weiter
		    {
		        new string[128], inputstr[24];
		        format(inputstr,sizeof(inputstr),"%s",inputtext);
		        SetPVarInt(playerid,"GruppeVGehaltRang",listitem+1);
		        format(string,sizeof(string),"{FFFFFF}Wie viel Gehalt soll der Rank '{007DFF}%s{FFFFFF}' pro Payday erhalten?",inputstr);
		        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung",string,"Setzen","Zurück");
		    }
		}
		case DIALOG_GRUPPEV_GEHALT_ER:
		{
		    if(response==0)//Zurück
		    {
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
				format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_GRUPPEV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
		    }
		    else if(response==1)//Setzen
		    {
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 10000 || !IsNumeric(inputtext))
		        {
		            ShowPlayerDialog(playerid,DIALOG_GRUPPEV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","{FFFFFF}Der Betrag ist leider ungültig, wie viel Gehalt soll der Rang pro Payday erhalten?","Setzen","Zurück");
		        }
		        else
		        {
			        new string[128], GehaltRang[32];
			        format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",GetPVarInt(playerid,"GruppeVGehaltRang"));
			        format(string,sizeof(string),"%d",SpielerInfo[playerid][sGruppe]);
			        mysql_SetInt("gruppen", GehaltRang, strval(inputtext), "ID", string);
			        format(string,sizeof(string),"Du hast ein Gehalt in Höhe von '%d$' für die Rang-ID '%d' vergeben.",strval(inputtext),GetPVarInt(playerid,"GruppeVGehaltRang"));
					SendClientMessage(playerid,COLOR_INFO,string);
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
					format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_GRUPPEV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
				}
		    }
		}
		case DIALOG_GRUPPEV_UPGRADE:
		{
		    new gid = SpielerInfo[playerid][sGruppe];
			if(GruppenInfo[gid][gUpgrade][0] == 1)return SendClientMessage(playerid,COLOR_GREY,"Deine Gruppe besitzt dieses Upgrade schon.");
            if(GetPlayerMoneyEx(playerid) < 50000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
            GivePlayerMoneyEx(playerid,-50000);
			GruppenInfo[gid][gUpgrade][0] = 1;
			SendClientMessage(playerid,COLOR_SUPER,"Du hast das Upgrade 'Gehalt bearbeiten' erfolgreich für deine Gruppe gekauft!");
		}
		case DIALOG_FRAKV_GEHALT:
		{
		    if(response==0)//Zurück
		    {
		  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		 		else if(SpielerInfo[playerid][sFraktion] > 4 && SpielerInfo[playerid][sFraktion] != 19)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		    }
		    else if(response==1)//Weiter
		    {
		        switch(listitem)
		        {
		            case 0://Gehalt pro Rang
		            {
						new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
						format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
						format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
						format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
						format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
						format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
						format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
						format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
						format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
						format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		            }
				}
		    }
		}
		case DIALOG_FRAKV_GEHALT_R:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Gehalt pro Rang","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        new string[128], inputstr[24];
		        format(inputstr,sizeof(inputstr),"%s",inputtext);
		        SetPVarInt(playerid,"FrakVGehaltRang",listitem+1);
		        format(string,sizeof(string),"{FFFFFF}Wie viel Gehalt soll der Rank '{007DFF}%s{FFFFFF}' pro Payday erhalten?",inputstr);
		        ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Setzen","Zurück");
		    }
		}
		case DIALOG_FRAKV_GEHALT_ER:
		{
		    if(response==0)//Zurück
		    {
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
				format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		    }
		    else if(response==1)//Setzen
		    {
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 10000 || !IsNumeric(inputtext))
		        {
		            ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_ER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","{FFFFFF}Der Betrag ist leider ungültig, wie viel Gehalt soll der Rang pro Payday erhalten?","Setzen","Zurück");
		        }
		        else
		        {
			        new string[128], GehaltRang[32];
			        format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",GetPVarInt(playerid,"FrakVGehaltRang"));
			        format(string,sizeof(string),"%d",SpielerInfo[playerid][sFraktion]);
			        mysql_SetInt("frakinfos", GehaltRang, strval(inputtext), "FID", string);
			        format(string,sizeof(string),"Du hast ein Gehalt in Höhe von '%d$' für die Rang-ID '%d' vergeben.",strval(inputtext),GetPVarInt(playerid,"FrakVGehaltRang"));
					SendClientMessage(playerid,COLOR_INFO,string);
					new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_FRAKV_GEHALT_R,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
				}
		    }
		}
		case DIALOG_FRAKV_FAHRZEUG:
		{
		    if(response==0)//Zurück
		    {
		  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		 		else if(SpielerInfo[playerid][sFraktion] > 4 && SpielerInfo[playerid][sFraktion] != 19)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		    }
		    else if(response==1)//Weiter
		    {
      			switch(listitem)
		        {
		            case 0://Fahrzeugzugriff
		            {
          				new merker = 0;
				 	 	new cars[MAX_VEHICLES];
				 	 	new merkerdoppelt = 0;
      					for(new i = 1;i<MAX_VEHICLES;i++)
					    {
					        if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
				            if(FahrzeugInfo[i][fFraktion] == SpielerInfo[playerid][sFraktion])
				            {
			                    if(FahrzeugInfo[i][fModelID] == cars[i])
			                    {
			                        merkerdoppelt = 1;
			                    }
			                	if(merkerdoppelt == 0)
			                	{
			                		cars[merker] = FahrzeugInfo[i][fModelID];
			                		merker ++;
			                	}
							}
				 	 	}
					    ShowModelSelectionMenuEx(playerid, cars, merker, "Fahrzeugverwaltung", CUSTOM_FUHRPARK_MENU, 16.0, 0.0, -55.0);
		            }
		            case 1://Fahrzeuge respawnen
					{
					    if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiCarRespawn] > 0)
					    {
					        new string[128];
					        format(string,sizeof(string),"Deine Fahrzeuge können erst wieder in %d Minuten respawnt werden.",FrakInfo[SpielerInfo[playerid][sFraktion]][fiCarRespawn]);
					        ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Schliessen","");
					    }
					    else if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiCarRespawn] == 0)
					    {
					        if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] >= 2750)
					        {
						        FrakInfo[SpielerInfo[playerid][sFraktion]][fiCarRespawn] = 45;
						        FrakInfo[SpielerInfo[playerid][sFraktion]][fiCarRespawnTimer] = SetTimerEx("FrakCarRespawnTimout",60000,true,"i",SpielerInfo[playerid][sFraktion]);
						        FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] -= 2750;
                 				for(new i = 1;i<MAX_VEHICLES;i++)
						        {
						            if(!IsValidVehicle(i))continue;
	            					if(FahrzeugInfo[i][fFraktion] == SpielerInfo[playerid][sFraktion])
	            					{
		                            	if(GetVehicleDriver(i) == -1 && FahrzeugInfo[i][fParkkralle] == 0)
			                            {
			                                ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du hast alle unbenutzen und nicht vom Ordnungsamt verankerten oder abgeschleppten Fahrzeuge respawnt.","Schliessen","");
				        					SetVehicleToRespawn(i);
										}
									}
						        }
							}
							else ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Deine Fraktion hat keine 2750$ übrig, um die Fahrzeuge zu respawnen!","Schliessen","");
					    }
					}
				}
		    }
		}
		case DIALOG_GRUPPEV_FAHRZEUG:
		{
		    new gid = SpielerInfo[playerid][sGruppe];
		    if(response==0)//Zurück
		    {
  				if(GruppenInfo[gid][gUpgrade][0] == 0){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten","Weiter","Abbrechen");}
				else if(GruppenInfo[gid][gUpgrade][0] == 1){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten\nGehaltverwaltung","Weiter","Abbrechen");}
		    }
		    else if(response==1)//Weiter
		    {
      			switch(listitem)
		        {
		            case 0://Fahrzeugzugriff
		            {
          				new merker = 0;
				 	 	new cars[MAX_VEHICLES];
				 	 	new merkerdoppelt = 0;
      					for(new i = 1;i<MAX_VEHICLES;i++)
					    {
					        if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
				            if(FahrzeugInfo[i][fGruppe] == SpielerInfo[playerid][sGruppe])
				            {
			                    if(FahrzeugInfo[i][fModelID] == cars[i])
			                    {
			                        merkerdoppelt = 1;
			                    }
			                	if(merkerdoppelt == 0)
			                	{
			                		cars[merker] = FahrzeugInfo[i][fModelID];
			                		merker ++;
			                	}
							}
				 	 	}
					    ShowModelSelectionMenuEx(playerid, cars, merker, "Fahrzeugverwaltung", CUSTOM_FUHRPARK_GRUPPE_MENU, 16.0, 0.0, -55.0);
		            }
		            case 1://Fahrzeuge respawnen
     				{
					    if(GruppenInfo[SpielerInfo[playerid][sGruppe]][gCarRespawn] > 0)
					    {
					        new string[128];
					        format(string,sizeof(string),"Deine Fahrzeuge können erst wieder in %d Minuten respawnt werden.",GruppenInfo[SpielerInfo[playerid][sGruppe]][gCarRespawn]);
					        ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Gruppenverwaltung",string,"Schliessen","");
					    }
					    else if(GruppenInfo[SpielerInfo[playerid][sGruppe]][gCarRespawn] == 0)
					    {
					        if(GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] >= 2750)
					        {
						        GruppenInfo[SpielerInfo[playerid][sGruppe]][gCarRespawn] = 45;
						        GruppenInfo[SpielerInfo[playerid][sGruppe]][gCarRespawnTimer] = SetTimerEx("GruppeCarRespawnTimout",60000,true,"i",SpielerInfo[playerid][sGruppe]);
						        GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] -= 2750;
                 				for(new i = 1;i<MAX_VEHICLES;i++)
						        {
						            if(!IsValidVehicle(i))continue;
	            					if(FahrzeugInfo[i][fGruppe] == SpielerInfo[playerid][sGruppe])
	            					{
		                            	if(GetVehicleDriver(i) == -1 && FahrzeugInfo[i][fParkkralle] == 0)
			                            {
			                                ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du hast alle unbenutzen und nicht vom Ordnungsamt verankerten oder abgeschleppten Fahrzeuge respawnt.","Schliessen","");
				        					SetVehicleToRespawn(i);
										}
									}
						        }
							}
							else ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Deine Gruppe hat keine 2750$ übrig, um die Fahrzeuge zu respawnen!","Schliessen","");
					    }
					}
				}
		    }
		}
		case DIALOG_FRAKV_CARRANG:
		{
		    new query[128];
		    if(response==0)//Zurück
		    {
		        new merker = 0, cars[MAX_VEHICLES], merkerdoppelt = 0;
				for(new i = 1;i<MAX_VEHICLES;i++)
			    {
			        if(!IsValidVehicle(i))continue;
		            merkerdoppelt = 0;
		            if(FahrzeugInfo[i][fFraktion] == SpielerInfo[playerid][sFraktion])
		            {
	                    if(FahrzeugInfo[i][fModelID] == cars[i])
	                    {
	                        merkerdoppelt = 1;
	                    }
              		}
	                if(merkerdoppelt == 0)
	                {
	                	cars[merker] = FahrzeugInfo[i][fModelID];
	                	merker ++;
	                }
		 	 	}
			    ShowModelSelectionMenuEx(playerid, cars, merker, "Fahrzeugverwaltung", CUSTOM_FUHRPARK_MENU, 16.0, 0.0, -55.0);
		    }
		    else if(response==1)//Vergeben
		    {
				for(new mf=1;mf<MAX_VEHICLES;mf++)
				{
				    if(!IsValidVehicle(mf))continue;
					if(FahrzeugInfo[mf][fFraktion] == SpielerInfo[playerid][sFraktion])
					{
						if(FahrzeugInfo[mf][fModelID] == GetPVarInt(playerid,"FrakVFahrzeugModel"))
						{
							FahrzeugInfo[mf][fRang] = listitem;
						}
					}
				}
				PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				format(query,sizeof(query),"Du hast alle Fahrzeuge mit der ModelID '%d' deiner Fraktion erst ab Rang '%d' fahrbar gemacht.",GetPVarInt(playerid,"FrakVFahrzeugModel"),listitem);
				SendClientMessage(playerid,COLOR_INFO,query);
				return 1;
		    }
		}
		case DIALOG_GRUPPENV_CARRANG:
		{
		    new query[128];
		    if(response==0)//Zurück
		    {
		        new merker = 0, cars[MAX_VEHICLES], merkerdoppelt = 0;
				for(new i = 1;i<MAX_VEHICLES;i++)
			    {
			        if(!IsValidVehicle(i))continue;
		            merkerdoppelt = 0;
		            if(FahrzeugInfo[i][fGruppe] == SpielerInfo[playerid][sGruppe])
		            {
	                    if(FahrzeugInfo[i][fModelID] == cars[i])
	                    {
	                        merkerdoppelt = 1;
	                    }
              		}
	                if(merkerdoppelt == 0)
	                {
	                	cars[merker] = FahrzeugInfo[i][fModelID];
	                	merker ++;
	                }
		 	 	}
			    ShowModelSelectionMenuEx(playerid, cars, merker, "Fahrzeugverwaltung", CUSTOM_FUHRPARK_GRUPPE_MENU, 16.0, 0.0, -55.0);
		    }
		    else if(response==1)//Vergeben
		    {
				for(new mf=1;mf<MAX_VEHICLES;mf++)
				{
				    if(!IsValidVehicle(mf))continue;
					if(FahrzeugInfo[mf][fGruppe] == SpielerInfo[playerid][sGruppe])
					{
						if(FahrzeugInfo[mf][fModelID] == GetPVarInt(playerid,"FrakVFahrzeugModel"))
						{
							FahrzeugInfo[mf][fRang] = listitem;
						}
					}
				}
				PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				format(query,sizeof(query),"Du hast alle Fahrzeuge mit der ModelID '%d' deiner Gruppe erst ab Rang '%d' fahrbar gemacht.",GetPVarInt(playerid,"FrakVFahrzeugModel"),listitem);
				SendClientMessage(playerid,COLOR_INFO,query);
				return 1;
		    }
		}
		case DIALOG_FRAKV_EQUIP:
		{
		    if(response==0)//Zurück
		    {
		  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		 		else if(SpielerInfo[playerid][sFraktion] > 4 && SpielerInfo[playerid][sFraktion] != 19)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
  				}
		    }
		    else if(response==1)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		                SetPVarInt(playerid,"EQEdit",1);
		            }
		            case 1:
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		                SetPVarInt(playerid,"EQEdit",2);
		            }
		            case 2:
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		                SetPVarInt(playerid,"EQEdit",3);
		            }
		        }
		    }
		}
		case DIALOG_FRAKV_EQUIP_EDIT:
		{
		    if(response==0)//Zurück
		    {
		        new string[128], fid[11];
				format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
				format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
  				ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_NAME,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei benennen.\nGebe einen neuen Namen für das Equiptment ein und klicke auf 'Speichern'.","Speichern","Zurück");
		            }
		            case 1:
		            {
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_RANG,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neuen Rang für das Equiptment ein und klicke auf 'Speichern'.","Speichern","Zurück");
		            }
		            case 2:
		            {
		                SetPVarInt(playerid,"EQEditW",1);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!","Speichern","Zurück");
		            }
		            case 3:
		            {
		                SetPVarInt(playerid,"EQEditW",2);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!","Speichern","Zurück");
		            }
		            case 4:
		            {
		                SetPVarInt(playerid,"EQEditW",3);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!","Speichern","Zurück");
		            }
		            case 5:
		            {
		                SetPVarInt(playerid,"EQEditW",4);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!","Speichern","Zurück");
		            }
		            case 6:
		            {
		                SetPVarInt(playerid,"EQEditW",5);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!","Speichern","Zurück");
		            }
		        }
		    }
		}
		case DIALOG_FRAKV_EQUIP_EDIT_NAME:
		{
		    if(response==0)//Zurück
		    {
		        DeletePVar(playerid,"EQEdit");
				if(GetPVarInt(playerid,"EQEdit") == 1)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 2)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 3)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
		    }
		    else if(response==1)
		    {
				if(strlen(inputtext) < 3 || strlen(inputtext) > 24)
				{
				    ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_NAME,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei benennen.\nGebe einen neuen Namen für das Equiptment ein und klicke auf 'Speichern'.\n\n{FF0000}Der Name des Equiptment muss mindestens 3 Zeichen und darf maximal 24 Zeichen betragen!","Speichern","Zurück");
				}
				else
				{
					if(GetPVarInt(playerid,"EQEdit") == 1)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetString("frakequip", "Equip1Name", inputtext ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
		            else if(GetPVarInt(playerid,"EQEdit") == 2)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetString("frakequip", "Equip2Name", inputtext ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
		            else if(GetPVarInt(playerid,"EQEdit") == 3)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetString("frakequip", "Equip3Name", inputtext ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
				}
		    }
		}
		
		case DIALOG_FRAKV_EQUIP_EDIT_RANG:
		{
		    if(response==0)//Zurück
		    {
		        DeletePVar(playerid,"EQEdit");
				if(GetPVarInt(playerid,"EQEdit") == 1)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 2)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 3)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
		    }
		    else if(response==1)
		    {
		        if(!IsNumeric(inputtext) || strval(inputtext) < 1 && strval(inputtext) > 7)
				{
				    ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_RANG,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei benennen.\nGebe einen neuen Rang für das Equiptment ein und klicke auf 'Speichern'.\n\n{FF0000}Der Rang des Equiptment muss mindestens Rang 1 und darf maximal Rang 7 betragen!","Speichern","Zurück");
				}
				else
				{
					if(GetPVarInt(playerid,"EQEdit") == 1)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetInt("frakequip", "Equip1Rang", strval(inputtext) ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
		            else if(GetPVarInt(playerid,"EQEdit") == 2)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetInt("frakequip", "Equip2Rang", strval(inputtext) ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
		            else if(GetPVarInt(playerid,"EQEdit") == 3)
		            {
		                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
		                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		                mysql_SetInt("frakequip", "Equip3Rang", strval(inputtext) ,"frakid", fid);
			         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
			         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
			         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
			         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
			         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
			         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
		                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
		            }
				}
		    }
		}
		case DIALOG_FRAKV_EQUIP_EDIT_WEAP:
		{
		    if(response==0)//Zurück
		    {
				if(GetPVarInt(playerid,"EQEdit") == 1)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 2)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 3)
	            {
	                new string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
		    }
			else if(response==1)
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > 2)return ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!\n\n{FF0000}Du hast eine ungültige WaffenID eingegeben!","Speichern","Zurück");
                new WaffenID = strval(inputtext);
				if(WaffenID == 26 || WaffenID == 27 || WaffenID == 32 || WaffenID == 35 || WaffenID == 36 || WaffenID == 37 || WaffenID == 38 || WaffenID == 39 || WaffenID == 40)
				return ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT_WEAP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du kannst das Equiptment frei bearbeiten.\nGebe einen neue WaffenID ein und klicke auf 'Speichern'. Du findest die WaffenIDs unter: http://wiki.sa-mp.com/wiki/Weapons!\n\n{FF0000}Diese Waffen werden auf "SERV_NAME" nicht geduldet.","Speichern","Zurück");
				new wid[24];
				new equipname[24], fid[11], string[128], Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, name[24];
				format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
				format(wid,sizeof(wid),"Equip%dWaffe%d",GetPVarInt(playerid,"EQEdit"),GetPVarInt(playerid,"EQEditW"));
				mysql_SetString("frakequip", wid, inputtext, "frakid", fid);
				format(equipname,sizeof(equipname),"Equip%dName",GetPVarInt(playerid,"EQEdit"));
				format(name,sizeof(name),"%s",mysql_GetString("frakequip", equipname, "frakid", fid));

				if(GetPVarInt(playerid,"EQEdit") == 1)
	            {
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetInt("frakequip", "Equip1Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 2)
	            {
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetInt("frakequip", "Equip2Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
	            else if(GetPVarInt(playerid,"EQEdit") == 3)
	            {
	                format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
		         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
		         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
		         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
		         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
		         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);
		         	format(string,sizeof(string),"Name: %s\nRang: %d\nWaffe 1: %s\nWaffe 2: %s\nWaffe 3: %s\nWaffe 4: %s\nWaffe 5: %s",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),mysql_GetInt("frakequip", "Equip3Rang", "frakid", fid),WaffenName(Weapon1),WaffenName(Weapon2),WaffenName(Weapon3),WaffenName(Weapon4),WaffenName(Weapon5));
	                ShowPlayerDialog(playerid,DIALOG_FRAKV_EQUIP_EDIT,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Weiter","Zurück");
	            }
			}
		}
		case DIALOG_FRAKV_RANGSE:
		{
		    if(response==0)//Zurück
		    {
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
				format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strlen(inputtext) != 0 && strlen(inputtext) <= 24)
		        {
		            new string[84], r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
		            format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
		            format(string,sizeof(string),"%d",GetPVarInt(playerid,"RangEdit"));
		            mysql_SetString("rangnamen", string, inputtext, "frakid", ranklist);
					format(string,sizeof(string),"Du hast den Rangnamen für Rang %d in '%s' geändert.",GetPVarInt(playerid,"RangEdit"),inputtext);
					SendClientMessage(playerid,COLOR_INFO,string);
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
					format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
				}
		       	else ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?\n\nBenutze 1 bis 24 Zeichen für einen gültigen Rangnamen.","Weiter","Zurück");
			}
		}
		case DIALOG_GRUPPEV_RANGSE:
		{
		    if(response==0)//Zurück
		    {
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
				format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strlen(inputtext) != 0 && strlen(inputtext) <= 24)
		        {
		            new string[84], r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
		            format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
		            format(string,sizeof(string),"%d",GetPVarInt(playerid,"RangEdit"));
		            mysql_SetString("grangnamen", string, inputtext, "gid", ranklist);
					format(string,sizeof(string),"Du hast den Rangnamen für Rang %d in '%s' geändert.",GetPVarInt(playerid,"RangEdit"),inputtext);
					SendClientMessage(playerid,COLOR_INFO,string);
					format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
					format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
					format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
					format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
					format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
					format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
					format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
					format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
					format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
					ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
				}
		       	else ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?\n\nBenutze 1 bis 24 Zeichen für einen gültigen Rangnamen.","Weiter","Zurück");
			}
		}
		case DIALOG_FRAKV_RANGS:
		{
	 		if(response==0)//Zurück
	 		{
		  		if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nEquipt-Verwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		 		else if(SpielerInfo[playerid][sFraktion] > 4 && SpielerInfo[playerid][sFraktion] != 19)
		  		{
		   			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nSkinordnung festlegen\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
		  		else if(SpielerInfo[playerid][sFraktion] == 19 || SpielerInfo[playerid][sFraktion] == 20)
		  		{
		 			ShowPlayerDialog(playerid,DIALOG_FRAKV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Rangnamen bearbeiten\nFahrzeugverwaltung\nGehaltverwaltung","Weiter","Abbrechen");
					return 1;
		  		}
			}
	        else if(response==1)//Weiter
	        {
	        	switch(listitem)
				{
					case 0://Rang 1
	    			{
						SetPVarInt(playerid,"RangEdit",1);
						ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?","Weiter","Zurück");
	  				}
			    	case 1://Rang 2
					{
				        SetPVarInt(playerid,"RangEdit",2);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des zweiten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 2://Rang 3
				    {
				        SetPVarInt(playerid,"RangEdit",3);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des dritten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 3://Rang 4
				    {
				        SetPVarInt(playerid,"RangEdit",4);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des vierten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 4://Rang 5
				    {
				        SetPVarInt(playerid,"RangEdit",5);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des fünften Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 5://Rang 6
				    {
				        SetPVarInt(playerid,"RangEdit",6);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 6://Rang 7
				    {
				        SetPVarInt(playerid,"RangEdit",7);
				        ShowPlayerDialog(playerid,DIALOG_FRAKV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fraktionsverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				}
	 		}
		}
		case DIALOG_GRUPPEV_RANGS:
		{
	 		if(response==0)//Zurück
	 		{
		  		new gid = SpielerInfo[playerid][sGruppe];
				if(GruppenInfo[gid][gUpgrade][0] == 0){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten","Weiter","Abbrechen");}
				else if(GruppenInfo[gid][gUpgrade][0] == 1){ShowPlayerDialog(playerid,DIALOG_GRUPPEV,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Upgrades\nFahrzeugverwaltung\nRangnamen bearbeiten\nGehaltverwaltung","Weiter","Abbrechen");}
			}
	        else if(response==1)//Weiter
	        {
	        	switch(listitem)
				{
					case 0://Rang 1
	    			{
						SetPVarInt(playerid,"RangEdit",1);
						ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des ersten Rangs. Wie soll er lauten?","Weiter","Zurück");
	  				}
			    	case 1://Rang 2
					{
				        SetPVarInt(playerid,"RangEdit",2);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des zweiten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 2://Rang 3
				    {
				        SetPVarInt(playerid,"RangEdit",3);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des dritten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 3://Rang 4
				    {
				        SetPVarInt(playerid,"RangEdit",4);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des vierten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 4://Rang 5
				    {
				        SetPVarInt(playerid,"RangEdit",5);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des fünften Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 5://Rang 6
				    {
				        SetPVarInt(playerid,"RangEdit",6);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des vorletzen Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				    case 6://Rang 7
				    {
				        SetPVarInt(playerid,"RangEdit",7);
				        ShowPlayerDialog(playerid,DIALOG_GRUPPEV_RANGSE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppenverwaltung","Du editierst den Namen des letzten Rangs. Wie soll er lauten?","Weiter","Zurück");
				    }
				}
	 		}
		}
		case DIALOG_PDEQUIP:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)
		    {
				switch(listitem)
				{
				    case 0:
				    {
     					new frakid[3];
						format(frakid,sizeof(frakid),"%d",SpielerInfo[playerid][sFraktion]);
						new Rang = mysql_GetInt("frakequip", "Equip1Rang", "frakid", frakid);
				        if(SpielerInfo[playerid][sRank] >= Rang)
				        {
					        new Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
				         	Weapon1 = mysql_GetInt("frakequip", "Equip1Waffe1", "frakid", fid);
				         	Weapon2 = mysql_GetInt("frakequip", "Equip1Waffe2", "frakid", fid);
				         	Weapon3 = mysql_GetInt("frakequip", "Equip1Waffe3", "frakid", fid);
				         	Weapon4 = mysql_GetInt("frakequip", "Equip1Waffe4", "frakid", fid);
				         	Weapon5 = mysql_GetInt("frakequip", "Equip1Waffe5", "frakid", fid);

					        SetPlayerHealth(playerid,110.0);
					        SetPlayerArmour(playerid,110.0);
					        GivePlayerWeapon(playerid,WEAPON:Weapon1,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon2,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon3,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon4,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon5,700);
					        SendClientMessage(playerid,COLOR_SUPER,"Du hast dich erfolgreich ausgerüstet.");
					        SetPVarInt(playerid,"PDEquipt",1);
					        PDEquiptTimer[playerid] = SetTimerEx("PDEquiptGone",180000,false,"i",playerid);
						}
						else
						{
							new string[128], fid[11];
							format(string,sizeof(string),"Du benötigst für den %s min. Rang %d",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),Rang);
							SendClientMessage(playerid,COLOR_SORRY,string);
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
							format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
							ShowPlayerDialog(playerid,DIALOG_PDEQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - LSPD Ausrüstung",string,"Ausrüsten","Abbrechen");
						}
				    }
                    case 1:
				    {
   						new frakid[3];
						format(frakid,sizeof(frakid),"%d",SpielerInfo[playerid][sFraktion]);
						new Rang = mysql_GetInt("frakequip", "Equip2Rang", "frakid", frakid);
        				if(SpielerInfo[playerid][sRank] >= Rang)
				        {
					        new Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
				         	Weapon1 = mysql_GetInt("frakequip", "Equip2Waffe1", "frakid", fid);
				         	Weapon2 = mysql_GetInt("frakequip", "Equip2Waffe2", "frakid", fid);
				         	Weapon3 = mysql_GetInt("frakequip", "Equip2Waffe3", "frakid", fid);
				         	Weapon4 = mysql_GetInt("frakequip", "Equip2Waffe4", "frakid", fid);
				         	Weapon5 = mysql_GetInt("frakequip", "Equip2Waffe5", "frakid", fid);

					        SetPlayerHealth(playerid,110.0);
					        SetPlayerArmour(playerid,110.0);
					        GivePlayerWeapon(playerid,WEAPON:Weapon1,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon2,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon3,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon4,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon5,700);
					        SendClientMessage(playerid,COLOR_SUPER,"Du hast dich erfolgreich ausgerüstet.");
					        SetPVarInt(playerid,"PDEquipt",1);
					        SetTimerEx("PDEquiptGone",180000, false,"i",playerid);
						}
						else
						{
							new string[128], fid[11];
							format(string,sizeof(string),"Du benötigst für den %s min. Rang %d",mysql_GetString("frakequip", "Equip2Name", "frakid", fid),Rang);
							SendClientMessage(playerid,COLOR_SORRY,string);
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
							format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
							ShowPlayerDialog(playerid,DIALOG_PDEQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - LSPD Ausrüstung",string,"Ausrüsten","Abbrechen");
						}
				    }
				    case 2:
				    {
   						new frakid[3];
						format(frakid,sizeof(frakid),"%d",SpielerInfo[playerid][sFraktion]);
						new Rang = mysql_GetInt("frakequip", "Equip3Rang", "frakid", frakid);
    					if(SpielerInfo[playerid][sRank] >= Rang)
				        {
					        new Weapon1, Weapon2, Weapon3, Weapon4, Weapon5, fid[11];
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
				         	Weapon1 = mysql_GetInt("frakequip", "Equip3Waffe1", "frakid", fid);
				         	Weapon2 = mysql_GetInt("frakequip", "Equip3Waffe2", "frakid", fid);
				         	Weapon3 = mysql_GetInt("frakequip", "Equip3Waffe3", "frakid", fid);
				         	Weapon4 = mysql_GetInt("frakequip", "Equip3Waffe4", "frakid", fid);
				         	Weapon5 = mysql_GetInt("frakequip", "Equip3Waffe5", "frakid", fid);

					        SetPlayerHealth(playerid,110.0);
					        SetPlayerArmour(playerid,110.0);
					        GivePlayerWeapon(playerid,WEAPON:Weapon1,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon2,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon3,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon4,700);
					        GivePlayerWeapon(playerid,WEAPON:Weapon5,700);
					        SendClientMessage(playerid,COLOR_SUPER,"Du hast dich erfolgreich ausgerüstet.");
					        SetPVarInt(playerid,"PDEquipt",1);
					        SetTimerEx("PDEquiptGone",180000, false,"i",playerid);
						}
						else
						{
							new string[128], fid[11];
							format(string,sizeof(string),"Du benötigst für den %s min. Rang %d",mysql_GetString("frakequip", "Equip3Name", "frakid", fid),Rang);
							SendClientMessage(playerid,COLOR_SORRY,string);
							format(fid,sizeof(fid),"%d",SpielerInfo[playerid][sFraktion]);
							format(string,sizeof(string),"%s\n%s\n%s",mysql_GetString("frakequip", "Equip1Name", "frakid", fid),mysql_GetString("frakequip", "Equip2Name", "frakid", fid),mysql_GetString("frakequip", "Equip3Name", "frakid", fid));
							ShowPlayerDialog(playerid,DIALOG_PDEQUIP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - LSPD Ausrüstung",string,"Ausrüsten","Abbrechen");
						}
				    }
				}
		    }
		}
		case DIALOG_INVITE:
		{
		    if(response==0)//Ablehnen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_RED,"Du hast die Einladung abgelehnt.");
			    format(string,sizeof(string),"Fraktionseinladung: Der %s hat deine Einladung abgelehnt.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_RED,string);
			    DeletePVar(playerid,"InvitedPID");
			}
			else if(response==1)//Annehmen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_SUPER,"Du hast die Einladung angenommen.");
			    SendClientMessage(playerid,COLOR_INFO,"Hinweis: Benutze '/spawnchange' um dein Spawnpunkt zu ändern.");
			    format(string,sizeof(string),"Fraktionseinladung: Der %s hat deine Einladung angenommen.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_SUPER,string);
			    SpielerInfo[playerid][sFraktion] = SpielerInfo[GetPVarInt(playerid,"InvitedPID")][sFraktion];
			    SpielerInfo[playerid][sRank] = 1;
			    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakMembers]++;
			    SpawnPlayerEx(playerid);
			    DeletePVar(playerid,"InvitedPID");
			}
		}
		case DIALOG_GRUPPEN_INVITE:
		{
		    if(response==0)//Ablehnen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_RED,"Du hast die Einladung abgelehnt.");
			    format(string,sizeof(string),"Gruppeneinladnung: Der Spieler %s hat deine Einladung abgelehnt.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_RED,string);
			    DeletePVar(playerid,"InvitedPID");
			}
			else if(response==1)//Annehmen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_SUPER,"Du hast die Einladung angenommen.");
			    format(string,sizeof(string),"Gruppeneinladnung: Der Spieler %s hat deine Einladung angenommen.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_SUPER,string);
			    SpielerInfo[playerid][sGruppe] = SpielerInfo[GetPVarInt(playerid,"InvitedPID")][sGruppe];
			    SpielerInfo[playerid][sGRank] = 1;
			    SpielerInfo[playerid][sGHaus] = SpielerInfo[GetPVarInt(playerid,"InvitedPID")][sGHaus];
			    DeletePVar(playerid,"InvitedPID");
			}
		}
		case DIALOG_FIRMEN_INVITE:
		{
		    if(response==0)//Ablehnen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_RED,"Du hast die Einladung abgelehnt.");
			    format(string,sizeof(string),"Firmeneinladung: Der Spieler %s hat deine Einladung abgelehnt.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_RED,string);
			    DeletePVar(playerid,"InvitedPID");
			}
			else if(response==1)//Annehmen
			{
			    new string[128];
			    SendClientMessage(playerid,COLOR_SUPER,"Du hast die Einladung angenommen.");
			    format(string,sizeof(string),"Firmeneinladung: Der Spieler %s hat deine Einladung angenommen.",SpielerInfo[playerid][sName]);
			    SendClientMessage(GetPVarInt(playerid,"InvitedPID"),COLOR_SUPER,string);
			    SpielerInfo[playerid][sFirma] = SpielerInfo[GetPVarInt(playerid,"InvitedPID")][sGruppe];
			    SpielerInfo[playerid][sFRank] = 1;
			    DeletePVar(playerid,"InvitedPID");
			}
		}
		case DIALOG_FREIKAUFEN_FAHRZEUG:
		{
		    if(response==0){}//Zurück
		    else if(response==1)
		    {
			    new query[364];
				new ModelID = FreikaufModelID[playerid][listitem];
				new Database = FreikaufDatabaseID[playerid][listitem];
				new fkstring[4];
				new iValue = ModelID;
				valstr(fkstring,iValue);
                new Freikaufpreis = mysql_GetInt("carinfos", "Freikaufpreis", "ModelID", fkstring);
                if(GetPlayerMoneyEx(playerid) < Freikaufpreis)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
				mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `Abgeschleppt`='0' WHERE `ID`='%d'",Database);
            	mysql_tquery(sqlHandle, query);
				
				mysql_format(sqlHandle, query, sizeof(query),"SELECT * FROM `vehicles` WHERE `ID` = '%d' LIMIT 1", Database);
				mysql_tquery(sqlHandle, query, "onPlayerBuyTowedVehicle", "ii", playerid, listitem);
			}
		}
		case DIALOG_AUTOHAUS:
		{
		    if(response==0){}//Zurück
		    else if(response==1)
		    {
		        if(SpielerInfo[playerid][sPerso] == 1)
		        {
		        	SetPVarInt(playerid,"FahrzeugKaufModelID",autohauscarmodelid[playerid][listitem]);
		        	SetPVarInt(playerid,"FahrzeugKaufCarID",autohauscarid[playerid][listitem]);
		        	ShowPlayerDialog(playerid,DIALOG_AUTOHAUS_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Informationen\nProbefahrt\nKaufen","Weiter","Abbrechen");
				}
				else KeinPerso
			}
		}
		case DIALOG_AUTOHAUS_AUSWAHL:
		{
		    if(response==0){}//Zurück
		    else if(response==1)
		    {
		        new string[800];
				switch(listitem)
				{
				    case 0://Informationen
				    {
				        new modelid = GetPVarInt(playerid,"FahrzeugKaufModelID");
				        new carid = GetPVarInt(playerid,"FahrzeugKaufCarID");
						format(string,sizeof(string),"{FFFFFF}Fahrzeugname:			{009BFF}%s{FFFFFF}\nTankart:			{009BFF}%s{FFFFFF}\nVerbrauch:			{009BFF}%.2fL pro Kilometer{FFFFFF}\nTankkapazität:			{009BFF}%dL",FahrzeugName[modelid-400],TankArtName(carid),VehicleData[GetVehicleModel(carid)-400][vehVerbrauch],VehicleData[GetVehicleModel(carid)-400][vehLiter]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Zurück","");
					}
	    			case 1://Probefahrt
				    {
				        format(string,sizeof(string),"Probefahrtbedingungen:\n\nDu hast insgesamt 6 Minuten Zeit das Fahrzeug probe zu fahren. Nach dieser Zeit bist du dazu\nverpflichtet das Fahrzeug ins Autohaus zurückzubringen. Natürlich kannst du es auch vorher abliefern.\n");
				        strcat(string,"Solltest du das Fahrzeug nicht zurückbringen informiert das Autohaus die Polizei und erstattet eine Strafanzeige.\nFalls du das Fahrzeug lediglich nicht rechtzeitig zurückbringen konntest, erhälst du eine Strafgebühr erhoben.\nZur Sicherheit wird dein Perso vom Autohaus vorerst einbehalten.");
		        		ShowPlayerDialog(playerid,DIALOG_AUTO_PROBEFAHRT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Fahren","Zurück");
					}
	    			case 2://Kaufen
				    {
				        if(SpielerInfo[playerid][sFraktion] != 0 && SpielerInfo[playerid][sRank] >= 6)
				        {
						    if(SpielerInfo[playerid][sGRank] >= 6)
							{
								format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s\nKaufen für %s",FrakName(SpielerInfo[playerid][sFraktion]),GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
								ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
							}
							else
							{
								format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s",FrakName(SpielerInfo[playerid][sFraktion]));
								ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
							}
						}
						else
						{
							if(SpielerInfo[playerid][sGRank] >= 6)
	   						{
	   						    SetPVarInt(playerid,"AutoGruppe",1);
								format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s",GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
								ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
							}
							else
							{
								ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Kaufen für Privat","Weiter","Zurück");
							}
						}
					}
				}
		    }
		}
		case DIALOG_AUTO_PROBEFAHRT:
		{
		    if(response==0)//Zurück
			{
                ShowPlayerDialog(playerid,DIALOG_AUTOHAUS_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Informationen\nProbefahrt\nKaufen","Weiter","Abbrechen");
			}
			else if(response==1)//Weiter
			{
			    new Float: probeX, Float: probeY, Float: probeZ, Float:probeA;
				if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus - Los Santos
				{
				    new rand = random(3);
					if(rand == 0)
					{
					    probeX = 1946.9268;
					    probeY = -1561.8151;
					    probeZ = 13.4234;
					    probeA = 134.5875;
					}
					else if(rand == 1)
					{
					    probeX = 1933.5591;
					    probeY = -1562.5824;
					    probeZ = 13.3974;
					    probeA = 179.2655;
					}
					else if(rand == 2)
					{
					    probeX = 1945.4417;
					    probeY = -1587.7495;
					    probeZ = 13.3684;
					    probeA = 179.1256;
					}
				}
				else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler - Los Santos
				{
				    new rand = random(3);
					if(rand == 0)
					{
					    probeX = 1842.3030;
					    probeY = -1392.9290;
					    probeZ = 12.9664;
					    probeA = 180.6584;
					}
					else if(rand == 1)
					{
					    probeX = 1842.3323;
					    probeY = -1396.3489;
					    probeZ = 12.9732;
					    probeA = 180.2030;
					}
					else if(rand == 2)
					{
					    probeX = 1842.3483;
					    probeY = -1400.8530;
					    probeZ = 12.9681;
					    probeA = 180.2030;
					}
				}
				else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
				{
				    probeX = -1577.7860;
				    probeY = 1168.8536;
				    probeZ = 6.8201;
				    probeA = 3.4685;
				}
				SetPVarInt(playerid,"ProbeFahrt",1);
				ProbefahrtCar[playerid] = CreateVehicle(GetPVarInt(playerid,"FahrzeugKaufModelID"), probeX, probeY, probeZ, probeA, 1, 1, -1);
				SetVehicleNumberPlate(ProbefahrtCar[playerid], "PROBE");
				FahrzeugInfo[ProbefahrtCar[playerid]][fTank] = VehicleData[GetVehicleModel(ProbefahrtCar[playerid])-400][vehLiter];
				ProbefahrtTime[playerid] = 5;
				ProbefahrtTimer[playerid] = SetTimerEx("ProbeFahrtPlayer",60000,true,"i",playerid);
				AC_PutPlayerInVehicleEx(playerid,ProbefahrtCar[playerid],0);
				if(GetPVarInt(playerid,"Autohaus") == 1){SetPlayerCheckpoint(playerid,1945.9243,-1569.7150,13.5977,4.0);}
				else if(GetPVarInt(playerid,"Autohaus") == 2){SetPlayerCheckpoint(playerid,1845.0406,-1397.4750,13.3906,4.0);}
				else if(GetPVarInt(playerid,"Autohaus") == 3){SetPlayerCheckpoint(playerid,-1581.5812,1166.5559,6.7440,4.0);}
				SendClientMessage(playerid,COLOR_YELLOW,"Das Autohaus wünscht eine angenehme Fahrt. Sobald Sie die Probefahrt beenden wollen, fahren Sie in den Checkpoint.");
				SendClientMessage(playerid,COLOR_GREY,"INFO: Sollte der Checkpoint verschwinden benutze '/pfcp' um ihn wieder anzeigen zu lassen. (Dein Perso ist im Autohaus)");
                SpielerInfo[playerid][sPerso] = 0;
 				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][2],"PROBEFAHRT");
				PlayerTextDrawSetString(playerid,CountdownDraw[playerid][3],"~g~5 ~w~Minuten");
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][0]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][1]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][2]);
				PlayerTextDrawShow(playerid,CountdownDraw[playerid][3]);
			}
		}
		case DIALOG_AUTO_INFOS:
		{
		    if(response==0){}//Zurück
		    else if(response==1)
		    {
				ShowPlayerDialog(playerid,DIALOG_AUTOHAUS_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Informationen\nProbefahrt\nKaufen","Weiter","Abbrechen");
		    }
		}
		case DIALOG_AUTO_KAUFEN:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_AUTOHAUS_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Informationen\nProbefahrt\nKaufen","Weiter","Abbrechen");}//Zurück
		    else if(response==1)
		    {
		        new string[264], carid = GetPVarInt(playerid,"FahrzeugKaufCarID");
  				switch(listitem)
				{
				    case 0://Kaufen für Privat
				    {
				        SetPVarInt(playerid,"FahrzeugKaufPrivat",1);
  						format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du den {007DFF}%s{FFFFFF} für {007DFF}%d${FFFFFF}\nfür den Privatgebrauch kaufen möchtest ?",FahrzeugName[FahrzeugInfo[carid][fModelID]-400],FahrzeugInfo[carid][fPreis]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN_2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Ja","Nein");

					}
					case 1://kaufen für Fraktion
					{
					    if(GetPVarInt(playerid,"AutoGruppe") == 0)
		 				{
		 				    SetPVarInt(playerid,"FahrzeugKaufFraktion",1);
							format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du den {007DFF}%s{FFFFFF} für {007DFF}%d${FFFFFF}\nfür {007DFF}%s{FFFFFF} kaufen möchtest ?",FahrzeugName[FahrzeugInfo[carid][fModelID]-400],FahrzeugInfo[carid][fPreis],FrakName(SpielerInfo[playerid][sFraktion]));
							ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN_2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Ja","Nein");
						}
						else
						{
						    DeletePVar(playerid,"AutoGruppe");
						    SetPVarInt(playerid,"FahrzeugKaufGruppe",1);
							format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du den {007DFF}%s{FFFFFF} für {007DFF}%d${FFFFFF}\nfür {007DFF}%s{FFFFFF} kaufen möchtest ?",FahrzeugName[FahrzeugInfo[carid][fModelID]-400],FahrzeugInfo[carid][fPreis],GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
							ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN_2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Ja","Nein");
						}
					}
					case 2://kaufen für Gruppe
					{
					    SetPVarInt(playerid,"FahrzeugKaufGruppe",1);
						format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du den {007DFF}%s{FFFFFF} für {007DFF}%d${FFFFFF}\nfür {007DFF}%s{FFFFFF} kaufen möchtest ?",FahrzeugName[FahrzeugInfo[carid][fModelID]-400],FahrzeugInfo[carid][fPreis],GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN_2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Ja","Nein");
					}
					case 3://kaufen für Firma
					{
					    SetPVarInt(playerid,"FahrzeugKaufFirma",1);
						format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du den {007DFF}%s{FFFFFF} für {007DFF}%d${FFFFFF}\nfür {007DFF}%s{FFFFFF} kaufen möchtest ?",FahrzeugName[FahrzeugInfo[carid][fModelID]-400],FahrzeugInfo[carid][fPreis],FirmenInfo[SpielerInfo[playerid][sFirma]][fName]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN_2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Autohaus",string,"Ja","Nein");
					}
				}
		    }
		}
		case DIALOG_AUTO_KAUFEN_2:
		{
		    new string[264];
		    if(response==0)
			{
			    if(SpielerInfo[playerid][sFraktion] != 0 && SpielerInfo[playerid][sRank] >= 6)
		        {
				    if(SpielerInfo[playerid][sGLeader] != 0)
					{
						format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s\nKaufen für %s",FrakName(SpielerInfo[playerid][sFraktion]),GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
					}
					else
					{
						format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s",FrakName(SpielerInfo[playerid][sFraktion]));
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
					}
				}
				else
				{
					if(SpielerInfo[playerid][sGLeader] != 0)
					{
					    SetPVarInt(playerid,"AutoGruppe",1);
						format(string,sizeof(string),"Kaufen für Privat\nKaufen für %s",GruppenInfo[SpielerInfo[playerid][sGruppe]][gName]);
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus",string,"Weiter","Zurück");
					}
					else
					{
						ShowPlayerDialog(playerid,DIALOG_AUTO_KAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Autohaus","Kaufen für Privat","Weiter","Zurück");
					}
				}
			}
		    else if(response==1)
		    {
		        new carid = GetPVarInt(playerid,"FahrzeugKaufCarID");
		        new modelid = GetPVarInt(playerid,"FahrzeugKaufModelID");
				if(GetPVarInt(playerid,"FahrzeugKaufPrivat") == 1)
				{
				    DeletePVar(playerid,"FahrzeugKaufPrivat");
    			    if(GetPlayerMoneyEx(playerid) < FahrzeugInfo[carid][fPreis])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
        			new crstring[364], Float:pX, Float:pY, Float:pZ, Float:pA, vehicleid;
       				if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus
					{
					    new rand = random(3);
						if(rand == 0)//Auswahl 1
						{
							pX = 1895.7533;
							pY = -1573.1729;
							pZ = 13.4133;
							pA = 359.4412;
						}
						else if(rand == 1)//Auswahl 2
						{
							pX = 1899.7689;
							pY = -1573.2173;
							pZ = 13.4064;
							pA = 359.1652;
						}
						else if(rand == 2)//Auswahl 3
						{
							pX = 1902.4186;
							pY = -1555.2581;
							pZ = 13.4382;
							pA = 271.5528;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler
					{
	    				new rand = random(5);
						if(rand == 0)//Auswahl 1
						{
							pX = 1822.2765;
							pY = -1392.5507;
							pZ = 13.1479;
							pA = 217.6383;
						}
						else if(rand == 1)//Auswahl 2
						{
						    pX = 1824.5090;
							pY = -1392.4611;
							pZ = 13.1479;
							pA = 217.2933;
						}
						else if(rand == 2)//Auswahl 3
						{
							pX = 1828.9922;
							pY = -1392.4086;
							pZ = 13.1479;
							pA = 220.3602;
						}
						else if(rand == 3)//Auswahl 3
						{
							pX = 1832.3475;
							pY = -1392.2281;
							pZ = 13.1486;
							pA = 228.3739;
						}
						else if(rand == 4)//Auswahl 3
						{
							pX = 1834.9426;
							pY = -1392.0996;
							pZ = 13.1481;
							pA = 229.2071;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
					{
					    new rand = random(4);
						if(rand == 0)
						{
						    pX = -1517.7908;
						    pY = 1145.6047;
						    pZ = 6.8796;
						    pA = 269.5889;
						}
						else if(rand == 1)
						{
						    pX = -1517.8282;
						    pY = 1138.3187;
						    pZ = 6.8927;
						    pA = 270.4280;
						}
						else if(rand == 2)
						{
						    pX = -1517.8218;
						    pY = 1131.0952;
						    pZ = 6.8926;
						    pA = 270.0160;
						}
						else if(rand == 3)
						{
						    pX = -1517.7950;
						    pY = 1123.8679;
						    pZ = 6.8928;
						    pA = 270.2569;
						}
					}
                    vehicleid = CreateVehicle(modelid,pX,pY,pZ,pA,1,1,-1);
                    format(FahrzeugInfo[vehicleid][fKennzeichen], 10, CreateNummernSchild(playerid));
					SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);

					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = modelid;
					FahrzeugInfo[vehicleid][fPosition][0] = pX; FahrzeugInfo[vehicleid][fPosition][1] = pY; FahrzeugInfo[vehicleid][fPosition][2] = pZ; FahrzeugInfo[vehicleid][fPosition][3] = pA; FahrzeugInfo[vehicleid][fColor][1] = 1;
				 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 1; FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = 20.0; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0;
					FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
					FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[carid][fPreis]; format(FahrzeugInfo[vehicleid][fBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]); FahrzeugInfo[vehicleid][fBesitzerID] = playerid; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
					FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
					FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0;
					FahrzeugInfo[vehicleid][fkGeld] = 0; FahrzeugInfo[vehicleid][fkC4] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = true;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Besitzer`, `Kennzeichen`, `Preis`) VALUES ('%d', '%f', '%f', '%f', '%f', '1', '1', '%s', '%s', '%d')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3],
					SpielerInfo[playerid][sName],FahrzeugInfo[vehicleid][fKennzeichen],FahrzeugInfo[carid][fPreis]);
					mysql_tquery(sqlHandle, crstring, "onPlayerVehicleCreated", "i", vehicleid);

					SetPlayerCheckpoint(playerid,pX,pY,pZ,5.0);
					SendClientMessage(playerid,COLOR_SUPER,"Herzlichen Glückwunsch zum neuen Fahrzeug. Es befindet sich am roten Marker. Um den roten Marker zu entfernen benutze '/cpaus'.");
					GivePlayerMoneyEx(playerid,-FahrzeugInfo[carid][fPreis]);
					return 1;
				}
				else if(GetPVarInt(playerid,"FahrzeugKaufFraktion") == 1)
				{
				    if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] < FahrzeugInfo[carid][fPreis])return SendClientMessage(playerid,COLOR_SORRY,"Auf dem Fraktionskonto liegt nicht genügend Geld.");
			        new Float:pX, Float:pY, Float:pZ, Float:pA, frakmsg[128], vehicleid, crstring[364];
       				if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus
					{
					    new rand = random(3);
						if(rand == 0)//Auswahl 1
						{
							pX = 1895.7533;
							pY = -1573.1729;
							pZ = 13.4133;
							pA = 359.4412;
						}
						else if(rand == 1)//Auswahl 2
						{
							pX = 1899.7689;
							pY = -1573.2173;
							pZ = 13.4064;
							pA = 359.1652;
						}
						else if(rand == 2)//Auswahl 3
						{
							pX = 1902.4186;
							pY = -1555.2581;
							pZ = 13.4382;
							pA = 271.5528;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler
					{
	    				new rand2 = random(5);
						if(rand2 == 0)//Auswahl 1
						{
							pX = 1822.2765;
							pY = -1392.5507;
							pZ = 13.1479;
							pA = 217.6383;
						}
						else if(rand2 == 1)//Auswahl 2
						{
						    pX = 1824.5090;
							pY = -1392.4611;
							pZ = 13.1479;
							pA = 217.2933;
						}
						else if(rand2 == 2)//Auswahl 3
						{
							pX = 1828.9922;
							pY = -1392.4086;
							pZ = 13.1479;
							pA = 220.3602;
						}
						else if(rand2 == 3)//Auswahl 3
						{
							pX = 1832.3475;
							pY = -1392.2281;
							pZ = 13.1486;
							pA = 228.3739;
						}
						else if(rand2 == 4)//Auswahl 3
						{
							pX = 1834.9426;
							pY = -1392.0996;
							pZ = 13.1481;
							pA = 229.2071;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
					{
					    new rand = random(4);
						if(rand == 0)
						{
						    pX = -1517.7908;
						    pY = 1145.6047;
						    pZ = 6.8796;
						    pA = 269.5889;
						}
						else if(rand == 1)
						{
						    pX = -1517.8282;
						    pY = 1138.3187;
						    pZ = 6.8927;
						    pA = 270.4280;
						}
						else if(rand == 2)
						{
						    pX = -1517.8218;
						    pY = 1131.0952;
						    pZ = 6.8926;
						    pA = 270.0160;
						}
						else if(rand == 3)
						{
						    pX = -1517.7950;
						    pY = 1123.8679;
						    pZ = 6.8928;
						    pA = 270.2569;
						}
					}
				    vehicleid = CreateVehicle(modelid,pX,pY,pZ,pA,FrakCarFarbe1(SpielerInfo[playerid][sFraktion]),FrakCarFarbe2(SpielerInfo[playerid][sFraktion]),-1);
                    CreateFrakNummernSchild(vehicleid,FahrzeugInfo[vehicleid][fFraktion]);

					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = modelid;
					FahrzeugInfo[vehicleid][fPosition][0] = pX; FahrzeugInfo[vehicleid][fPosition][1] = pY; FahrzeugInfo[vehicleid][fPosition][2] = pZ; FahrzeugInfo[vehicleid][fPosition][3] = pA; FahrzeugInfo[vehicleid][fColor][1] = FrakCarFarbe2(SpielerInfo[playerid][sFraktion]);
				 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = FrakCarFarbe1(SpielerInfo[playerid][sFraktion]); FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = 20.0; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = SpielerInfo[playerid][sFraktion]; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0;
					FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
					FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[carid][fPreis]; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
					FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
					FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0;
                    FahrzeugInfo[vehicleid][fkGeld] = 0; FahrzeugInfo[vehicleid][fkC4] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;
                    
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = true;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Fraktion`, `Kennzeichen`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', 'Fraktion')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], FahrzeugInfo[vehicleid][fColor][0], FahrzeugInfo[vehicleid][fColor][1],
					FahrzeugInfo[vehicleid][fFraktion]);
					mysql_tquery(sqlHandle, crstring, "onFactionVehCreated", "i", vehicleid);

					format(string,sizeof(string),"Du hast für deine Fraktion ein {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} gekauft. Das Fahrzeug befindet sich am roten Marker.",FahrzeugName[modelid-400],FahrzeugInfo[carid][fPreis]);
					SendClientMessage(playerid,COLOR_INFO,string);
					SetPlayerCheckpoint(playerid,pX,pY,pZ,5.0);
					FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] -= FahrzeugInfo[carid][fPreis];
				    foreach(new i : Player)
					{
			            if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
			            {
			                if(i != playerid)
			                {
				                format(frakmsg,sizeof(frakmsg),"%s %s hat für eure Fraktion einen %s gekauft.",RangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[modelid-400]);
				                SendClientMessage(i,COLOR_INFO,frakmsg);
							}
						}
				    }
				}
				else if(GetPVarInt(playerid,"FahrzeugKaufGruppe") == 1)
				{
				    if(GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] < FahrzeugInfo[carid][fPreis])return SendClientMessage(playerid,COLOR_SORRY,"Auf dem Gruppenkonto liegt nicht genügend Geld.");
			        new Float:pX, Float:pY, Float:pZ, Float:pA, frakmsg[128], vehicleid, crstring[364];
	   				if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus
					{
					    new rand = random(3);
						if(rand == 0)//Auswahl 1
						{
							pX = 1895.7533;
							pY = -1573.1729;
							pZ = 13.4133;
							pA = 359.4412;
						}
						else if(rand == 1)//Auswahl 2
						{
							pX = 1899.7689;
							pY = -1573.2173;
							pZ = 13.4064;
							pA = 359.1652;
						}
						else if(rand == 2)//Auswahl 3
						{
							pX = 1902.4186;
							pY = -1555.2581;
							pZ = 13.4382;
							pA = 271.5528;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler
					{
	    				new rand2 = random(5);
						if(rand2 == 0)//Auswahl 1
						{
							pX = 1822.2765;
							pY = -1392.5507;
							pZ = 13.1479;
							pA = 217.6383;
						}
						else if(rand2 == 1)//Auswahl 2
						{
						    pX = 1824.5090;
							pY = -1392.4611;
							pZ = 13.1479;
							pA = 217.2933;
						}
						else if(rand2 == 2)//Auswahl 3
						{
							pX = 1828.9922;
							pY = -1392.4086;
							pZ = 13.1479;
							pA = 220.3602;
						}
						else if(rand2 == 3)//Auswahl 3
						{
							pX = 1832.3475;
							pY = -1392.2281;
							pZ = 13.1486;
							pA = 228.3739;
						}
						else if(rand2 == 4)//Auswahl 3
						{
							pX = 1834.9426;
							pY = -1392.0996;
							pZ = 13.1481;
							pA = 229.2071;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
					{
					    new rand = random(4);
						if(rand == 0)
						{
						    pX = -1517.7908;
						    pY = 1145.6047;
						    pZ = 6.8796;
						    pA = 269.5889;
						}
						else if(rand == 1)
						{
						    pX = -1517.8282;
						    pY = 1138.3187;
						    pZ = 6.8927;
						    pA = 270.4280;
						}
						else if(rand == 2)
						{
						    pX = -1517.8218;
						    pY = 1131.0952;
						    pZ = 6.8926;
						    pA = 270.0160;
						}
						else if(rand == 3)
						{
						    pX = -1517.7950;
						    pY = 1123.8679;
						    pZ = 6.8928;
						    pA = 270.2569;
						}
					}
				    vehicleid = CreateVehicle(modelid,pX,pY,pZ,pA,1,1,-1);
    				format(FahrzeugInfo[vehicleid][fKennzeichen], 5, GruppenInfo[SpielerInfo[playerid][sGruppe]][gSchild]);
					SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);

					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = modelid;
					FahrzeugInfo[vehicleid][fPosition][0] = pX; FahrzeugInfo[vehicleid][fPosition][1] = pY; FahrzeugInfo[vehicleid][fPosition][2] = pZ; FahrzeugInfo[vehicleid][fPosition][3] = pA; FahrzeugInfo[vehicleid][fColor][1] = 1;
				 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 1; FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = 20.0; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = SpielerInfo[playerid][sGruppe]; FahrzeugInfo[vehicleid][fFirma] = SpielerInfo[playerid][sFirma]; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0;
					FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0; FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[carid][fPreis];
					FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0;
					FahrzeugInfo[vehicleid][fTuning][2] = 0; FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0;
					FahrzeugInfo[vehicleid][fTuning][7] = 0; FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0;
					FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fkGeld] = 0; FahrzeugInfo[vehicleid][fkC4] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = true;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Gruppe`, `Kennzeichen`, `Preis`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', 'Gruppe', '%d')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], FahrzeugInfo[vehicleid][fColor][0], FahrzeugInfo[vehicleid][fColor][1],
					FahrzeugInfo[vehicleid][fGruppe],FahrzeugInfo[vehicleid][fPreis]);
					mysql_tquery(sqlHandle, crstring, "onGroupVehicleCreated", "i", vehicleid);

					format(string,sizeof(string),"Du hast für deine Gruppe ein {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} gekauft. Das Fahrzeug befindet sich am roten Marker.",FahrzeugName[modelid-400],FahrzeugInfo[carid][fPreis]);
					SendClientMessage(playerid,COLOR_INFO,string);
					SetPlayerCheckpoint(playerid,pX,pY,pZ,5.0);
					GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] -= FahrzeugInfo[carid][fPreis];
				    foreach(new i : Player)
					{
			            if(SpielerInfo[i][sGruppe] == SpielerInfo[playerid][sGruppe])
			            {
			                if(i != playerid)
			                {
				                format(frakmsg,sizeof(frakmsg),"%s %s hat für eure Gruppe einen %s gekauft.",GRangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[modelid-400]);
				                SendClientMessage(i,COLOR_INFO,frakmsg);
							}
						}
				    }
				}
				else if(GetPVarInt(playerid,"FahrzeugKaufFirma") == 1)
				{
				    if(FirmenInfo[SpielerInfo[playerid][sFirma]][fKasse] < FahrzeugInfo[carid][fPreis])return SendClientMessage(playerid,COLOR_SORRY,"Auf dem Firmenkonto liegt nicht genügend Geld.");
			        new Float:pX, Float:pY, Float:pZ, Float:pA, frakmsg[128], vehicleid, crstring[364];
	   				if(GetPVarInt(playerid,"Autohaus") == 1)//Autohaus
					{
					    new rand = random(3);
						if(rand == 0)//Auswahl 1
						{
							pX = 1895.7533;
							pY = -1573.1729;
							pZ = 13.4133;
							pA = 359.4412;
						}
						else if(rand == 1)//Auswahl 2
						{
							pX = 1899.7689;
							pY = -1573.2173;
							pZ = 13.4064;
							pA = 359.1652;
						}
						else if(rand == 2)//Auswahl 3
						{
							pX = 1902.4186;
							pY = -1555.2581;
							pZ = 13.4382;
							pA = 271.5528;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 2)//Motorradhändler
					{
	    				new rand2 = random(5);
						if(rand2 == 0)//Auswahl 1
						{
							pX = 1822.2765;
							pY = -1392.5507;
							pZ = 13.1479;
							pA = 217.6383;
						}
						else if(rand2 == 1)//Auswahl 2
						{
						    pX = 1824.5090;
							pY = -1392.4611;
							pZ = 13.1479;
							pA = 217.2933;
						}
						else if(rand2 == 2)//Auswahl 3
						{
							pX = 1828.9922;
							pY = -1392.4086;
							pZ = 13.1479;
							pA = 220.3602;
						}
						else if(rand2 == 3)//Auswahl 3
						{
							pX = 1832.3475;
							pY = -1392.2281;
							pZ = 13.1486;
							pA = 228.3739;
						}
						else if(rand2 == 4)//Auswahl 3
						{
							pX = 1834.9426;
							pY = -1392.0996;
							pZ = 13.1481;
							pA = 229.2071;
						}
					}
					else if(GetPVarInt(playerid,"Autohaus") == 3)//Autohaus - San Fiero
					{
					    new rand = random(4);
						if(rand == 0)
						{
						    pX = -1517.7908;
						    pY = 1145.6047;
						    pZ = 6.8796;
						    pA = 269.5889;
						}
						else if(rand == 1)
						{
						    pX = -1517.8282;
						    pY = 1138.3187;
						    pZ = 6.8927;
						    pA = 270.4280;
						}
						else if(rand == 2)
						{
						    pX = -1517.8218;
						    pY = 1131.0952;
						    pZ = 6.8926;
						    pA = 270.0160;
						}
						else if(rand == 3)
						{
						    pX = -1517.7950;
						    pY = 1123.8679;
						    pZ = 6.8928;
						    pA = 270.2569;
						}
					}
				    vehicleid = CreateVehicle(modelid,pX,pY,pZ,pA,1,1,-1);
    				format(FahrzeugInfo[vehicleid][fKennzeichen], 5, FirmenInfo[SpielerInfo[playerid][sFirma]][fSchild]);
					SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);

					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = modelid;
					FahrzeugInfo[vehicleid][fPosition][0] = pX; FahrzeugInfo[vehicleid][fPosition][1] = pY; FahrzeugInfo[vehicleid][fPosition][2] = pZ; FahrzeugInfo[vehicleid][fPosition][3] = pA; FahrzeugInfo[vehicleid][fColor][1] = 1;
				 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 1; FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = 20.0; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = SpielerInfo[playerid][sFirma]; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0;
					FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0; FahrzeugInfo[vehicleid][fPreis] = FahrzeugInfo[carid][fPreis];
					FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0;
					FahrzeugInfo[vehicleid][fTuning][2] = 0; FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0;
					FahrzeugInfo[vehicleid][fTuning][7] = 0; FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0;
					FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fkGeld] = 0; FahrzeugInfo[vehicleid][fkC4] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = true;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Firma`, `Kennzeichen`, `Preis`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', 'Firma', '%d')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], FahrzeugInfo[vehicleid][fColor][0], FahrzeugInfo[vehicleid][fColor][1],
					FahrzeugInfo[vehicleid][fFirma],FahrzeugInfo[vehicleid][fPreis]);
					mysql_tquery(sqlHandle, crstring, "onCompanyVehicleCreated", "i", vehicleid);

					format(string,sizeof(string),"Du hast für deine Firma ein {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} gekauft. Das Fahrzeug befindet sich am roten Marker.",FahrzeugName[modelid-400],FahrzeugInfo[carid][fPreis]);
					SendClientMessage(playerid,COLOR_INFO,string);
					SetPlayerCheckpoint(playerid,pX,pY,pZ,5.0);
					FirmenInfo[SpielerInfo[playerid][sFirma]][fKasse] -= FahrzeugInfo[carid][fPreis];
				    foreach(new i : Player)
					{
			            if(SpielerInfo[i][sFirma] == SpielerInfo[playerid][sFirma])
			            {
			                if(i != playerid)
			                {
				                format(frakmsg,sizeof(frakmsg),"%s %s hat für eure Firma einen %s gekauft.",FRangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[modelid-400]);
				                FirmChat(COLOR_WHITE,frakmsg,SpielerInfo[playerid][sFirma]);
							}
						}
				    }
				}
			}
		}
		case DIALOG_FAHRZEUG_VERKAUFEN:
		{
		    if(response==0){}//Zurück
		    else if(response==1)
		    {
				new query[264], string[128], veh = GetPlayerVehicleID(playerid);
				if(GetPVarInt(playerid,"FahrzeugVerkaufen") == 1)//Fraktionsfahrzeug
				{
				    if(FahrzeugInfo[veh][fFraktion] != SpielerInfo[playerid][sFraktion])return SendClientMessage(playerid,COLOR_SORRY,"Das Fahrezug gehört deiner Fraktion nicht.");
				    {
				        mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `vehicles` WHERE `ID`='%d'",FahrzeugInfo[veh][fDatabaseID]);
				        mysql_tquery(sqlHandle, query);

         				format(string,sizeof(string),"Du hast den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
                		SendClientMessage(playerid,COLOR_INFO,string);
				        DeleteVehicle(veh);
				        
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += FahrzeugInfo[veh][fPreis]/2;
					    foreach(new i : Player)
						{
				            if(SpielerInfo[i][sFraktion] == SpielerInfo[playerid][sFraktion])
				            {
				                if(i != playerid)
				                {
					                format(string,sizeof(string),"{FF0000}%s %s{00CDFF} hat den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",RangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
					                SendClientMessage(i,COLOR_INFO,string);
					            	return 1;
								}
							}
						}
					}
				}
				else if(GetPVarInt(playerid,"FahrzeugVerkaufen") == 2)//Privatfahrzeug
				{
					mysql_format(sqlHandle, query,sizeof(query), "DELETE FROM `vehicles` WHERE `ID`='%d'",FahrzeugInfo[veh][fDatabaseID]);
					mysql_tquery(sqlHandle, query);
					GivePlayerMoneyEx(playerid,FahrzeugInfo[veh][fPreis]/2);
					format(string,sizeof(string),"Du hast den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);
					DestroyVehicle(veh);
				}
				else if(GetPVarInt(playerid,"FahrzeugVerkaufen") == 3)//Gruppenfahrzeug
				{
				    if(FahrzeugInfo[veh][fGruppe] != SpielerInfo[playerid][sGruppe])return SendClientMessage(playerid,COLOR_SORRY,"Das Fahrezug gehört deiner Gruppe nicht.");
				    {
				        mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `vehicles` WHERE `ID`='%d'",FahrzeugInfo[veh][fDatabaseID]);
				        mysql_tquery(sqlHandle, query);

         				format(string,sizeof(string),"Du hast den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
                		SendClientMessage(playerid,COLOR_INFO,string);
				        DeleteVehicle(veh);

				        GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] += FahrzeugInfo[veh][fPreis]/2;
					    foreach(new i : Player)
						{
				            if(SpielerInfo[i][sGruppe] == SpielerInfo[playerid][sGruppe])
				            {
				                if(i != playerid)
				                {
					                format(string,sizeof(string),"{FF0000}%s %s{00CDFF} hat den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",GRangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
					                SendClientMessage(i,COLOR_INFO,string);
					            	return 1;
								}
							}
						}
					}
				}
				else if(GetPVarInt(playerid,"FahrzeugVerkaufen") == 4)//Firmenfahrzeug
				{
				    if(FahrzeugInfo[veh][fFirma] != SpielerInfo[playerid][sFirma])return SendClientMessage(playerid,COLOR_SORRY,"Das Fahrezug gehört deiner Firma nicht.");
				    {
				        mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `vehicles` WHERE `ID`='%d'",FahrzeugInfo[veh][fDatabaseID]);
				        mysql_tquery(sqlHandle, query);

         				format(string,sizeof(string),"Du hast den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
                		SendClientMessage(playerid,COLOR_INFO,string);
				        DeleteVehicle(veh);

				        FirmenInfo[SpielerInfo[playerid][sFirma]][fKasse] += FahrzeugInfo[veh][fPreis]/2;
					    foreach(new i : Player)
						{
				            if(SpielerInfo[i][sFirma] == SpielerInfo[playerid][sFirma])
				            {
				                if(i != playerid)
				                {
					                format(string,sizeof(string),"{FF0000}%s %s{00CDFF} hat den {FF0000}%s{00CDFF} für {FF0000}%d${00CDFF} verkauft.",FRangName(playerid),SpielerInfo[playerid][sName],FahrzeugName[FahrzeugInfo[veh][fModelID]-400],FahrzeugInfo[veh][fPreis]/2);
					                FirmChat(COLOR_WHITE,string,SpielerInfo[playerid][sFirma]);
					            	return 1;
								}
							}
						}
					}
				}
		    }
		}
		case DIALOG_BANKLOGIN:
		{
		    if(response==0){}//Zurück
		    else if(response==1)//Weiter
		    {
				if(strval(inputtext) == SpielerInfo[playerid][sBankPin])
				{
				    ShowPlayerDialog(playerid,DIALOG_BANKMENU,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Girokonto\nGeschäftskonto\nFraktionskonto\nGruppenkonto\nHandyguthaben aufladen","Weiter","Schließen");
				}
				else
				{
				    ShowPlayerDialog(playerid,DIALOG_BANKLOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe deinen PIN für dein Konto an um fortzufahren.","Weiter","Zurück");
				}
		    }
		}
		case DIALOG_BANKMENU:
		{
	 		if(response==0){}//Zurück
	        else if(response==1)//Weiter
	        {
	        	switch(listitem)
				{
					case 0://Girokonto
	    			{
	    			    SetPVarInt(playerid,"BankAuswahl",1);
						ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
	  				}
			    	case 1://Geschäftskonto
					{
    					if(SpielerInfo[playerid][sTankstelle] != 0 || SpielerInfo[playerid][sAmmunation] != 0 || SpielerInfo[playerid][sStore] != 0)
					    {
					        SetPVarInt(playerid,"BankAuswahl",2);
					        ShowPlayerDialog(playerid,DIALOG_BANK_BIZAUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Tankstelle\nAmmunation\n24/7","Weiter","Zurück");
						}
						else SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Geschäft.");
				    }
				    case 2://Fraktionskonto
				    {
				        if(SpielerInfo[playerid][sFraktion] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist in keiner Fraktion.");
				        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
				        SetPVarInt(playerid,"BankAuswahl",3);
				    }
				    case 3://Gruppenkonto
				    {
				        if(SpielerInfo[playerid][sGruppe] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du bist in keiner Gruppe.");
				        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
				        SetPVarInt(playerid,"BankAuswahl",4);
				    }
				    case 4://Handyguthaben aufladen
				    {
				        if(SpielerInfo[playerid][sHandy] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast kein Handy.");
				        ShowPlayerDialog(playerid,DIALOG_BANK_GUTHABEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Banksystem","Wie viel Handyguthaben möchtest du aufladen ?","Bestätigen","Zurück");
				    }
				}
	 		}
		}
		case DIALOG_BANK_BIZAUSWAHL:
		{
		    if(response==0){DeletePVar(playerid,"BankAuswahl"); ShowPlayerDialog(playerid,DIALOG_BANKMENU,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Girokonto\nGeschäftskonto\nFraktionskonto\nGruppenkonto\nHandyguthaben aufladen","Weiter","Schließen");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
					case 0://Tankstelle
					{
					    if(SpielerInfo[playerid][sTankstelle] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt keine Tankstelle.");
					    ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
					    SetPVarInt(playerid,"BankBiz",1);
					}
					case 1://Ammunation
					{
					    if(SpielerInfo[playerid][sAmmunation] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Ammunation.");
	    				ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
					    SetPVarInt(playerid,"BankBiz",2);
					}
					case 2://24/7
					{
					    if(SpielerInfo[playerid][sStore] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein 24/7.");
	    				ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
					    SetPVarInt(playerid,"BankBiz",3);
					}
				}
			}
		}
		case DIALOG_BANK_AUSWAHL:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_BANKMENU,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Girokonto\nGeschäftskonto\nFraktionskonto\nGruppenkonto\nGruppenkonto\nHandyguthaben aufladen","Weiter","Schließen");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
					case 0://Einzahlen
					{
					    if(GetPVarInt(playerid,"BankAuswahl") == 1)
					    {
					    	ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Einzahlen","{FFFFFF}Bitte gebe den Betrag ein den du auf dein Girokonto einzahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 2)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Einzahlen","{FFFFFF}Bitte gebe den Betrag ein den du auf dein Geschäftskonto einzahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 3)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Einzahlen","{FFFFFF}Bitte gebe den Betrag ein den du auf dein Fraktionskonto einzahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 4)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Einzahlen","{FFFFFF}Bitte gebe den Betrag ein den du auf dein Gruppenkonto einzahlen möchtest.","Weiter","Zurück");
						}
					}
					case 1://Auszahlen
					{
	    				if(GetPVarInt(playerid,"BankAuswahl") == 1)
					    {
					    	ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Auszahlen","{FFFFFF}Bitte gebe den Betrag ein den du von deinem Girokonto auszahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 2)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Auszahlen","{FFFFFF}Bitte gebe den Betrag ein den du von deinem Geschäftskonto auszahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 3)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Auszahlen","{FFFFFF}Bitte gebe den Betrag ein den du von deinem Fraktionskonto auszahlen möchtest.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 4)
						{
						    ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Auszahlen","{FFFFFF}Bitte gebe den Betrag ein den du von deinem Gruppenkonto auszahlen möchtest.","Weiter","Zurück");
						}
					}
					case 2://Kontoauszug
					{
					    ShowPlayerDialog(playerid,DIALOG_BANK_KONTOAUSZUG,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kontoauszug","{FFFFFF}Ein Kontoauszug der Zentral Bank kostet dich 15$ Druckkosten.\nMöchtest du einen Kontoauszug drucken?","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_BANK_GUTHABEN:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_BANKMENU,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Girokonto\nGeschäftskonto\nFraktionskonto\nGruppenkonto\nHandyguthaben aufladen","Weiter","Schließen");}//Zurück
			else if(response==1)//Weiter
			{
			    new str[128];
  				if(strval(inputtext) > 0 && strval(inputtext) < 5001 && IsNumeric(inputtext))
				{
				    if(SpielerInfo[playerid][sBankkonto] >= strval(inputtext))
				    {
				        SpielerInfo[playerid][sBankkonto] -= strval(inputtext);
				        SpielerInfo[playerid][sGuthaben] += strval(inputtext);
						format(str,sizeof(str),"Die Zahlung war erfolgreich. Neues Handyguthaben: {FF0000}%d$",SpielerInfo[playerid][sGuthaben]);
						SendClientMessage(playerid,COLOR_INFO,str);
				    }
				    else
				    {
				        ShowPlayerDialog(playerid,DIALOG_BANK_GUTHABEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Banksystem","Wie viel Handyguthaben möchtest du aufladen ?\n\n{FF0000}Du hast nicht so viel Geld auf der Bank.","Bestätigen","Zurück");
				    }
				}
				else
				{
				    ShowPlayerDialog(playerid,DIALOG_BANK_GUTHABEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Banksystem","Wie viel Handyguthaben möchtest du aufladen ?\n\n{FF0000}Ungültiger Betrag. (1-5000$)","Bestätigen","Zurück");
				}
			}
		}
		case DIALOG_BANK_EINZAHLEN:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) > 0 && strval(inputtext) < 1000000 && IsNumeric(inputtext))
				{
		            new Betrag = strval(inputtext);
				    if(GetPlayerMoneyEx(playerid) >= Betrag)
		            {
		                new string[164];
    					if(GetPVarInt(playerid,"BankAuswahl") == 1)
					    {
							SpielerInfo[playerid][sBankkonto] += Betrag;
							GivePlayerMoneyEx(playerid,-Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Bankkonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,SpielerInfo[playerid][sBankkonto]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 2)
						{
						    if(GetPVarInt(playerid,"BankBiz") == 1)//Tankstelle
						    {
						        new tsid = SpielerInfo[playerid][sTankstelle];
						        TankstellenInfo[tsid][tsKasse] += Betrag;
								GivePlayerMoneyEx(playerid,-Betrag);
								format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Geschäftskonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,TankstellenInfo[tsid][tsKasse]);
								ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
							}
			    			else if(GetPVarInt(playerid,"BankBiz") == 2)//Ammunation
						    {
						        new an = SpielerInfo[playerid][sAmmunation];
						        AmmunationInfo[an][amKasse] += Betrag;
								GivePlayerMoneyEx(playerid,-Betrag);
								format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Geschäftskonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,AmmunationInfo[an][amKasse]);
								ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
							}
   							else if(GetPVarInt(playerid,"BankBiz") == 3)//24/7
						    {
						        new an = SpielerInfo[playerid][sStore];
						        StoreInfo[an][siKasse] += Betrag;
								GivePlayerMoneyEx(playerid,-Betrag);
								format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Geschäftskonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,StoreInfo[an][siKasse]);
								ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
							}
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 3)
						{
							FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += Betrag;
							GivePlayerMoneyEx(playerid,-Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Fraktionskonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankAuswahl") == 4)
						{
							GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] += Betrag;
							GivePlayerMoneyEx(playerid,-Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} auf dein Gruppenkonto eingezahlt. Neuer Kontostand: {007DFF}%d$",Betrag,GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
					}
					else ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Du hast nicht soviel Geld bei dir.","Weiter","");
				}
				else
				{
				    ShowPlayerDialog(playerid,DIALOG_BANK_EINZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe den Betrag ein den du auf dein Konto einzahlen möchtest.","Weiter","Zurück");
				}
		    }
		}
		case DIALOG_BANK_AUSZAHLEN:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strlen(inputtext) > 0 && strlen(inputtext) < 1000000 && IsNumeric(inputtext))
				{
				    new string[164];
					if(GetPVarInt(playerid,"BankAuswahl") == 1)
	    			{
						new Betrag = strval(inputtext);
						if(Betrag > SpielerInfo[playerid][sBankkonto])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf deinem Bankkonto liegt nicht soviel Geld.","Weiter","");
						SpielerInfo[playerid][sBankkonto] -= Betrag;
						GivePlayerMoneyEx(playerid,Betrag);
						format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Bankkonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,SpielerInfo[playerid][sBankkonto]);
						ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 2)
					{
					    new Betrag = strval(inputtext);
					    if(GetPVarInt(playerid,"BankBiz") == 1)//Tankstelle
						{
						    new tsid = SpielerInfo[playerid][sTankstelle];
							if(Betrag > TankstellenInfo[tsid][tsKasse])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf dem Geschäftskonto liegt nicht soviel Geld.","Weiter","");
							TankstellenInfo[tsid][tsKasse] -= Betrag;
							GivePlayerMoneyEx(playerid,Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Geschäftskonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,TankstellenInfo[tsid][tsKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankBiz") == 2)//Ammunation
						{
						    new an = SpielerInfo[playerid][sAmmunation];
							if(Betrag > AmmunationInfo[an][amKasse])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf dem Geschäftskonto liegt nicht soviel Geld.","Weiter","");
							AmmunationInfo[an][amKasse] -= Betrag;
							GivePlayerMoneyEx(playerid,Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Geschäftskonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,AmmunationInfo[an][amKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankBiz") == 3)//24/7
						{
						    new an = SpielerInfo[playerid][sStore];
							if(Betrag > StoreInfo[an][siKasse])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf dem Geschäftskonto liegt nicht soviel Geld.","Weiter","");
							StoreInfo[an][siKasse] -= Betrag;
							GivePlayerMoneyEx(playerid,Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Geschäftskonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,StoreInfo[an][siKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 3)
					{
					    if(SpielerInfo[playerid][sRank] != 7)return NichtBerechtigt
						new Betrag = strval(inputtext);
						if(Betrag > FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf dem Fraktionskonto liegt nicht soviel Geld.","Weiter","");
						FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] -= Betrag;
						GivePlayerMoneyEx(playerid,Betrag);
						format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Fraktionskonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse]);
						ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 4)
					{
					    if(SpielerInfo[playerid][sGLeader] != 0 || SpielerInfo[playerid][sGRank] == 7)
					    {
							new Betrag = strval(inputtext);
							if(Betrag > GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse])return ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Auf dem Gruppenkonto liegt nicht soviel Geld.","Weiter","");
							GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse] -= Betrag;
							GivePlayerMoneyEx(playerid,Betrag);
							format(string,sizeof(string),"{FFFFFF}Du hast {007DFF}%d${FFFFFF} von deinem Gruppenkonto abgehoben. Neuer Kontostand: {007DFF}%d$",Betrag,GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse]);
							ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else NichtBerechtigt
					}
				}
				else
				{
				    ShowPlayerDialog(playerid,DIALOG_BANK_AUSZAHLEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe den Betrag ein den du von deinem Konto auszahlen möchtest.","Weiter","Zurück");
				}
		    }
		}
		case DIALOG_BANK_KONTOAUSZUG:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(GetPlayerMoneyEx(playerid) >= 15)
		        {
 					if(GetPVarInt(playerid,"BankAuswahl") == 1)
	    			{
				        new string[100];
				        GivePlayerMoneyEx(playerid,-15);
				        format(string,sizeof(string),"Dein aktueller Kontostand beträgt: %d$",SpielerInfo[playerid][sBankkonto]);
				        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 2)
					{
					    new string[100];
					    if(GetPVarInt(playerid,"BankBiz") == 1)//Tankstelle
					    {
					        GivePlayerMoneyEx(playerid,-15);
					        format(string,sizeof(string),"Der aktueller Geschäftskonto beträgt: %d$",TankstellenInfo[SpielerInfo[playerid][sTankstelle]][tsKasse]);
					        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankBiz") == 2)//Ammunation
					    {
					        GivePlayerMoneyEx(playerid,-15);
					        format(string,sizeof(string),"Der aktueller Geschäftskonto beträgt: %d$",AmmunationInfo[SpielerInfo[playerid][sAmmunation]][amKasse]);
					        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
						else if(GetPVarInt(playerid,"BankBiz") == 3)//24/7
					    {
					        GivePlayerMoneyEx(playerid,-15);
					        format(string,sizeof(string),"Der aktueller Geschäftskonto beträgt: %d$",StoreInfo[SpielerInfo[playerid][sStore]][siKasse]);
					        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
						}
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 3)
					{
     					new string[100];
				        GivePlayerMoneyEx(playerid,-15);
				        format(string,sizeof(string),"Der aktueller Fraktionskontostand beträgt: %d$",FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse]);
				        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
					}
					else if(GetPVarInt(playerid,"BankAuswahl") == 4)
					{
     					new string[100];
				        GivePlayerMoneyEx(playerid,-15);
				        format(string,sizeof(string),"Der aktueller Gruppenkontostand beträgt: %d$",GruppenInfo[SpielerInfo[playerid][sGruppe]][gKasse]);
				        ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem",string,"Weiter","");
					}
				}
				else ShowPlayerDialog(playerid,DIALOG_BANKM,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Du kannst dir den Kontoauszug nicht leisten.","Weiter","");
		    }
		}
		case DIALOG_BANKM:
		{
		    if(response==1)//Weiter
		    {
		        ShowPlayerDialog(playerid,DIALOG_BANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Banksystem","Einzahlen\nAuszahlen\nKontoauszug","Weiter","Zurück");
		    }
		}
		case DIALOG_BANKKONTO_ERSTELLEN:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    if(strlen(inputtext) > 0 && strlen(inputtext) < 5 && IsNumeric(inputtext))
			    {
			        if(SpielerInfo[playerid][sQuest] == 2)
			        {
        				new string[128];
  						PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
					    format(string,sizeof(string),"Hey ~b~%s",SpielerInfo[playerid][sName]);
					    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
					    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

					    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
					    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 4 ~g~erfolgreich ~w~absolviert.");
					    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

					    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
					    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Fahr nun zur ~b~Stadthalle~w~ (roter Marker) und");
					    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

					    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
					    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "besorge dir dort einen ~b~Nebenjob");
					    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

					    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
					    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 5: ~w~Besorge dir dein ersten Nebenjob");
					    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);
					    
		    			SetPlayerCheckpoint(playerid,1480.9746,-1771.4373,18.7958,2.5);
		    			
			            SpielerInfo[playerid][sQuest] = 3;
			        }
			        SpielerInfo[playerid][sBankPin] = strval(inputtext);
			        ShowPlayerDialog(playerid,DIALOG_BANKLOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Bitte gebe deinen PIN für dein Konto an um fortzufahren.","Weiter","Zurück");
			    }
			    else
			    {
			        ShowPlayerDialog(playerid,DIALOG_BANKKONTO_ERSTELLEN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" - Banksystem","{FFFFFF}Du besitzt derzeit noch kein Bankkonto. Damit du deine Finanzen in Zukunft lagern und auch besser\nverwalten kannst, musst du dir ein Konto anlegen. Gebe dazu einen 4-Stelligen gewünschten Zahlen-PIN ein.\n\n{FF0000}Der von dir gewählte PIN ist ungültig.","Weiter","Zurück");
			    }
			}
		}
		case DIALOG_FAHRZEUG:
		{
            if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new veh = GetPlayerVehicleID(playerid), string[264];
				switch(listitem)
				{
					case 0://Motor
					{
					    OnPlayerCommandText(playerid, "/motor");
	 				}
					case 1://Licht
					{
					    OnPlayerCommandText(playerid, "/licht");
	 				}
					case 2://Türen
					{
					    new carid = GetPlayerVehicleID(playerid);
    					if(strlen(FahrzeugInfo[carid][fBesitzer]) != 0)
						{
						    OnPlayerCommandText(playerid, "/carlock");
						}
						else if(FahrzeugInfo[carid][fFraktion] != 0)
						{
					    	OnPlayerCommandText(playerid, "/flock");
						}
						else if(FahrzeugInfo[carid][fGruppe] != 0)
						{
					    	OnPlayerCommandText(playerid, "/glock");
						}
						else if(FahrzeugInfo[carid][fFirma] != 0)
						{
					    	OnPlayerCommandText(playerid, "/firmlock");
						}
						else
						{
						    OnPlayerCommandText(playerid, "/lock");
						}
	 				}
					case 3://Motorhaube
					{
   						GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
   						if(Motorhaube[veh] == false)
   						{
   						    Motorhaube[veh] = true;
   						    SetVehicleParamsEx(veh, engine, lights, alarm, doors, true, boot, objective);
   						}
   						else
   						{
					    	Motorhaube[veh] = false;
   						    SetVehicleParamsEx(veh, engine, lights, alarm, doors, false, boot, objective);
						}
	 				}
					case 4://Koferraum
					{
					    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
					    if(GetPVarInt(playerid,"PizzaAusliefern") == 1 && PizzaAusgeliefert[playerid] != 5)
   						{
   						    new Float:x, Float:y, Float:z;
		    				GetXYInFrontOfVehicle(GetPVarInt(playerid,"PizzaAuto"),x,y,z,-2.02);
            				SetPlayerCheckpoint(playerid,x,y,z,1.5);
            				PizzaKofferraumPos[playerid][0] = x;
            				PizzaKofferraumPos[playerid][1] = y;
            				PizzaKofferraumPos[playerid][2] = z;
            				Kofferraum[veh] = true;
            				SendClientMessage(playerid,COLOR_SUPER,"Begebe dich nun zum Kofferraum um die Pizza für den Kunden rauszuholen.");
            				SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, true, objective);
						}
						else
						{
	   						if(Kofferraum[veh] == false)
	   						{
	   						    Kofferraum[veh] = true;
	   						    SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, true, objective);
	   						}
	   						else
	   						{
						    	Kofferraum[veh] = false;
	   						    SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, false, objective);
	   						}
						}
	 				}
					case 5://Radio
					{
						OnPlayerCommandText(playerid, "/carradio");
	 				}
				}
		        format(string,sizeof(string),"{FFFFFF}Motor:		[%s{FFFFFF}]\nLicht:		[%s{FFFFFF}]\nTüren:		[%s{FFFFFF}]\nMotorhaube:	[%s{FFFFFF}]\nKofferraum:	[%s{FFFFFF}]\nRadio:		[%s{FFFFFF}]",FahrzeugStatus(1,veh),FahrzeugStatus(2,veh),FahrzeugStatus(3,veh),FahrzeugStatus(4,veh),FahrzeugStatus(5,veh),FahrzeugStatus(6,veh));
				ShowPlayerDialog(playerid,DIALOG_FAHRZEUG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fahrzeugverwaltung",string,"Bestätigen","Abbrechen");
			}
		}
		case DIALOG_CARRADIO:
		{
		    if(response==0){}//Abbrchen
		    else if(response==1)
		    {
				switch(listitem)
				{
					case 0://BaseLovers.FM
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://baselovers.fm/deinebeatz.pls");
							GameTextForPlayer(i,"~g~BaseLovers.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 1;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
				    case 1://ILoveRadio
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://www.iloveradio.de//listen.m3u");
							GameTextForPlayer(i,"~r~ILoveRadio.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 2;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
					case 2://ILoveMashup
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://www.iloveradio.de/ilovemashup.m3u");
							GameTextForPlayer(i,"~r~ILoveMashup.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 3;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
					case 3://TechnoBase.FM
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://listen.technobase.fm/dsl.pls");
							GameTextForPlayer(i,"~r~TechnoBase.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 4;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
					case 4://HouseTime.FM
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://listen.housetime.fm/dsl.pls");
							GameTextForPlayer(i,"~r~HouseTime.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 5;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
					case 5://MyTrendBeatz.FM
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							PlayAudioStreamForPlayer(i,"http://mytrendbeatz.fm:1050/listen.pls");
							GameTextForPlayer(i,"~r~MyTrendBeatz.FM",3000,3);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 6;
						Radio[GetPlayerVehicleID(playerid)] = true;
					}
					case 6://Radio ausschalten
					{
					    foreach(new i : Player)
					    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
					    {
							StopAudioStreamForPlayer(i);
						}
						CarRadio[GetPlayerVehicleID(playerid)] = 0;
						Radio[GetPlayerVehicleID(playerid)] = false;
					}
				}
			}
		}
		case DIALOG_MP3:
		{
		    if(response==0){}//Abbrchen
		    else if(response==1)
		    {
				switch(listitem)
				{
					case 0://BaseLovers.FM
					{
						PlayAudioStreamForPlayer(playerid,"http://baselovers.fm/deinebeatz.pls");
					}
					case 1://ILoveRadio
					{
						PlayAudioStreamForPlayer(playerid,"http://www.iloveradio.de//listen.m3u");
					}
					case 2://ILoveMashup
					{
						PlayAudioStreamForPlayer(playerid,"http://www.iloveradio.de/ilovemashup.m3u");
					}
					case 3://TechnoBase.FM
					{
						PlayAudioStreamForPlayer(playerid,"http://listen.technobase.fm/dsl.pls");
					}
					case 4://HouseTime.FM
					{
						PlayAudioStreamForPlayer(playerid,"http://listen.housetime.fm/dsl.pls");
					}
					case 5://MyTrendBeatz.FM
					{
						PlayAudioStreamForPlayer(playerid,"http://mytrendbeatz.fm:1050/listen.pls");
					}
					case 6://Youtube Link
					{
					    ShowPlayerDialog(playerid,DIALOG_YOUTUBE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Youtube","{FFFFFF}Bitte gib unten den Youtube Link ein.","Abspielen","Zurück");
					}
					case 7://Radio ausschalten
					{
						if(GetPVarInt(playerid,"YoutubeStream") == 1)
						{
						    StopYoutubeVideoForPlayer(playerid);
						}
						else
						{
							StopAudioStreamForPlayer(playerid);
	  					}
					}
				}
			}
		}
		case DIALOG_YOUTUBE:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_MP3,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fahrzeugradio","{00CA00}ILoveRadio (Empfehlung)\n{FFFFFF}TechnoBase.FM\nHouseTime.FM\nMyTrendBeatz.FM\nYoutube Link einfügen\nRadio ausschalten","Abspielen","Abbrechen");}//Schliessen
		    else if(response==1)
		    {
			    new str[128];
			    SetPVarInt(playerid,"YoutubeStream",1);
				format(str,sizeof(str),"Folgender Youtube Link wird versucht abzuspielen: %s",inputtext);
				SendClientMessage(playerid,COLOR_SUPER,str);
				PlayYoutubeVideoForPlayer(playerid,inputtext);
		    }
		}
		case DIALOG_GEBIET:
		{
		    if(response==0){}//Schliessen
		    else if(response==1)
		    {
		        new Zone = GetPVarInt(playerid,"GBInfoZone");
		        switch(listitem)
		        {
		            case 0:
		            {
		                new string[230];
		                format(string,sizeof(string),"Dieses Gebiet hat die ID: %d - Bitte gebe Sie bei Gesprächen eines Admins immer mit an!",Zone);
		                SendClientMessage(playerid,COLOR_BLUE,string);
						if(GangZoneInfo[Zone][gzLastFight] > 0)
						{
							format(string,sizeof(string),"Besitzer: 	%s\nWert:		%d\nDieses Ganggebiet ist erst wieder in %d Minuten angreifbar!",FrakName(GangZoneInfo[Zone][gzOwner]),GangZoneInfo[Zone][gzValue],GangZoneInfo[Zone][gzLastFight]);
							ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Schliessen","");
						}
      					else if(GangZoneInfo[Zone][gzFightTime] < 1)
						{
						    format(string,sizeof(string),"Besitzer: 	%s\nWert:		%d\nDieses Ganggebiet kann mit '/gangfight' sofort angegriffen werden!",FrakName(GangZoneInfo[Zone][gzOwner]),GangZoneInfo[Zone][gzValue],GangZoneInfo[Zone][gzLastFight]);
                            ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Schliessen","");
						}
						else if(GangZoneInfo[Zone][gzFightTime] > 0)
						{
						    format(string,sizeof(string),"Besitzer: 	%s\nWert:		%d\nIn diesem Ganggebiet findent zurzeit ein Kampf statt.\n\nAngreifer: '%s' mit %d Punkten. Der Besitzer hat %d Punkte!"
							,FrakName(GangZoneInfo[Zone][gzOwner]),GangZoneInfo[Zone][gzValue],FrakName(GangZoneInfo[Zone][gzAttacker]),GangZoneInfo[Zone][gzAttackerPunkte],GangZoneInfo[Zone][gzOwnerPunkte]);
                            ShowPlayerDialog(playerid,9982,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",string,"Schliessen","");
						}
					}
					case 1:
					{
					    if(GangZoneInfo[Zone][gzValue] < 2000)return SendClientMessage(playerid,COLOR_SORRY,"Der Mindestwert für eine Transaktion beträgt 2000!");
					    if(GangZoneInfo[Zone][gzFightTime] > 0)return SendClientMessage(playerid,COLOR_SORRY,"Während eines Gangfights kannst du das Gebiet nicht entwerten. Kämpfe dafür!");
					    new string[128];
						if(GangZoneInfo[Zone][gzType] == 1)//Geld
						{
							FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] += GangZoneInfo[Zone][gzValue];
							format(string,sizeof(string),"Du hast %d$ vom Ganggebiet in die Fraktionskasse transferiert.",GangZoneInfo[Zone][gzValue]);
							SendClientMessage(playerid,COLOR_GANGFIGHT,string);
							GangZoneInfo[Zone][gzValue] = 0;
							format(string,sizeof(string),"Gangzone der %s [ID:%d]\nTyp: %s | Wert: %d",FrakName(GangZoneInfo[Zone][gzOwner]),Zone,GangZoneTyp(GangZoneInfo[Zone][gzType]),GangZoneInfo[Zone][gzValue]);
						    Update3DTextLabelText(GangZoneInfo[Zone][gzLabel], 0xFFC800FF, string);
						}
						else if(GangZoneInfo[Zone][gzType] == 2)//Materialien
						{
							FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] += GangZoneInfo[Zone][gzValue];
							format(string,sizeof(string),"Du hast %d Materialien vom Ganggebiet in die Fraktionsbox transferiert.",GangZoneInfo[Zone][gzValue]);
							SendClientMessage(playerid,COLOR_GANGFIGHT,string);
							GangZoneInfo[Zone][gzValue] = 0;
							format(string,sizeof(string),"Gangzone der %s [ID:%d]\nTyp: %s | Wert: %d",FrakName(GangZoneInfo[Zone][gzOwner]),Zone,GangZoneTyp(GangZoneInfo[Zone][gzType]),GangZoneInfo[Zone][gzValue]);
						    Update3DTextLabelText(GangZoneInfo[Zone][gzLabel], 0xFFC800FF, string);
						}
					}
		        }
		        DeletePVar(playerid,"GBInfoZone");
		    }
		}
		case DIALOG_HAUS_KAUFEN:
		{
		    new hs = GetNearHausID(playerid), string[264];
  			if(response==0){}//Schliessen
		    else if(response==1)
		    {
		        switch(listitem)
		        {
		            case 0://Privat
		            {
		                if(strlen(HausInfo[hs][hsBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst das Haus nicht kaufen.");
				        if(SpielerInfo[playerid][sHaus] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits ein Haus.");
		        		format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir das Haus (ID:{FF0000}%d{FFFFFF}) für {FF0000}%d${FFFFFF} kaufen möchtest ?",hs,HausInfo[hs][hsPreis]);
	    				ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    				SetPVarInt(playerid,"Kaufen",4);
		            }
		            case 1://Gruppe
		            {
                        if(strlen(HausInfo[hs][hsBesitzer]) > 2)return SendClientMessage(playerid,COLOR_GREY,"Du kannst das Haus nicht kaufen.");
                        if(SpielerInfo[playerid][sGHaus] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du besitzt bereits ein Haus.");
  		        		format(string,sizeof(string),"{FFFFFF}Bist du dir sicher, dass du dir das Haus (ID:{FF0000}%d{FFFFFF}) für deine Gruppe für {FF0000}%d${FFFFFF} kaufen möchtest ?",hs,HausInfo[hs][hsPreis]);
	    				ShowPlayerDialog(playerid,DIALOG_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string,"Ja","Nein");
	    				SetPVarInt(playerid,"Kaufen",5);
		            }
				}
			}
		}
		case DIALOG_KAUFEN:
		{
		    if(response==0){}//Nein
		    else if(response==1)//Ja
		    {
		        if(GetPVarInt(playerid,"Kaufen") == 1)//Tankstelle
		        {
	      			new Text[164], tsid = GetNearTankstellenHausID(playerid);
	            	if(strlen(TankstellenInfo[tsid][tsBesitzer]) < 2)
					{
			        	if(GetPlayerMoneyEx(playerid) < TankstellenInfo[tsid][tsPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-TankstellenInfo[tsid][tsPreis]);
						Delete3DTextLabel(TankstellenInfo[tsid][tsText][0]);
						TankstellenInfo[tsid][tsText][0] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(TankstellenInfo[tsid][tsPickup][0]);
	   					format(Text, sizeof(Text), "Tankstelle 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", tsid, SpielerInfo[playerid][sName]);
	    				TankstellenInfo[tsid][tsPickup][0] = CreatePickup(1272, 23, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], -1);
	        			TankstellenInfo[tsid][tsText][0] = Create3DTextLabel(Text, COLOR_WHITE, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], 10.0, 0);
						format(TankstellenInfo[tsid][tsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sTankstelle] = tsid;
						format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir die Tankstelle (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",tsid,TankstellenInfo[tsid][tsPreis]);
						SendClientMessage(playerid,COLOR_INFO,Text);
						TankstellenTafelUpdate(tsid);
						Streamer_Update(playerid);
						DeletePVar(playerid,"Kaufen");
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst diese Tankstelle nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 2)//Ammunation
				{
 					new Text[224], an = GetNearAmmunationID(playerid);
	            	if(strlen(AmmunationInfo[an][amBesitzer]) < 2)
					{
			        	if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amPreis]);
						Delete3DTextLabel(AmmunationInfo[an][amText]);
						AmmunationInfo[an][amText] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(AmmunationInfo[an][amPickup]);
	   					format(Text, sizeof(Text), "Ammunation 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, SpielerInfo[playerid][sName]);
	    				AmmunationInfo[an][amPickup] = CreatePickup(1272, 23, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], -1);
	        			AmmunationInfo[an][amText] = Create3DTextLabel(Text, COLOR_WHITE, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], 10.0, 0);
						format(AmmunationInfo[an][amBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sAmmunation] = an;
						format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir das Ammunation (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",an,AmmunationInfo[an][amPreis]);
						SendClientMessage(playerid,COLOR_INFO,Text);
						DeletePVar(playerid,"Kaufen");
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst das Ammunation nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 3)//24/7
				{
 					new Text[224], an = GetNearStoreID(playerid);
	            	if(strlen(StoreInfo[an][siBesitzer]) < 2)
					{
			        	if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siPreis]);
						Delete3DTextLabel(StoreInfo[an][siText]);
						StoreInfo[an][siText] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(StoreInfo[an][siPickup]);
	   					format(Text, sizeof(Text), "24/7 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", an, SpielerInfo[playerid][sName]);
	    				StoreInfo[an][siPickup] = CreatePickup(1272, 23, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], -1);
	        			StoreInfo[an][siText] = Create3DTextLabel(Text, COLOR_WHITE, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], 10.0, 0);
						format(StoreInfo[an][siBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sStore] = an;
						format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir den 24/7 (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",an,StoreInfo[an][siPreis]);
						SendClientMessage(playerid,COLOR_INFO,Text);
						DeletePVar(playerid,"Kaufen");
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst das 24/7 nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 4)//Haus
				{
 					new Text[224], str[224], hs = GetNearHausID(playerid);
	            	if(strlen(HausInfo[hs][hsBesitzer]) < 2)
					{
					    if(GetPlayerScore(playerid) < 3)return SendClientMessage(playerid,COLOR_GREY,"Du benötigst das dritte Level um dir ein Gruppenhaus kaufen zu können.");
			        	if(GetPlayerMoneyEx(playerid) < HausInfo[hs][hsPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-HausInfo[hs][hsPreis]);
						Delete3DTextLabel(HausInfo[hs][hsText]);
						HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(HausInfo[hs][hsPickup]);
						format(HausInfo[hs][hsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sHaus] = hs;
						HausInfo[hs][hsLocked] = 1;
						if(HausInfo[hs][hsTyp] == 1)//Appartment
						{
							format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir das Appartment (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
							format(str, sizeof(str), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						else if(HausInfo[hs][hsTyp] == 2)//PrivatHaus
						{
						    format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir das Haus (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
						    format(str, sizeof(str), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						else if(HausInfo[hs][hsTyp] == 3)//Villa
						{
						    format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir die Villa (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
						    format(str, sizeof(str), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						HausInfo[hs][hsText] = Create3DTextLabel(str, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
						HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
						SendClientMessage(playerid,COLOR_INFO,Text);
						DeletePVar(playerid,"Kaufen");
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst das Haus / die Villa / das Appartment nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 5)//GruppenHaus
				{
 					new Text[224], str[224], str2[364], hs = GetNearHausID(playerid);
	            	if(strlen(HausInfo[hs][hsBesitzer]) < 2)
					{
			        	if(GetPlayerMoneyEx(playerid) < HausInfo[hs][hsPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-HausInfo[hs][hsPreis]);
						Delete3DTextLabel(HausInfo[hs][hsText]);
						HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(HausInfo[hs][hsPickup]);
						format(HausInfo[hs][hsBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sGHaus] = hs;
						HausInfo[hs][hsLocked] = 1;
						if(HausInfo[hs][hsTyp] == 1)//Appartment
						{
							format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir das Appartment (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
							format(str, sizeof(str), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						else if(HausInfo[hs][hsTyp] == 2)//Haus
						{
						    format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir das Haus (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
						    format(str, sizeof(str), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						else if(HausInfo[hs][hsTyp] == 3)//Villa
						{
						    format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir die Villa (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,HausInfo[hs][hsPreis]);
						    format(str, sizeof(str), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						}
						HausInfo[hs][hsText] = Create3DTextLabel(str, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
						HausInfo[hs][hsPickup] = CreatePickup(1272, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
						SendClientMessage(playerid,COLOR_INFO,Text);
						DeletePVar(playerid,"Kaufen");

 						mysql_format(sqlHandle, str2, sizeof(str2),"SELECT `Name` FROM `accounts` WHERE `Gruppe` = '%d' AND `Online` = '0' AND `Gruppe` != '0'", SpielerInfo[playerid][sGruppe]);
    					mysql_tquery(sqlHandle, str2, "onPlayerBuyGroupHouse", "i", playerid);
					
						foreach(new i : Player)
						{
	     					if(i == playerid)continue;
	     					if(SpielerInfo[i][sGruppe] == 0)continue;
						    if(SpielerInfo[i][sGruppe] != SpielerInfo[playerid][sGruppe])continue;
							SpielerInfo[i][sGHaus] = SpielerInfo[playerid][sGHaus];
							format(Text,sizeof(Text),"%s %s hat ein (neues) Gruppenhaus gekauft. Ab sofort könnt ihr auch im Gruppenhaus spawnen.",GRangName(playerid),SpielerInfo[playerid][sName]);
							SendClientMessage(i,COLOR_INFO,Text);
						}
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst das Haus / die Villa / das Appartment nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 6)//Garage
				{
 					new Text[224], str[224], hs = GetNearGarageID(playerid);
	            	if(strlen(GaragenInfo[hs][giBesitzer]) < 2)
					{
			        	if(GetPlayerMoneyEx(playerid) < GaragenInfo[hs][giPreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-GaragenInfo[hs][giPreis]);
						Delete3DTextLabel(GaragenInfo[hs][giText]);
						GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
						DestroyPickup(GaragenInfo[hs][giPickup]);
						format(GaragenInfo[hs][giBesitzer], MAX_PLAYER_NAME, SpielerInfo[playerid][sName]);
						SpielerInfo[playerid][sGarage] = hs;
						GaragenInfo[hs][giLocked] = 1;
					    format(Text,sizeof(Text),"Herzlichen Glückwunsch! Du hast dir die Garage (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} gekauft.",hs,GaragenInfo[hs][giPreis]);
					    format(str, sizeof(str), "Garage 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, SpielerInfo[playerid][sName]);
						GaragenInfo[hs][giText] = Create3DTextLabel(str, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);
						GaragenInfo[hs][giPickup] = CreatePickup(1272, 23, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], -1);
						SendClientMessage(playerid,COLOR_INFO,Text);
						DeletePVar(playerid,"Kaufen");
					}
					else SendClientMessage(playerid,COLOR_GREY,"Du kannst die Garage nicht kaufen.");
				}
				else if(GetPVarInt(playerid,"Kaufen") == 7)//Grundstück
				{
				    new Text[224], str[224], hs = GetNearGrundstuckID(playerid), query[450];
                    if(GFirmaInfo[hs][igekauft] != 0) return SendClientMessage(playerid,COLOR_GREY,"Du kannst dieses Grundstück nicht kaufen.");
                    if(GetPlayerMoneyEx(playerid) < GFirmaInfo[hs][fgrpreis])return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                    Delete3DTextLabel(GFirmaInfo[hs][iLabel]);
	                format(Text, sizeof(Text),"Grundstück 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, FirmenInfo[SpielerInfo[playerid][sFirma]][fName]);
                    GFirmaInfo[hs][iLabel] = Create3DTextLabel(Text, COLOR_WHITE, GFirmaInfo[hs][iposx], GFirmaInfo[hs][iposy], GFirmaInfo[hs][iposz], 10.0, 0, false);
                    DestroyPickup(GFirmaInfo[hs][iPickup]);
                    GFirmaInfo[hs][iPickup] = CreatePickup(1272,1,GFirmaInfo[hs][iposx],GFirmaInfo[hs][iposy],GFirmaInfo[hs][iposz]);
                    format(str,sizeof(str),"{007DFF}Grundstück: {FFFFFF}%s hat soeben ein Grundstück für die Firma gekauft. Preis: %d$",SpielerInfo[playerid][sName],GFirmaInfo[hs][fgrpreis]);
					FirmChat(COLOR_WHITE,str,SpielerInfo[playerid][sFirma]);
					GFirmaInfo[hs][igekauft] = 1;
					strmid(GFirmaInfo[hs][firmenname],FirmenInfo[SpielerInfo[playerid][sFirma]][fName],0,strlen(FirmenInfo[SpielerInfo[playerid][sFirma]][fName]),64);
					DeletePVar(playerid,"Kaufen");
					if(GFirmaInfo[hs][firmengrcreate] != 0)
					{
						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `firmagrundstucke` SET `firmenid`='%d', igekauft='%d', firmenname='%s' WHERE firmengrid='%d'",
						SpielerInfo[playerid][sFirma],GFirmaInfo[hs][igekauft],FirmenInfo[SpielerInfo[playerid][sFirma]][fName],hs);
						mysql_tquery(sqlHandle, query);
					}
				}
		    }
		}
		case DIALOG_TANK_AUSWAHL:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
    			new tsid = GetNearTankstelleID(playerid);
 	    		new tsid2 = SpielerInfo[playerid][sTankstelle];
 	    		new veh = GetPlayerVehicleID(playerid);
  				switch(listitem)
		        {
		            case 0://Benzin
		            {
		                if(GetPVarInt(playerid,"Tanken") == 1)
		                {
                  			DeletePVar(playerid,"Tanken");
			                if(strlen(TankstellenInfo[tsid][tsBesitzer]) > 2)
			                {
			                	if(TankstellenInfo[tsid][tsBenzin] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle verkauft leider keinen Benzin.");

             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = TankstellenInfo[tsid][tsBenzinPreis]*Liter;

                                FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								TankstellenInfo[tsid][tsKasse] += Kosten;
								format(str,sizeof(str),"Du hast für %d Liter Benzin, %d$ bezahlt. Preis pro Liter: %d$.",Liter,Kosten,TankstellenInfo[tsid][tsBenzinPreis]);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
							}
							else
	  						{
             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = 5*Liter;

								FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								format(str,sizeof(str),"Du hast für %d Liter Benzin, %d$ bezahlt. Preis pro Liter: 5$.",Liter,Kosten);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
	  						}
	  						foreach(new i : Player)
							{
							    if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))continue;
    							new PLAYER_STATE:State = GetPlayerState(i);
 								if(State == PLAYER_STATE_DRIVER || State == PLAYER_STATE_PASSENGER)
 								{
									KillTimer(TachoTimer[i]);
								    PlayerTextDrawHide(i, Tacho[i][0]);
									PlayerTextDrawHide(i, Tacho[i][1]);
									PlayerTextDrawHide(i, Tacho[i][2]);
									PlayerTextDrawHide(i, Tacho[i][3]);
									PlayerTextDrawHide(i, Tacho[i][4]);
									PlayerTextDrawHide(i, Tacho[i][5]);
									PlayerTextDrawHide(i, Tacho[i][6]);
									PlayerTextDrawHide(i, Tacho[i][7]);
									PlayerTextDrawHide(i, Tacho[i][8]);
									PlayerTextDrawHide(i, Tacho[i][9]);
									PlayerTextDrawHide(i, Tacho[i][10]);
									PlayerTextDrawHide(i, Tacho[i][11]);
									
									new carname[46];
									PlayerTextDrawSetPreviewModel(i, Tacho[i][1], GetVehicleModel(veh));
									PlayerTextDrawSetPreviewVehicleColours(i, Tacho[i][1], FahrzeugInfo[veh][fColor][0], FahrzeugInfo[veh][fColor][1]);
									format(carname,sizeof(carname),"%i Kilometer",FahrzeugInfo[veh][fKilometer]);
									PlayerTextDrawSetString(i, Tacho[i][9], carname);
									format(carname,sizeof(carname),"%s %.2f/%dL",TankArtName(veh),FahrzeugInfo[veh][fTank],VehicleData[GetVehicleModel(veh)-400][vehLiter]);
									PlayerTextDrawSetString(i, Tacho[i][3], carname);
									PlayerTextDrawShow(i, Tacho[i][0]);
									PlayerTextDrawShow(i, Tacho[i][1]);
									PlayerTextDrawShow(i, Tacho[i][2]);
									PlayerTextDrawShow(i, Tacho[i][3]);
									PlayerTextDrawShow(i, Tacho[i][4]);
									PlayerTextDrawShow(i, Tacho[i][5]);
									PlayerTextDrawShow(i, Tacho[i][6]);
									PlayerTextDrawShow(i, Tacho[i][7]);
									PlayerTextDrawShow(i, Tacho[i][8]);
									PlayerTextDrawShow(i, Tacho[i][9]);
									TachoTimer[i] = SetTimerEx("SpeedoMeter",MAX_TACHOTIME, true,"i",i);
								}
							}
						}
						else
						{
						    if(TankstellenInfo[tsid2][tsBenzin] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt kein Benzin. Kaufe erst das Upgrade für Benzin.");
							SetPVarInt(playerid,"TPreisAuswahl",1);
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Benzin an.","Weiter","Zurück");
						}
		            }
		            case 1://Diesel
		            {
              			if(GetPVarInt(playerid,"Tanken") == 1)
		                {
		                    DeletePVar(playerid,"Tanken");
			                if(strlen(TankstellenInfo[tsid][tsBesitzer]) > 2)
			                {
			                	if(TankstellenInfo[tsid][tsDiesel] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle verkauft leider keinen Diesel.");

             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = TankstellenInfo[tsid][tsDieselPreis]*Liter;

								FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								TankstellenInfo[tsid][tsKasse] += Kosten;
								format(str,sizeof(str),"Du hast für %d Liter Diesel, %d$ bezahlt. Preis pro Liter: %d$.",Liter,Kosten,TankstellenInfo[tsid][tsDieselPreis]);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
							}
							else
	  						{
             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = 3*Liter;

								FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								format(str,sizeof(str),"Du hast für %d Liter Diesel, %d$ bezahlt. Preis pro Liter: 3$.",Liter,Kosten);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
							}
 							foreach(new i : Player)
							{
							    if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))continue;
    							new PLAYER_STATE:State = GetPlayerState(i);
 								if(State == PLAYER_STATE_DRIVER || State == PLAYER_STATE_PASSENGER)
 								{
									KillTimer(FahrenTimer[playerid]);
									KillTimer(TachoTimer[playerid]);
								    PlayerTextDrawHide(playerid, Tacho[playerid][0]);
									PlayerTextDrawHide(playerid, Tacho[playerid][1]);
									PlayerTextDrawHide(playerid, Tacho[playerid][2]);
									PlayerTextDrawHide(playerid, Tacho[playerid][3]);
									PlayerTextDrawHide(playerid, Tacho[playerid][4]);
									PlayerTextDrawHide(playerid, Tacho[playerid][5]);
									PlayerTextDrawHide(playerid, Tacho[playerid][6]);
									PlayerTextDrawHide(playerid, Tacho[playerid][7]);
									PlayerTextDrawHide(playerid, Tacho[playerid][8]);
									PlayerTextDrawHide(playerid, Tacho[playerid][9]);
									PlayerTextDrawHide(playerid, Tacho[playerid][10]);
									PlayerTextDrawHide(playerid, Tacho[playerid][11]);

									new carname[46], Float:vHealth;
									GetVehicleHealth(veh, vHealth);
									PlayerTextDrawSetPreviewModel(playerid, Tacho[playerid][1], GetVehicleModel(veh));
									PlayerTextDrawSetPreviewVehicleColours(playerid, Tacho[playerid][1], FahrzeugInfo[veh][fColor][0], FahrzeugInfo[veh][fColor][1]);
									format(carname,sizeof(carname),"%i Kilometer",FahrzeugInfo[veh][fKilometer]);
									PlayerTextDrawSetString(playerid, Tacho[playerid][9], carname);
									format(carname,sizeof(carname),"%s %.2f/%dL",TankArtName(veh),FahrzeugInfo[veh][fTank],VehicleData[GetVehicleModel(veh)-400][vehLiter]);
									PlayerTextDrawSetString(playerid, Tacho[playerid][3], carname);
									PlayerTextDrawShow(playerid, Tacho[playerid][0]);
									PlayerTextDrawShow(playerid, Tacho[playerid][1]);
									PlayerTextDrawShow(playerid, Tacho[playerid][2]);
									PlayerTextDrawShow(playerid, Tacho[playerid][3]);
									PlayerTextDrawShow(playerid, Tacho[playerid][4]);
									format(carname,sizeof(carname),"Schaden %.0f%",((1000 - vHealth) / 10));
									PlayerTextDrawSetString(playerid, Tacho[playerid][5], carname);
									PlayerTextDrawShow(playerid, Tacho[playerid][6]);
									PlayerTextDrawShow(playerid, Tacho[playerid][7]);
									PlayerTextDrawShow(playerid, Tacho[playerid][8]);
									PlayerTextDrawShow(playerid, Tacho[playerid][9]);
									TachoTimer[playerid] = SetTimerEx("SpeedoMeter",MAX_TACHOTIME,true,"i",playerid);
								}
							}
						}
						else
						{
						    if(TankstellenInfo[tsid2][tsDiesel] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt kein Benzin. Kaufe erst das Upgrade für Benzin.");
							SetPVarInt(playerid,"TPreisAuswahl",2);
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Benzin an.","Weiter","Zurück");
						}
		            }
		            case 2://Kerosin
		            {
              			if(GetPVarInt(playerid,"Tanken") == 1)
		                {
		                    DeletePVar(playerid,"Tanken");
              				if(strlen(TankstellenInfo[tsid][tsBesitzer]) > 2)
			                {
			                	if(TankstellenInfo[tsid][tsKerosin] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Diese Tankstelle verkauft leider keinen Kerosin.");

             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = TankstellenInfo[tsid][tsKerosinPreis]*Liter;
								FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								TankstellenInfo[tsid][tsKasse] += Kosten;
								format(str,sizeof(str),"Du hast für %d Liter Kerosin, %d$ bezahlt. Preis pro Liter: %d$.",Liter,Kosten,TankstellenInfo[tsid][tsKerosinPreis]);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
							}
							else
	  						{
             					new Float:Tank = FahrzeugInfo[veh][fTank];
								new string[20], str[144];
								format(string,sizeof(string),"%f",Tank);
								new TankInt = strval(string);
								new Liter = VehicleData[GetVehicleModel(veh)-400][vehLiter] -= TankInt;
								new Kosten = 10*Liter;
								
								FahrzeugInfo[veh][fTank] = VehicleData[GetVehicleModel(veh)-400][vehLiter];

								GivePlayerMoneyEx(playerid,-Kosten);
								format(str,sizeof(str),"Du hast für %d Liter Kerosin, %d$ bezahlt. Preis pro Liter: 10$.",Liter,Kosten);
	  							SendClientMessage(playerid,COLOR_SUPER,str);
							}
 							foreach(new i : Player)
							{
							    if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))continue;
    							new PLAYER_STATE:State = GetPlayerState(i);
 								if(State == PLAYER_STATE_DRIVER || State == PLAYER_STATE_PASSENGER)
 								{
									KillTimer(FahrenTimer[playerid]);
									KillTimer(TachoTimer[playerid]);
								    PlayerTextDrawHide(playerid, Tacho[playerid][0]);
									PlayerTextDrawHide(playerid, Tacho[playerid][1]);
									PlayerTextDrawHide(playerid, Tacho[playerid][2]);
									PlayerTextDrawHide(playerid, Tacho[playerid][3]);
									PlayerTextDrawHide(playerid, Tacho[playerid][4]);
									PlayerTextDrawHide(playerid, Tacho[playerid][5]);
									PlayerTextDrawHide(playerid, Tacho[playerid][6]);
									PlayerTextDrawHide(playerid, Tacho[playerid][7]);
									PlayerTextDrawHide(playerid, Tacho[playerid][8]);
									PlayerTextDrawHide(playerid, Tacho[playerid][9]);
									PlayerTextDrawHide(playerid, Tacho[playerid][10]);
									PlayerTextDrawHide(playerid, Tacho[playerid][11]);

									new carname[46],Float:vHealth;
									GetVehicleHealth(veh, vHealth);
									PlayerTextDrawSetPreviewModel(playerid, Tacho[playerid][1], GetVehicleModel(veh));
									PlayerTextDrawSetPreviewVehicleColours(playerid, Tacho[playerid][1], FahrzeugInfo[veh][fColor][0], FahrzeugInfo[veh][fColor][1]);
									format(carname,sizeof(carname),"%i Kilometer",FahrzeugInfo[veh][fKilometer]);
									PlayerTextDrawSetString(playerid, Tacho[playerid][9], carname);
									format(carname,sizeof(carname),"%s %.2f/%dL",TankArtName(veh),FahrzeugInfo[veh][fTank],VehicleData[GetVehicleModel(veh)-400][vehLiter]);
									PlayerTextDrawSetString(playerid, Tacho[playerid][3], carname);
									PlayerTextDrawShow(playerid, Tacho[playerid][0]);
									PlayerTextDrawShow(playerid, Tacho[playerid][1]);
									PlayerTextDrawShow(playerid, Tacho[playerid][2]);
									PlayerTextDrawShow(playerid, Tacho[playerid][3]);
									PlayerTextDrawShow(playerid, Tacho[playerid][4]);
									format(carname,sizeof(carname),"Schaden %.0f%",((1000 - vHealth) / 10));
									PlayerTextDrawSetString(playerid, Tacho[playerid][5], carname);
									PlayerTextDrawShow(playerid, Tacho[playerid][6]);
									PlayerTextDrawShow(playerid, Tacho[playerid][7]);
									PlayerTextDrawShow(playerid, Tacho[playerid][8]);
									PlayerTextDrawShow(playerid, Tacho[playerid][9]);
									TachoTimer[playerid] = SetTimerEx("SpeedoMeter",MAX_TACHOTIME,true,"i",playerid);
								}
							}
						}
						else
						{
						    if(TankstellenInfo[tsid2][tsKerosin] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt kein Benzin. Kaufe erst das Upgrade für Benzin.");
							SetPVarInt(playerid,"TPreisAuswahl",3);
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Benzin an.","Weiter","Zurück");
						}
		            }
				}
			}
		}
		case DIALOG_VERWALTUNG:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
 	    		new string[164];
  				switch(listitem)
		        {
		            case 0://Upgrades
		            {
	            		if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
	            		{
	            		    new ts = SpielerInfo[playerid][sTankstelle];
							format(string,sizeof(string),"{FFFFFF}Benzin:		[%s{FFFFFF}]\nDiesel:		[%s{FFFFFF}]\nKerosin:	[%s{FFFFFF}]",TStelleUpgrades(TankstellenInfo[ts][tsBenzin]),TStelleUpgrades(TankstellenInfo[ts][tsDiesel]),TStelleUpgrades(TankstellenInfo[ts][tsKerosin]));
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung",string,"Weiter","Zurück");
						}
				 	 	else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
	            		{
          					DeletePVar(playerid,"WaffenPreise");
					    	DeletePVar(playerid,"AmmuUpgrade");
	            		    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
	            		}
		 	 			else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
	            		{
	            		    DeletePVar(playerid,"StorePreise");
	            		    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Kaufen","Verlassen");
	            		}
					}
     				case 1://Preise
		            {
	            		if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
	            		{
							ShowPlayerDialog(playerid,DIALOG_TANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Benzin\nDiesel\nKerosin","Weiter","Abbrechen");
						}
				 	 	else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
	            		{
	            		    SetPVarInt(playerid,"WaffenPreise",1);
	            		    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
	            		}
		 	 			else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
	            		{
	            		    SetPVarInt(playerid,"StorePreise",1);
	            		    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Kaufen","Verlassen");
	            		}
					}
					case 2://Verkaufen
		            {
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_VERKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Staat\nSpieler","Weiter","Zurück");
					}
					case 3://Beschreibung ändern
		            {
		                ShowPlayerDialog(playerid,DIALOG_TANK_BESCHREIBUNG,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gib unten eine Beschreibung für deine Tankstelle an.","Zurück","Bestätigen");
					}
				}
			}
		}
		case DIALOG_TANKSTELLE_UPGRADES:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nBeschreibung ändern\nVerkaufen","Weiter","Abbrechen");}//Zurück
		    else if(response==1)//Weiter
		    {
		        new string[164], tsid = SpielerInfo[playerid][sTankstelle];
  				switch(listitem)
		        {
          			case 0://Benzin
		            {
		                if(TankstellenInfo[tsid][tsBenzin] == 0)
		                {
		                    SetPVarInt(playerid,"Upgrade",1);
		                	ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","Bist du dir sicher, dass du das Upgrade\nBenzin für 2500$ kaufen möchtest ?","Ja","Nein");
						}
						else
						{
						    SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt bereits das Benzin Upgrade.");
							format(string,sizeof(string),"{FFFFFF}Benzin:		[%s{FFFFFF}]\nDiesel:		[%s{FFFFFF}]\nKerosin:	[%s{FFFFFF}]",TStelleUpgrades(TankstellenInfo[tsid][tsBenzin]),TStelleUpgrades(TankstellenInfo[tsid][tsDiesel]),TStelleUpgrades(TankstellenInfo[tsid][tsKerosin]));
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung",string,"Weiter","Zurück");
						}
		            }
           			case 1://Diesel
		            {
              			if(TankstellenInfo[tsid][tsDiesel] == 0)
		                {
 							SetPVarInt(playerid,"Upgrade",2);
    						ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","Bist du dir sicher, dass du das Upgrade\nDiesel für 3000$ kaufen möchtest ?","Ja","Nein");
						}
						else
						{
		    				SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt bereits das Diesel Upgrade.");
							format(string,sizeof(string),"{FFFFFF}Benzin:		[%s{FFFFFF}]\nDiesel:		[%s{FFFFFF}]\nKerosin:	[%s{FFFFFF}]",TStelleUpgrades(TankstellenInfo[tsid][tsBenzin]),TStelleUpgrades(TankstellenInfo[tsid][tsDiesel]),TStelleUpgrades(TankstellenInfo[tsid][tsKerosin]));
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung",string,"Weiter","Zurück");
						}
					}
           			case 2://Kerosin
		            {
              			if(TankstellenInfo[tsid][tsKerosin] == 0)
		                {
              				SetPVarInt(playerid,"Upgrade",3);
		                	ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","Bist du dir sicher, dass du das Upgrade\nKerosin für 3500$ kaufen möchtest ?","Ja","Nein");
						}
						else
						{
  							SendClientMessage(playerid,COLOR_SORRY,"Deine Tankstelle besitzt bereits das Kerosin Upgrade.");
							format(string,sizeof(string),"{FFFFFF}Benzin:		[%s{FFFFFF}]\nDiesel:		[%s{FFFFFF}]\nKerosin:	[%s{FFFFFF}]",TStelleUpgrades(TankstellenInfo[tsid][tsBenzin]),TStelleUpgrades(TankstellenInfo[tsid][tsDiesel]),TStelleUpgrades(TankstellenInfo[tsid][tsKerosin]));
							ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung",string,"Weiter","Zurück");
						}
					}
				}
			}
		}
		case DIALOG_TANKSTELLE_UPGRADESK:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nBeschreibung ändern\nVerkaufen","Weiter","Abbrechen");}//Nein
		    else if(response==1)//Ja
		    {
		        new string[164], tsid = SpielerInfo[playerid][sTankstelle];
				if(GetPVarInt(playerid,"Upgrade") == 1)
				{
			        if(TankstellenInfo[tsid][tsKasse] < 2500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf deinem Geschäftskonto.");
                    TankstellenInfo[tsid][tsBenzin] = 1;
                    TankstellenInfo[tsid][tsKasse] -= 2500;
                    TankstellenTafelUpdate(tsid);
                    Streamer_Update(playerid);
				}
				else if(GetPVarInt(playerid,"Upgrade") == 2)
				{
    				if(TankstellenInfo[tsid][tsKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf deinem Geschäftskonto.");
    				TankstellenInfo[tsid][tsDiesel] = 1;
                    TankstellenInfo[tsid][tsKasse] -= 3000;
                    TankstellenTafelUpdate(tsid);
                    Streamer_Update(playerid);
				}
				else if(GetPVarInt(playerid,"Upgrade") == 3)
				{
    				if(TankstellenInfo[tsid][tsKasse] < 3500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf deinem Geschäftskonto.");
                    TankstellenInfo[tsid][tsKerosin] = 1;
                    TankstellenInfo[tsid][tsKasse] -= 3500;
                    TankstellenTafelUpdate(tsid);
                    Streamer_Update(playerid);
				}
				format(string,sizeof(string),"{FFFFFF}Benzin:		[%s{FFFFFF}]\nDiesel:		[%s{FFFFFF}]\nKerosin:	[%s{FFFFFF}]",TStelleUpgrades(TankstellenInfo[tsid][tsBenzin]),TStelleUpgrades(TankstellenInfo[tsid][tsDiesel]),TStelleUpgrades(TankstellenInfo[tsid][tsKerosin]));
				ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung",string,"Weiter","Zurück");
			}
		}
		case DIALOG_TANKSTELLE_PREISE:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nBeschreibung ändern\nVerkaufen","Weiter","Abbrechen");}//Zurück
		    else if(response==1)//Weiter
		    {
		        new string[128], tsid = SpielerInfo[playerid][sTankstelle];
		        if(GetPVarInt(playerid,"TPreisAuswahl") == 1)
		        {
		        	if(strval(inputtext) > 0 && strval(inputtext) < 501 && IsNumeric(inputtext))
					{
					    TankstellenInfo[tsid][tsBenzinPreis] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Benzin Preis pro Liter: {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_TANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Tanksystem","Benzin\nDiesel\nKerosin","Weiter","Abbrechen");
						TankstellenTafelUpdate(tsid);
						Streamer_Update(playerid);
					}
					else ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Benzin an.\n\n{FF0000}Der Preis (pro Liter) darf nicht kleiner als 1$ und höher als 500$ sein.","Weiter","Zurück");
		        }
		        else if(GetPVarInt(playerid,"TPreisAuswahl") == 2)
		        {
		        	if(strval(inputtext) > 0 && strval(inputtext) < 501 && IsNumeric(inputtext))
					{
					    TankstellenInfo[tsid][tsDieselPreis] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Diesel Preis pro Liter: {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_TANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Tanksystem","Benzin\nDiesel\nKerosin","Weiter","Abbrechen");
						TankstellenTafelUpdate(tsid);
						Streamer_Update(playerid);
					}
					else ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Diesel an.\n\n{FF0000}Der Preis (pro Liter) darf nicht kleiner als 1$ und höher als 500$ sein.","Weiter","Zurück");
		        }
		        else if(GetPVarInt(playerid,"TPreisAuswahl") == 3)
		        {
		        	if(strval(inputtext) > 0 && strval(inputtext) < 501 && IsNumeric(inputtext))
					{
					    TankstellenInfo[tsid][tsKerosinPreis] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Kerosin Preis pro Liter: {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_TANK_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Tanksystem","Benzin\nDiesel\nKerosin","Weiter","Abbrechen");
						TankstellenTafelUpdate(tsid);
						Streamer_Update(playerid);
					}
					else ShowPlayerDialog(playerid,DIALOG_TANKSTELLE_PREISE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Preis (pro Liter) für Kerosin an.\n\n{FF0000}Der Preis (pro Liter) darf nicht kleiner als 1$ und höher als 500$ sein.","Weiter","Zurück");
		        }
			}
		}
		case DIALOG_TANK_BESCHREIBUNG:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nBeschreibung ändern\nVerkaufen","Weiter","Abbrechen");}//Zurück
		    else if(response==1)//Weiter
		    {
		        new tsid = SpielerInfo[playerid][sTankstelle];
		        if(strlen(inputtext) < 1 || strlen(inputtext) > 16)
		        {
		            ShowPlayerDialog(playerid,DIALOG_TANK_BESCHREIBUNG,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gib unten eine Beschreibung für deine Tankstelle an.\n\n{FF0000}Maximal 1-15 Zeichen.","Zurück","Bestätigen");
		        }
				else
				{
				    new str[144];
				    format(str,sizeof(str),"Du hast die Beschreibung deiner Tankstelle geändert. Beschreibung: %s",inputtext);
				    format(TankstellenInfo[tsid][tsBeschreibung], 15, "%s",inputtext);
				    TankstellenTafelUpdate(tsid);
				    Streamer_Update(playerid);
				    SendClientMessage(playerid,COLOR_SUPER,str);
 					ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nBeschreibung ändern\nVerkaufen","Weiter","Abbrechen");
    				SetPVarInt(playerid,"Verwaltung",1);
				}
			}
		}
		case DIALOG_AMMU_UPGRADES:
		if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen","Weiter","Abbrechen");}//Zurück
	    else if(response==1)//Weiter
	    {
			new an = SpielerInfo[playerid][sAmmunation];
			switch(listitem)
	        {
      			case 0://Rüstung
             	{
             	    if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amArmour] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",1);
						    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Rüstung Upgrade für 1000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
						if(AmmunationInfo[an][amArmour] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",1);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Rüstung kosten soll.","Bestätigen","");
					}
	            }
	            case 1:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amSchlagring] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",2);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Schlagring Upgrade für 1500$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amSchlagring] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",2);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Schlagring kosten soll.","Bestätigen","");
	 				}
	            }
	            case 2:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amMesser] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",3);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Messer Upgrade für 1500$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amMesser] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",3);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Messer kosten soll.","Bestätigen","");
	 				}
	            }
	            case 3:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amBaseball] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",4);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Baseball Upgrade für 1500$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amBaseball] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",4);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Baseballschläger kosten soll.","Bestätigen","");
	 				}
	            }
	            case 4:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
	             		if(AmmunationInfo[an][amDeagle] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",5);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Deagle Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
 					}
					else
					{
					    if(AmmunationInfo[an][amDeagle] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",5);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Desert Eagle kosten soll.","Bestätigen","");
	 				}
	            }
	            case 5:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
	             		if(AmmunationInfo[an][amMP5] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",6);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas MP5 Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amMP5] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",6);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine MP5 kosten soll.","Bestätigen","");
	 				}
	            }
	            case 6:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
	          			if(AmmunationInfo[an][amAK] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
	     				else
	     				{
	     				    SetPVarInt(playerid,"AmmuUpgrade",7);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas AK-47 Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
	 				}
					else
					{
					    if(AmmunationInfo[an][amAK] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",7);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine AK-47 kosten soll.","Bestätigen","");
					}
	            }
	            case 7:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
	             		if(AmmunationInfo[an][amM4] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
	                        SetPVarInt(playerid,"AmmuUpgrade",8);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas M4 Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amM4] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",8);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein M4 kosten soll.","Bestätigen","");
					}
	            }
	            case 8:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amSniper] != 0)
	     				{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",9);
	                        ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Sniper Upgrade für 5000$ kaufen möchtest?","Kaufen","Zurück");
						}
	 				}
					else
					{
					    if(AmmunationInfo[an][amSniper] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",9);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Sniper kosten soll.","Bestätigen","");
					}
	            }
	            case 9:
	            {
        	    	if(GetPVarInt(playerid,"WaffenPreise") == 0)
             	    {
						if(AmmunationInfo[an][amFallschirm] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
						}
						else
						{
						    SetPVarInt(playerid,"AmmuUpgrade",10);
							ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Fallschirm für 1000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
					    if(AmmunationInfo[an][amFallschirm] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"AmmuUpgrade",10);
					    ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Fallschirm kosten soll.","Bestätigen","");
					}
	            }
			}
		}
		case DIALOG_AMMU_UPGRADESK:
		{
		    if(response==0){DeletePVar(playerid,"AmmuUpgrade"); DeletePVar(playerid,"WaffenPreise"); ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");}//Zurück
		    else if(response==1)//Weiter
		    {
		        new an = SpielerInfo[playerid][sAmmunation];
		        if(GetPVarInt(playerid,"AmmuUpgrade") == 1)
		        {
		        
					if(AmmunationInfo[an][amKasse] < 1000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Rüstungen.");
					AmmunationInfo[an][amArmour] = 1;
					AmmunationInfo[an][amKasse] -= 1000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Rüstung kosten soll.","Bestätigen","");
		        }

				else if(GetPVarInt(playerid,"AmmuUpgrade") == 2)
		        {
		            if(AmmunationInfo[an][amKasse] < 1500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Schlagringe.");
					AmmunationInfo[an][amSchlagring] = 1;
					AmmunationInfo[an][amKasse] -= 1500;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Schlagring kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 3)
		        {
		            if(AmmunationInfo[an][amKasse] < 1500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Messers.");
					AmmunationInfo[an][amMesser] = 1;
					AmmunationInfo[an][amKasse] -= 1500;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Messer kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 4)
		        {
		            if(AmmunationInfo[an][amKasse] < 1500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Baseballschläger.");
					AmmunationInfo[an][amBaseball] = 1;
					AmmunationInfo[an][amKasse] -= 1500;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Baseballschläger kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 5)
		        {
		            if(AmmunationInfo[an][amKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Desert Eagles.");
					AmmunationInfo[an][amDeagle] = 1;
					AmmunationInfo[an][amKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Desert Eagle kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 6)
		        {
		            if(AmmunationInfo[an][amKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun MP5´s.");
					AmmunationInfo[an][amMP5] = 1;
					AmmunationInfo[an][amKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine MP5 kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 7)
		        {
		            if(AmmunationInfo[an][amKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun AKS-47.");
					AmmunationInfo[an][amAK] = 1;
					AmmunationInfo[an][amKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine AK-47 kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 8)
		        {
		            if(AmmunationInfo[an][amKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun M4´s.");
					AmmunationInfo[an][amM4] = 1;
					AmmunationInfo[an][amKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein M4 kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 9)
		        {
		            if(AmmunationInfo[an][amKasse] < 5000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Snipen.");
					AmmunationInfo[an][amSniper] = 1;
					AmmunationInfo[an][amKasse] -= 5000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Sniper kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"AmmuUpgrade") == 10)
		        {
		            if(AmmunationInfo[an][amKasse] < 1000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein Ammunation besitzt nun Fallschirme.");
					AmmunationInfo[an][amFallschirm] = 1;
					AmmunationInfo[an][amKasse] -= 1000;
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Fallschirm kosten soll.","Bestätigen","");
		        }
		    }
		}
		case DIALOG_AMMU_UPGRADESP:
		{
		    if(response==0){DeletePVar(playerid,"Verwaltung"); DeletePVar(playerid,"AmmuUpgrade");}//Abbrechen
		    else if(response==1)//Weiter
		    {
      			new string[128], an = SpielerInfo[playerid][sAmmunation];
	        	if(strval(inputtext) > 0 && strval(inputtext) < 20001 && IsNumeric(inputtext))
				{
    				if(GetPVarInt(playerid,"AmmuUpgrade") == 1)
		        	{
					    AmmunationInfo[an][amArmour] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Rüstungen {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 2)
		        	{
					    AmmunationInfo[an][amSchlagring] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Schlagringe {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 3)
		        	{
					    AmmunationInfo[an][amMesser] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Messers {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 4)
		        	{
					    AmmunationInfo[an][amBaseball] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Baseballschläger {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 5)
		        	{
					    AmmunationInfo[an][amDeagle] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Desert Eagles {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 6)
		        	{
					    AmmunationInfo[an][amMP5] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für MP5´s {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 7)
		        	{
					    AmmunationInfo[an][amAK] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für AKS-47 {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 8)
		        	{
					    AmmunationInfo[an][amM4] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für M4´s {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 9)
		        	{
					    AmmunationInfo[an][amSniper] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Snipen {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
					}
					else if(GetPVarInt(playerid,"AmmuUpgrade") == 10)
		        	{
					    AmmunationInfo[an][amFallschirm] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Fallschirme {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

					}
					DeletePVar(playerid,"AmmuUpgrade");
					ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
		        }
		        else ShowPlayerDialog(playerid,DIALOG_AMMU_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","Bitte gebe unten den Verkaufspreis an.\n\n{FF0000}Der Preis darf nicht kleiner als 1$ und höher als 20000$ sein.","Weiter","Zurück");
			}
		}
		case DIALOG_STORE_UPGRADES:
		if(response==0){ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen","Weiter","Abbrechen");}//Zurück
	    else if(response==1)//Weiter
	    {
			new an = SpielerInfo[playerid][sStore];
			switch(listitem)
	        {
      			case 0://Navigationsgerät
             	{
         	    	if(GetPVarInt(playerid,"StorePreise") == 0)
             	    {
						if(StoreInfo[an][siNavi] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
						}
						else
						{
						    SetPVarInt(playerid,"StoreUpgrade",1);
	             	    	ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Navigationsgerät Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
	    				if(StoreInfo[an][siNavi] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"StoreUpgrade",1);
					    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bitte gebe unten nun einen Preis an,\nwie viel ein Navigationsgerät kosten soll.","Bestätigen","");
					}
	 			}
  				case 1://Handy
             	{
         	    	if(GetPVarInt(playerid,"StorePreise") == 0)
             	    {
						if(StoreInfo[an][siHandy] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
						}
						else
						{
						    SetPVarInt(playerid,"StoreUpgrade",2);
	             	    	ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Handy Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
	    				if(StoreInfo[an][siHandy] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"StoreUpgrade",2);
					    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bitte gebe unten nun einen Preis an,\nwie viel ein Handy kosten soll.","Bestätigen","");
					}
	 			}
 				case 2://Telefonbuch
             	{
         	    	if(GetPVarInt(playerid,"StorePreise") == 0)
             	    {
						if(StoreInfo[an][siTelefonbuch] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
						}
						else
						{
						    SetPVarInt(playerid,"StoreUpgrade",3);
	             	    	ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Telefonbuch Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
	    				if(StoreInfo[an][siTelefonbuch] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"StoreUpgrade",3);
					    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bitte gebe unten nun einen Preis an,\nwie viel ein Telefonbuch kosten soll.","Bestätigen","");
					}
	 			}
 				case 3://Repairkit
             	{
         	    	if(GetPVarInt(playerid,"StorePreise") == 0)
             	    {
						if(StoreInfo[an][siRepairkit] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
						}
						else
						{
						    SetPVarInt(playerid,"StoreUpgrade",4);
	             	    	ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas Repairkit Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
	    				if(StoreInfo[an][siRepairkit] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"StoreUpgrade",4);
					    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bitte gebe unten nun einen Preis an,\nwie viel ein Repairkit kosten soll.","Bestätigen","");
					}
	 			}
 				case 4://MP3-Player
             	{
         	    	if(GetPVarInt(playerid,"StorePreise") == 0)
             	    {
						if(StoreInfo[an][siMP3] != 0)
						{
							SendClientMessage(playerid,COLOR_GREY,"Du besitzt dieses Upgrade schon.");
							ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
						}
						else
						{
						    SetPVarInt(playerid,"StoreUpgrade",5);
	             	    	ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESK,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bist du dir sicher, dass du dir\ndas MP3-Player Upgrade für 3000$ kaufen möchtest?","Kaufen","Zurück");
						}
					}
					else
					{
	    				if(StoreInfo[an][siMP3] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt dieses Upgrade nicht. Kaufe es dir erst um dort einen Preis festlegen zu können.");
					    SetPVarInt(playerid,"StoreUpgrade",5);
					    ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","{FFFFFF}Bitte gebe unten nun einen Preis an,\nwie viel ein MP3-Player kosten soll.","Bestätigen","");
					}
	 			}
			}
		}
		case DIALOG_STORE_UPGRADESK:
		{
		    if(response==0){DeletePVar(playerid,"StoreUpgrade"); ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Abbrechen");}//Zurück
		    else if(response==1)//Weiter
		    {
		        new an = SpielerInfo[playerid][sStore];
		        if(GetPVarInt(playerid,"StoreUpgrade") == 1)
				{
					if(StoreInfo[an][siKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein 24/7 besitzt nun Navigationsgeräte.");
					StoreInfo[an][siNavi] = 1;
					StoreInfo[an][siKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel eine Navigationsgerät kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"StoreUpgrade") == 2)
				{
					if(StoreInfo[an][siKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein 24/7 besitzt nun Handy´s.");
					StoreInfo[an][siHandy] = 1;
					StoreInfo[an][siKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Handy kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"StoreUpgrade") == 3)
				{
					if(StoreInfo[an][siKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein 24/7 besitzt nun Telefonbücher.");
					StoreInfo[an][siTelefonbuch] = 1;
					StoreInfo[an][siKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Telefonbuch kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"StoreUpgrade") == 4)
				{
					if(StoreInfo[an][siKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein 24/7 besitzt nun Repairkits.");
					StoreInfo[an][siRepairkit] = 1;
					StoreInfo[an][siKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein Repairkit kosten soll.","Bestätigen","");
		        }
		        else if(GetPVarInt(playerid,"StoreUpgrade") == 5)
				{
					if(StoreInfo[an][siKasse] < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Geschäftskonto.");
					SendClientMessage(playerid,COLOR_SUPER,"Dein 24/7 besitzt nun MP3-Player.");
					StoreInfo[an][siMP3] = 1;
					StoreInfo[an][siKasse] -= 3000;
					ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADESP,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Verwaltung","Bitte gebe unten nun einen Preis an,\nwie viel ein MP3-Player kosten soll.","Bestätigen","");
		        }
			}
		}
		case DIALOG_STORE_UPGRADESP:
		{
		    if(response==0){DeletePVar(playerid,"StoreUpgrade");}//Abbrechen
		    else if(response==1)//Weiter
		    {
      			new string[128], an = SpielerInfo[playerid][sStore];
	        	if(strval(inputtext) > 0 && strval(inputtext) < 20001 && IsNumeric(inputtext))
				{
    				if(GetPVarInt(playerid,"StoreUpgrade") == 1)
		        	{
					    StoreInfo[an][siNavi] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Navigationsgeräte {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
					}
 					else if(GetPVarInt(playerid,"StoreUpgrade") == 2)
		        	{
					    StoreInfo[an][siHandy] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Handy´s {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
					}
 					else if(GetPVarInt(playerid,"StoreUpgrade") == 3)
		        	{
					    StoreInfo[an][siTelefonbuch] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für Telefonbücher {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"StoreUpgrade") == 4)
		        	{
					    StoreInfo[an][siRepairkit] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für ein Repairkit {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"StoreUpgrade") == 5)
		        	{
					    StoreInfo[an][siMP3] = strval(inputtext);
		    			format(string,sizeof(string),"Neuer Verkaufspreis für ein MP3-Player {FF0000}%d$",strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_STORE_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_BUSINESS_STAAT:
		{
		    if(response==0){DeletePVar(playerid,"Verwaltung");}//Abbrechen
		    else if(response==1)//Weiter
		    {
		        new string[224];
  				if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
        		{
					new tsid = SpielerInfo[playerid][sTankstelle];
					format(string,164,"Du hast deine Tankstelle für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",TankstellenInfo[SpielerInfo[playerid][sTankstelle]][tsPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);

					Delete3DTextLabel(TankstellenInfo[tsid][tsText][0]);
					TankstellenInfo[tsid][tsText][0] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(TankstellenInfo[tsid][tsPickup][0]);

					format(string, sizeof(string), "Tankstelle 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Tankstelle zu kaufen", tsid, TankstellenInfo[tsid][tsPreis]);
					TankstellenInfo[tsid][tsPickup][0] = CreatePickup(1273, 23, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], -1);
					TankstellenInfo[tsid][tsText][0] = Create3DTextLabel(string, COLOR_WHITE, TankstellenInfo[tsid][tsEPos_X], TankstellenInfo[tsid][tsEPos_Y], TankstellenInfo[tsid][tsEPos_Z], 10.0, 0);

					TankstellenInfo[tsid][tsBenzin] = 0;
					TankstellenInfo[tsid][tsDiesel] = 0;
					TankstellenInfo[tsid][tsKerosin] = 0;
					TankstellenInfo[tsid][tsBenzinPreis] = 0;
					TankstellenInfo[tsid][tsDieselPreis] = 0;
					TankstellenInfo[tsid][tsKerosinPreis] = 0;
					TankstellenInfo[tsid][tsBesitzer] = 0;
					format(TankstellenInfo[tsid][tsBesitzer], 0, "");
					TankstellenInfo[tsid][tsBeschreibung] = 0;
					format(TankstellenInfo[tsid][tsBeschreibung], 15, "Petrol Station");
					TankstellenInfo[tsid][tsKasse] = 0;
					SpielerInfo[playerid][sBankkonto] += TankstellenInfo[SpielerInfo[playerid][sTankstelle]][tsPreis]/2;
					SpielerInfo[playerid][sTankstelle] = 0;
					DeletePVar(playerid,"Verwaltung");
					TankstellenTafelUpdate(tsid);
				}
		 	 	else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
        		{
					new an = SpielerInfo[playerid][sAmmunation];
					format(string,164,"Du hast dein Ammunation für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",AmmunationInfo[an][amPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);

					Delete3DTextLabel(AmmunationInfo[an][amText]);
					AmmunationInfo[an][amText] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(AmmunationInfo[an][amPickup]);

      	   			format(string, sizeof(string), "Ammunation 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Ammunation zu kaufen", an, AmmunationInfo[an][amPreis]);
                    AmmunationInfo[an][amText] = Create3DTextLabel(string, COLOR_WHITE, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], 10.0, 0);
			   		AmmunationInfo[an][amPickup] = CreatePickup(1273, 23, AmmunationInfo[an][amPos_X], AmmunationInfo[an][amPos_Y], AmmunationInfo[an][amPos_Z], -1);

                    AmmunationInfo[an][amArmour] = 0;
                    AmmunationInfo[an][amSchlagring] = 0;
                    AmmunationInfo[an][amMesser] = 0;
                    AmmunationInfo[an][amBaseball] = 0;
                    AmmunationInfo[an][amDeagle] = 0;
                    AmmunationInfo[an][amMP5] = 0;
                    AmmunationInfo[an][amAK] = 0;
                    AmmunationInfo[an][amM4] = 0;
                    AmmunationInfo[an][amSniper] = 0;
                    AmmunationInfo[an][amFallschirm] = 0;
					AmmunationInfo[an][amBesitzer] = 0;
					format(AmmunationInfo[an][amBesitzer], 0, "");
					AmmunationInfo[an][amKasse] = 0;
					SpielerInfo[playerid][sBankkonto] += AmmunationInfo[an][amPreis]/2;
					SpielerInfo[playerid][sAmmunation] = 0;
					DeletePVar(playerid,"Verwaltung");
       			}
	 	 		else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
        		{
					new an = SpielerInfo[playerid][sStore];
					format(string,164,"Du hast dein 24/7 für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",StoreInfo[an][siPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);

					Delete3DTextLabel(StoreInfo[an][siText]);
					StoreInfo[an][siText] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(StoreInfo[an][siPickup]);

      	   			format(string, sizeof(string), "24/7 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Ammunation zu kaufen", an, StoreInfo[an][siPreis]);
                    StoreInfo[an][siText] = Create3DTextLabel(string, COLOR_WHITE, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], 10.0, 0);
			   		StoreInfo[an][siPickup] = CreatePickup(1273, 23, StoreInfo[an][siPos_X], StoreInfo[an][siPos_Y], StoreInfo[an][siPos_Z], -1);

					StoreInfo[an][siBesitzer] = 0;
					format(StoreInfo[an][siBesitzer], 0, "");
					StoreInfo[an][siKasse] = 0;
					SpielerInfo[playerid][sBankkonto] += StoreInfo[an][siPreis]/2;
					SpielerInfo[playerid][sStore] = 0;
					DeletePVar(playerid,"Verwaltung");
       			}
	 	 		else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
        		{
					new hs = SpielerInfo[playerid][sHaus];
					format(string,164,"Du hast dein Haus für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",HausInfo[hs][hsPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);
					
					Delete3DTextLabel(HausInfo[hs][hsText]);
					HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(HausInfo[hs][hsPickup]);
					
				    if(HausInfo[hs][hsTyp] == 1)//Appartment
				    {
		   				format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Appartment zu kaufen", hs, HausInfo[hs][hsPreis]);
					}
					else if(HausInfo[hs][hsTyp] == 2)//Haus
		   			{
		  				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Haus zu kaufen", hs, HausInfo[hs][hsPreis]);
		   			}
		   			else if(HausInfo[hs][hsTyp] == 3)//Villa
		   			{
		  				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Villa zu kaufen", hs, HausInfo[hs][hsPreis]);
		   			}
		   			HausInfo[hs][hsPickup] = CreatePickup(1273, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
		        	HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
		        	
		        	HausInfo[hs][hsHealth] = 0;
		        	HausInfo[hs][hsMiete] = 0;
		        	HausInfo[hs][hsMietbar] = 0;
		        	HausInfo[hs][hsLocked] = 0;
					HausInfo[hs][hsBesitzer] = 0;
					format(HausInfo[hs][hsBesitzer], 0, "");
					SpielerInfo[playerid][sBankkonto] += HausInfo[hs][hsPreis]/2;
					SpielerInfo[playerid][sHaus] = 0;
					if(SpielerInfo[playerid][sSpawn] == 2){SpielerInfo[playerid][sSpawn] = 0;}
					DeletePVar(playerid,"Verwaltung");
       			}
 	 			else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
        		{
					new hs = SpielerInfo[playerid][sGHaus];
					format(string,164,"Du hast dein Gruppenhaus für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",HausInfo[hs][hsPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);

					Delete3DTextLabel(HausInfo[hs][hsText]);
					HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(HausInfo[hs][hsPickup]);

				    if(HausInfo[hs][hsTyp] == 1)//Appartment
				    {
		   				format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Appartment zu kaufen", hs, HausInfo[hs][hsPreis]);
					}
					else if(HausInfo[hs][hsTyp] == 2)//Haus
		   			{
		  				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir das Haus zu kaufen", hs, HausInfo[hs][hsPreis]);
		   			}
		   			else if(HausInfo[hs][hsTyp] == 3)//Villa
		   			{
		  				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Villa zu kaufen", hs, HausInfo[hs][hsPreis]);
		   			}
		   			HausInfo[hs][hsPickup] = CreatePickup(1273, 23, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], -1);
		        	HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
		        	HausInfo[hs][hsHealth] = 0;
		        	HausInfo[hs][hsMiete] = 0;
		        	HausInfo[hs][hsMietbar] = 0;
		        	HausInfo[hs][hsLocked] = 0;
					HausInfo[hs][hsBesitzer] = 0;
					format(HausInfo[hs][hsBesitzer], 0, "");

					mysql_format(sqlHandle, string, sizeof(string),"SELECT `Name` FROM `accounts` WHERE `Gruppenhaus` = '%d' AND `Online` = '0' AND `Gruppenhaus` != '0'", SpielerInfo[playerid][sGHaus]);
					mysql_tquery(sqlHandle, string, "onPlayerSellGroupHouse", "i", playerid);

					foreach(new i : Player)
					{
					    if(i == playerid)continue;
					    if(SpielerInfo[i][sGruppe] != SpielerInfo[playerid][sGruppe])continue;
					    if(SpielerInfo[i][sGHaus] != SpielerInfo[playerid][sGHaus])continue;
					    if(SpielerInfo[i][sSpawn] == 3)
						{
							SendClientMessage(i,COLOR_SORRY,"Hinweis: Das Gruppenhaus wurde verkauft. Ab sofort spawnst du wieder am Zivispawn.");
							SpielerInfo[i][sSpawn] = 0;
						}
						SpielerInfo[i][sGHaus] = 0;
					}
					
					SpielerInfo[playerid][sBankkonto] += HausInfo[hs][hsPreis]/2;
					SpielerInfo[playerid][sGHaus] = 0;
					if(SpielerInfo[playerid][sSpawn] == 3){SpielerInfo[playerid][sSpawn] = 0;}
					DeletePVar(playerid,"Verwaltung");
       			}
       			else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
        		{
					new hs = SpielerInfo[playerid][sGarage];
					format(string,164,"Du hast deine Garage für {FF0000}%d${00CDFF} an den Staat verkauft. Der Staat hat dir das Geld überwiesen.",GaragenInfo[hs][giPreis]/2);
					SendClientMessage(playerid,COLOR_INFO,string);

					Delete3DTextLabel(GaragenInfo[hs][giText]);
					GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
					DestroyPickup(GaragenInfo[hs][giPickup]);

					format(string, sizeof(string), "Garage 'ID: {FF0000}%d{FFFFFF}' zu verkaufen!\nBesitzer: {FF0000}Staat{FFFFFF}\nPreis: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/kaufen{FFFFFF}'\num dir die Garage zu kaufen", hs, GaragenInfo[hs][giPreis]);

		   			GaragenInfo[hs][giPickup] = CreatePickup(1273, 23, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], -1);
		        	GaragenInfo[hs][giText] = Create3DTextLabel(string, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);

		        	GaragenInfo[hs][giMiete] = 0;
		        	GaragenInfo[hs][giMietbar] = 0;
		        	GaragenInfo[hs][giLocked] = 0;
					GaragenInfo[hs][giBesitzer] = 0;
					format(GaragenInfo[hs][giBesitzer], 0, "");
					SpielerInfo[playerid][sBankkonto] += GaragenInfo[hs][giPreis]/2;
					SpielerInfo[playerid][sGarage] = 0;
					DeletePVar(playerid,"Verwaltung");
       			}
		    }
		}
		case DIALOG_BUSINESS_VERKAUFEN:
		if(response==0)//Zurück
		{
			if(GetPVarInt(playerid,"Verwaltung") != 4)
			{
				ShowPlayerDialog(playerid,DIALOG_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Upgrades\nPreise\nVerkaufen","Weiter","Abbrechen");
			}
		}
	    else if(response==1)//Weiter
	    {
         	new string[164];
			switch(listitem)
	        {
      			case 0://Staat
             	{
 	    			if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
					{
             	    	format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du deine Tankstelle (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sTankstelle],TankstellenInfo[SpielerInfo[playerid][sTankstelle]][tsPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
					{
    					format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du dein Ammunation (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sAmmunation],AmmunationInfo[SpielerInfo[playerid][sAmmunation]][amPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
					{
    					format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du dein 24/7 (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sStore],StoreInfo[SpielerInfo[playerid][sStore]][siPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
					{
             	    	format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du dein Haus (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sHaus],HausInfo[SpielerInfo[playerid][sHaus]][hsPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
					{
             	    	format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du dein Gruppenhaus (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sGHaus],HausInfo[SpielerInfo[playerid][sGHaus]][hsPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
					{
             	    	format(string,sizeof(string),"{FFFFFF}Bist du dir sicher das du deine Garage (ID:{FF0000}%d{FFFFFF})\nfür {FF0000}%d${FFFFFF} an den Staat verkaufen möchtest ?",SpielerInfo[playerid][sGarage],GaragenInfo[SpielerInfo[playerid][sGarage]][giPreis]/2);
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_STAAT,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung",string,"Ja","Zurück");
					}
             	}
             	case 1://Spieler
             	{
  					if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
					{
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Tankstelle verkaufen möchtest.","Weiter","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Ammunation verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein 24/7 verkaufen möchtest.","Weiter","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Haus verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Gruppenhaus verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Garage verkaufen möchtest.","Weiter","Zurück");
					}
             	}
			}
		}
		case DIALOG_BUSINESS_SPIELER:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_BUSINESS_VERKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Staat\nSpieler","Weiter","Zurück");}//Zurück
		    else if(response==1)//Weiter
		    {
   				if(strval(inputtext) > 0 && strval(inputtext) < MAX_PLAYERS && IsNumeric(inputtext))
				{
				    if(IsPlayerConnected(strval(inputtext)))
				    {
				        if(playerid != strval(inputtext))
				        {
							if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
							{
								SetPVarInt(playerid,"TankstelleVID",strval(inputtext));
          	    			   	ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
		  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
							{
							    SetPVarInt(playerid,"AmmunationVID",strval(inputtext));
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
  							else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
							{
							    SetPVarInt(playerid,"StoreVID",strval(inputtext));
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
		  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
							{
							    SetPVarInt(playerid,"HausVID",strval(inputtext));
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
  							else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
							{
							    SetPVarInt(playerid,"GHausVID",strval(inputtext));
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
							else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
							{
							    SetPVarInt(playerid,"GarageVID",strval(inputtext));
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten nun den Verkaufspreis an.","Weiter","Zurück");
							}
						}
						else
						{
							if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
							{
		             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Tankstelle verkaufen möchtest.\n\n{FF0000}Du kannst die Tankstelle nicht an dich selber verkaufen.","Weiter","Zurück");
							}
		  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
							{
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Ammunation verkaufen möchtest.\n\n{FF0000}Du kannst das Ammunation nicht an dich selber verkaufen.","Weiter","Zurück");
							}
 							else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
							{
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein 24/7 verkaufen möchtest.\n\n{FF0000}Du kannst das 24/7 nicht an dich selber verkaufen.","Weiter","Zurück");
							}
		  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
							{
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Haus verkaufen möchtest.\n\n{FF0000}Du kannst das Haus nicht an dich selber verkaufen.","Weiter","Zurück");
							}
  							else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
							{
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Gruppenhaus verkaufen möchtest.\n\n{FF0000}Du kannst das Gruppenhaus nicht an dich selber verkaufen.","Weiter","Zurück");
							}
							else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
							{
								ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Gruppenhaus verkaufen möchtest.\n\n{FF0000}Du kannst deine Garage nicht an dich selber verkaufen.","Weiter","Zurück");
							}
						}
					}
					else
					{
						if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
						{
	             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Tankstelle verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
	  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
						{
							ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Ammunation verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
 						else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
						{
							ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein 24/7 verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
	  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
						{
							ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Haus verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
 						else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
						{
							ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Gruppenhaus verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
						else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
						{
							ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Garage verkaufen möchtest.\n\n{FF0000}Der angegebene Spieler ist nicht Online.","Weiter","Zurück");
						}
					}
				}
				else
				{
					if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
					{
             	    	ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Tankstelle verkaufen möchtest.","Weiter","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Ammunation verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein 24/7 verkaufen möchtest.","Weiter","Zurück");
					}
  					else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Haus verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndein Gruppenhaus verkaufen möchtest.","Weiter","Zurück");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
					{
						ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELER,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Gib unten die SpielerID an, an den du\ndeine Garage verkaufen möchtest.","Weiter","Zurück");
					}
				}
		    }
		}
		case DIALOG_BUSINESS_SPIELERV:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
     			if(strval(inputtext) > 0 && strval(inputtext) < 1000001 && IsNumeric(inputtext))
				{
					if(GetPVarInt(playerid,"Verwaltung") == 1)//Tankstelle
        			{
					    new pID = GetPVarInt(playerid,"TankstelleVID");
					    SetPVarInt(pID,"TankstelleAngebot",SpielerInfo[playerid][sTankstelle]);
					    SetPVarInt(pID,"TankstelleAngebotID",playerid);
					    SetPVarInt(pID,"TankstelleAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} deine Tankstelle für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir seine Tankstelle (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sTankstelle],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
 					}
	 	 			else if(GetPVarInt(playerid,"Verwaltung") == 2)//Ammunation
        			{
  					    new pID = GetPVarInt(playerid,"AmmunationVID");
					    SetPVarInt(pID,"AmmunationAngebot",SpielerInfo[playerid][sAmmunation]);
					    SetPVarInt(pID,"AmmunationAngebotID",playerid);
					    SetPVarInt(pID,"AmmunationAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} dein Ammunation für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir sein Ammunation (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sAmmunation],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
					}
					else if(GetPVarInt(playerid,"Verwaltung") == 3)//24/7
        			{
  					    new pID = GetPVarInt(playerid,"StoreVID");
					    SetPVarInt(pID,"StoreAngebot",SpielerInfo[playerid][sAmmunation]);
					    SetPVarInt(pID,"StoreAngebotID",playerid);
					    SetPVarInt(pID,"StoreAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} dein 24/7 für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir sein 24/7 (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sStore],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
					}
	 				else if(GetPVarInt(playerid,"Verwaltung") == 4)//Haus
        			{
  					    new pID = GetPVarInt(playerid,"HausVID");
					    SetPVarInt(pID,"HausAngebot",SpielerInfo[playerid][sHaus]);
					    SetPVarInt(pID,"HausAngebotID",playerid);
					    SetPVarInt(pID,"HausAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} dein Haus für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir sein Haus (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sHaus],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
        			}
	 				else if(GetPVarInt(playerid,"Verwaltung") == 5)//Gruppenhaus
        			{
  					    new pID = GetPVarInt(playerid,"GHausVID");
					    SetPVarInt(pID,"GHausAngebot",SpielerInfo[playerid][sGHaus]);
					    SetPVarInt(pID,"GHausAngebotID",playerid);
					    SetPVarInt(pID,"GHausAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} dein Gruppenhaus für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir sein Gruppenhaus (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sGHaus],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
        			}
        			else if(GetPVarInt(playerid,"Verwaltung") == 6)//Garage
        			{
  					    new pID = GetPVarInt(playerid,"GarageVID");
					    SetPVarInt(pID,"GarageAngebot",SpielerInfo[playerid][sGarage]);
					    SetPVarInt(pID,"GarageAngebotID",playerid);
					    SetPVarInt(pID,"GarageAngebotPreis",strval(inputtext));
					    new string[164];
					    format(string,sizeof(string),"Du hast dem Spieler {FF0000}%s{00CDFF} deine Garage für {FF0000}%d${00CDFF} angeboten.",SpielerInfo[pID][sName],strval(inputtext));
						SendClientMessage(playerid,COLOR_INFO,string);

		    			format(string,sizeof(string),"Spieler {FF0000}%s{00CDFF} bietet dir seine Garage (ID:{FF0000}%d{00CDFF}) für {FF0000}%d${00CDFF} an.",SpielerInfo[playerid][sName],SpielerInfo[playerid][sGarage],strval(inputtext));
						SendClientMessage(pID,COLOR_INFO,string);

						SendClientMessage(pID,COLOR_INFO,"Benutze '/angebot annehmen' oder '/angebot ablehnen'");
        			}
				}
				else ShowPlayerDialog(playerid,DIALOG_BUSINESS_SPIELERV,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Kaufbestätigung","Bitte gebe unten nun den Verkaufpreis an.\n\nDer Preis darf nicht kleiner als 0 und höher als 1000000$ sein.","Weiter","Abbrechen");
			}
		}
		case DIALOG_TANKSTELLENINFO:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
      			new tstelledialog[800], merker = true;
				for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
			    {
			        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
			        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
			        {
			            if(tsid > 5 && tsid < 11)
			            {
			                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
							merker = false;
						}
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Im moment benötigt keine Tankstelle Treibstoff.");
				    return 1;
				}
				else
				{
			    	ShowPlayerDialog(playerid,DIALOG_TANKSTELLENINFO2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Seite 3","Zurück");
				    return 1;
				}
		    }
		}
		case DIALOG_TANKSTELLENINFO2:
		{
		    if(response==0)//Zurück
		    {
   				new tstelledialog[800], merker = true;
				for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
			    {
			        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
			        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
			        {
			            if(tsid < 5)
			            {
			                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
							merker = false;
						}
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Im moment benötigt keine Tankstelle Treibstoff.");
				    return 1;
				}
				else
				{
			    	ShowPlayerDialog(playerid,DIALOG_TANKSTELLENINFO,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Seite 3","Zurück");
				    return 1;
				}
		    }
		    else if(response==1)//Weiter
		    {
      			new tstelledialog[800], merker = true;
				for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
			    {
			        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
			        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
			        {
			            if(tsid > 10 && tsid < 16)
			            {
			                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
							merker = false;
						}
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Im moment benötigt keine Tankstelle Treibstoff.");
				    return 1;
				}
				else
				{
			    	ShowPlayerDialog(playerid,DIALOG_TANKSTELLENINFO3,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Seite 4","Zurück");
				    return 1;
				}
		    }
		}
		case DIALOG_TANKSTELLENINFO3:
		{
		    if(response==0)//Zurück
			{
				new tstelledialog[800], merker = true;
				for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
			    {
			        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
			        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
			        {
			            if(tsid > 5 && tsid < 11)
			            {
			                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
							merker = false;
						}
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Im Moment benötigt keine Tankstelle Treibstoff.");
				    return 1;
				}
				else
				{
			    	ShowPlayerDialog(playerid,DIALOG_TANKSTELLENINFO2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Seite 4","Zurück");
				    return 1;
				}
			}
		    else if(response==1)//Weiter
		    {
      			new tstelledialog[800], merker = true;
				for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
			    {
			        if(TankstellenInfo[tsid][tsErstellt] == false)continue;
			        if(TankstellenInfo[tsid][tsBenzinLiter] < 10000 || TankstellenInfo[tsid][tsDieselLiter] < 10000 || TankstellenInfo[tsid][tsKerosinLiter] < 10000)
			        {
			            if(tsid > 15)
			            {
			                format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF} | Benzin: {007DFF}%d{FFFFFF}L/10000L | Diesel: {007DFF}%d{FFFFFF}L/10000L | Kerosin: {007DFF}%d{FFFFFF}L/10000L",tstelledialog,tsid,TankstellenInfo[tsid][tsBenzinLiter],TankstellenInfo[tsid][tsDieselLiter],TankstellenInfo[tsid][tsKerosinLiter]);
							merker = false;
						}
					}
				}
				if(merker)
				{
				    SendClientMessage(playerid,COLOR_SORRY,"Im Moment benötigt keine Tankstelle Treibstoff.");
				    return 1;
				}
				else
				{
			    	ShowPlayerDialog(playerid,9992,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Tankstelleninfo",tstelledialog,"Schliessen","");
				    return 1;
				}
		    }
		}
		case DIALOG_TRAILER_TTANKAUSWAHL:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
  				switch(listitem)
		        {
          			case 0://Benzin
		            {
		                ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Benzin möchtest du in deinen Anhänger füllen ?","Weiter","Zurück");
		                SetPVarInt(playerid,"TrailerBetanken",1);
		            }
           			case 1://Diesel
		            {
		                ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Diesel möchtest du in deinen Anhänger füllen ?","Weiter","Zurück");
                        SetPVarInt(playerid,"TrailerBetanken",2);
		            }
           			case 2://Kerosin
		            {
		                ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Kerosin möchtest du in deinen Anhänger füllen ?","Weiter","Zurück");
                        SetPVarInt(playerid,"TrailerBetanken",3);
		            }
				}
			}
		}
		case DIALOG_TRAILER_BETANKEN:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_TRAILER_TTANKAUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Benzin\nDiesel\nKerosin","Weiter","");}//Zurück
		    else if(response==1)//Weiter
		    {
      			if(strval(inputtext) > 0 && strval(inputtext) <= 1000 && IsNumeric(inputtext))
				{
					SetPVarInt(playerid,"TrailerKapazität",strval(inputtext));
					PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					SetTimerEx("TrailerBetanken",20000,false,"i",playerid);
					GameTextForPlayer(playerid, "Dein Anheanger wird aufgefuellt~n~~n~~r~Bitte warten...", 20000, 5);
				}
				else
				{
				    if(GetPVarInt(playerid,"TrailerBetanken") == 1)
				    {
				        ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Benzin möchtest du in deinen Anhänger füllen ?\n\n{FF0000}(1-1000L)","Weiter","Zurück");
				    }
				    else if(GetPVarInt(playerid,"TrailerBetanken") == 2)
				    {
				        ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Diesel möchtest du in deinen Anhänger füllen ?\n\n{FF0000}(1-1000L)","Weiter","Zurück");
				    }
				    else if(GetPVarInt(playerid,"TrailerBetanken") == 3)
				    {
				        ShowPlayerDialog(playerid,DIALOG_TRAILER_BETANKEN,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Anhänger auffüllen","Wie viel Liter Kerosin möchtest du in deinen Anhänger füllen ?\n\n{FF0000}(1-1000L)","Weiter","Zurück");
				    }
				}
		    }
		}
		case DIALOG_NEBENJOBS:
		{
		    if(response==0)//Zurück
			{
			    DeletePVar(playerid,"NebenjobAuswahl");
				InterpolateCameraPos(playerid, 369.133270, 173.748519, 1010.823974, 364.557189, 169.982406, 1010.493774, 1000);
				InterpolateCameraLookAt(playerid, 364.636047, 173.921264, 1008.645629, 361.581481, 173.667617, 1008.892395, 1000);
				TogglePlayerControllable(playerid,false);
				ShowMenuForPlayer(Rathaus,playerid);
			}
		    else if(response==1)//Weiter
		    {
  				switch(listitem)
		        {
           			case 0://Pizzabote
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",1);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Pizzabote ist es Pizza zu den Kunden zu bringen.\nSo wirst du beispielsweise Kunden mit Thunfisch, Salami oder Hawaii-Pizzen beliefern.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[2][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Pizzabote",string,"Annehmen","Zurück");
		            }
 					case 1://Kehrmaschinenfahrer
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",2);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Kehrmaschinenfahrer ist es die Straßen von Los Santos sauber zuhalten.\nDu wirst daher mit einer Kehrmaschine den Müll aufkehren.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[3][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kehrmaschinenfahrer",string,"Annehmen","Zurück");
		            }
 					case 2://Pilot
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",3);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Pilot ist es Waren von Los Santos nach San Fierro anschließend\nnach Las Venturas und wieder zurück nach Los Santos.\nDu wirst daher je nach Erfahrung mit einem bestimmten Flugzeug fliegen.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Flugzeug-Führerschein{FFFFFF} benötigen.",string,JobInfo[4][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Pilot",string,"Annehmen","Zurück");
		            }
 					case 3://Busfahrer
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",4);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Busfahrer ist es Personen zu beförden\nDu wirst daher je nach Erfahrung mit einem bestimmten Bus fahren.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[5][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Busfahrer",string,"Annehmen","Zurück");
		            }
 					case 4://Müllmann
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",5);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Müllmann ist es den Müll von den Häusern abzuholen.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[6][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Müllmann",string,"Annehmen","Zurück");
		            }
 					case 5://Landwirt
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",6);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Landwirt ist es Reis Pflanzen, diese zu ernten und anschließend zu verkaufen.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[7][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Landwirt",string,"Annehmen","Zurück");
		            }
	             	case 6://Holzfäller
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",7);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Holzfäller ist es, Bäume zu fällen und das Holz dann weiterzuverarbeiten.\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst ein festes Gehalt von {FE0000}%d${FFFFFF} für jede Tour.\nDu wirst für diesen Nebenjob allerdings einen {FE0000}Auto-Führerschein{FFFFFF} benötigen.",string,JobInfo[10][jiGehalt]);
						ShowPlayerDialog(playerid,DIALOG_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Holzfäller",string,"Annehmen","Zurück");
		            }
				}
			}
		}
		case DIALOG_NEBENJOB_INFOS:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_NEBENJOBS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Nebenjobs","Pizzabote\nKehrmaschinenfahrer\nPilot\nBusfahrer\nMüllmann\nLandwirt","Weiter","Zurück");}//Zurück
		    else if(response==1)//Weiter
		    {
				if(GetPVarInt(playerid,"NebenjobAuswahl") == 1)//Pizzabote
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 2;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Pizzabote' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 2)//Kehrmaschinenfahrer
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 3;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Kehrmaschinenfahrer' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
 				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 3)//Pilot
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 4;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Pilot' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
 				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 4)//Busfahrer
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 5;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Busfahrer' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
 				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 5)//Müllmann
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 6;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Müllmann' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
 				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 6)//Landwirt
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 7;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Landwirt' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
					TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
		   		else if(GetPVarInt(playerid,"NebenjobAuswahl") == 7)//Holzfäller
		        {
		            DeleteJobFahrzeug(playerid);
		        	SpielerInfo[playerid][sNebenjob] = 10;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Super! Du hast den Nebenjob 'Holzfäller' angenommen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen. Dein Arbeitsplatz findest du mit '/jobbase'.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Ich wünsche dir ganz viel Spaß in deinem neuem Nebenjob und viel Erfolg.");
					TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Rathaus");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
		        if(SpielerInfo[playerid][sQuest] == 3)
		        {
    				new string[128];
					PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
				    format(string,sizeof(string),"Hey ~b~%s",SpielerInfo[playerid][sName]);
				    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
				    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);

				    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
				    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 5 ~g~erfolgreich ~w~absolviert.");
				    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

				    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
				    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Fahr nun zum ~b~24/7~w~ (roter Marker) und");
				    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

				    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
				    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "besorge dir dort ein ~b~Handy ~w~und ein ~b~Telefonbuch");
				    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

				    PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
				    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 6: ~w~Besorge dir ein Handy und ein Telefonbuch");
				    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

	    			SetPlayerCheckpoint(playerid,1352.2795,-1758.5804,13.5078,2.5);

		            SpielerInfo[playerid][sQuest] = 4;
		        }
		    }
		}
		case DIALOG_ILLEGALE_NEBENJOBS:
		{
		    if(response==0)//Zurück
			{
			    DeletePVar(playerid,"NebenjobAuswahl");
				InterpolateCameraPos(playerid, 369.133270, 173.748519, 1010.823974, 364.557189, 169.982406, 1010.493774, 1000);
				InterpolateCameraLookAt(playerid, 364.636047, 173.921264, 1008.645629, 361.581481, 173.667617, 1008.892395, 1000);
				TogglePlayerControllable(playerid,false);
				ShowMenuForPlayer(Schwarzmarkt,playerid);
			}
		    else if(response==1)//Weiter
		    {
  				switch(listitem)
		        {
          			case 0://Waffendealer
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",1);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Waffendealer ist es Illegal Waffen an Person zu verkaufen.\nSo wirst du beispielsweise mit Messern oder z.b AK-47 dealen.\n\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%sDu erhälst für diesen Illegalen Nebenjob allerdings kein festes Gehalt.\nDein Gehalt hängt von deinem Humor & Ehrgeiz ab.",string);
		                ShowPlayerDialog(playerid,DIALOG_ILLEGALE_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffendealer",string,"Annehmen","Zurück");
		            }
           			case 1://Drogendealer
		            {
		                new string[600];
		                SetPVarInt(playerid,"NebenjobAuswahl",2);
		                format(string,sizeof(string),"{007DFF}%s{FFFFFF}, deine Aufgabe als Drogendealer ist\nin ganz San Andreas mit Drogen zu dealen.\nSo wirst du den weißen Schnee von den Gangs oder Mafien\n",SpielerInfo[playerid][sName]);
		                format(string,sizeof(string),"%san Person übergeben.\n\nDu erhälst für diesen Illegalen Nebenjob allerdings kein festes Gehalt.\nDein Gehalt hängt von deinem Humor & Ehrgeiz ab.",string);
						ShowPlayerDialog(playerid,DIALOG_ILLEGALE_NEBENJOB_INFOS,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Pizzabote",string,"Annehmen","Zurück");
		            }
				}
			}
		}
		case DIALOG_ILLEGALE_NEBENJOB_INFOS:
		{
		    if(response==0){ShowPlayerDialog(playerid,DIALOG_ILLEGALE_NEBENJOBS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Illegale Nebenjobs","Waffendealer\nDrogendealer","Weiter","Zurück");}//Zurück
		    else if(response==1)//Weiter
		    {
		        if(GetPVarInt(playerid,"NebenjobAuswahl") == 1)//Waffendealer
		        {
			        SpielerInfo[playerid][sNebenjob] = 8;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Super! Deine Aufgabe ist absofort mit Waffen zu dealen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Ich wünsche dir viel Spaß & viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Schwarzmarkt");
					DeletePVar(playerid,"NebenjobAuswahl");
				}
				else if(GetPVarInt(playerid,"NebenjobAuswahl") == 2)//Drogendealer
		        {
		        	SpielerInfo[playerid][sNebenjob] = 9;
			        SendClientMessage(playerid,COLOR_WHITE," ");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Super! Deine Aufgabe ist absofort mit Drogen zu dealen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Du kannst deine Jobbefehle unter '/help' nachschlagen.");
			        SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Emilio{FFFFFF} sagt: Ich wünsche dir viel Spaß & viel Erfolg.");
			        TogglePlayerControllable(playerid,true);
					SetCameraBehindPlayer(playerid);
					DeletePVar(playerid,"Schwarzmarkt");
					DeletePVar(playerid,"NebenjobAuswahl");
		        }
		    }
		}
		case DIALOG_HELP:
		{
		    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Hilfe","Allgemeine Befehle\nFraktions Befehle\nNebenjob Befehle\nFahrzeug Befehle\nGeschäft Befehle\nGruppen Befehle","Weiter","Abbrechen");
		    
		    new string2[1024];
		    if(response==0)return 1;
		    if(response==1)
		    {
				switch(listitem)
				{
					case 0://Allgemeine Befehle
					{
						strcat(string2,"{007DFF}Allgemein:{FFFFFF} /admins | /spawnchange | /ct | /knastzeit | /bank | /atm | /autohaus | /tanken | /stadthalle\n");
					    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /kaufen | /pay | /accept | /erstehilfe | /stadtplan | /eject\n");
					    strcat(string2,"{007DFF}Support:{FFFFFF} /support\n");
					    strcat(string2,"{007DFF}Scheine:{FFFFFF} /showscheine /scheine\n");
					    strcat(string2,"{007DFF}Einstellungen:{FFFFFF} /icp\n");
					    strcat(string2,"{007DFF}Statistik:{FFFFFF} /stats\n");
				     	strcat(string2,"{007DFF}Chat:{FFFFFF} /b | /whisper | /leise | /s | /me | /ooc\n");
						strcat(string2,"{007DFF}Support:{FFFFFF} /support\n");
				     	strcat(string2,"{007DFF}Animationsliste:{FFFFFF} /animlist\n");
				     	strcat(string2,"{007DFF}Hitman-Auftragsmord:{FFFFFF} /contract\n");
				     	strcat(string2,"{007DFF}Handy:{FFFFFF} /anrufen | /auflegen\n");
				     	strcat(string2,"{007DFF}Werbung:{FFFFFF} /ad\n");
				     	ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Allgemeine Befehle",string2,"Zurück","Abbrechen");
					}
					case 1://Fraktions Befehle
					{
					    if(SpielerInfo[playerid][sFraktion] == 0)return NichtBerechtigt
					    if(SpielerInfo[playerid][sFraktion] == 2)//San Andreas Police Department
					    {
							strcat(string2,"{007DFF}Allgemein:{FFFFFF} /ticket | /(su)spect | /clear | /hs | /cuff | /uncuff | /grab | /arrest | /unarrest | /r | /sperre | /nagelband\n");
							strcat(string2,"{007DFF}Allgemein:{FFFFFF} /schild | /delnagelband | /delsperre | /delschild | /sirene | /usirene | /knastinfo | /flock | /members | /d\n");
							strcat(string2,"{007DFF}Allgemein:{FFFFFF} /m | /take | /notrufliste | /tazer | /letzterfahrer | /givepunkte | /strafpunkte | /checkgun | /sirenehupe\n");
							strcat(string2,"{007DFF}Allgemein:{FFFFFF} /addblitzer | /delblitzer | /blitzerinfo | /maske | /bk | /showmarke | /parkkralle | /parkkralleab\n");
							strcat(string2,"{007DFF}Allgemein:{FFFFFF} /abschleppen | /repair | /mautkontrolle | /mautstationen /bombent\n");
							strcat(string2,"\n");
							strcat(string2,"{007DFF}Hinweis 1:{FFFFFF} Tore/Türen öffnen sich mit der Taste [N].\n");
							strcat(string2,"{007DFF}Hinweis 2:{FFFFFF} Fahrzeuge können mit [STRG] an den Haken genommen werden.\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /delallnagelband | /delallsperre | /delallschilder | /delpunkte\n");
							}
					        ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | San Andreas Police Department Befehle",string2,"Zurück","Abbrechen");
						}
		    			else if(SpielerInfo[playerid][sFraktion] == 6)//Federal Bureau of Investigation
					    {
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /ticket | /(su)spect | /clear | /wanteds | /hs | /cuff | /uncuff | /grab | /arrest | /unarrest | /r | /sperre | /nagelband\n");
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /schild | /delnagelband | /delsperre | /delschild | /sirene | /usirene | /knastinfo | /flock | /members | /d\n");
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /m | /take | /notrufliste | /notruf | /tazer | /letzterfahrer | /givepunkte | /strafpunkte | /checkgun | /sirenehupe\n");
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /addblitzer | /delblitzer | /blitzerinfo | /maske | /bk | /showmarke | /mautkontrolle | /mautstationen | /gov | /bombent\n");
							strcat(string2,"\n");
							strcat(string2,"{007DFF}Hinweis:{FFFFFF} Tore/Türen öffnen sich mit der Taste [N].\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						    	strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /delallnagelband | /delallsperre | /delallschilder | /delpunkte\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Federal Bureau of Investigation Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sFraktion] == 5)//SA Rettungsdienst
						{
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /heal | /rea | /totliste | /cptot | /paket | /members | /d | /m | /r | /notrufliste | /notruf\n");
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /sirenehupe | /letzterfahrer | /feuereinsatz\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | SA Rettungsdienst Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sFraktion] == 8)//SanNews
						{
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /n | /live | /startlotto | /f | /searchwerbetafel | /clearwtafel | /listwtafel | /wtafeltext\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | San News Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 19)//Gangs
					    {
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /f | /kidnap | /gangfight | /gebietinfo | /ctf | /flock | /members | /letzterfahrer | /gangwars | /fl\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang | /gangwar\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Gang Befehle",string2,"Zurück","Abbrechen");
						}
					    else if(SpielerInfo[playerid][sFraktion] == 19)//Hitman
					    {
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /members | /contracts | /maske | /uad | /f\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Hitman Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sFraktion] == 20)//Terroristen
					    {
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /members | /contracts  | /f | /robc4 | /selbstmord | /c4 | /legbombe | /takeoutfit\n");
						    if(SpielerInfo[playerid][sRank] > 5)
						    {
						        strcat(string2,"\n");
						        strcat(string2,"{007DFF}Leader:{FFFFFF} /frakv | /invite | /uninvite | /fpark | /fcarsell | /setrang\n");
							}
							ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Terroristen Befehle",string2,"Zurück","Abbrechen");
						}
					}
					case 2://Nebenjob Befehle
					{
					    if(SpielerInfo[playerid][sNebenjob] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du besitzt kein Nebenjob.");
		    			if(SpielerInfo[playerid][sNebenjob] == 2)//Pizzabote
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /pizza | /reinlegen | /ausliefern | /jc | /jobbase | /kuendigen\n");
						  	ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Pizzabote Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 3)//Kehrmaschinenfahrer
					    {
					        strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Kehrmaschinenfahrer Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 4)//Pilot
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Pilot Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 5)//Busfahrer
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Busfahrer Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 6)//Müllmann
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Müllmann Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 7)//Landwirt
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Landwirt Befehle",string2,"Zurück","Abbrechen");
						}
						else if(SpielerInfo[playerid][sNebenjob] == 10)//Holzfäller
					    {
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /startjob | /jc | /jobbase | /kuendigen\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Holzfäller Befehle",string2,"Zurück","Abbrechen");
						}
					}
					case 3://Fahrzeug Befehle
					{
					    strcat(string2,"{007DFF}Public:{FFFFFF} /fahrzeug | /motor | /licht | /carradio\n");
					    strcat(string2,"{007DFF}Privat:{FFFFFF} /parken | /carlock\n");
						ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Fahrzeug Befehle",string2,"Zurück","Abbrechen");
					}
					case 4://Geschäft Befehle
					{
         				if(SpielerInfo[playerid][sTankstelle] != 0 || SpielerInfo[playerid][sAmmunation] != 0 || SpielerInfo[playerid][sStore] != 0)
         				{
                            strcat(string2,"{007DFF}Allgemein:{FFFFFF} /verwaltung\n");
                            ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Geschäft Befehle",string2,"Zurück","Abbrechen");
						}
						else SendClientMessage(playerid,COLOR_GREY,"Du besitzt kein Geschäft.");
					}
					case 5://Gruppen Befehle
					{
					    if(SpielerInfo[playerid][sGruppe] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Gruppe.");
					    if(SpielerInfo[playerid][sGRank] < 6)
		 				{
		 				    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /glock | /gmembers | /gc\n");
		                    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Gruppen Befehle",string2,"Zurück","Abbrechen");
						}
						else
						{
						    strcat(string2,"{007DFF}Allgemein:{FFFFFF} /glock | /gmembers | /gc\n");
						    strcat(string2,"\n");
						    strcat(string2,"{007DFF}Leader:{FFFFFF} /gpark | /gruppenv | /ginvite | /guninvite | /setgrang\n");
						    ShowPlayerDialog(playerid,DIALOG_HELP1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" | Gruppen Befehle",string2,"Zurück","Abbrechen");
						}
					}
				}
		    }
		}
		case DIALOG_FREIKAUFEN:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)
		    {
				new string[364];
				switch(listitem)
				{
					case 0://Fraktionsfahrzeug
					{
     					mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `vehicles` WHERE `Fraktion` = '%d' AND `Abgeschleppt` = '1'", SpielerInfo[playerid][sFraktion]);
    					mysql_tquery(sqlHandle, string, "onShowTowedFactionVeh", "i", playerid);
					    return 1;
					}
					case 1://Privatfahrzeug
					{
     					mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `vehicles` WHERE `Besitzer` = '%s' AND `Abgeschleppt` = '1'", SpielerInfo[playerid][sName]);
    					mysql_tquery(sqlHandle, string, "onShowTowedPlayerVeh", "i", playerid);
					    return 1;
					}
					case 2://Gruppenfahrzeug
					{
     					mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `vehicles` WHERE `Gruppe` = '%d' AND `Abgeschleppt` = '1'", SpielerInfo[playerid][sGruppe]);
    					mysql_tquery(sqlHandle, string, "onShowTowedGroupVeh", "i", playerid);
					    return 1;
					}
				}
			}
		}
		case DIALOG_TOG:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    switch(listitem)
			    {
			        case 0://OOC
			        {
			            new string[128];
			            if(GlobalVars[OOC] == 0)
			            {
			                format(string,sizeof(string),"%s %s hat den OOC Chat angeschaltet.",AdminName(playerid),SpielerInfo[playerid][sName]);
							SendClientMessageToAll(COLOR_INFO,string);
							GlobalVars[OOC] = 1;
							return 1;
						}
						else
   						{
         					format(string,sizeof(string),"%s %s hat den OOC Chat ausgeschaltet.",AdminName(playerid),SpielerInfo[playerid][sName]);
							SendClientMessageToAll(COLOR_INFO,string);
							GlobalVars[OOC] = 0;
   						}
					}
     				case 1://Werbung
			        {
			            new string[128];
			            if(GlobalVars[Werbung] == 0)
			            {
			                format(string,sizeof(string),"%s %s hat die Werbung deaktiviert.",AdminName(playerid),SpielerInfo[playerid][sName]);
							SendClientMessageToAll(COLOR_INFO,string);
							GlobalVars[Werbung] = 1;
							return 1;
						}
						else
   						{
         					format(string,sizeof(string),"%s %s hat die Werbung aktiviert.",AdminName(playerid),SpielerInfo[playerid][sName]);
							SendClientMessageToAll(COLOR_INFO,string);
							GlobalVars[Werbung] = 0;
   						}
					}
				}
			}
		}
		case DIALOG_BUYGUN:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				new an = GetPVarInt(playerid,"AmmunationID");
				new string[164];
			    switch(listitem)
       			{
			        case 0://Rüstung
			        {
						if(SpielerInfo[playerid][sFraktion] != 2)return SendClientMessage(playerid,COLOR_SORRY,"* Du musst eine Beamtenmarke vorlegen um eine kugelsichere Weste zu erhalten!");
			            SetPVarInt(playerid,"Buygun",1);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amArmour] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine Rüstung.");
			                format(string,sizeof(string),"Möchtest du dir eine Rüstung für %d$ kaufen ?",AmmunationInfo[an][amArmour]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine Rüstung für 500$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 1://Schlagring
			        {
           				SetPVarInt(playerid,"Buygun",2);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amSchlagring] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft kein Schlagring.");
			                format(string,sizeof(string),"Möchtest du dir ein Schlagring für %d$ kaufen ?",AmmunationInfo[an][amSchlagring]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir ein Schlagring für 100$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 2://Messer
			        {
       					SetPVarInt(playerid,"Buygun",3);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amMesser] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft kein Messer.");
			                format(string,sizeof(string),"Möchtest du dir ein Messer für %d$ kaufen ?",AmmunationInfo[an][amMesser]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir ein Messer für 200$ kaufen ?","Kaufen","Zurück");
			            }
			        }
					case 3://Baseballschläger
			        {
      					SetPVarInt(playerid,"Buygun",4);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amBaseball] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft kein Baseballschläger.");
			                format(string,sizeof(string),"Möchtest du dir ein Baseballschläger für %d$ kaufen ?",AmmunationInfo[an][amBaseball]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir ein Baseballschläger für 200$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 4://Deagle
			        {
			            if(SpielerInfo[playerid][sWeaponLic] < 2)return SendClientMessage(playerid,COLOR_SORRY,"* Du benötigst für diese Waffe eine höhre Waffenschein Klasse!");
       					SetPVarInt(playerid,"Buygun",5);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amDeagle] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine Desert Eagle.");
			                format(string,sizeof(string),"Möchtest du dir eine Desert Eagle für %d$ kaufen ?",AmmunationInfo[an][amDeagle]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine Desert Eagle für 2000$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 5://MP5
			        {
			            if(SpielerInfo[playerid][sWeaponLic] < 3)return SendClientMessage(playerid,COLOR_SORRY,"* Du benötigst für diese Waffe eine höhre Waffenschein Klasse!");
      					SetPVarInt(playerid,"Buygun",6);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amMP5] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine MP5.");
			                format(string,sizeof(string),"Möchtest du dir eine MP5 für %d$ kaufen ?",AmmunationInfo[an][amMP5]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine MP5 für 2500$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 6://AK-47
			        {
			            if(SpielerInfo[playerid][sWeaponLic] < 3)return SendClientMessage(playerid,COLOR_SORRY,"* Du benötigst für diese Waffe eine höhre Waffenschein Klasse!");
      					SetPVarInt(playerid,"Buygun",7);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amAK] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine AK-47.");
			                format(string,sizeof(string),"Möchtest du dir eine AK-47 für %d$ kaufen ?",AmmunationInfo[an][amAK]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine AK-47 für 3000$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 7://M4
			        {
			            if(SpielerInfo[playerid][sWeaponLic] < 3)return SendClientMessage(playerid,COLOR_SORRY,"* Du benötigst für diese Waffe eine höhre Waffenschein Klasse!");
      					SetPVarInt(playerid,"Buygun",8);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amM4] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine M4.");
			                format(string,sizeof(string),"Möchtest du dir eine M4 für %d$ kaufen ?",AmmunationInfo[an][amM4]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine M4 für 3500$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 8://Sniper
			        {
			            if(SpielerInfo[playerid][sWeaponLic] < 4)return SendClientMessage(playerid,COLOR_SORRY,"* Du benötigst für diese Waffe eine höhre Waffenschein Klasse!");
      					SetPVarInt(playerid,"Buygun",9);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amSniper] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine Sniper.");
			                format(string,sizeof(string),"Möchtest du dir eine Sniper für %d$ kaufen ?",AmmunationInfo[an][amSniper]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir eine Sniper für 4000$ kaufen ?","Kaufen","Zurück");
			            }
			        }
       				case 9://Fallschirm
			        {
      					SetPVarInt(playerid,"Buygun",10);
			            if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
			            {
			                if(AmmunationInfo[an][amFallschirm] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Dieser Waffenladen verkauft keine Fallschirme.");
			                format(string,sizeof(string),"Möchtest du dir ein Fallschirm für %d$ kaufen ?",AmmunationInfo[an][amFallschirm]);
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen",string,"Kaufen","Zurück");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid,DIALOG_GUN_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Waffenladen","Möchtest du dir ein Fallschirme für 50$ kaufen ?","Kaufen","Zurück");
			            }
			        }
				}
			}
  		}
		case DIALOG_GUN_KAUFEN:
	    {
	        if(response==0){ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");}//Zurück
			else if(response==1)//Weiter
			{
			    new string[164], an = GetPVarInt(playerid,"AmmunationID");
			    if(GetPVarInt(playerid,"Buygun") == 1)
			    {
       				if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amArmour])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine Rüstung für %d$ gekauft.",AmmunationInfo[an][amArmour]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amArmour]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amArmour];
           			    SetPlayerArmour(playerid,100);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine Rüstung für 500$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-500);
           			    SetPlayerArmour(playerid,100);
           			}
			    }
			    else if(GetPVarInt(playerid,"Buygun") == 2)
	   			{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amSchlagring])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir ein Schlagring für %d$ gekauft.",AmmunationInfo[an][amSchlagring]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amSchlagring]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amSchlagring];
           			    GivePlayerWeapon(playerid,WEAPON_BRASSKNUCKLE,1);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 100)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Schlagring für 100$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-100);
           			    GivePlayerWeapon(playerid,WEAPON_BRASSKNUCKLE,1);
           			}
	   			}
			    else if(GetPVarInt(playerid,"Buygun") == 3)
	   			{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amMesser])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir ein Messer für %d$ gekauft.",AmmunationInfo[an][amMesser]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amMesser]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amMesser];
           			    GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 200)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Messer für 200$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-200);
           			    GivePlayerWeapon(playerid,WEAPON_KNIFE,1);
           			}
	   			}
			    else if(GetPVarInt(playerid,"Buygun") == 4)
	   			{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amBaseball])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir ein Baseballschläger für %d$ gekauft.",AmmunationInfo[an][amBaseball]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amBaseball]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amBaseball];
           			    GivePlayerWeapon(playerid,WEAPON_BAT,1);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 200)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Baseballschläger für 200$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-200);
           			    GivePlayerWeapon(playerid,WEAPON_BAT,1);
           			}
   				}
				else if(GetPVarInt(playerid,"Buygun") == 5)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amDeagle])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine Desert Eagle für %d$ gekauft.",AmmunationInfo[an][amDeagle]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amDeagle]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amDeagle];
           			    GivePlayerWeapon(playerid,WEAPON_DEAGLE,50);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 2000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine Desert Eagle für 2000$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-2000);
           			    GivePlayerWeapon(playerid,WEAPON_DEAGLE,50);
           			}
				}
				else if(GetPVarInt(playerid,"Buygun") == 6)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amMP5])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine MP5 für %d$ gekauft.",AmmunationInfo[an][amMP5]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amMP5]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amMP5];
           			    GivePlayerWeapon(playerid,WEAPON_MP5,200);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 2500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine MP5 für 2500$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-2500);
           			    GivePlayerWeapon(playerid,WEAPON_MP5,200);
           			}
				}
				else if(GetPVarInt(playerid,"Buygun") == 7)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amAK])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine AK-47 für %d$ gekauft.",AmmunationInfo[an][amAK]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amAK]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amAK];
           			    GivePlayerWeapon(playerid,WEAPON_AK47,300);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 3000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine AK-47 für 3000$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-3000);
           			    GivePlayerWeapon(playerid,WEAPON_AK47,300);
           			}
				}
				else if(GetPVarInt(playerid,"Buygun") == 8)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amM4])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine M4 für %d$ gekauft.",AmmunationInfo[an][amM4]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amM4]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amM4];
           			    GivePlayerWeapon(playerid,WEAPON_M4,300);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 3500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine M4 für 3500$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-3500);
           			    GivePlayerWeapon(playerid,WEAPON_M4,300);
           			}
				}
				else if(GetPVarInt(playerid,"Buygun") == 9)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amSniper])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir eine Sniper für %d$ gekauft.",AmmunationInfo[an][amSniper]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amSniper]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amSniper];
           			    GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 4000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir eine Sniper für 4000$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-4000);
           			    GivePlayerWeapon(playerid,WEAPON_SNIPER,50);
           			}
				}
				else if(GetPVarInt(playerid,"Buygun") == 10)
				{
   					if(strlen(AmmunationInfo[an][amBesitzer]) > 2)
           			{
           			    if(GetPlayerMoneyEx(playerid) < AmmunationInfo[an][amFallschirm])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    format(string,sizeof(string),"Du hast dir ein Fallschirm für %d$ gekauft.",AmmunationInfo[an][amFallschirm]);
           			    SendClientMessage(playerid,COLOR_SUPER,string);
           			    GivePlayerMoneyEx(playerid,-AmmunationInfo[an][amFallschirm]);
           			    AmmunationInfo[an][amKasse] += AmmunationInfo[an][amFallschirm];
           			    GivePlayerWeapon(playerid,WEAPON_PARACHUTE,1);
           			}
           			else
           			{
           			    if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
           			    SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Fallschirm für 50$ gekauft.");
           			    GivePlayerMoneyEx(playerid,-50);
           			    GivePlayerWeapon(playerid,WEAPON_PARACHUTE,1);
           			}
				}
				DeletePVar(playerid,"Buygun");
				ShowPlayerDialog(playerid,DIALOG_BUYGUN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Waffenladen","{FFFFFF}Rüstung\nSchlagring\nMesser\nBaseballschläger\nDesert Eagle\nMP5\nAK-47\nM4\nSniper\nFallschirm","Kaufen","Verlassen");
			}
		}
		case DIALOG_GARAGE_VERWALTUNG:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new hs = SpielerInfo[playerid][sGarage], string[264];
			    switch(listitem)
       			{
			        case 0://Upgrades
			        {
			            KeineFunktion
					}
     				case 1://Mietbar
			        {
						if(GaragenInfo[hs][giMietbar] == 0)
						{
						    GaragenInfo[hs][giMietbar] = 1;
                        	SendClientMessage(playerid,COLOR_SUPER,"Deine Garage ist nun Mietbar. Bitte denke daran den Mietpreis zu ändern.");
                        	Delete3DTextLabel(GaragenInfo[hs][giText]);
                        	GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
			   				format(string, sizeof(string), "Garage 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndeine Fahrzeuge hier unterzubringen", hs, GaragenInfo[hs][giBesitzer], GaragenInfo[hs][giMiete]);
                        }
                        else
                        {
						    GaragenInfo[hs][giMietbar] = 0;
                        	SendClientMessage(playerid,COLOR_SUPER,"Deine Garage ist nun nicht mehr Mietbar.");
                        	Delete3DTextLabel(GaragenInfo[hs][giText]);
                        	GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
			   				format(string, sizeof(string), "Garage 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, GaragenInfo[hs][giBesitzer]);
						}
						GaragenInfo[hs][giText] = Create3DTextLabel(string, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);
						format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\n%s\nVerkaufen", GarageMietbar(playerid), GarageLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_GARAGE_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
					}
     				case 2://Miete
			        {
						ShowPlayerDialog(playerid,DIALOG_GARAGE_MIETE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Bitte gebe unten den Mietpreis an.","Bestätigen","Zurück");
					}
					case 3://Aufschließen/zuschließen
			        {
                        if(GaragenInfo[hs][giLocked] == 1)
                        {
                            SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Haus aufgeschlossen.");
                            GaragenInfo[hs][giLocked] = 0;
                        }
                        else
                        {
							SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Haus abgeschlossen.");
                            GaragenInfo[hs][giLocked] = 1;
                        }
						format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\n%s\nVerkaufen", GarageMietbar(playerid), GarageLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_GARAGE_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
					}
     				case 4://Verkaufen
			        {
                        ShowPlayerDialog(playerid,DIALOG_BUSINESS_VERKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Staat\nSpieler","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_GARAGE_MIETE:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				new string[224], hs = SpielerInfo[playerid][sGarage];
  				if(strval(inputtext) > 0 && strval(inputtext) < 10000 && IsNumeric(inputtext))
				{
				    GaragenInfo[hs][giMiete] = strval(inputtext);
				    format(string, sizeof(string), "Die Miete beträgt ab sofort %d$.", strval(inputtext));
				    SendClientMessage(playerid,COLOR_SUPER,string);
       				Delete3DTextLabel(GaragenInfo[hs][giText]);
       				GaragenInfo[hs][giText] = Text3D:INVALID_3DTEXT_ID;
	   				format(string, sizeof(string), "Garage 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndeine Fahrzeuge hier unterzubringen", hs, GaragenInfo[hs][giBesitzer], GaragenInfo[hs][giMiete]);
		   			GaragenInfo[hs][giText] = Create3DTextLabel(string, COLOR_WHITE, GaragenInfo[hs][giPos_X], GaragenInfo[hs][giPos_Y], GaragenInfo[hs][giPos_Z], 10.0, 0);
					format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\n%s\nVerkaufen", GarageMietbar(playerid), GarageLocked(playerid));
					ShowPlayerDialog(playerid,DIALOG_GARAGE_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				}
			}
		}
		case DIALOG_GHAUS_VERWALTUNG:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new hs = SpielerInfo[playerid][sGHaus], string[264];
			    switch(listitem)
       			{
			        case 0://Upgrades
			        {
			            ShowPlayerDialog(playerid,DIALOG_GHAUS_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","Health-Upgrade","Weiter","Zurück");
					}
 					case 1://HausKasse
			        {
                        KeineFunktion
					}
					case 2://Aufschließen/zuschließen
			        {
                        if(HausInfo[hs][hsLocked] == 1)
                        {
                            SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Gruppenhaus aufgeschlossen.");
                            HausInfo[hs][hsLocked] = 0;
                        }
                        else
                        {
							SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Gruppenhaus abgeschlossen.");
                            HausInfo[hs][hsLocked] = 1;
                        }
						format(string, sizeof(string), "Upgrades\nHauskasse\n%s\nVerkaufen", GHausLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_GHAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
					}
     				case 5://Verkaufen
			        {
                        ShowPlayerDialog(playerid,DIALOG_BUSINESS_VERKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Staat\nSpieler","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_HAUS_VERWALTUNG:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new hs = SpielerInfo[playerid][sHaus], string[264];
			    switch(listitem)
       			{
			        case 0://Upgrades
			        {
			            ShowPlayerDialog(playerid,DIALOG_HAUS_UPGRADES,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Verwaltung","Health-Upgrade","Weiter","Zurück");
					}
     				case 1://Mietbar
			        {
						if(HausInfo[SpielerInfo[playerid][sHaus]][hsMietbar] == 0)
						{
						    HausInfo[SpielerInfo[playerid][sHaus]][hsMietbar] = 1;
                        	SendClientMessage(playerid,COLOR_SUPER,"Dein Haus ist nun Mietbar. Bitte denke daran den Mietpreis zu ändern.");
                        	Delete3DTextLabel(HausInfo[hs][hsText]);
                        	HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
    	 					if(HausInfo[hs][hsTyp] == 1)//Appartment
			    			{
			    				format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
							}
							else if(HausInfo[hs][hsTyp] == 2)//Haus
				   			{
				   				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
				   			}
				   			else if(HausInfo[hs][hsTyp] == 3)//Villa
				   			{
				   				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
				   			}
                        }
                        else
                        {
						    HausInfo[SpielerInfo[playerid][sHaus]][hsMietbar] = 0;
                        	SendClientMessage(playerid,COLOR_SUPER,"Dein Haus ist nun nicht mehr Mietbar.");
                        	Delete3DTextLabel(HausInfo[hs][hsText]);
                        	HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
				    		if(HausInfo[hs][hsTyp] == 1)//Appartment
						    {
				    			format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
							}
							else if(HausInfo[hs][hsTyp] == 2)//Haus
				   			{
				   				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
				   			}
				   			else if(HausInfo[hs][hsTyp] == 3)//Villa
				   			{
				   				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s", hs, HausInfo[hs][hsBesitzer]);
				   			}
						}
						HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
						format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
					}
     				case 2://Miete
			        {
						ShowPlayerDialog(playerid,DIALOG_HAUS_MIETE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Bitte gebe unten den Mietpreis an.","Bestätigen","Zurück");
					}
 					case 3://HausKasse
			        {
                        KeineFunktion
					}
					case 4://Aufschließen/zuschließen
			        {
                        if(HausInfo[SpielerInfo[playerid][sHaus]][hsLocked] == 1)
                        {
                            SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Haus aufgeschlossen.");
                            HausInfo[SpielerInfo[playerid][sHaus]][hsLocked] = 0;
                        }
                        else
                        {
							SendClientMessage(playerid,COLOR_SUPER,"Du hast dein Haus abgeschlossen.");
                            HausInfo[SpielerInfo[playerid][sHaus]][hsLocked] = 1;
                        }
						format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
					}
     				case 5://Verkaufen
			        {
                        ShowPlayerDialog(playerid,DIALOG_BUSINESS_VERKAUFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung","Staat\nSpieler","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_HAUS_MIETE:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				new string[224], hs = SpielerInfo[playerid][sHaus];
  				if(strval(inputtext) > 0 && strval(inputtext) < 10000 && IsNumeric(inputtext))
				{
				    HausInfo[SpielerInfo[playerid][sHaus]][hsMiete] = strval(inputtext);
				    format(string, sizeof(string), "Die Miete beträgt ab sofort %d$.", strval(inputtext));
				    SendClientMessage(playerid,COLOR_SUPER,string);
       				Delete3DTextLabel(HausInfo[hs][hsText]);
       				HausInfo[hs][hsText] = Text3D:INVALID_3DTEXT_ID;
 					if(HausInfo[hs][hsTyp] == 1)//Appartment
	    			{
	    				format(string, sizeof(string), "Appartment 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
					}
					else if(HausInfo[hs][hsTyp] == 2)//Haus
		   			{
		   				format(string, sizeof(string), "Haus 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
		   			}
		   			else if(HausInfo[hs][hsTyp] == 3)//Villa
		   			{
		   				format(string, sizeof(string), "Villa 'ID: {FF0000}%d{FFFFFF}'\nBesitzer: {FF0000}%s{FFFFFF}\nMiete: {FF0000}%d${FFFFFF}\nBenutze '{FF0000}/mieten{FFFFFF}' um\ndich hier einzumieten", hs, HausInfo[hs][hsBesitzer], HausInfo[hs][hsMiete]);
		   			}
		   			HausInfo[hs][hsText] = Create3DTextLabel(string, COLOR_WHITE, HausInfo[hs][hsPos_X], HausInfo[hs][hsPos_Y], HausInfo[hs][hsPos_Z], 10.0, 0);
					format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
					ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				}
			}
		}
		case DIALOG_HAUS_UPGRADES:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string[224], hs = SpielerInfo[playerid][sHaus];
				if(GetPVarInt(playerid,"HausVerwaltung") == 0)
				{
				    if(HausInfo[hs][hsHealth] == 0)
				    {
				        SetPVarInt(playerid,"HausVerwaltung",1);
				        ShowPlayerDialog(playerid,DIALOG_HAUS_UPGRADES,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Möchtest du dir das Heath-Upgrade für {FF0000}3500${FFFFFF} kaufen ?","Ja","Nein");
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_SORRY,"Dein Haus besitzt bereits das Health-Upgrade.");
       					format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				    }
				}
				else
				{
					if(SpielerInfo[playerid][sBankkonto] < 3500)
				 	{
	 				    SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Konto.");
	 				    DeletePVar(playerid,"HausVerwaltung");
				 	}
	 				else
	 				{
	 				    SpielerInfo[playerid][sBankkonto] -= 3500;
	 				    HausInfo[hs][hsHealth] = 1;
		    			SendClientMessage(playerid,COLOR_SUPER,"Dein Haus besitzt nun das Health-Upgrade. Das Geld wurde von deinem Konto abgebucht.");
	 				    DeletePVar(playerid,"HausVerwaltung");
	 				}
		 			format(string, sizeof(string), "Upgrades\nMietbar: %s\nMiete\nHauskasse\n%s\nVerkaufen", HausMietbar(playerid), HausLocked(playerid));
					ShowPlayerDialog(playerid,DIALOG_HAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				}
			}
		}
		case DIALOG_GHAUS_UPGRADES:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string[224], hs = SpielerInfo[playerid][sGHaus];
				if(GetPVarInt(playerid,"HausVerwaltung") == 0)
				{
				    if(HausInfo[hs][hsHealth] == 0)
				    {
				        SetPVarInt(playerid,"HausVerwaltung",1);
				        ShowPlayerDialog(playerid,DIALOG_GHAUS_UPGRADES,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verwaltung","{FFFFFF}Möchtest du dir das Heath-Upgrade für {FF0000}3500${FFFFFF} kaufen ?","Ja","Nein");
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_SORRY,"Dein Gruppenhaus besitzt bereits das Health-Upgrade.");
       					format(string, sizeof(string), "Upgrades\nHauskasse\n%s\nVerkaufen", GHausLocked(playerid));
						ShowPlayerDialog(playerid,DIALOG_GHAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				    }
				}
				else
				{
					if(SpielerInfo[playerid][sBankkonto] < 3500)
				 	{
	 				    SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Girokonto.");
	 				    DeletePVar(playerid,"HausVerwaltung");
				 	}
	 				else
	 				{
	 				    SpielerInfo[playerid][sBankkonto] -= 3500;
	 				    HausInfo[hs][hsHealth] = 1;
		    			SendClientMessage(playerid,COLOR_SUPER,"Dein Gruppenhaus besitzt nun das Health-Upgrade. Das Geld wurde von deinem Girokonto abgebucht.");
	 				    DeletePVar(playerid,"HausVerwaltung");
	 				}
		 			format(string, sizeof(string), "Upgrades\nHauskasse\n%s\nVerkaufen", GHausLocked(playerid));
					ShowPlayerDialog(playerid,DIALOG_GHAUS_VERWALTUNG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Verwaltung",string,"Weiter","Abbrechen");
				}
			}
		}
		case DIALOG_HAUS_MIETEN:
	    {
	        if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new hs = GetNearHausID(playerid);
				if(SpielerInfo[playerid][sBankkonto] < GetPVarInt(playerid,"MietPreis"))return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld auf dem Konto.");
				SpielerInfo[playerid][sBankkonto] -= HausInfo[hs][hsMiete];
                SpielerInfo[playerid][sMieter] = hs;
				SendClientMessage(playerid,COLOR_SUPER,"Herzlichen Glückwunsch zur Wohnung. Das Geld wurde von deinem Konto abgebucht.");
				SendClientMessage(playerid,COLOR_INFO,"Tipp: Benutze '/spawnchange' um dein Spawnpunkt zu ändern.");
			}
		}
		case DIALOG_FRAKKISTE:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string[164];
				switch(listitem)
				{
				    case 0://Waffen
				    {
 			    		format(string,sizeof(string),"Desert Eagle	(30 Mats)\nMP5		(200 Mats)\nShotgun	(45 Mats)\nAK-47		(300 Mats)\nAlle Waffen	(575 Mats)\n{E0E0E0}Materialien vorhanden: %d",FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats]);
 						ShowPlayerDialog(playerid,DIALOG_FRAKKISTE_WAFFEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste",string,"Weiter","Abbrechen");
				    }
				    case 1://Drogen
				    {
						KeineFunktion
				    }
				    case 2://Materialien
				    {
                        ShowPlayerDialog(playerid,DIALOG_FRAKKISTE_MATS,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Materialien reinlegen\nMaterialien-Stand","Weiter","Abbrechen");
				    }
				    case 3://Bombe
				    {
				    	ShowPlayerDialog(playerid,DIALOG_FRAKKISTE_BOMBE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Bombe reinlegen\nBombe nehmen\nBomben-Stand","Weiter","Abbrechen");
				    }
				}
			}
		}
		case DIALOG_FRAKKISTE_WAFFEN:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string[164];
				switch(listitem)
				{
				    case 0://Desert Eagle
				    {
				        if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] < 30)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht mehr genügend Materialien vorhanden.");
				        GivePlayerWeapon(playerid,WEAPON_DEAGLE,30);
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] -= 30;
                        format(string,sizeof(string),"%s baut sich eine Desert Eagle aus 30 Materialien.",SpielerInfo[playerid][sName]);
						ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
				    }
				    case 1://MP5
				    {
				        if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] < 200)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht mehr genügend Materialien vorhanden.");
				        GivePlayerWeapon(playerid,WEAPON_MP5,200);
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] -= 200;
                        format(string,sizeof(string),"%s baut sich eine MP5 aus 200 Materialien.",SpielerInfo[playerid][sName]);
						ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
				    }
				    case 2://Shotgun
				    {
				        if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] < 45)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht mehr genügend Materialien vorhanden.");
				        GivePlayerWeapon(playerid,WEAPON_SHOTGUN,45);
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] -= 45;
                        format(string,sizeof(string),"%s baut sich eine Shotgun aus 45 Materialien.",SpielerInfo[playerid][sName]);
						ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
				    }
				    case 3://AK-47
				    {
				        if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] < 300)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht mehr genügend Materialien vorhanden.");
				        GivePlayerWeapon(playerid,WEAPON_AK47,300);
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] -= 300;
                        format(string,sizeof(string),"%s baut sich eine AK-47 aus 300 Materialien.",SpielerInfo[playerid][sName]);
						ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
				    }
				    case 4://Alle Waffen
				    {
				    	if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] < 575)return SendClientMessage(playerid,COLOR_SORRY,"Es sind nicht mehr genügend Materialien vorhanden.");
				        GivePlayerWeapon(playerid,WEAPON_DEAGLE,30);
				        GivePlayerWeapon(playerid,WEAPON_MP5,200);
				        GivePlayerWeapon(playerid,WEAPON_SHOTGUN,45);
				        GivePlayerWeapon(playerid,WEAPON_AK47,300);
				        FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] -= 575;
                        format(string,sizeof(string),"%s baut sich aus 575 Materialien alle Waffen.",SpielerInfo[playerid][sName]);
						ProxDetector(7.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
				    }
				}
 			    format(string,sizeof(string),"Desert Eagle	(30 Mats)\nMP5		(200 Mats)\nShotgun	(45 Mats)\nAK-47		(300 Mats)\nAlle Waffen	(575 Mats)\n{E0E0E0}Materialien vorhanden: %d",FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats]);
 				ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste",string,"Weiter","Abbrechen");
			}
		}
		case DIALOG_FRAKKISTE_MATS:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien","Weiter","Abbrechen");}//Zurück
			else if(response==1)//Weiter
			{
			    new string[150];
				switch(listitem)
				{
				    case 0://Reinlegen
				    {
						if(SpielerInfo[playerid][sMaterialien] != 0)
						{
						    SendClientMessage(playerid,COLOR_INFO,"Du hast weitere {FF0000}250{00CDFF} Waffenteile in die Fraktionskiste gelegt.");
						    SpielerInfo[playerid][sMaterialien] = 0;
						    FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats] += 250;
						    ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien","Weiter","Abbrechen");
						}
						else
						{
							SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Waffenteile, die du in die Fraktionskiste legen kannst.");
							ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien","Weiter","Abbrechen");
						}
				    }
				    case 1://Materialien - Stand
				    {
    					format(string,sizeof(string),"In der Fraktionskiste liegen derzeit {FF0000}%d{00CDFF} Waffenteile.",FrakInfo[SpielerInfo[playerid][sFraktion]][fiMats]);
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien","Weiter","Abbrechen");
				    }
				}
			}
		}
		
		case DIALOG_FRAKKISTE_BOMBE:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");}//Zurück
			else if(response==1)//Weiter
			{
			    new string[150];
				switch(listitem)
				{
				    case 0://Reinlegen
				    {
						if(GetPVarInt(playerid,"Bombe") == 1)
						{
						    SendClientMessage(playerid,COLOR_INFO,"Du hast eine Bombe in die Fraktionskiste gelegt.");
						    DeletePVar(playerid,"Bombe");
						    FrakInfo[SpielerInfo[playerid][sFraktion]][fiBomb] += 1;
						    ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
						}
						else
						{
							SendClientMessage(playerid,COLOR_SORRY,"Du besitzt keine Bombe, die du in die Fraktionskiste legen kannst.");
							ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
						}
				    }
				    case 1://Rausholen
				    {
						if(SpielerInfo[playerid][sBombe] == 0)
						{
						    if(SpielerInfo[playerid][sRank] >= 6)
						    {
								if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiBomb] >= 1)
								{
								    SendClientMessage(playerid,COLOR_INFO,"Du hast eine Bombe aus der Fraktionskiste genommen.");
								    FrakInfo[SpielerInfo[playerid][sFraktion]][fiBomb] -= 1;
								    SpielerInfo[playerid][sBombe] = 1;
								    ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
								}
								else
								{
				    				SendClientMessage(playerid,COLOR_SORRY,"Es befindet sich keine Bombe in der Fraktionskiste.");
							    	ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
								}
							}
							else
							{
							    SendClientMessage(playerid,COLOR_SORRY,"Nur der (CO)Leader darf eine Bombe aus der Fraktionskiste nehmen.");
							    ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
							}
						}
						else
						{
							SendClientMessage(playerid,COLOR_SORRY,"Du kannst max. nur eine Bombe tragen.");
							ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
						}
				    }
				    case 2://Bomben - Stand
				    {
    					format(string,sizeof(string),"In der Fraktionskiste liegen derzeit {FF0000}%d{00CDFF} Bomben.",FrakInfo[SpielerInfo[playerid][sFraktion]][fiBomb]);
						SendClientMessage(playerid,COLOR_INFO,string);
						ShowPlayerDialog(playerid,DIALOG_FRAKKISTE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Fraktionskiste","Waffen\nDrogen\nMaterialien\nBombe","Weiter","Abbrechen");
				    }
				}
			}
		}
		case DIALOG_FSCHULE_THEORI:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string[7][164];
				new str[900];
		    	if(GetPVarInt(playerid,"Theori") == 1)
		    	{
					if(GetPVarInt(playerid,"FSchein") == 1)
					{
	    				SetPVarInt(playerid,"Theori",2);
						format(string[0],164,"{FF0000}~ Straßen-Verkehrs-Ordnung (StVO) ~");
						format(string[1],164,"{FFFFFF}Auf mehrspurigen Straßen gilt das Rechtsfahrgebot. Es darf nur auf der linken Spur überholt werden.");
						format(string[2],164,"{FFFFFF}Auf einspurigen Straßen darf nur überholt werden, wenn man den Gegenverkehr nicht gefährdet.");
						format(string[3],164,"{FFFFFF}An ungeregelten Kreuzungen zählt die Rechtsregel. Absperrungen dürfen nicht ignoriert werden.");
						format(string[4],164,"{FFFFFF}Das überholen von rechts, ist auf allen Straßen verboten.");
						format(string[5],164,"{FFFFFF}In ganz San Andreas gilt das Fahren mit Licht ab 19:00h! Einschalten nicht vergessen!");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
					else if(GetPVarInt(playerid,"FSchein") == 2)
					{
 						SetPVarInt(playerid,"Theori",2);
						format(string[0],164,"{FF0000}~ Flug-Verkehrs-Ordnung (FVO) ~");
						format(string[1],164,"{FFFFFF}Im Flugverkehr gilt das Tiefflugverbot (Mind. doppelte Höhe von dem Gebäude, das überflogen wird). ");
						format(string[2],164,"{FFFFFF}Das Landen von Hubschraubern oder Flugzeugen außerhalb von Landebahnen oder Landeplätzen ist verboten!");
						format(string[3],164,"{FFFFFF}Staatsgebäude wie Polizei,- F.B.I,- oder Regierungseinrichtungen zählen als Flugverbotszone!");
						format(string[4],164,"{FFFFFF}Bei Missachtung der Flugverbotszone kann man mit Wanteds oder gar einem Abschuss rechnen.");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
		    	}
		    	else if(GetPVarInt(playerid,"Theori") == 2)
		    	{
  					if(GetPVarInt(playerid,"FSchein") != 2)
					{
			    	    SetPVarInt(playerid,"Theori",3);
			    	    format(string[0],164,"{FF0000}~ Geschwindigkeit ~");
						format(string[1],164,"{FFFFFF}Auf dem Fahrzeug-Tacho wird dir deine aktuelle Geschwindigkeit in KM/H angezeigt.");
						format(string[2],164,"{FFFFFF}Solltest du die maximal erlaubte Geschwindigkeit von 90 KM/H innerhalb der Stadt erreicht haben,");
						format(string[3],164,"{FFFFFF}wird die Tacho-Anzeige mit einer gelben Farbe hinterlegt. Auf Landstraßen und");
						format(string[4],164,"{FFFFFF}Autobahnen gibt es keine Geschwindigkeitsbegrenzung. Die empfohlene maximale");
						format(string[5],164,"{FFFFFF}Geschwindigkeit liegt bei 160 KM/H. Solltest du diese Geschwindigkeit überschreiten,");
						format(string[6],164,"{FFFFFF}wird deine Tacho-Anzeige rot hinterlegt. Drive Safe!");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5],string[6]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
					else
					{
	    				SetPVarInt(playerid,"Theori",3);
			    	    format(string[0],164,"{FF0000}~ Fliegen bei Nacht ~");
						format(string[1],164,"{FFFFFF}In der Nacht ist das Fliegen mit erhöhter Vorsicht erlaubt.");
						format(string[2],164,"{FFFFFF}Polizei und Rettungsdienst-Einheiten sind rund um die Uhr im Einsatz");
						format(string[3],164,"{FFFFFF}und dürfen bei ihrer Arbeit nicht behindert werden!");
						format(string[4],164,"{FFFFFF}Bei Nacht sollte eine Platzrunde um den Flughafen geflogen werden.");
						format(string[5],164,"{FFFFFF}So kann man sich überzeugen, dass die Landebahn auch wirklich frei ist.");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
		    	}
		    	else if(GetPVarInt(playerid,"Theori") == 3)
		    	{
  					if(GetPVarInt(playerid,"FSchein") != 2)
					{
	                    SetPVarInt(playerid,"Theori",4);
	                    format(string[0],164,"{FF0000}~ Einsatzfahrzeuge ~");
						format(string[1],164,"{FFFFFF}Einsatzfahrzeuge zählen als solche, wenn das Blaulicht und die Sirene eingeschalten sind.");
						format(string[2],164,"{FFFFFF}Sollte ein Einsatzfahrzeug hinter dir fahren, so musst du rechts ran fahren um Platz zu machen.");
						format(string[3],164,"{FFFFFF}Das Blockieren von Einsatzfahrzeugen kann mit dem Entzug des Führerscheins geahndet werden.");
						format(string[4],164,"{FFFFFF}Eine Geldstrafe von bis zu 5000$ kann ebenso verlangt werden.");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
					else
					{
     					SetPVarInt(playerid,"Theori",4);
			            format(string[0],164,"{FF0000}~ Ende der Theorie ~");
						format(string[1],164,"{FFFFFF}Hoffentlich hast du dir alles mit vollster Aufmerksamkeit durchgelesen und gemerkt. Du");
						format(string[2],164,"{FFFFFF}hast den Crashkurs nun hinter dir. Es folgt jetzt im direkten Anschluss die");
						format(string[3],164,"{FFFFFF}theoretische Prüfung. Bitte beantworte die folgenden Fragen, indem du mit den");
						format(string[4],164,"{FFFFFF}'PFEILTASTEN', die deiner Meinung nach, richtige Antwort auswählst und mit deiner");
						format(string[5],164,"{FFFFFF}'SPRINTTASTE' die Auswahl bestätigst.");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
		    	}
		    	else if(GetPVarInt(playerid,"Theori") == 4)
		    	{
  					if(GetPVarInt(playerid,"FSchein") != 2)
					{
			    	    SetPVarInt(playerid,"Theori",5);
	                	format(string[0],164,"{FF0000}~ Parkmöglichkeiten ~");
						format(string[1],164,"{FFFFFF}Das Parken deines Fahrzeuges ist lediglich auf Parkplätzen erlaubt. Falls du dein Fahrzeug am");
						format(string[2],164,"{FFFFFF}Seitenrand abstellen möchtest gilt das sogenannte 'Kiss & Ride'-Verfahren. Dies bedeutet");
						format(string[3],164,"{FFFFFF}das du dein Fahrzeug für maximal 3 Minuten dort stehen lassen darfst. Anders ist es wenn");
						format(string[4],164,"{FFFFFF}dein Fahrzeug eine Panne oder keinen Treibstoff mehr hat. Dann hast du sogar die Pflicht das");
						format(string[5],164,"{FFFFFF}Fahrzeug solange an den Rand zu stellen, bis es abgeschleppt wird. Die Polizei sollte informiert werden.");
						format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
						ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
					}
					else
					{
  						DeletePVar(playerid,"Theori");
						ShowMenuForPlayer(test1,playerid);
						SetPVarInt(playerid,"TheoriTest",1);
						TheoriFlugAufgaben(playerid);
					}
		    	}
		    	else if(GetPVarInt(playerid,"Theori") == 5)
		    	{
                    SetPVarInt(playerid,"Theori",6);
		            format(string[0],164,"{FF0000}~ Ende der Theorie ~");
					format(string[1],164,"{FFFFFF}Hoffentlich hast du dir alles mit vollster Aufmerksamkeit durchgelesen und gemerkt. Du");
					format(string[2],164,"{FFFFFF}hast den Crashkurs nun hinter dir. Es folgt jetzt im direkten Anschluss die");
					format(string[3],164,"{FFFFFF}theoretische Prüfung. Bitte beantworte die folgenden Fragen, indem du mit den");
					format(string[4],164,"{FFFFFF}'PFEILTASTEN', die deiner Meinung nach, richtige Antwort auswählst und mit deiner");
					format(string[5],164,"{FFFFFF}'SPRINTTASTE' die Auswahl bestätigst.");
					format(str,sizeof str,"%s\n\n%s\n%s\n%s\n%s\n%s",string[0],string[1],string[2],string[3],string[4],string[5]);
					ShowPlayerDialog(playerid,DIALOG_FSCHULE_THEORI,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Fahrschule",str,"Weiter","");
		    	}
		    	else if(GetPVarInt(playerid,"Theori") == 6)
		    	{
  	    			DeletePVar(playerid,"Theori");
					ShowMenuForPlayer(test1,playerid);
					SetPVarInt(playerid,"TheoriTest",1);
					TheoriAufgaben(playerid);
		    	}
			}
		}
		case DIALOG_STADTPLAN:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Stadthalle
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Stadthalle wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1480.9572,-1743.6293,13.5469,5.0);
					}
	    			case 1://Bank
				    {
  						SendClientMessage(playerid,COLOR_INFO,"Die Bank wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1779.4395,-1722.1451,13.5390,5.0);
					}
					case 2://Fahrschule
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Fahrschule wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1000.9811,-1347.8755,13.3498,5.0);
					}
				    case 3://Autohaus - Los Santos
				    {
						SendClientMessage(playerid,COLOR_INFO,"Das Autohaus in Los Santos wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1863.7770,-1604.8413,13.5391,5.0);
					}
					case 4://Motorradhändler - Los Santos
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Motorradhändler in Los Santos wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1835.1718,-1397.2781,13.5631,5.0);
					}
	    			case 5://Autohaus - San Fierro
				    {
  						SendClientMessage(playerid,COLOR_INFO,"Das Autohaus in San Fierro wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,-1551.6277,1168.3820,7.1875,5.0);
					}
					case 6://Paintball Arena
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Paintball Arena wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1024.1968,-968.8276,42.2900,5.0);
					}
				}
			}
		}
		case DIALOG_NAVI:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Öffentliche Gebäuden
				    {
						ShowPlayerDialog(playerid,DIALOG_NAVI1,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Stadthalle\nBank\nFahrschule\nPaintball Arena\nOBI Baumarkt\nHelmshop","Weiter","Zurück");
					}
  					case 1://Nebenjobs
				    {
        				ShowPlayerDialog(playerid,DIALOG_NAVI2,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Pizzabote\nKehrmaschinenfahrer\nPilot\nBusfahrer\nMüllmann\nLandwirt\nHolzfäller","Weiter","Zurück");
					}
	    			case 2://Autohäuser
				    {
        				ShowPlayerDialog(playerid,DIALOG_NAVI3,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Autohaus - Los Santos\nAutohaus - San Fierro\nMotorradhändler - Los Santos","Weiter","Zurück");
					}
  					case 3://Ammunations
				    {
        				new ammudialog[564];
						for(new amid = 1;amid<MAX_AMMUS;amid++)
					    {
					        if(AmmunationInfo[amid][amErstellt] == false)continue;
        					format(ammudialog,sizeof(ammudialog),"%s\n{FFFFFF}Ammunation: {007DFF}%d{FFFFFF}",ammudialog,amid);
						}
						ShowPlayerDialog(playerid,DIALOG_NAVI4,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Navi",ammudialog,"Marker setzen","Zurück");
					}
					case 4://24/7
				    {
        				new storedialog[564];
						for(new stid = 1;stid<MAX_STORES;stid++)
					    {
							if(StoreInfo[stid][siErstellt] == false)continue;
       						format(storedialog,sizeof(storedialog),"%s\n{FFFFFF}24/7: {007DFF}%d{FFFFFF}",storedialog,stid);
						}
						ShowPlayerDialog(playerid,DIALOG_NAVI5,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Navi",storedialog,"Marker setzen","Zurück");
					}
  					case 5://Tankstellen
				    {
    					new tstelledialog[864];
						for(new tsid = 1;tsid<MAX_TSTELLEN;tsid++)
					    {
							if(TankstellenInfo[tsid][tsErstellt] == false)continue;
       						format(tstelledialog,sizeof(tstelledialog),"%s\n{FFFFFF}Tankstelle: {007DFF}%d{FFFFFF}",tstelledialog,tsid);
						}
						ShowPlayerDialog(playerid,DIALOG_NAVI6,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Navi",tstelledialog,"Marker setzen","Zurück");
					}
  					case 6://Gym
				    {
        				ShowPlayerDialog(playerid,DIALOG_NAVI7,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Gym - Los Santos\nGym - San Fierro\nGym - Las Venturas","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_NAVI1:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Stadthalle
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Stadthalle wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1480.9572,-1743.6293,13.5469,5.0);
					}
	    			case 1://Bank
				    {
  						SendClientMessage(playerid,COLOR_INFO,"Die Bank wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1779.4395,-1722.1451,13.5390,5.0);
					}
					case 2://Fahrschule
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Fahrschule wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1000.9811,-1347.8755,13.3498,5.0);
					}
					case 3://Paintball Arena
				    {
						SendClientMessage(playerid,COLOR_INFO,"Die Paintball Arena wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1024.1968,-968.8276,42.2900,5.0);
					}
					case 4://OBI Baumarkt
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der OBI Baumarkt wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,2512.8335,-1520.2406,23.9982,5.0);
					}
					case 5://Helmshop
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Helmshop wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,816.2079,-1389.0250,13.6198,5.0);
					}
				}
			}
		}
		case DIALOG_NAVI2:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
	    			case 0://Pizzabote
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Pizzabote Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,2113.1394,-1769.8885,13.0996,5.0);
					}
  					case 1://Kehrmschinenfahrer
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Kehrmschinenfahrer Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1416.9246,-1648.7014,13.3828,5.0);
					}
					case 2://Pilot
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Pilot Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1957.0295,-2183.6008,13.5469,5.0);
					}
					case 3://Busfahrer
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Busfahrer Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1514.1377,-2319.1445,13.3828,5.0);
					}
					case 4://Müllmann
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Müllmann Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1734.5929,-2060.1526,13.5910,5.0);
					}
					case 5://Landwirt
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Landwirt Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,-62.7901,76.2742,3.1172,5.0);
					}
					case 6://Holzfäller
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Holzfäller Job wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1106.1093,-299.7448,74.5391,5.0);
					}
				}
			}
		}
		case DIALOG_NAVI3:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Autohaus - Los Santos
				    {
						SendClientMessage(playerid,COLOR_INFO,"Das Autohaus in Los Santos wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1863.7770,-1604.8413,13.5391,5.0);
					}
	    			case 1://Autohaus - San Fierro
				    {
  						SendClientMessage(playerid,COLOR_INFO,"Das Autohaus in San Fierro wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,-1551.6277,1168.3820,7.1875,5.0);
					}
					case 2://Motorradhändler - Los Santos
				    {
						SendClientMessage(playerid,COLOR_INFO,"Der Motorradhändler in Los Santos wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1835.1718,-1397.2781,13.5631,5.0);
					}
				}
			}
		}
		case DIALOG_NAVI4:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    new str[128], ammuid = listitem;
			    ammuid += 1;
				format(str,sizeof(str),"Das Ammunation %d wurde dir auf der Minimap rot makiert.",ammuid);
				SendClientMessage(playerid,COLOR_SUPER,str);
				SetPlayerCheckpoint(playerid,AmmunationInfo[listitem][amPos_X],AmmunationInfo[listitem][amPos_Y],AmmunationInfo[listitem][amPos_Z],5.0);
			}
		}
		case DIALOG_NAVI5:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    new str[128], storeid = listitem;
			    storeid += 1;
				format(str,sizeof(str),"Der 24/7 %d wurde dir auf der Minimap rot makiert.",storeid);
				SendClientMessage(playerid,COLOR_SUPER,str);
				SetPlayerCheckpoint(playerid,StoreInfo[listitem][siPos_X],StoreInfo[listitem][siPos_Y],StoreInfo[listitem][siPos_Z],5.0);
			}
		}
		case DIALOG_NAVI6:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    new str[128], tsid = listitem;
			    tsid += 1;
				format(str,sizeof(str),"Die Tankstelle %d wurde dir auf der Minimap rot makiert.",tsid);
				SendClientMessage(playerid,COLOR_SUPER,str);
				SetPlayerCheckpoint(playerid,TankstellenInfo[listitem][tsPos_X],TankstellenInfo[listitem][tsPos_Y],TankstellenInfo[listitem][tsPos_Z],5.0);
			}
		}
		case DIALOG_NAVI7:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_NAVI,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Navi","Öffentliche Gebäuden\nNebenjobs\nAutohäuser\nAmmunations\n24/7\nTankstellen\nGym","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Gym - Los Santos
				    {
						SendClientMessage(playerid,COLOR_INFO,"Das Gym wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,2227.0601,-1724.0667,13.5506,5.0);
					}
	    			case 1://Gym - San Fierro
				    {
  						SendClientMessage(playerid,COLOR_INFO,"Das Gym wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,-2266.7964,-155.8903,35.3203,5.0);
					}
					case 2://Gym - Las Venturas
				    {
						SendClientMessage(playerid,COLOR_INFO,"Das Gym wurde dir auf der Minimap rot markiert.");
				        SetPlayerCheckpoint(playerid,1953.9388,2294.3423,10.8203,5.0);
					}
				}
			}
		}
		case DIALOG_STORE:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new string2[128], an = GetPVarInt(playerid,"StoreID");
				switch(listitem)
				{
				    case 0://Navigationsgerät
				    {
				        if(GetPVarInt(playerid,"StoreBesitzer") == 1)
				        {
				            if(StoreInfo[an][siNavi] == 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Dieser 24/7 verkauft leider keine Navigationsgeräte.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
							    if(SpielerInfo[playerid][sNavi] == 1)
								{
									SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Navigationsgerät. Benutze '/navi' um ihn zu benutzen.");
									ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
								}
								else
								{
    								SetPVarInt(playerid,"StoreItems",1);
    								format(string2,sizeof(string2),"{FFFFFF}Bist du dir sicher, dass du dir ein\nNavigationsgerät für %d$ kaufen möchtest ?",StoreInfo[an][siNavi]);
		                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string2,"Ja","Nein");
								}
							}
				        }
				        else
				        {
						    if(SpielerInfo[playerid][sNavi] == 1)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Navigationsgerät. Benutze '/navi' um ihn zu benutzen.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
								SetPVarInt(playerid,"StoreItems",1);
								SetPVarInt(playerid,"StaatItems",1);
	                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","{FFFFFF}Bist du dir sicher, dass du dir ein\nNavigationsgerät für 500$ kaufen möchtest ?","Ja","Nein");
							}
				        }
				    }
				    case 1://Handy
				    {
				        if(GetPVarInt(playerid,"StoreBesitzer") == 1)
				        {
				            if(StoreInfo[an][siHandy] == 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Dieser 24/7 verkauft leider keine Handy´s.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
							    if(SpielerInfo[playerid][sHandy] == 1)
								{
									SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Handy. Benutze '/hhelp' um Hilfe zu erhalten.");
									ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
								}
								else
								{
    								SetPVarInt(playerid,"StoreItems",2);
    								format(string2,sizeof(string2),"{FFFFFF}Bist du dir sicher, dass du dir ein\nHandy für %d$ kaufen möchtest ?",StoreInfo[an][siHandy]);
		                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string2,"Ja","Nein");
								}
							}
				        }
				        else
				        {
						    if(SpielerInfo[playerid][sHandy] != 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Handy. Benutze '/hhelp' um Hilfe zu erhalten.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
								SetPVarInt(playerid,"StoreItems",2);
								SetPVarInt(playerid,"StaatItems",1);
	                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","{FFFFFF}Bist du dir sicher, dass du dir ein\nHandy für 500$ kaufen möchtest ?","Ja","Nein");
							}
				        }
				    }
				    case 2://Telefonbuch
				    {
				        if(GetPVarInt(playerid,"StoreBesitzer") == 1)
				        {
				            if(StoreInfo[an][siTelefonbuch] == 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Dieser 24/7 verkauft leider keine Telefonbücher.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
							    if(SpielerInfo[playerid][sTelefonbuch] == 1)
								{
									SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Telefonbuch. Benutze '/nummer' um das Telefonbuch zu benutzen.");
									ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
								}
								else
								{
    								SetPVarInt(playerid,"StoreItems",3);
    								format(string2,sizeof(string2),"{FFFFFF}Bist du dir sicher, dass du dir ein\nTelefonbuch %d$ kaufen möchtest ?",StoreInfo[an][siTelefonbuch]);
		                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string2,"Ja","Nein");
								}
							}
				        }
				        else
				        {
						    if(SpielerInfo[playerid][sTelefonbuch] == 1)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Telefonbuch. Benutze '/nummer' um das Telefonbuch zu benutzen.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
								SetPVarInt(playerid,"StoreItems",3);
								SetPVarInt(playerid,"StaatItems",1);
	                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","{FFFFFF}Bist du dir sicher, dass du dir ein\nTelefonbuch für 500$ kaufen möchtest ?","Ja","Nein");
							}
				        }
				    }
				    case 3://Repairkit
				    {
				        if(GetPVarInt(playerid,"StoreBesitzer") == 1)
				        {
				            if(StoreInfo[an][siRepairkit] == 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Dieser 24/7 verkauft leider kein Repairkit.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
							    if(SpielerInfo[playerid][sRepairkit] == 1)
								{
									SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Repairkit. Benutze '/repairkit' um es zu benutzen.");
									ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
								}
								else
								{
    								SetPVarInt(playerid,"StoreItems",4);
    								format(string2,sizeof(string2),"{FFFFFF}Bist du dir sicher, dass du dir ein\nRepairkit für %d$ kaufen möchtest ?",StoreInfo[an][siRepairkit]);
		                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string2,"Ja","Nein");
								}
							}
				        }
				        else
				        {
						    if(SpielerInfo[playerid][sRepairkit] == 1)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Repairkit. Benutze '/repairkit' um es zu benutzen.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
								SetPVarInt(playerid,"StoreItems",4);
								SetPVarInt(playerid,"StaatItems",1);
	                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","{FFFFFF}Bist du dir sicher, dass du dir ein\nRepairkit für 500$ kaufen möchtest ?","Ja","Nein");
							}
				        }
				    }
				    case 4://MP3-Player
				    {
				        if(GetPVarInt(playerid,"StoreBesitzer") == 1)
				        {
				            if(StoreInfo[an][siMP3] == 0)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Dieser 24/7 verkauft leider kein MP3-Player.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
							    if(SpielerInfo[playerid][sMP3] == 1)
								{
									SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein Repairkit. Benutze '/repairkit' um es zu benutzen.");
									ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
								}
								else
								{
    								SetPVarInt(playerid,"StoreItems",5);
    								format(string2,sizeof(string2),"{FFFFFF}Bist du dir sicher, dass du dir ein\nMP3-Player für %d$ kaufen möchtest ?",StoreInfo[an][siMP3]);
		                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung",string2,"Ja","Nein");
								}
							}
				        }
				        else
				        {
						    if(SpielerInfo[playerid][sMP3] == 1)
							{
								SendClientMessage(playerid,COLOR_SORRY,"Du besitzt bereits ein MP3-Player. Benutze '/mp3' um Musik zu hören.");
								ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
							}
							else
							{
								SetPVarInt(playerid,"StoreItems",5);
								SetPVarInt(playerid,"StaatItems",1);
	                			ShowPlayerDialog(playerid,DIALOG_STORE_KAUFEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kaufbestätigung","{FFFFFF}Bist du dir sicher, dass du dir ein\nMP3-Player für 500$ kaufen möchtest ?","Ja","Nein");
							}
				        }
				    }
				    case 5://Pfandflaschen verkaufen
				    {
						if(SpielerInfo[playerid][sPfandflaschen] == 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast keine Pfandflaschen.");
						new Geld = SpielerInfo[playerid][sPfandflaschen]*25, pfandstring[264];
						format(pfandstring,sizeof(pfandstring),"{FFFFFF}Möchstest du deine %d Pfandflasche(n) für %d$ verkaufen ?\nHinweis: Pro Pfandflasche erhält man +25$",SpielerInfo[playerid][sPfandflaschen],Geld);
						ShowPlayerDialog(playerid,DIALOG_PFANDFLASCHEN,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Verkaufbestätigung",pfandstring,"Ja","Nein");
				    }
				}
			}
		}
		case DIALOG_PFANDFLASCHEN:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    new Geld = SpielerInfo[playerid][sPfandflaschen]*25, str[128];
			    format(str,sizeof(str),"Du hast deine Pfandflaschen für %d$ verkauft. (-1 Beutel)",Geld);
			    SendClientMessage(playerid,COLOR_SUPER,str);
				GivePlayerMoneyEx(playerid,Geld);
				SpielerInfo[playerid][sBeutel]--;
				SpielerInfo[playerid][sPfandflaschen] = 0;
			}
		}
		case DIALOG_STORE_KAUFEN:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    new an = GetPVarInt(playerid,"StoreID");
			    if(GetPVarInt(playerid,"StoreItems") == 1)//Navigationsgerät
			    {
			        if(GetPVarInt(playerid,"StaatItems") == 0)
			        {
				        if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siNavi])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siNavi]);
						StoreInfo[an][siKasse] += StoreInfo[an][siNavi];
						SpielerInfo[playerid][sNavi] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Navigationsgerät gekauft. Benutze '/navi' um ihn zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
					else
					{
     					if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-500);
						SpielerInfo[playerid][sNavi] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Navigationsgerät gekauft. Benutze '/navi' um ihn zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
			    }
			    else if(GetPVarInt(playerid,"StoreItems") == 2)//Handy
			    {
			        if(GetPVarInt(playerid,"StaatItems") == 0)
			        {
				        if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siNavi])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
				        if(SpielerInfo[playerid][sQuest] > 3){SpielerInfo[playerid][sQuest]++;}
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siHandy]);
						StoreInfo[an][siKasse] += StoreInfo[an][siHandy];
						new Nummer[5], message[128];
						format(Nummer, 5, "%d%d%d%d", random(8)+1, random(8)+1, random(8)+1, random(8)+1);
						SpielerInfo[playerid][sHandy] = strval(Nummer);
						SpielerInfo[playerid][sGuthaben] = 30;
						format(message,sizeof(message),"Du hast dir ein Handy gekauft. Deine Handynummer lautet: {FF0000}%d",SpielerInfo[playerid][sHandy]);
						SendClientMessage(playerid,COLOR_SUPER,message);
						SendClientMessage(playerid,COLOR_INFO,"Hinweis: Du hast 30$ Startguthaben erhalten. Benutze '/guthaben' um dein aktuelles Guthaben zu sehen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
					else
					{
     					if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
     					if(SpielerInfo[playerid][sQuest] > 3){SpielerInfo[playerid][sQuest]++;}
						GivePlayerMoneyEx(playerid,-500);
						new Nummer[5], message[128];
						format(Nummer, 5, "%d%d%d%d", random(8)+1, random(8)+1, random(8)+1, random(8)+1);
						SpielerInfo[playerid][sHandy] = strval(Nummer);
						SpielerInfo[playerid][sGuthaben] = 30;
						format(message,sizeof(message),"Du hast dir ein Handy gekauft. Deine Handynummer lautet: {FF0000}%d",SpielerInfo[playerid][sHandy]);
						SendClientMessage(playerid,COLOR_SUPER,message);
						SendClientMessage(playerid,COLOR_INFO,"Hinweis: Du hast 30$ Startguthaben erhalten. Benutze '/guthaben' um dein aktuelles Guthaben zu sehen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
			    }
   				if(GetPVarInt(playerid,"StoreItems") == 3)//Telefonbuch
			    {
			        if(GetPVarInt(playerid,"StaatItems") == 0)
			        {
				        if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siTelefonbuch])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
				        if(SpielerInfo[playerid][sQuest] > 3){SpielerInfo[playerid][sQuest]++;}
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siTelefonbuch]);
						StoreInfo[an][siKasse] += StoreInfo[an][siTelefonbuch];
						SpielerInfo[playerid][sTelefonbuch] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Telefonbuch gekauft. Benutze '/nummer' um das Telefonbuch zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
					else
					{
     					if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
     					if(SpielerInfo[playerid][sQuest] > 3){SpielerInfo[playerid][sQuest]++;}
						GivePlayerMoneyEx(playerid,-500);
						SpielerInfo[playerid][sTelefonbuch] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Telefonbuch gekauft. Benutze '/nummer' um das Telefonbuch zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
			    }
				if(GetPVarInt(playerid,"StoreItems") == 4)//Repairkit
			    {
			        if(GetPVarInt(playerid,"StaatItems") == 0)
			        {
				        if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siRepairkit])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siRepairkit]);
						StoreInfo[an][siKasse] += StoreInfo[an][siRepairkit];
						SpielerInfo[playerid][sRepairkit] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Repairkit gekauft. Benutze '/repairkit' um ihn zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
					else
					{
     					if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-500);
						SpielerInfo[playerid][sRepairkit] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein Repairkit gekauft. Benutze '/repairkit' um ihn zu benutzen.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
			    }
   				if(GetPVarInt(playerid,"StoreItems") == 5)//MP3-Player
			    {
			        if(GetPVarInt(playerid,"StaatItems") == 0)
			        {
				        if(GetPlayerMoneyEx(playerid) < StoreInfo[an][siMP3])return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-StoreInfo[an][siMP3]);
						StoreInfo[an][siKasse] += StoreInfo[an][siMP3];
						SpielerInfo[playerid][sMP3] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein MP3-Player gekauft. Benutze '/mp3' um Musik zu hören.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
					else
					{
     					if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-500);
						SpielerInfo[playerid][sMP3] = 1;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir ein MP3-Player gekauft. Benutze '/mp3' um Musik zu hören.");
						ShowPlayerDialog(playerid,DIALOG_STORE,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - 24/7","Navigationsgerät\nHandy\nTelefonbuch\nRepairkit\nMP3-Player\nPfandflaschen verkaufen","Weiter","Zurück");
					}
			    }
			}
		}
		case DIALOG_SERVICE:
		{
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
			    new str[164],Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
				switch(listitem)
				{
				    case 0://Polizei
				    {
				        if(NotrufSperre[playerid][0] == 1)
						{
		    				SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits einen Streifenwagen angefordert.");
		    				return 1;
						}
						if(CopDuty <= 0)return SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine Polizisten im Dienst.");
		 				if((x > -992.5172 && x < 4000.0000) && (y < 528.0000 && y > -4000.0000))//Los Santos
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Streifenwagen. Ort: Los Santos | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
					    }
						else if((x > -4000.0000 && x < -992.5172) && (y < 4000.0000 && y > -4000.0000))//San Fierro
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Streifenwagen. Ort: San San Fierro | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
						else if((x > -992.5172 && x < 4000.0000) && (y < 4000.0000 && y > 528.0000))//Las Venturas
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Streifenwagen. Ort: Las Venturas | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
		    			foreach(new i : Player)
						{
							if(SpielerInfo[i][sFraktion] != 2)continue;
							if(GetPVarInt(i,"CopDuty") == 0)continue;
							SendClientMessage(i,COLOR_INFO,str);
						}
						NotrufSperre[playerid][0] = 1;
						NotrufTimer[playerid][0] = SetTimerEx("NotrufTimer1",180000,false,"i",playerid);
						SendClientMessage(playerid,COLOR_INFO,"Es wurden alle verfügbaren Polizisten informiert.");
						SetPVarInt(playerid,"NotrufID",1);
				    }
				    case 1://FBI
				    {
				        if(NotrufSperre[playerid][1] == 1)
						{
		    				SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits das FBI angefordert.");
		    				return 1;
						}
						if(FBIDuty <= 0)return SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine FBI Agenten im Dienst.");
		 				if((x > -992.5172 && x < 4000.0000) && (y < 528.0000 && y > -4000.0000))//Los Santos
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt dringend das FBI. Ort: Los Santos | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
					    }
						else if((x > -4000.0000 && x < -992.5172) && (y < 4000.0000 && y > -4000.0000))//San Fierro
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt dringend das FBI. Ort: San San Fierro | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
						else if((x > -992.5172 && x < 4000.0000) && (y < 4000.0000 && y > 528.0000))//Las Venturas
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt dringend das FBI. Ort: Las Venturas | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
		    			foreach(new i : Player)
						{
							if(SpielerInfo[i][sFraktion] != 6)continue;
							if(GetPVarInt(i,"FBIDuty") == 0)continue;
							SendClientMessage(i,COLOR_INFO,str);
						}
						NotrufSperre[playerid][1] = 1;
						NotrufTimer[playerid][1] = SetTimerEx("NotrufTimer2",180000,false,"i",playerid);
						SendClientMessage(playerid,COLOR_INFO,"Das FBI wurde über deinen Anruf informiert.");
						SetPVarInt(playerid,"NotrufID",2);
				    }
				    case 2://Rettungsdienst
					{
     					if(NotrufSperre[playerid][2] == 1)
						{
		    				SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits einen Sanitäter angefordert.");
		    				return 1;
						}
						if(MedicDuty <= 0)return SendClientMessage(playerid,COLOR_SORRY,"Es sind derzeit keine Sanitäter im Dienst.");
			 			if((x > -992.5172 && x < 4000.0000) && (y < 528.0000 && y > -4000.0000))//Los Santos
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Rettungswagen. Ort: Los Santos | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
					    }
						else if((x > -4000.0000 && x < -992.5172) && (y < 4000.0000 && y > -4000.0000))//San Fierro
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Rettungswagen. Ort: San San Fierro | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
						else if((x > -992.5172 && x < 4000.0000) && (y < 4000.0000 && y > 528.0000))//Las Venturas
						{
					    	format(str,sizeof(str),"%s (ID:%d) benötigt einen Rettungswagen. Ort: Las Venturas | Benutze '/notruf [SpielerID]'",SpielerInfo[playerid][sName],playerid);
						}
		    			foreach(new i : Player)
						{
							if(SpielerInfo[i][sFraktion] != 5)continue;
							if(GetPVarInt(i,"MedicDuty") == 0)continue;
							SendClientMessage(i,COLOR_INFO,str);
						}
						NotrufSperre[playerid][2] = 1;
						NotrufTimer[playerid][2] = SetTimerEx("NotrufTimer3",180000,false,"i",playerid);
						SendClientMessage(playerid,COLOR_INFO,"Es wurden alle verfügbaren Sanitäter informiert.");
						SetPVarInt(playerid,"NotrufID",3);
					}
				}
			}
		}
		case DIALOG_CREATECAR:
		{
		    if(response==0){}//Abbrechen
		    else if(response==1)//Weiter
		    {
				SetPVarInt(playerid,"CreateCar_Typ",listitem+1);
				ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die ModelID für das Fahrzeug an.","Weiter","Zurück");
		    }
		}
		case DIALOG_CREATECAR_STEP1:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_CREATECAR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Fraktionsfahrzeug\nAutohausfahrzeug\nNebenjobfahrzeug","Weiter","Abbrechen");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) < 400 || strval(inputtext) > 611 || !IsNumeric(inputtext))return ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die ModelID für das Fahrzeug an.","Weiter","Zurück");
				SetPVarInt(playerid,"CreateCar_ModelID",strval(inputtext));
				//Fraktionsfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 1){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welche Fraktion das Fahrzeug erhalten soll.","Weiter","Zurück");}
                //Autohausfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 2){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welches Autohaus das Fahrzeug erhalten soll.","Weiter","Zurück");}
				//Nebenjobfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 3){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welcher Nebenjob das Fahrzeug erhalten soll.","Weiter","Zurück");}
			}
		}
		case DIALOG_CREATECAR_STEP2:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die ModelID für das Fahrzeug an.","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) < 0 || strval(inputtext) > 19 || !IsNumeric(inputtext))
		        {
		            //Fraktionsfahrzeug
					if(GetPVarInt(playerid,"CreateCar_Typ") == 1){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welche Fraktion das Fahrzeug erhalten soll.","Weiter","Zurück");}
	                //Autohausfahrzeug
					if(GetPVarInt(playerid,"CreateCar_Typ") == 2){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welches Autohaus das Fahrzeug erhalten soll.","Weiter","Zurück");}
					//Nebenjobfahrzeug
					if(GetPVarInt(playerid,"CreateCar_Typ") == 3){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe an welcher Nebenjob das Fahrzeug erhalten soll.","Weiter","Zurück");}
		        }
		        else
		        {
		            SetPVarInt(playerid,"CreateCar_TypWert",strval(inputtext));
		            ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die erste Farbe für das Fahrzeug an.","Weiter","Zurück");
		        }
		    }
		}
		case DIALOG_CREATECAR_STEP3:
		{
		    if(response==0)//Zurück
		    {
		        //Fraktionsfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 1){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"","Bitte gebe an welche Fraktion das Fahrzeug erhalten soll.","Weiter","Zurück");}
                //Autohausfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 2){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"","Bitte gebe an welches Autohaus das Fahrzeug erhalten soll.","Weiter","Zurück");}
				//Nebenjobfahrzeug
				if(GetPVarInt(playerid,"CreateCar_Typ") == 3){ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP2,DIALOG_STYLE_INPUT,"","Bitte gebe an welcher Nebenjob das Fahrzeug erhalten soll.","Weiter","Zurück");}
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) < 0 || strval(inputtext) > 255 || !IsNumeric(inputtext))return ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die erste Farbe für das Fahrzeug an.","Weiter","Zurück");
		        SetPVarInt(playerid,"CreateCar_Color1",strval(inputtext));
		        ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP4,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die zweite Farbe für das Fahrzeug an.","Weiter","Zurück");
		    }
		}
		case DIALOG_CREATECAR_STEP4:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die erste Farbe für das Fahrzeug an.","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) < 0 || strval(inputtext) > 255 || !IsNumeric(inputtext))return ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP4,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die zweite Farbe für das Fahrzeug an.","Weiter","Zurück");
                SetPVarInt(playerid,"CreateCar_Color2",strval(inputtext));
				//Fraktionsfahrzeug
		        if(GetPVarInt(playerid,"CreateCar_Typ") == 1)
				{
    				new vehicleid, Float:Position[4], crstring[256];
				    GetPlayerPos(playerid,Position[0],Position[1],Position[2]);
				    GetPlayerFacingAngle(playerid,Position[3]);
				    
				    vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),-1);
                    CreateFrakNummernSchild(vehicleid,GetPVarInt(playerid,"CreateCar_TypWert"));
					format(crstring,sizeof(crstring),"* Du hast ein Fraktionsfahrzeug erstellt (ModelID: '%d' - Farben: '%d' & '%d' - Fraktion: '%d')",GetPVarInt(playerid,"CreateCar_ModelID"),GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),GetPVarInt(playerid,"CreateCar_TypWert"),-1);
					SendClientMessage(playerid,COLOR_INFO,crstring);
					AC_PutPlayerInVehicleEx(playerid,vehicleid,0);

					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = GetPVarInt(playerid,"CreateCar_ModelID");
					FahrzeugInfo[vehicleid][fPosition][0] = Position[0]; FahrzeugInfo[vehicleid][fPosition][1] = Position[1]; FahrzeugInfo[vehicleid][fPosition][2] = Position[2]; FahrzeugInfo[vehicleid][fPosition][3] = Position[3]; FahrzeugInfo[vehicleid][fColor][1] = GetPVarInt(playerid,"CreateCar_Color2");
				 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = GetPVarInt(playerid,"CreateCar_Color1"); FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter]; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = GetPVarInt(playerid,"CreateCar_TypWert"); FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0;
					FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
					FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
					FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
					FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
					FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, true, bonnet, boot, objective);

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = true;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Fraktion`, `Kennzeichen`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', 'Fraktion')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], FahrzeugInfo[vehicleid][fColor][0], FahrzeugInfo[vehicleid][fColor][1],
					FahrzeugInfo[vehicleid][fFraktion]);
					mysql_tquery(sqlHandle, crstring, "onFactionVehCreated", "i", vehicleid);
					DeletePVar(playerid,"CreateCar_Typ");
					DeletePVar(playerid,"CreateCar_TypWert");
					DeletePVar(playerid,"CreateCar_ModelID");
					DeletePVar(playerid,"CreateCar_Color1");
				}
				//Autohausfahrzeug
		        else if(GetPVarInt(playerid,"CreateCar_Typ") == 2)
				{
		        	ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP5,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe einen Verkaufspreis für das Fahrzeug an.","Weiter","Zurück");
				}
				//Nebenjobfahrzeug
				else if(GetPVarInt(playerid,"CreateCar_Typ") == 3)
				{
				    new vehicleid, Float:Position[4], crstring[256];
				    GetPlayerPos(playerid,Position[0],Position[1],Position[2]);
				    GetPlayerFacingAngle(playerid,Position[3]);
				    

					if(GetPVarInt(playerid,"CreateCar_TypWert") == 1 || GetPVarInt(playerid,"CreateCar_TypWert") == 3 || GetPVarInt(playerid,"CreateCar_TypWert") == 4 ||
					GetPVarInt(playerid,"CreateCar_TypWert") == 5 || GetPVarInt(playerid,"CreateCar_TypWert") == 6)
					{
					    vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),180);
					}
		   			else if(GetPVarInt(playerid,"CreateCar_TypWert") == 2)//Pizzabote
				    {
						vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),600);
					}
					else if(GetPVarInt(playerid,"CreateCar_TypWert") == 7)//Landwirt
					{
					    vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),600);
					}
					else if(GetPVarInt(playerid,"CreateCar_TypWert") == 10)//Holzfäller
					{
					    vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),strval(inputtext),600);
					}
					format(crstring,sizeof(crstring),"* Du hast ein Nebenjobfahrzeug erstellt (ModelID: '%d' - Farben: '%d' & '%d' - Nebenjob: '%d')",GetPVarInt(playerid,"CreateCar_ModelID"),GetPVarInt(playerid,"CreateCar_Color1"),GetPVarInt(playerid,"CreateCar_Color2"),GetPVarInt(playerid,"CreateCar_TypWert"));
					SendClientMessage(playerid,COLOR_INFO,crstring);
					AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
					
					FahrzeugInfo[vehicleid][fErstellt] = true; FahrzeugInfo[vehicleid][fModelID] = GetPVarInt(playerid,"CreateCar_ModelID");
					FahrzeugInfo[vehicleid][fPosition][0] = Position[0]; FahrzeugInfo[vehicleid][fPosition][1] = Position[1]; FahrzeugInfo[vehicleid][fPosition][2] = Position[2]; FahrzeugInfo[vehicleid][fPosition][3] = Position[3]; FahrzeugInfo[vehicleid][fColor][1] = GetPVarInt(playerid,"CreateCar_Color2");
					format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Nebenjob"); FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = GetPVarInt(playerid,"CreateCar_Color1"); FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter]; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = GetPVarInt(playerid,"CreateCar_TypWert");
					FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
					FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
					FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
					FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
					FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;
					SetVehicleNumberPlate(vehicleid,"Nebenjob");
					AddOther(vehicleid);
					
					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = false;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;
					
					mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Nebenjob`, `Kennzeichen`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', 'Nebenjob')"
					,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], FahrzeugInfo[vehicleid][fColor][0], FahrzeugInfo[vehicleid][fColor][1],
					FahrzeugInfo[vehicleid][fNebenjob]);
					mysql_tquery(sqlHandle, crstring, "onJobVehCreated", "i", vehicleid);
					DeletePVar(playerid,"CreateCar_Typ");
					DeletePVar(playerid,"CreateCar_TypWert");
					DeletePVar(playerid,"CreateCar_ModelID");
					DeletePVar(playerid,"CreateCar_Color1");
					DeletePVar(playerid,"CreateCar_Color2");
				}
		    }
		}
		case DIALOG_CREATECAR_STEP5:
		{
		    if(response==0)//Zurück
		    {
		        ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe die erste Farbe für das Fahrzeug an.","Weiter","Zurück");
		    }
		    else if(response==1)//Weiter
		    {
		        if(strval(inputtext) < 0 || strval(inputtext) > 1000000 || !IsNumeric(inputtext))return ShowPlayerDialog(playerid,DIALOG_CREATECAR_STEP5,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Fahrzeugerstellung","Bitte gebe einen Verkaufspreis für das Fahrzeug an.","Weiter","Zurück");
		    	new vehicleid, Float:Position[4], crstring[256];
				GetPlayerPos(playerid,Position[0],Position[1],Position[2]);
				GetPlayerFacingAngle(playerid,Position[3]);
				vehicleid = CreateVehicle(GetPVarInt(playerid,"CreateCar_ModelID"),Position[0],Position[1],Position[2],Position[3],GetPVarInt(playerid,"CreateCar_Color1"),GetPVarInt(playerid,"CreateCar_Color2"),180);
				format(crstring,sizeof(crstring),"* Du hast ein Autohausfahrzeug erstellt (ModelID: '%d' - Farben: '%d' & '%d' - Autohaus: '%d' - Preis: '%d')",GetPVarInt(playerid,"CreateCar_ModelID"),GetPVarInt(playerid,"CreateCar_Color1"),GetPVarInt(playerid,"CreateCar_Color2"),GetPVarInt(playerid,"CreateCar_TypWert"),strval(inputtext));
				SendClientMessage(playerid,COLOR_INFO,crstring);
				AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
				
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, true, false, false, true, false, false, false);
				
				FahrzeugInfo[vehicleid][fErstellt] = true;
				FahrzeugInfo[vehicleid][fModelID] = GetPVarInt(playerid,"CreateCar_ModelID");
				FahrzeugInfo[vehicleid][fPosition][0] = Position[0];
				FahrzeugInfo[vehicleid][fPosition][1] = Position[1];
				FahrzeugInfo[vehicleid][fPosition][2] = Position[2];
				FahrzeugInfo[vehicleid][fPosition][3] = Position[3];
				FahrzeugInfo[vehicleid][fColor][1] = GetPVarInt(playerid,"CreateCar_Color2");
				format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Autohaus");
				FahrzeugInfo[vehicleid][fAbgeschleppt] = 0;
				FahrzeugInfo[vehicleid][fParkkralle] = 0;
				FahrzeugInfo[vehicleid][fKilometer] = 0;
				FahrzeugInfo[vehicleid][fColor][0] = GetPVarInt(playerid,"CreateCar_Color1");
				FahrzeugInfo[vehicleid][fPaintjob] = 3;
				FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];
				FahrzeugInfo[vehicleid][fRang] = 0;
				FahrzeugInfo[vehicleid][fFraktion] = 0;
				FahrzeugInfo[vehicleid][fGruppe] = 0;
				FahrzeugInfo[vehicleid][fFirma] = 0;
				FahrzeugInfo[vehicleid][fAutohaus] = GetPVarInt(playerid,"CreateCar_TypWert");
				FahrzeugInfo[vehicleid][fNebenjob] = 0;
				FahrzeugInfo[vehicleid][fGarage] = 0;
				FahrzeugInfo[vehicleid][fGPark] = 0;
				FahrzeugInfo[vehicleid][fFahrschule] = 0;
				FahrzeugInfo[vehicleid][fSupmobil] = 0;
				FahrzeugInfo[vehicleid][fZiviroller] = 0;
				FahrzeugInfo[vehicleid][fImportCar] = 0;
				FahrzeugInfo[vehicleid][fKurrierCar] = 0;
				FahrzeugInfo[vehicleid][fJobEXP] = 0;
				FahrzeugInfo[vehicleid][fPreis] = strval(inputtext);
				FahrzeugInfo[vehicleid][fBesitzer] = 0;
				format(FahrzeugInfo[vehicleid][fBesitzer], 0, "");
				FahrzeugInfo[vehicleid][fBesitzerID] = 0;
				FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
				FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0;
				FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0; FahrzeugInfo[vehicleid][fTuning][8] = 0;
				FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0;
				FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0;
				SetVehicleNumberPlate(vehicleid,"Autohaus");
				
				format(crstring,sizeof(crstring),"{FE0000}%s {FFFFFF}zu Verkaufen!\nPreis: {FE0000}%d$",FahrzeugName[FahrzeugInfo[vehicleid][fModelID]-400],strval(inputtext));
				FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel(crstring, 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, false);
				Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);

				Motor[vehicleid] = true;
				Licht[vehicleid] = false;
				DOOR[vehicleid] = false;
				Motorhaube[vehicleid] = false;
				Kofferraum[vehicleid] = false;

				mysql_format(sqlHandle, crstring,sizeof(crstring),"INSERT INTO `vehicles` (`ModelID`, `PositionX`, `PositionY`, `PositionZ`, `PositionA`, `Farbe1`, `Farbe2`, `Autohaus`, `Preis`, `Kennzeichen`) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', 'Autohaus')"
				,FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3], GetPVarInt(playerid,"CreateCar_Color1"),GetPVarInt(playerid,"CreateCar_Color2"),
				FahrzeugInfo[vehicleid][fAutohaus],strval(inputtext));
				mysql_tquery(sqlHandle, crstring, "onBuycarCreated", "i", vehicleid);

				DeletePVar(playerid,"CreateCar_Typ");
				DeletePVar(playerid,"CreateCar_TypWert");
				DeletePVar(playerid,"CreateCar_ModelID");
				DeletePVar(playerid,"CreateCar_Color1");
				DeletePVar(playerid,"CreateCar_Color2");
			}
		}
		case DIALOG_KOFFERRAUM:
		{
		    new i = GetPVarInt(playerid,"FahrzeugID");
			if(response==0)//Zurück
			{
			    DeletePVar(playerid,"FahrzeugID");
   				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
    			SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, false, objective);
				Kofferraum[i] = false;
			}
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Geld
				    {
  						ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
				    }
				    case 1://Waffen
				    {
				        DeletePVar(playerid,"FahrzeugID");
						KeineFunktion
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, false, objective);
						Kofferraum[i] = false;
				    }
				    case 2://Drogen
				    {
				        DeletePVar(playerid,"FahrzeugID");
  						KeineFunktion
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, false, objective);
						Kofferraum[i] = false;
				    }
				    case 3://Materialien
				    {
				        DeletePVar(playerid,"FahrzeugID");
						KeineFunktion
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, false, objective);
						Kofferraum[i] = false;
				    }
				    case 4://C4
				    {
                        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C4,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_KOFFERRAUM_C4:
		{
		    new i = GetPVarInt(playerid,"FahrzeugID"), str[264];
			if(response==0){ ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Geld\nWaffen\nDrogen\nMaterialien\nC4","Weiter","Schließen");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Rausholen
				    {
				        SetPVarInt(playerid,"Kofferraum",1);
				        format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du aus dem Kofferraum holen ?",FahrzeugInfo[i][fkC4]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
				    }
				    case 1://Reinlegen
					{
					    SetPVarInt(playerid,"Kofferraum",2);
	        			format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du in den Kofferraum legen ?",FahrzeugInfo[i][fkC4]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_KOFFERRAUM_C41:
		{
		    new i = GetPVarInt(playerid,"FahrzeugID"), str[364];
			if(response==0){ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C4,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    if(GetPVarInt(playerid,"Kofferraum") == 1)//Rausholen
	   			{
	   			    if(strval(inputtext) > 0 && strval(inputtext) < 100000 && IsNumeric(inputtext))
					{
	   			    	if(FahrzeugInfo[i][fkC4] >= strval(inputtext))
						{
						    SetPVarInt(playerid,"Kofferraum",3);
						    SpielerInfo[playerid][sc4] += strval(inputtext);
						    FahrzeugInfo[i][fkC4] -= strval(inputtext);
							format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Du hast {FF0000}%d{FFFFFF} aus dem Kofferraum genommen.",FahrzeugInfo[i][fkC4],strval(inputtext));
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kofferraum",str,"Zurück","");
						}
						else
						{
							format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du aus dem Kofferraum holen ?\n{FF0000}Du kannst nicht soviel C4 aus dem Kofferraum holen. (max. %d)",FahrzeugInfo[i][fkC4],FahrzeugInfo[i][fkC4]);
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
						}
	 				}
	 				else
	 				{
   						format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du aus dem Kofferraum holen ?\n{FF0000}Du kannst nicht soviel C4 aus dem Kofferraum holen.",FahrzeugInfo[i][fkC4]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
	  				}
	   			}
	   			else if(GetPVarInt(playerid,"Kofferraum") == 2)//Reinlegen
	   			{
	   			    if(strval(inputtext) > 0 && strval(inputtext) < 1000000 && IsNumeric(inputtext))
					{
	   			        new Betrag = strval(inputtext)+FahrzeugInfo[i][fkC4];
	   			    	if(SpielerInfo[playerid][sc4] < strval(inputtext))
	   			    	{
	   			    	    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C4,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
	   			    	    SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend C4 bei dir.");
	   			    	    return 1;
	   			    	}
	   			    	if(Betrag <= 100000)
						{
						    SetPVarInt(playerid,"Kofferraum",3);
						    SpielerInfo[playerid][sc4] -= strval(inputtext);
						    FahrzeugInfo[i][fkC4] = Betrag;
							format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d$n\n{FFFFFF}Das C4 in Höhe von {FF0000}%d{FFFFFF} wurde in den Kofferraum gelegt.",FahrzeugInfo[i][fkC4],strval(inputtext));
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kofferraum",str,"Zurück","");
						}
						else
						{
							format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du in den Kofferraum legen ?\n{FF0000}Du kannst nicht soviel C4 in das Fahreug legen. (max. 100.000)",FahrzeugInfo[i][fkC4]);
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
						}
	 				}
	 				else
	 				{
   						format(str,sizeof(str),"{FFFFFF}C4 im Kofferraum: {FF0000}%d\n\n{FFFFFF}Wie viel C4 möchtest du in den Kofferraum legen ?\n{FF0000}Du kannst nicht soviel C4 in das Fahreug legen.",FahrzeugInfo[i][fkC4]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_C41,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
	  				}
	   			}
	   			else if(GetPVarInt(playerid,"Kofferraum") == 3)//Erfolgreich
	   			{
	   			    DeletePVar(playerid,"Kofferraum");
	   			    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
	   			}
			}
		}
		case DIALOG_KOFFERRAUM_GELD:
		{
		    new i = GetPVarInt(playerid,"FahrzeugID"), str[264];
			if(response==0){ ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Geld\nWaffen\nDrogen\nMaterialien\nC4","Weiter","Schließen");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Rausholen
				    {
				        SetPVarInt(playerid,"Kofferraum",1);
				        format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du aus dem Kofferraum holen ?",FahrzeugInfo[i][fkGeld]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
				    }
				    case 1://Reinlegen
					{
					    SetPVarInt(playerid,"Kofferraum",2);
	        			format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du in den Kofferraum legen ?",FahrzeugInfo[i][fkGeld]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
					}
				}
			}
		}
		case DIALOG_KOFFERRAUM_GELD1:
		{
		    new i = GetPVarInt(playerid,"FahrzeugID"), str[364];
			if(response==0){ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");}//Zurück
			else if(response==1)//Weiter
			{
			    if(GetPVarInt(playerid,"Kofferraum") == 1)//Rausholen
	   			{
	   			    if(strval(inputtext) > 0 && strval(inputtext) < 100000 && IsNumeric(inputtext))
					{
	   			    	if(FahrzeugInfo[i][fkGeld] >= strval(inputtext))
						{
						    SetPVarInt(playerid,"Kofferraum",3);
						    GivePlayerMoneyEx(playerid,strval(inputtext));
						    FahrzeugInfo[i][fkGeld] -= strval(inputtext);
							format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Du hast {FF0000}%d${FFFFFF} aus dem Kofferraum genommen.",FahrzeugInfo[i][fkGeld],strval(inputtext));
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kofferraum",str,"Zurück","");
						}
						else
						{
							format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du aus dem Kofferraum holen ?\n{FF0000}Du kannst nicht soviel Geld aus dem Kofferraum holen. (max. %d$)",FahrzeugInfo[i][fkGeld],FahrzeugInfo[i][fkGeld]);
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
						}
	 				}
	 				else
	 				{
   						format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du aus dem Kofferraum holen ?\n{FF0000}Du kannst nicht soviel Geld aus dem Kofferraum holen.",FahrzeugInfo[i][fkGeld]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
	  				}
	   			}
	   			else if(GetPVarInt(playerid,"Kofferraum") == 2)//Reinlegen
	   			{
	   			    if(strval(inputtext) > 0 && strval(inputtext) < 1000000 && IsNumeric(inputtext))
					{
	   			        new Betrag = strval(inputtext)+FahrzeugInfo[i][fkGeld];
	   			    	if(GetPlayerMoneyEx(playerid) < strval(inputtext))
	   			    	{
	   			    	    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
	   			    	    SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld bei dir.");
	   			    	    return 1;
	   			    	}
	   			    	if(Betrag <= 100000)
						{
						    SetPVarInt(playerid,"Kofferraum",3);
						    GivePlayerMoneyEx(playerid,-strval(inputtext));
						    FahrzeugInfo[i][fkGeld] = Betrag;
							format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Das Geld in Höhe von {FF0000}%d${FFFFFF} wurde in den Kofferraum gelegt.",FahrzeugInfo[i][fkGeld],strval(inputtext));
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Kofferraum",str,"Zurück","");
						}
						else
						{
							format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du in den Kofferraum legen ?\n{FF0000}Du kannst nicht soviel Geld in das Fahreug legen. (max. 100.000$)",FahrzeugInfo[i][fkGeld]);
				        	ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
						}
	 				}
	 				else
	 				{
   						format(str,sizeof(str),"{FFFFFF}Geld im Kofferraum: {FF0000}%d$\n\n{FFFFFF}Wie viel Geld möchtest du in den Kofferraum legen ?\n{FF0000}Du kannst nicht soviel Geld in das Fahreug legen.",FahrzeugInfo[i][fkGeld]);
				        ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD1,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Kofferraum",str,"Weiter","Zurück");
	  				}
	   			}
	   			else if(GetPVarInt(playerid,"Kofferraum") == 3)//Erfolgreich
	   			{
	   			    DeletePVar(playerid,"Kofferraum");
	   			    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_GELD,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Kofferraum","Rausholen\nReinlegen","Weiter","Zurück");
	   			}
			}
		}
		case DIALOG_PAINTBALL:
		{
		    new str[264];
			if(response==0){}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Deagle Only
				    {
				        SendClientMessage(playerid,COLOR_INFO,"Du kannst die Paintballarena jederzeit mit '/verlassen' verlassen.");
				        foreach(new i : Player)
						{
							if(GetPVarInt(i,"Paintball") != 1)continue;
							format(str,sizeof(str),"%s hat die Paintballarena betreten.",SpielerInfo[playerid][sName]);
							SendClientMessage(i,COLOR_YELLOW,str);
						}
						PaintballSpieler[0]++;
						SetPVarInt(playerid,"Paintball",1);
						GivePlayerMoneyEx(playerid,-250);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
						SetPlayerArmour(playerid,0);
						SetPlayerHealth(playerid,100);
		    			SetPlayerInterior(playerid,1);
					    SetPlayerVirtualWorld(playerid,1);

						new rand = random(8);
						if(rand == 0)//Position 1
						{
			   				SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
						}
						else if(rand == 1)//Position 2
						{
						    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
						    SetPlayerFacingAngle(playerid,356.6723);
						}
						else if(rand == 2)//Position 3
						{
		    				SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
						    SetPlayerFacingAngle(playerid,54.3028);
						}
						else if(rand == 3)//Position 4
						{
		    				SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
						    SetPlayerFacingAngle(playerid,353.1789);
						}
						else if(rand == 4)//Position 5
						{
						    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
						    SetPlayerFacingAngle(playerid,268.2413);
						}
						else if(rand == 5)//Position 6
						{
						    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
						    SetPlayerFacingAngle(playerid,98.4130);
						}
						else if(rand == 6)//Position 7
		    			{
						    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
						    SetPlayerFacingAngle(playerid,356.2654);
						}
						else if(rand == 7)//Position 8
		    			{
						    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
						    SetPlayerFacingAngle(playerid,358.4588);
						}
				    }
				    case 1://Deagle Shoutgun
				    {
				        SendClientMessage(playerid,COLOR_INFO,"Du kannst die Paintballarena jederzeit mit '/verlassen' verlassen.");
        				foreach(new i : Player)
						{
							if(GetPVarInt(i,"Paintball") != 2)continue;
							format(str,sizeof(str),"%s hat die Paintballarena betreten.",SpielerInfo[playerid][sName]);
							SendClientMessage(i,COLOR_YELLOW,str);
						}
						PaintballSpieler[1]++;
						SetPVarInt(playerid,"Paintball",2);
						GivePlayerMoneyEx(playerid,-250);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
						GivePlayerWeapon(playerid,WEAPON_SHOTGUN,200);
						SetPlayerArmour(playerid,0);
						SetPlayerHealth(playerid,100);
		    			SetPlayerInterior(playerid,1);
					    SetPlayerVirtualWorld(playerid,2);

						new rand = random(8);
						if(rand == 0)//Position 1
						{
			   				SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
						}
						else if(rand == 1)//Position 2
						{
						    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
						    SetPlayerFacingAngle(playerid,356.6723);
						}
						else if(rand == 2)//Position 3
						{
		    				SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
						    SetPlayerFacingAngle(playerid,54.3028);
						}
						else if(rand == 3)//Position 4
						{
		    				SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
						    SetPlayerFacingAngle(playerid,353.1789);
						}
						else if(rand == 4)//Position 5
						{
						    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
						    SetPlayerFacingAngle(playerid,268.2413);
						}
						else if(rand == 5)//Position 6
						{
						    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
						    SetPlayerFacingAngle(playerid,98.4130);
						}
						else if(rand == 6)//Position 7
		    			{
						    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
						    SetPlayerFacingAngle(playerid,356.2654);
						}
						else if(rand == 7)//Position 8
		    			{
						    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
						    SetPlayerFacingAngle(playerid,358.4588);
						}
				    }
				    case 2://1vs1
				    {
    					format(str,sizeof(str),"{FFFFFF}Arena: {FF0000}1{FFFFFF} 		| Spieler: {FF0000}%d/2\n{FFFFFF}Arena: {FF0000}2{FFFFFF} 		| Spieler: {FF0000}%d/2\n{FFFFFF}Arena: {FF0000}3{FFFFFF} 		| Spieler: {FF0000}%d/2",PaintballSpieler[2],PaintballSpieler[3],PaintballSpieler[4]);
						ShowPlayerDialog(playerid,DIALOG_PAINTBALL_1VS1,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Paintball",str,"Beitreten","Zurück");
				    }
				}
			}
		}
		case DIALOG_PAINTBALL_1VS1:
		{
		    new str[264];
			if(response==0)//Zurück
			{
				format(str,sizeof(str),"{FFFFFF}Arena: {FF0000}Deagle Only{FFFFFF} 			| Spieler: {FF0000}%d\n{FFFFFF}Arena: {FF0000}Deagle & Shotgun{FFFFFF} 		| Spieler: {FF0000}%d\n{FFFFFF}Arena: {FF0000}1vs1{FFFFFF}",PaintballSpieler[0],PaintballSpieler[1]);
				ShowPlayerDialog(playerid,DIALOG_PAINTBALL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Paintball",str,"Weiter","Zurück");
			}
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Arena1
				    {
				        if(PaintballSpieler[2] < 2)
				        {
				            SendClientMessage(playerid,COLOR_INFO,"Du kannst die Paintballarena jederzeit mit '/verlassen' verlassen.");
        					foreach(new i : Player)
							{
								if(GetPVarInt(i,"Paintball") != 3)continue;
								format(str,sizeof(str),"%s hat die Paintballarena betreten.",SpielerInfo[playerid][sName]);
								SendClientMessage(i,COLOR_YELLOW,str);
							}
							PaintballSpieler[2]++;
							SetPVarInt(playerid,"Paintball",3);
							GivePlayerMoneyEx(playerid,-250);
							ResetPlayerWeapons(playerid);
							GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
							SetPlayerArmour(playerid,0);
							SetPlayerHealth(playerid,100);
			    			SetPlayerInterior(playerid,1);
						    SetPlayerVirtualWorld(playerid,3);

							new rand = random(8);
							if(rand == 0)//Position 1
							{
				   				SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
							}
							else if(rand == 1)//Position 2
							{
							    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
							    SetPlayerFacingAngle(playerid,356.6723);
							}
							else if(rand == 2)//Position 3
							{
			    				SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
							    SetPlayerFacingAngle(playerid,54.3028);
							}
							else if(rand == 3)//Position 4
							{
			    				SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
							    SetPlayerFacingAngle(playerid,353.1789);
							}
							else if(rand == 4)//Position 5
							{
							    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
							    SetPlayerFacingAngle(playerid,268.2413);
							}
							else if(rand == 5)//Position 6
							{
							    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
							    SetPlayerFacingAngle(playerid,98.4130);
							}
							else if(rand == 6)//Position 7
			    			{
							    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
							    SetPlayerFacingAngle(playerid,356.2654);
							}
							else if(rand == 7)//Position 8
			    			{
							    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
							    SetPlayerFacingAngle(playerid,358.4588);
							}
				        }
				        else SendClientMessage(playerid,COLOR_SORRY,"Die Arena 1 ist belegt.");
				    }
				    case 1://Arena2
				    {
        				if(PaintballSpieler[3] < 2)
				        {
				            SendClientMessage(playerid,COLOR_INFO,"Du kannst die Paintballarena jederzeit mit '/verlassen' verlassen.");
        					foreach(new i : Player)
							{
								if(GetPVarInt(i,"Paintball") != 4)continue;
								format(str,sizeof(str),"%s hat die Paintballarena betreten.",SpielerInfo[playerid][sName]);
								SendClientMessage(i,COLOR_YELLOW,str);
							}
							PaintballSpieler[3]++;
							SetPVarInt(playerid,"Paintball",4);
							GivePlayerMoneyEx(playerid,-250);
							ResetPlayerWeapons(playerid);
							GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
							SetPlayerArmour(playerid,0);
							SetPlayerHealth(playerid,100);
			    			SetPlayerInterior(playerid,1);
						    SetPlayerVirtualWorld(playerid,4);

							new rand = random(8);
							if(rand == 0)//Position 1
							{
				   				SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
							}
							else if(rand == 1)//Position 2
							{
							    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
							    SetPlayerFacingAngle(playerid,356.6723);
							}
							else if(rand == 2)//Position 3
							{
			    				SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
							    SetPlayerFacingAngle(playerid,54.3028);
							}
							else if(rand == 3)//Position 4
							{
			    				SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
							    SetPlayerFacingAngle(playerid,353.1789);
							}
							else if(rand == 4)//Position 5
							{
							    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
							    SetPlayerFacingAngle(playerid,268.2413);
							}
							else if(rand == 5)//Position 6
							{
							    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
							    SetPlayerFacingAngle(playerid,98.4130);
							}
							else if(rand == 6)//Position 7
			    			{
							    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
							    SetPlayerFacingAngle(playerid,356.2654);
							}
							else if(rand == 7)//Position 8
			    			{
							    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
							    SetPlayerFacingAngle(playerid,358.4588);
							}
				        }
				        else SendClientMessage(playerid,COLOR_SORRY,"Die Arena 2 ist belegt.");
				    }
				    case 2://Arena3
				    {
    					if(PaintballSpieler[4] < 2)
				        {
				            SendClientMessage(playerid,COLOR_INFO,"Du kannst die Paintballarena jederzeit mit '/verlassen' verlassen.");
        					foreach(new i : Player)
							{
								if(GetPVarInt(i,"Paintball") != 5)continue;
								format(str,sizeof(str),"%s hat die Paintballarena betreten.",SpielerInfo[playerid][sName]);
								SendClientMessage(i,COLOR_YELLOW,str);
							}
							PaintballSpieler[4]++;
							SetPVarInt(playerid,"Paintball",5);
							GivePlayerMoneyEx(playerid,-250);
							ResetPlayerWeapons(playerid);
							GivePlayerWeapon(playerid,WEAPON_DEAGLE,200);
							SetPlayerArmour(playerid,0);
							SetPlayerHealth(playerid,100);
			    			SetPlayerInterior(playerid,1);
						    SetPlayerVirtualWorld(playerid,5);

							new rand = random(8);
							if(rand == 0)//Position 1
							{
				   				SetPlayerPos(playerid,2169.461181,1618.798339,999.976562);
							}
							else if(rand == 1)//Position 2
							{
							    SetPlayerPos(playerid,2175.5515,1577.9655,999.9684);
							    SetPlayerFacingAngle(playerid,356.6723);
							}
							else if(rand == 2)//Position 3
							{
			    				SetPlayerPos(playerid,2190.0120,1577.5569,999.9658);
							    SetPlayerFacingAngle(playerid,54.3028);
							}
							else if(rand == 3)//Position 4
							{
			    				SetPlayerPos(playerid,2205.3918,1580.6798,999.9794);
							    SetPlayerFacingAngle(playerid,353.1789);
							}
							else if(rand == 4)//Position 5
							{
							    SetPlayerPos(playerid,2208.2175,1552.1301,1007.2906);
							    SetPlayerFacingAngle(playerid,268.2413);
							}
							else if(rand == 5)//Position 6
							{
							    SetPlayerPos(playerid,2229.6868,1597.1917,999.9677);
							    SetPlayerFacingAngle(playerid,98.4130);
							}
							else if(rand == 6)//Position 7
			    			{
							    SetPlayerPos(playerid,2218.3252,1613.9906,999.9827);
							    SetPlayerFacingAngle(playerid,356.2654);
							}
							else if(rand == 7)//Position 8
			    			{
							    SetPlayerPos(playerid,2204.7673,1609.1569,999.9720);
							    SetPlayerFacingAngle(playerid,358.4588);
							}
				        }
				        else SendClientMessage(playerid,COLOR_SORRY,"Die Arena 3 ist belegt.");
				    }
				}
			}
		}
		case DIALOG_LINIEN:
		{
		    new str[364];
			if(response==0)//Zurück
			{
		 		if(GetPVarInt(playerid,"BusfahrerJobt") == 1)
            	{
					format(str,sizeof(str),"{FFFFFF}Linie {FF0000}1 {FFFFFF}| Benötigte Erfahrung: {FF0000}0\n{FFFFFF}Linie {FF0000}2 {FFFFFF}| Benötigte Erfahrung: {FF0000}15\n{FFFFFF}Linie {FF0000}3 {FFFFFF}| Benötigte Erfahrung: {FF0000}40\n{FFFFFF}Linie {FF0000}4 {FFFFFF}| Benötigte Erfahrung: {FF0000}70\n");
					ShowPlayerDialog(playerid,DIALOG_LINIEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Busfahrer",str,"Starten","Abbrechen");
            	}
			}
			else if(response==1)//Weiter
			{
			    new tmpcar = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
				    case 0://Linie1
				    {
				        DeletePVar(playerid,"BusfahrerJobt");
 		    			SetPVarInt(playerid,"BusID",tmpcar);
			 		    SetPVarInt(playerid,"BusfahrerArbeitet",1);
			 		    SetPVarInt(playerid,"BusfahrerLinie",1);
			 		    SetPVarInt(playerid,"BusfahrerRoute",1);
			 		    FahrzeugInfo[tmpcar][fJobFahrer] = playerid;
    		    		format(str, sizeof(str), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nLinie: {FF0000}1{FFFFFF}", SpielerInfo[playerid][sName]);
						Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, str);
						SetPlayerCheckpoint(playerid,BusRouteInfo[0][bPos_X],BusRouteInfo[0][bPos_Y],BusRouteInfo[0][bPos_Z],5.0);
						SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Fahre die einzelnen Haltestellen ab. Begib dich nun zum roten Marker.");
				    }
				    case 1://Linie2
				    {
                        if(SpielerInfo[playerid][sJobEXP][4] >= 15)
                        {
                            DeletePVar(playerid,"BusfahrerJobt");
				 		    SetPVarInt(playerid,"BusID",tmpcar);
				 		    SetPVarInt(playerid,"BusfahrerArbeitet",1);
				 		    SetPVarInt(playerid,"BusfahrerLinie",2);
				 		    SetPVarInt(playerid,"BusfahrerRoute",13);
				 		    FahrzeugInfo[tmpcar][fJobFahrer] = playerid;
    		    			format(str, sizeof(str), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nLinie: {FF0000}2{FFFFFF}", SpielerInfo[playerid][sName]);
							Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, str);
							SetPlayerCheckpoint(playerid,BusRouteInfo[12][bPos_X],BusRouteInfo[12][bPos_Y],BusRouteInfo[12][bPos_Z],5.0);
							SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Fahre die einzelnen Haltestellen ab. Begib dich nun zum roten Marker.");
                        }
                        else SendClientMessage(playerid,COLOR_SORRY,"Für Linie 2 benötigst du 15 EXP.");
				    }
				    case 2://Linie3
				    {
                        if(SpielerInfo[playerid][sJobEXP][4] >= 40)
                        {
                            DeletePVar(playerid,"BusfahrerJobt");
	 		    			SetPVarInt(playerid,"BusID",tmpcar);
				 		    SetPVarInt(playerid,"BusfahrerArbeitet",1);
				 		    SetPVarInt(playerid,"BusfahrerLinie",3);
				 		    SetPVarInt(playerid,"BusfahrerRoute",28);
				 		    FahrzeugInfo[tmpcar][fJobFahrer] = playerid;
	    		    		format(str, sizeof(str), "Jobfahrzeug von\n{FE0000}%s{FFFFFF}\nLinie: {FF0000}3{FFFFFF}", SpielerInfo[playerid][sName]);
							Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, str);
							SetPlayerCheckpoint(playerid,BusRouteInfo[27][bPos_X],BusRouteInfo[27][bPos_Y],BusRouteInfo[27][bPos_Z],5.0);
							SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Fahre die einzelnen Haltestellen ab. Begib dich nun zum roten Marker.");
                        }
                        else SendClientMessage(playerid,COLOR_SORRY,"Für Linie 3 benötigst du 40 EXP.");
				    }
				    case 3://Linie4
				    {
                        if(SpielerInfo[playerid][sJobEXP][4] >= 70)
                        {
                            DeletePVar(playerid,"BusfahrerJobt");
	    					SetPVarInt(playerid,"BusID",tmpcar);
				 		    SetPVarInt(playerid,"BusfahrerArbeitet",1);
				 		    SetPVarInt(playerid,"BusfahrerLinie",4);
				 		    SetPVarInt(playerid,"BusfahrerRoute",39);
				 		    FahrzeugInfo[tmpcar][fJobFahrer] = playerid;
	    		    		format(str, sizeof(str), "Jobfahrzeug\n{FE0000}%s{FFFFFF}\nLinie: {FF0000}4{FFFFFF}", SpielerInfo[playerid][sName]);
							Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, str);
							SetPlayerCheckpoint(playerid,BusRouteInfo[38][bPos_X],BusRouteInfo[38][bPos_Y],BusRouteInfo[38][bPos_Z],5.0);
							SendClientMessage(playerid,COLOR_SUPER,"Dann mal ran an die Arbeit! Fahre die einzelnen Haltestellen ab. Begib dich nun zum roten Marker.");
                        }
                        else SendClientMessage(playerid,COLOR_SORRY,"Für Linie 4 benötigst du 70 EXP.");
				    }
				}
			}
		}
		case DIALOG_BASE_AUSWAHL:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_BASE_AUSWAHL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Base Auswahl","Los Santos\nSan Fiero\nLas Venturas","Auswählen","");}//Zurück
			else if(response==1)//Weiter
			{
				switch(listitem)
				{
				    case 0://Los Santos
				    {
  		    			SetTimerEx("Unfreeze",3000,false,"i",playerid);
   		    			TogglePlayerControllable(playerid, false);
   		   				SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
				        SetPlayerPos(playerid,1609.2104,-1667.6410,1257.7506);
					    SetPlayerFacingAngle(playerid, 177.1248);
					    SetPlayerInterior(playerid,0);
					    SetCameraBehindPlayer(playerid);
				    }
				    case 1://San Fiero
				    {
				        TogglePlayerControllable(playerid,true);
		  		    	SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
				        SetPlayerPos(playerid,227.9015,109.3576,1003.2188);
					    SetPlayerFacingAngle(playerid, 1.8993);
					    SetPlayerInterior(playerid,10);
					    SetCameraBehindPlayer(playerid);
				    }
				    case 2://Las Venturas
				    {
				        TogglePlayerControllable(playerid,true);
  		    			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
				        SetPlayerPos(playerid,196.9430,168.7099,1003.0234);
					    SetPlayerFacingAngle(playerid, 271.0790);
					    SetPlayerInterior(playerid,3);
					    SetCameraBehindPlayer(playerid);
					    DeletePVar(playerid,"PolizeiBase");
				    }
 				   	case 3://Dillimore
				    {
				        TogglePlayerControllable(playerid,true);
  		    			SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
				        SetPlayerPos(playerid,321.9377,308.5419,999.1484);
					    SetPlayerFacingAngle(playerid, 180.5249);
					    SetPlayerInterior(playerid,5);
					    SetCameraBehindPlayer(playerid);
					    DeletePVar(playerid,"PolizeiBase");
				    }
				}
			}
		}
		case DIALOG_MISSION:
		{
		    if(response==0){SendClientMessage(playerid,COLOR_SORRY,"Du hast die Mission abgelehnt.");}
		    else if(response==1)
		    {
		        new Float:Pos[4], Color[2], modelid, vehicleid, str[144];
				if(GetPVarInt(playerid,"Mission") == 1)
				{
			        if(Importfahrzeug == true)return SendClientMessage(playerid,COLOR_SORRY,"Derzeit kann keine weitere Importfahrzeug der Stunde gestartet werden.");
					SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid) +2);
	   				SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS IMPORTFAHRZEUG DER STUNDE WURDE GESTOHLEN.");
			    	format(str,sizeof(str),"ZENTRALE: Verbrecher %s",SpielerInfo[playerid][sName]);
					SendCopMessage(COLOR_BLUE,str);
					SendClientMessage(playerid,COLOR_ORANGE,"Begib dich zum Flugzeugfriedhof und besorge dir das Importfahrzeug. (Roter Marker)");
					
     				ImportCarTime = 45;
					ImportCarTimer = SetTimer("ImportCarPlayer",60000,true);
					Importfahrzeug = true;

					new rand = random(5);
					if(rand == 0){Pos[0] = 325.0465; Pos[1] = 2543.3140; Pos[2] = 16.5128; Pos[3] = 178.7146;}
	   				else if(rand == 1){Pos[0] = 254.0919; Pos[1] = 2431.4382; Pos[2] = 16.1900; Pos[3] = 184.8636;}
	   				else if(rand == 2){Pos[0] = 115.2781; Pos[1] = 2425.6956; Pos[2] = 16.1876; Pos[3] = 44.3526;}
	   				else if(rand == 3){Pos[0] = 233.8764; Pos[1] = 2605.6589; Pos[2] = 16.1820; Pos[3] = 223.6322;}
	   				else if(rand == 4){Pos[0] = 324.7590; Pos[1] = 2607.1711; Pos[2] = 16.1898; Pos[3] = 134.9797;}

					new rand2 = random(4);
					if(rand2 == 0){modelid = 568; Color[0] = 0; Color[1] = 0;}
	   				else if(rand2 == 1){modelid = 495; Color[0] = 18; Color[1] = 6;}
					else if(rand2 == 2){modelid = 434; Color[0] = 0; Color[1] = 0;}
					else if(rand2 == 3){modelid = 424; Color[0] = 0; Color[1] = 1;}

					vehicleid = CreateVehicle(modelid,Pos[0],Pos[1],Pos[2],Pos[3],Color[0],Color[1],-1);
					ImportCar = vehicleid;
			  		format(FahrzeugInfo[vehicleid][fKennzeichen], 9, "IMPORT");
					SetVehicleNumberPlate(vehicleid,"IMPORT");
					FahrzeugInfo[vehicleid][fModelID] = modelid;
			        FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);

					FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
					FahrzeugInfo[vehicleid][fPosition][0] = Pos[0]; FahrzeugInfo[vehicleid][fPosition][1] = Pos[1]; FahrzeugInfo[vehicleid][fPosition][2] = Pos[2]; FahrzeugInfo[vehicleid][fPosition][3] = Pos[3]; FahrzeugInfo[vehicleid][fColor][1] = Color[1];
					FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = Color[0]; FahrzeugInfo[vehicleid][fPaintjob] = 3;
					FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
					FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 1; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
					FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
					FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
					FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0;
					FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

					Motor[vehicleid] = false;
					Licht[vehicleid] = false;
					DOOR[vehicleid] = false;
					Motorhaube[vehicleid] = false;
					Kofferraum[vehicleid] = false;

				    SetPlayerCheckpoint(playerid,Pos[0],Pos[1],Pos[2],3.5);
				}
				else if(GetPVarInt(playerid,"Mission") == 2)
				{
					if(GetPVarInt(playerid,"KurrierID") == 1)
					{
				        if(Kurrierfahrzeug[0] == true)
						{
							SendClientMessage(playerid,COLOR_SORRY,"Derzeit kann keine weitere Kurrierdienst Mission gestartet werden.");
							DeletePVar(playerid,"KurrierID");
	  					}
						SendClientMessage(playerid,COLOR_ORANGE,"Begib dich nach Dillimore und besorge dir das Kurrierfahrzeug. (Roter Marker)");

		 				KurrierCarTime[0] = 2;
						KurrierCarTimer[0] = SetTimerEx("KurrierCarPlayer",120000,true,"i",playerid);
						Kurrierfahrzeug[0] = true;

						Pos[0] = 681.2784;
						Pos[1] = -441.3095;
						Pos[2] = 16.4046;
						Pos[3] = 90.6113;

						vehicleid = CreateVehicle(498,Pos[0],Pos[1],Pos[2],Pos[3],0,0,-1);
						KurrierCar[0] = vehicleid;
				  		format(FahrzeugInfo[vehicleid][fKennzeichen], 9, "KURRIER");
						SetVehicleNumberPlate(vehicleid,"KURRIER");
						FahrzeugInfo[vehicleid][fModelID] = 498;
				        FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];

						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);

						FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
						FahrzeugInfo[vehicleid][fPosition][0] = Pos[0]; FahrzeugInfo[vehicleid][fPosition][1] = Pos[1]; FahrzeugInfo[vehicleid][fPosition][2] = Pos[2]; FahrzeugInfo[vehicleid][fPosition][3] = Pos[3]; FahrzeugInfo[vehicleid][fColor][1] = 0;
						FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 0; FahrzeugInfo[vehicleid][fPaintjob] = 3;
						FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
						FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = playerid;
						FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
						FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
						FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0;
						FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

						Motor[vehicleid] = false;
						Licht[vehicleid] = false;
						DOOR[vehicleid] = false;
						Motorhaube[vehicleid] = false;
						Kofferraum[vehicleid] = false;

					    SetPlayerCheckpoint(playerid,Pos[0],Pos[1],Pos[2],3.5);
					}
					else if(GetPVarInt(playerid,"KurrierID") == 2)
					{
     					if(Kurrierfahrzeug[1] == true)
						{
							SendClientMessage(playerid,COLOR_SORRY,"Derzeit kann keine weitere Kurrierdienst Mission gestartet werden.");
							DeletePVar(playerid,"KurrierID");
	  					}
						SendClientMessage(playerid,COLOR_ORANGE,"Begib dich nach Fort Carson und besorge dir das Kurrierfahrzeug. (Roter Marker)");

		 				KurrierCarTime[1] = 2;
						KurrierCarTimer[1] = SetTimerEx("KurrierCarPlayer",120000,true,"i",playerid);
						Kurrierfahrzeug[1] = true;

						Pos[0] = -733.9844;
						Pos[1] = 1546.2740;
						Pos[2] = 38.6802;
						Pos[3] = 268.9030;

						vehicleid = CreateVehicle(468,Pos[0],Pos[1],Pos[2],Pos[3],6,6,-1);
						KurrierCar[1] = vehicleid;
				  		format(FahrzeugInfo[vehicleid][fKennzeichen], 9, "KURRIER");
						SetVehicleNumberPlate(vehicleid,"KURRIER");
						FahrzeugInfo[vehicleid][fModelID] = 468;
				        FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];

						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);

						FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
						FahrzeugInfo[vehicleid][fPosition][0] = Pos[0]; FahrzeugInfo[vehicleid][fPosition][1] = Pos[1]; FahrzeugInfo[vehicleid][fPosition][2] = Pos[2]; FahrzeugInfo[vehicleid][fPosition][3] = Pos[3]; FahrzeugInfo[vehicleid][fColor][1] = 6;
						FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 6; FahrzeugInfo[vehicleid][fPaintjob] = 3;
						FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
						FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = playerid;
						FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
						FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
						FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0;
						FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

						Motor[vehicleid] = false;
						Licht[vehicleid] = false;
						DOOR[vehicleid] = false;
						Motorhaube[vehicleid] = false;
						Kofferraum[vehicleid] = false;

					    SetPlayerCheckpoint(playerid,Pos[0],Pos[1],Pos[2],3.5);
					}
					else if(GetPVarInt(playerid,"KurrierID") == 3)
					{
     					if(Kurrierfahrzeug[2] == true)
						{
							SendClientMessage(playerid,COLOR_SORRY,"Derzeit kann keine weitere Kurrierdienst Mission gestartet werden.");
							DeletePVar(playerid,"KurrierID");
	  					}
						SendClientMessage(playerid,COLOR_ORANGE,"Begib dich nach Fort Carson und besorge dir das Kurrierfahrzeug. (Roter Marker)");

		 				KurrierCarTime[2] = 4;
						KurrierCarTimer[2] = SetTimerEx("KurrierCarPlayer",240000,true,"i",playerid);
						Kurrierfahrzeug[2] = true;

						Pos[0] = 2223.3511;
						Pos[1] = 1936.3907;
						Pos[2] = 31.8741;
						Pos[3] = 267.6846;

						vehicleid = CreateVehicle(414,Pos[0],Pos[1],Pos[2],Pos[3],0,0,-1);
						KurrierCar[2] = vehicleid;
				  		format(FahrzeugInfo[vehicleid][fKennzeichen], 9, "KURRIER");
						SetVehicleNumberPlate(vehicleid,"KURRIER");
						FahrzeugInfo[vehicleid][fModelID] = 414;
				        FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter];

						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);

						FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
						FahrzeugInfo[vehicleid][fPosition][0] = Pos[0]; FahrzeugInfo[vehicleid][fPosition][1] = Pos[1]; FahrzeugInfo[vehicleid][fPosition][2] = Pos[2]; FahrzeugInfo[vehicleid][fPosition][3] = Pos[3]; FahrzeugInfo[vehicleid][fColor][1] = 0;
						FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 0; FahrzeugInfo[vehicleid][fPaintjob] = 3;
						FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0;
						FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = playerid;
						FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
						FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
						FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0;
						FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;

						Motor[vehicleid] = false;
						Licht[vehicleid] = false;
						DOOR[vehicleid] = false;
						Motorhaube[vehicleid] = false;
						Kofferraum[vehicleid] = false;

					    SetPlayerCheckpoint(playerid,Pos[0],Pos[1],Pos[2],3.5);
					}
				}
			}
		}
		case DIALOG_CREATE_FIRMA:
		{
		    if(response==0){}
		    else if(response==1)
		    {
				if(strlen(inputtext) < 1 || strlen(inputtext) > 24)
				{
				    ShowPlayerDialog(playerid,DIALOG_CREATE_FIRMA,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firma erstellen","Bitte gib unten ein Namen deiner Firma ein.\n\n{FF0000}Der Firma Name darf nicht kleiner als 1 Zeichen und nicht größer als 24 Zeichen haben.","Weiter","Abbrechen");
				}
				else
				{
				    new str[164];
    				format(str,sizeof(str),"{FFFFFF}Bist du dir sicher, dass du die Firma {FF0000}%s{FFFFFF} erstellen möchtest ?",inputtext);
		        	ShowPlayerDialog(playerid,DIALOG_CREATE_FIRMA2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Firma erstellen",str,"Ja","Nein");
		        	SetPVarString(playerid,"FirmaName",inputtext);
				}
			}
		}
		case DIALOG_CREATE_FIRMA2:
		{
  			if(response==0){DeletePVar(playerid,"FirmaName");}
		    else if(response==1)
		    {
				ShowPlayerDialog(playerid,DIALOG_CREATE_FIRMA3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firma erstellen","{FFFFFF}Bitte gib unten dein Wunschkennzeichen an. {FF0000}(3-5 Zeichen)","Weiter","Abbrechen");
		    }
		}
		case DIALOG_CREATE_FIRMA3:
		{
  			if(response==0){DeletePVar(playerid,"FirmaName");}
		    else if(response==1)
		    {
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 5)
		        {
					ShowPlayerDialog(playerid,DIALOG_CREATE_FIRMA3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Firma erstellen","{FFFFFF}Bitte gib unten dein Wunschkennzeichen an. {FF0000}(3-5 Zeichen)","Weiter","Abbrechen");
		        }
		        else
		        {
		        	new query[500], FirmaName[24];
			        GetPVarString(playerid, "FirmaName", FirmaName, sizeof(FirmaName));

			    	mysql_format(sqlHandle, query, sizeof(query), "SELECT `Name` FROM `firmen` WHERE `Name` = '%s'", FirmaName);
				   	mysql_tquery(sqlHandle, query, "onCheckCompanyExists", "is", playerid, inputtext);
					return 1;
		        }
		    }
		}
		case DIALOG_CREATE_GRUPPE:
		{
  			if(response==0){}
		    else if(response==1)
		    {
     			if(strlen(inputtext) < 1 || strlen(inputtext) > 24)
        		{
 	               ShowPlayerDialog(playerid,DIALOG_CREATE_GRUPPE,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppe erstellen","Bitte gib unten ein Namen deiner Gruppe ein.\n\n{FF0000}Der Gruppen Name darf nicht kleiner als 1 Zeichen und nicht größer als 24 Zeichen haben.","Weiter","Abbrechen");
				}
				else
				{
				    new str[164];
    				format(str,sizeof(str),"{FFFFFF}Bist du dir sicher, dass du die Gruppe {FF0000}%s{FFFFFF} erstellen möchtest ?",inputtext);
		        	ShowPlayerDialog(playerid,DIALOG_CREATE_GRUPPE2,DIALOG_STYLE_MSGBOX,"{007DFF}"SERV_NAME" - Gruppe erstellen",str,"Ja","Nein");
		        	SetPVarString(playerid,"GruppenName",inputtext);
				}
		    }
		}
		case DIALOG_CREATE_GRUPPE2:
		{
  			if(response==0){DeletePVar(playerid,"GruppenName");}
		    else if(response==1)
		    {
				ShowPlayerDialog(playerid,DIALOG_CREATE_GRUPPE3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppe erstellen","{FFFFFF}Bitte gib unten dein Wunschkennzeichen an. {FF0000}(3-5 Zeichen)","Weiter","Abbrechen");
		    }
		}
		case DIALOG_CREATE_GRUPPE3:
		{
  			if(response==0){DeletePVar(playerid,"GruppenName");}
		    else if(response==1)
		    {
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 5)
		        {
					ShowPlayerDialog(playerid,DIALOG_CREATE_GRUPPE3,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" - Gruppe erstellen","{FFFFFF}Bitte gib unten dein Wunschkennzeichen an. {FF0000}(3-5 Zeichen)","Weiter","Abbrechen");
		        }
		        else
		        {
		        	new query[164], GruppenName[24];
			        GetPVarString(playerid, "GruppenName", GruppenName, sizeof(GruppenName));

			    	mysql_format(sqlHandle, query, sizeof(query), "SELECT `Name` FROM `gruppen` WHERE `Name` = '%s'", GruppenName);
				   	mysql_tquery(sqlHandle, query, "onCheckGroupExists", "is", playerid, inputtext);
					return 1;
		        }
		    }
		}
		case DIALOG_NEON:
		{
			if(response==0){}
		    else if(response==1)
	    	{
				new vehicleid = GetPlayerVehicleID(playerid), query[128];
  				switch(listitem)
				{
				    case 0://Weiß
				    {
						if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
						if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						GivePlayerMoneyEx(playerid,-100000);
						
						FahrzeugInfo[vehicleid][fNeonStatus] = true;
						FahrzeugInfo[vehicleid][fNeonColor] = 18652;
						FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18652,0,0,0,0,0,0);
						FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18652,0,0,0,0,0,0);
						AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
						
				       	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18652' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
						mysql_tquery(sqlHandle, query);
						
						SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ weiße Unterbodenbeleuchtung einbauen lassen.");
				    }
				    case 1://Blau / Pink
				    {
				        if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
				        if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						if(SpielerInfo[playerid][sDonator] == 1)
						{
						    GivePlayerMoneyEx(playerid,-100000);
						    
							FahrzeugInfo[vehicleid][fNeonStatus] = true;
							FahrzeugInfo[vehicleid][fNeonColor] = 18651;
							FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18651,0,0,0,0,0,0);
							FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18651,0,0,0,0,0,0);
							AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
							
      						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18651' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
							mysql_tquery(sqlHandle, query);
							
							SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ pinke Unterbodenbeleuchtung einbauen lassen.");
						}
						if(SpielerInfo[playerid][sPremium] == 1)
						{
						    GivePlayerMoneyEx(playerid,-100000);
						    
							FahrzeugInfo[vehicleid][fNeonStatus] = true;
							FahrzeugInfo[vehicleid][fNeonColor] = 18648;
				  			FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18648,0,0,0,0,0,0);
				  			FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18648,0,0,0,0,0,0);
				  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
				  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
				  			
   							mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18648' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
							mysql_tquery(sqlHandle, query);
				  			
				  			SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ blaue Unterbodenbeleuchtung einbauen lassen.");
						}
				    }
				    case 2://Rot
				    {
						if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
						if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						GivePlayerMoneyEx(playerid,-100000);
						
						FahrzeugInfo[vehicleid][fNeonStatus] = true;
						FahrzeugInfo[vehicleid][fNeonColor] = 18647;
			 			FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18647,0,0,0,0,0,0);
			  			FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18647,0,0,0,0,0,0);
			  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			  			
						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18647' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
						mysql_tquery(sqlHandle, query);
			  			
			  			SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ rote Unterbodenbeleuchtung einbauen lassen.");
				    }
				    case 3://Gelb
				    {
						if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
						if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						GivePlayerMoneyEx(playerid,-100000);
						
						FahrzeugInfo[vehicleid][fNeonStatus] = true;
						FahrzeugInfo[vehicleid][fNeonColor] = 18650;
			 			FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18650,0,0,0,0,0,0);
			  			FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18650,0,0,0,0,0,0);
			  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			  			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			  			
						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18650' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
						mysql_tquery(sqlHandle, query);
			  			
			  			SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ gelbe Unterbodenbeleuchtung einbauen lassen.");
				    }
 				   	case 4://Grün
				    {
						if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
						if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						GivePlayerMoneyEx(playerid,-100000);
						
						FahrzeugInfo[vehicleid][fNeonStatus] = true;
						FahrzeugInfo[vehicleid][fNeonColor] = 18649;
			 			FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18649,0,0,0,0,0,0);
			 			FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18649,0,0,0,0,0,0);
			 			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			 			AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			 			
						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18649' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
						mysql_tquery(sqlHandle, query);
			 			
			 			SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ grüne Unterbodenbeleuchtung einbauen lassen.");
				    }
				    case 5://Pink
				    {
						if(GetPlayerMoneyEx(playerid) < 100000)return SendClientMessage(playerid,COLOR_SORRY,"Du hast nicht genügend Geld dabei.");
						if(FahrzeugInfo[vehicleid][fNeonColor] != 0)return SendClientMessage(playerid,COLOR_SORRY,"Du hast bereits Neon unter diesem Fahrzeug einbauen lassen.");
						GivePlayerMoneyEx(playerid,-100000);
						
						FahrzeugInfo[vehicleid][fNeonStatus] = true;
						FahrzeugInfo[vehicleid][fNeonColor] = 18651;
						FahrzeugInfo[vehicleid][fNeonObj][0] = CreateDynamicObject(18651,0,0,0,0,0,0);
						FahrzeugInfo[vehicleid][fNeonObj][1] = CreateDynamicObject(18651,0,0,0,0,0,0);
						AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][0], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fNeonObj][1], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
						
						mysql_format(sqlHandle, query,sizeof(query),"UPDATE `vehicles` SET `NeonFarbe`='18651' WHERE `ID`='%d'",FahrzeugInfo[vehicleid][fDatabaseID]);
						mysql_tquery(sqlHandle, query);
						
						SendClientMessage(playerid, COLOR_SUPER, "Du hast dir für 100.000$ pinke Unterbodenbeleuchtung einbauen lassen.");
				    }
				}
		    }
		}
		case DIALOG_GARAGE:
		{
			if(response==0){}
		    else if(response==1)
	    	{
				new vehicleid = GetPlayerVehicleID(playerid), hs = GetNearGarageID(playerid);
				SetPVarInt(playerid,"GaragenID",hs);
				SetPVarInt(playerid,"GarageVehicleID",vehicleid);
  				switch(listitem)
				{
				    case 0://Parkplatz 1
				    {
				        if(GaragenInfo[hs][giFahrzeug][0] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 1 steht bereits ein Fahrzeug.");
          				foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",1);
				        SetPVarFloat(playerid,"ParkPosX",2405.1667);
				        SetPVarFloat(playerid,"ParkPosY",2826.0759);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",269.1802);
				    }
				    case 1://Parkplatz 2
				    {
						if(GaragenInfo[hs][giFahrzeug][1] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 2 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",2);
				        SetPVarFloat(playerid,"ParkPosX",2405.3621);
				        SetPVarFloat(playerid,"ParkPosY",2830.8975);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",269.5629);
				    }
				    case 2://Parkplatz 3
				    {
						if(GaragenInfo[hs][giFahrzeug][2] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 3 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",3);
				        SetPVarFloat(playerid,"ParkPosX",2405.5627);
				        SetPVarFloat(playerid,"ParkPosY",2835.4319);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",270.1735);
				    }
				    case 3://Parkplatz 4
				    {
						if(GaragenInfo[hs][giFahrzeug][3] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 4 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",4);
				        SetPVarFloat(playerid,"ParkPosX",2405.7219);
				        SetPVarFloat(playerid,"ParkPosY",2839.9592);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",269.2777);
				    }
				    case 4://Parkplatz 5
				    {
						if(GaragenInfo[hs][giFahrzeug][4] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 5 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",5);
				        SetPVarFloat(playerid,"ParkPosX",2405.8633);
				        SetPVarFloat(playerid,"ParkPosY",2844.2336);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",270.2021);
				    }
				    case 5://Parkplatz 6
				    {
						if(GaragenInfo[hs][giFahrzeug][5] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 6 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",6);
				        SetPVarFloat(playerid,"ParkPosX",2422.6580);
				        SetPVarFloat(playerid,"ParkPosY",2826.0208);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",89.9365);
				    }
				    case 6://Parkplatz 7
				    {
						if(GaragenInfo[hs][giFahrzeug][6] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 7 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",7);
				        SetPVarFloat(playerid,"ParkPosX",2422.6277);
				        SetPVarFloat(playerid,"ParkPosY",2830.5173);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",89.4820);
				    }
				    case 7://Parkplatz 8
				    {
						if(GaragenInfo[hs][giFahrzeug][7] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 8 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",8);
				        SetPVarFloat(playerid,"ParkPosX",2422.6326);
				        SetPVarFloat(playerid,"ParkPosY",2835.1450);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",89.6107);
				    }
				    case 8://Parkplatz 9
				    {
						if(GaragenInfo[hs][giFahrzeug][8] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 9 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",9);
				        SetPVarFloat(playerid,"ParkPosX",2422.6853);
				        SetPVarFloat(playerid,"ParkPosY",2839.8669);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",89.6220);
				    }
				    case 9://Parkplatz 10
				    {
						if(GaragenInfo[hs][giFahrzeug][9] > 0)return SendClientMessage(playerid, COLOR_SORRY, "Auf Parkplatz 10 steht bereits ein Fahrzeug.");
  						foreach(new i : Player)
						{
						    if(!IsPlayerInAnyVehicle(playerid))continue;
						    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))continue;
				        	RemovePlayerFromVehicle(i);
						}
				        SetTimerEx("SpawnCarInGarage",3000,false,"i",playerid);
				        SetPVarInt(playerid,"Parkplatz",10);
				        SetPVarFloat(playerid,"ParkPosX",2422.7322);
				        SetPVarFloat(playerid,"ParkPosY",2844.5952);
				        SetPVarFloat(playerid,"ParkPosZ",-47.9936);
				        SetPVarFloat(playerid,"ParkPosA",89.1004);
				    }
				}
			}
		}
		case DIALOG_BETA_KEY:
		{
			if(response==0){Kick(playerid);}
		    else if(response==1)
	    	{
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 50)
		        {
		            ShowPlayerDialog(playerid,DIALOG_BETA_KEY,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | Beta Key","{FFFFFF}Bitte gib unten dein gültigen Beta Key an.\n\n{FF0000}(Ungültiger Beta Key)","Weiter","Abbrechen");
		            return 1;
		        }

				new query[128];
				mysql_format(sqlHandle, query, sizeof(query), "SELECT `Key` FROM `beta` WHERE `Name` = '%e' AND `Aktiviert` != 1 LIMIT 1", SpielerInfo[playerid][sName]);
				mysql_tquery(sqlHandle, query, "onPlayerInputBetaykey", "is", playerid, inputtext);
				return 1;
			}
		}
		case DIALOG_BUSFAHRER_ASK:
		{
			if(response==0){ShowPlayerDialog(playerid,DIALOG_BUSFAHRER_ASK,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Busfahrer","Weiter Jobben\nAufhören","Bestätigen","Abbrechen");}
		    else if(response==1)
	    	{
	    	    new tmpcar = GetPVarInt(playerid,"BusID");
  				switch(listitem)
				{
				    case 0://Weiter Jobben
				    {
  						new str[364];
						format(str,sizeof(str),"{FFFFFF}Linie {FF0000}1 {FFFFFF}| Benötigte Erfahrung: {FF0000}0\n{FFFFFF}Linie {FF0000}2 {FFFFFF}| Benötigte Erfahrung: {FF0000}50\n{FFFFFF}Linie {FF0000}3 {FFFFFF}| Benötigte Erfahrung: {FF0000}150\n{FFFFFF}Linie {FF0000}4 {FFFFFF}| Benötigte Erfahrung: {FF0000}250\n");
						ShowPlayerDialog(playerid,DIALOG_LINIEN,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Busfahrer",str,"Starten","Abbrechen");
						SetPVarInt(playerid,"BusfahrerJobt",1);
				        DeletePVar(playerid,"BusID");
				    }
				    case 1://Aufhören
				    {
				        Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
					    SetVehicleToRespawn(tmpcar);
					    FahrzeugInfo[tmpcar][fJobFahrer] = 0;
				        DeletePVar(playerid,"BusID");
				        DeletePVar(playerid,"BusfahrerArbeitet");
				    }
				}
	    	}
		}
		case DIALOG_TRUCKER_LIEFERUNG:
		{
			if(response==0){}
		    else if(response==1)
	    	{
  				switch(listitem)
				{
				    case 0://Kraftstoffe
				    {
				        new vehicleid = GetPlayerVehicleID(playerid),Text[128], rand = random(5);
						if(rand == 0)
						{
						    SpielerLKWTrailer[playerid] = CreateVehicle(584,2204.3945,-2274.2075,14.1392,45.7255,-1,-1,-1);
						    SetPlayerCheckpoint(playerid,2204.3945,-2274.2075,14.1392,5.0);
						}
						else if(rand == 1)
						{
							SpielerLKWTrailer[playerid] = CreateVehicle(584,2211.9963,-2266.7429,14.1426,44.3254,-1,-1,-1);
							SetPlayerCheckpoint(playerid,2211.9963,-2266.7429,14.1426,5.0);
						}
						else if(rand == 2)
						{
							SpielerLKWTrailer[playerid] = CreateVehicle(584,2219.3379,-2259.0630,14.1391,44.1156,-1,-1,-1);
							SetPlayerCheckpoint(playerid,2219.3379,-2259.0630,14.1391,5.0);
						}
						else if(rand == 3)
						{
							SpielerLKWTrailer[playerid] = CreateVehicle(584,2226.4819,-2251.9451,14.1409,45.3496,-1,-1,-1);
							SetPlayerCheckpoint(playerid,2226.4819,-2251.9451,14.1409,5.0);
						}
						else if(rand == 4)
						{
							SpielerLKWTrailer[playerid] = CreateVehicle(584,2233.7722,-2244.5063,14.1410,46.0410,-1,-1,-1);
							SetPlayerCheckpoint(playerid,2233.7722,-2244.5063,14.1410,5.0);
						}
					    SetPVarInt(playerid,"TruckerAngebot",2);
						format(Text, sizeof(Text), "Jobfahrzeug von\n{FE0000}%s", SpielerInfo[playerid][sName]);
						Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, Text);
						SendClientMessage(playerid,COLOR_INFO,"Koppel deinen Anhänger an. Der Anhänger befindet sich am roten Marker.");
				    }
				    case 1://Waren 24/7
				    {
						KeineFunktion
				    }
				    case 2://Waren Ammunation
				    {
						KeineFunktion
				    }
				}
	    	}
		}
		case DIALOG_ANTIAFK:
        {
			if(response==0){}
		    else if(response==1)
	    	{
	            if(strval(inputtext)==GetPVarInt(playerid,"BackNummer"))
	            {
	                Delete3DTextLabel(Afklabel[playerid]);
	                TogglePlayerControllable(playerid,true);
	                Afk[playerid] = 0;
	                Afkversuche[playerid] = 0;
	                afktimedrestka[playerid] = 0;
	                SendClientMessage(playerid,COLOR_SUPER,"Du bist nun wieder Anwesend gemeldet.");
	            }
	            else
	            {
	                Afkversuche[playerid] += 1;
	                if(Afkversuche[playerid] > 3)
	                {
	                    new str[128];
	                	SendClientMessage(playerid,COLOR_SORRY,"Du hast den AFK - Code zu oft falsch eingegeben.");
	                	format(str,sizeof(str),"%s %s hat den AFK - Code zu oft eingeben und wurde daher vom System gekickt.",AdminName(playerid),SpielerInfo[playerid][sName]);
	                	LogKick(str);
						KickPlayer(playerid,"AFK");
	                }
	                new str65[250];
					new nr = random(89999) + 10000;
					SetPVarInt(playerid,"BackNummer",nr);
					format(str65, sizeof(str65), "{FFFFFF}Du bist als Abwesend gemeldet.\nGebe diesen Code ein um wieder ins Spiel hinein zu kommen.\nCode: {FF0000}%d",nr);
					ShowPlayerDialog(playerid,DIALOG_ANTIAFK,DIALOG_STYLE_INPUT,"{007DFF}"SERV_NAME" | AFK",str65,"Bestätigen","");
	            }
			}
        }
 		case DIALOG_OBIBAUMARKT:
		{
			if(response==0){}
		    else if(response==1)
	    	{
  				switch(listitem)
				{
				    case 0://Schaufel
				    {
						if(GetPlayerMoneyEx(playerid) < 500)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-500);
						GivePlayerWeapon(playerid,WEAPON_SHOVEL,1);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 500$ eine Schaufel gekauft.");
				    }
				    case 1://Beutel
				    {
						if(GetPlayerMoneyEx(playerid) < 10)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-10);
						SpielerInfo[playerid][sBeutel]++;
						SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 10$ ein Beutel gekauft.");
				    }
        			case 2://Helm 1
	                {
	                    if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                        SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 50$ einen Helm gekauft.");
                        SpielerInfo[playerid][sHelm] = 18645;
						GivePlayerMoneyEx(playerid,-50);
	                }
	                case 3://Helm 2
	                {
	                    if(GetPlayerMoneyEx(playerid) < 50)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                        SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 50$ einen Helm gekauft.");
                        SpielerInfo[playerid][sHelm] = 18976;
						GivePlayerMoneyEx(playerid,-50);
	                }
	                case 4://Helm 3
	                {
	                    if(GetPlayerMoneyEx(playerid) < 75)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                        SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 75$ einen Helm gekauft.");
                        SpielerInfo[playerid][sHelm] = 18977;
						GivePlayerMoneyEx(playerid,-75);
	                }
	                case 5://Helm 4
	                {
	                    if(GetPlayerMoneyEx(playerid) < 75)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                        SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 75$ einen Helm gekauft.");
                        SpielerInfo[playerid][sHelm] = 18978;
						GivePlayerMoneyEx(playerid,-75);
	                }
	                case 6://Helm 5
	                {
	                    if(GetPlayerMoneyEx(playerid) < 80)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
                        SendClientMessage(playerid,COLOR_SUPER,"Du hast dir für 80$ einen Helm gekauft.");
                        SpielerInfo[playerid][sHelm] = 18979;
						GivePlayerMoneyEx(playerid,-80);
	                }
				}
	    	}
		}
		case DIALOG_GYM:
		{
			if(response==0){}
		    else if(response==1)
	    	{
  				switch(listitem)
				{
				    case 0://Standart
				    {
						if(GetPlayerMoneyEx(playerid) < 10000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-10000);
						SpielerInfo[playerid][sKampfstyle] = 1;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_NORMAL);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast den Standart Kampfstyle für 10000$ erlernt.");
				    }
				    case 1://Boxer
				    {
						if(GetPlayerMoneyEx(playerid) < 20000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-20000);
						SpielerInfo[playerid][sKampfstyle] = 2;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_BOXING);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast den Boxer Kampfstyle für 20000$ erlernt.");
				    }
				    case 2://Kungfu
				    {
						if(GetPlayerMoneyEx(playerid) < 30000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-30000);
						SpielerInfo[playerid][sKampfstyle] = 3;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
      					SendClientMessage(playerid,COLOR_SUPER,"Du hast den Kungfu Kampfstyle für 30000$ erlernt.");
				    }
				    case 3://Kneehead
				    {
						if(GetPlayerMoneyEx(playerid) < 40000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-40000);
						SpielerInfo[playerid][sKampfstyle] = 4;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_KNEEHEAD);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast den Kneehead Kampfstyle für 40000$ erlernt.");
				    }
				    case 4://Roundshousekick
				    {
						if(GetPlayerMoneyEx(playerid) < 40000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-50000);
						SpielerInfo[playerid][sKampfstyle] = 5;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_GRABKICK);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast den Roundhousekick Kampfstyle für 50000$ erlernt.");
				    }
				    case 5://Ellebogen
				    {
						if(GetPlayerMoneyEx(playerid) < 50000)return SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Geld bei dir.");
						GivePlayerMoneyEx(playerid,-60000);
						SpielerInfo[playerid][sKampfstyle] = 6;
						SetPlayerFightingStyle(playerid,FIGHT_STYLE_ELBOW);
						SendClientMessage(playerid,COLOR_SUPER,"Du hast den Ellebogen Kampfstyle für 60000$ erlernt.");
				    }
				}
	    	}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, CLICK_SOURCE:source)
{
	if(SpielerInfo[playerid][sAdmin] >= 3)
	{
	    new dialogstring[232];
	    SetPVarInt(playerid,"ClickedPlayer",clickedplayerid);
		format(dialogstring,sizeof(dialogstring),"Spielerstatistik von %s\n%s vom Server kicken\n%s permanent bannen\n%s auf Zeit bannen",SpielerInfo[clickedplayerid][sName],SpielerInfo[clickedplayerid][sName],SpielerInfo[clickedplayerid][sName],SpielerInfo[clickedplayerid][sName]);
		ShowPlayerDialog(playerid,DIALOG_ADMIN_PANEL,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" | Adminpanel",dialogstring,"Weiter","Abbrechen");
	}
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid==SkinordnungGovernment || listid==SkinordnungSAPD || listid==SkinordnungSFPD || listid==SkinordnungLVPD || listid==SkinordnungMEDIC || listid==SkinordnungFIRE || listid==SkinordnungFBI ||
	   listid==SkinordnungOrdnungsamt || listid==SkinordnungSanNews || listid==SkinordnungGrove || listid==SkinordnungBallas || listid==SkinordnungVagos ||
	   listid==SkinordnungAztecas || listid==SkinordnungRifa || listid==SkinordnungTriads || listid==SkinordnungDaNangBoys || listid==SkinordnungBikers ||
	   listid==SkinordnungItalia || listid==SkinordnungRussia)
	{
	    if(response)
	    {
  			if(GetPVarInt(playerid,"FrakV") == 0)
			{
		        new string[84], skinlist[3];
		        format(skinlist,sizeof(skinlist),"%d",SpielerInfo[playerid][sFraktion]);
				format(string,sizeof(string),"Rang%d",GetPVarInt(playerid,"Skinordnung"));
				mysql_SetInt("skinordnung", string, modelid, "frakid", skinlist);
		        format(string,sizeof(string),"Du hast Rang %d die SkinID '%d' zugewiesen.",GetPVarInt(playerid,"Skinordnung"),modelid);
		        SendClientMessage(playerid,COLOR_INFO,string);
		        DeletePVar(playerid,"Skinordnung");
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
				format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_FRAKV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			}
			else if(GetPVarInt(playerid,"FrakV") == 1)
			{
		        new string[84], skinlist[3];
		        format(skinlist,sizeof(skinlist),"%d",SpielerInfo[playerid][sFraktion]);
				format(string,sizeof(string),"Rang%d",GetPVarInt(playerid,"Skinordnung"));
				mysql_SetInt("skinordnung", string, modelid, "frakid", skinlist);
		        format(string,sizeof(string),"Du hast Rang %d die SkinID '%d' zugewiesen.",GetPVarInt(playerid,"Skinordnung"),modelid);
		        SendClientMessage(playerid,COLOR_INFO,string);
		        DeletePVar(playerid,"Skinordnung");
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
				format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_SARDV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
			}
			else if(GetPVarInt(playerid,"FrakV") == 2)
		  	{
     			new string[84], skinlist[3];
		        format(skinlist,sizeof(skinlist),"%d",SpielerInfo[playerid][sFraktion]);
				format(string,sizeof(string),"TRang%d",GetPVarInt(playerid,"Skinordnung"));
				mysql_SetInt("skinordnung", string, modelid, "frakid", skinlist);
		        format(string,sizeof(string),"Du hast Rang %d die SkinID '%d' zugewiesen.",GetPVarInt(playerid,"Skinordnung"),modelid);
		        SendClientMessage(playerid,COLOR_INFO,string);
		        DeletePVar(playerid,"Skinordnung");
				new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
				format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
				format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "T1", "frakid", ranklist));
				format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "T2", "frakid", ranklist));
				format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "T3", "frakid", ranklist));
				format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "T4", "frakid", ranklist));
				format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "T5", "frakid", ranklist));
				format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "T6", "frakid", ranklist));
				format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "T7", "frakid", ranklist));
				format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
				ShowPlayerDialog(playerid,DIALOG_SARDV_SKINR,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		  	}
	    }
	}
	else if(listid==SkinsBoy || listid==SkinsGirl)
	{
	    if(response)
	    {
	        if(GetPlayerMoneyEx(playerid) < 100)return SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Tracy{FFFFFF} sagt: Komm wieder wenn du {FF0000}100${FFFFFF} dabei hast.");
			mysql_SetInt("accounts", "SkinID", modelid, "Name", SpielerInfo[playerid][sName]);
	        GivePlayerMoneyEx(playerid,-100);

   	   		if(GetPVarInt(playerid,"PizzaboteDuty") == 1 &&
				GetPVarInt(playerid,"KehrmaschinenDuty") == 1 && GetPVarInt(playerid,"PilotDuty") == 1 &&
				GetPVarInt(playerid,"BusfahrerDuty") == 1 && GetPVarInt(playerid,"MüllmannDuty") == 1 &&
				GetPVarInt(playerid,"LandwirtDuty") == 1 && GetPVarInt(playerid,"HolzfallerDuty") == 1 || GetPVarInt(playerid,"CopDuty") == 1 ||
				GetPVarInt(playerid,"FBIDuty") == 1 || GetPVarInt(playerid,"MedicDuty") == 1 ||
				GetPVarInt(playerid,"FireDuty") == 1 || SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 19)
	    	{
				SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Tracy{FFFFFF} sagt: Ich Ihre Sachen in die Tüte gepackt. Das macht dann {FF0000}100${FFFFFF}. Ich hoffe Sie besuchen uns bald wieder!");
	    	    return 1;
	    	}
	    	else
	  		{
	  		    SetPlayerSkin(playerid,modelid);
	    	    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Tracy{FFFFFF} sagt: Sieht toll aus! Das macht dann {FF0000}100${FFFFFF}. Ich hoffe Sie besuchen uns bald wieder!");
	    	    return 1;
	  		}

	    }
	}
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == CUSTOM_FUHRPARK_MENU)
	{
	    if(response)
	    {
	        SetPVarInt(playerid,"FrakVFahrzeugModel",modelid);
			new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
			format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sFraktion]);
			format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", "1", "frakid", ranklist));
			format(r2,sizeof(r2),"%s",mysql_GetString("rangnamen", "2", "frakid", ranklist));
			format(r3,sizeof(r3),"%s",mysql_GetString("rangnamen", "3", "frakid", ranklist));
			format(r4,sizeof(r4),"%s",mysql_GetString("rangnamen", "4", "frakid", ranklist));
			format(r5,sizeof(r5),"%s",mysql_GetString("rangnamen", "5", "frakid", ranklist));
			format(r6,sizeof(r6),"%s",mysql_GetString("rangnamen", "6", "frakid", ranklist));
			format(r7,sizeof(r7),"%s",mysql_GetString("rangnamen", "7", "frakid", ranklist));
			format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
			ShowPlayerDialog(playerid,DIALOG_FRAKV_CARRANG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Fraktionsverwaltung",ranklist,"Weiter","Zurück");
		}
	    else return 1;
	}
	else if(extraid == CUSTOM_FUHRPARK_GRUPPE_MENU)
	{
	    if(response)
	    {
	        SetPVarInt(playerid,"FrakVFahrzeugModel",modelid);
			new r1[32], r2[32], r3[32], r4[32], r5[32], r6[32], r7[24], ranklist[145];
			format(ranklist,sizeof(ranklist),"%d",SpielerInfo[playerid][sGruppe]);
			format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", "1", "gid", ranklist));
			format(r2,sizeof(r2),"%s",mysql_GetString("grangnamen", "2", "gid", ranklist));
			format(r3,sizeof(r3),"%s",mysql_GetString("grangnamen", "3", "gid", ranklist));
			format(r4,sizeof(r4),"%s",mysql_GetString("grangnamen", "4", "gid", ranklist));
			format(r5,sizeof(r5),"%s",mysql_GetString("grangnamen", "5", "gid", ranklist));
			format(r6,sizeof(r6),"%s",mysql_GetString("grangnamen", "6", "gid", ranklist));
			format(r7,sizeof(r7),"%s",mysql_GetString("grangnamen", "7", "gid", ranklist));
			format(ranklist,sizeof(ranklist),"%s\n%s\n%s\n%s\n%s\n%s\n%s",r1,r2,r3,r4,r5,r6,r7);
			ShowPlayerDialog(playerid,DIALOG_GRUPPENV_CARRANG,DIALOG_STYLE_LIST,"{007DFF}"SERV_NAME" - Gruppenverwaltung",ranklist,"Weiter","Zurück");
		}
	    else return 1;
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(playertextid == ICPMessageEdit[playerid])
    {
        if(SpielerInfo[playerid][icpNachrichten] == 1)
        {
			SpielerInfo[playerid][icpNachrichten] = 0;
			PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~r~] Deaktiviert");
        }
        else if(SpielerInfo[playerid][icpNachrichten] == 0)
        {
			SpielerInfo[playerid][icpNachrichten] = 1;
			PlayerTextDrawSetString(playerid, ICPMessageEdit[playerid], "~g~] Aktiviert");
        }
    }
	else if(playertextid == ICPHitsoundEdit[playerid])
	{
	    if(SpielerInfo[playerid][icpHitsound] == 1)
	    {
			SpielerInfo[playerid][icpHitsound] = 0;
			PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~r~] Deaktiviert");
	    }
	    else if(SpielerInfo[playerid][icpHitsound] == 0)
	    {
			SpielerInfo[playerid][icpHitsound] = 1;
			PlayerTextDrawSetString(playerid, ICPHitsoundEdit[playerid], "~g~] Aktiviert");
	    }
	}
	else if(playertextid == ICPOChatEdit[playerid])
	{
	    if(SpielerInfo[playerid][icpOChat] == 1)
	    {
			SpielerInfo[playerid][icpOChat] = 0;
			PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~r~] Deaktiviert");
	    }
	    else if(SpielerInfo[playerid][icpOChat] == 0)
	    {
			SpielerInfo[playerid][icpOChat] = 1;
			PlayerTextDrawSetString(playerid, ICPOChatEdit[playerid], "~g~] Aktiviert");
	    }
	}
	else if(playertextid == ICPCameraEdit[playerid])
	{
	    if(SpielerInfo[playerid][icpCamera] == 1)
	    {
			SpielerInfo[playerid][icpCamera] = 0;
			PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~r~] Deaktiviert");
	    }
	    else if(SpielerInfo[playerid][icpCamera] == 0)
	    {
			SpielerInfo[playerid][icpCamera] = 1;
			PlayerTextDrawSetString(playerid, ICPCameraEdit[playerid], "~g~] Aktiviert");
	    }
	}
	else if(playertextid == ICPHandyEdit[playerid])
	{
	    if(SpielerInfo[playerid][icpHandy] == 1)
	    {
			SpielerInfo[playerid][icpHandy] = 0;
			PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~r~] Ausgeschaltet");
	    }
	    else if(SpielerInfo[playerid][icpHandy] == 0)
	    {
			SpielerInfo[playerid][icpHandy] = 1;
			PlayerTextDrawSetString(playerid, ICPHandyEdit[playerid], "~g~] Angeschaltet");
	    }
	}
    else if(playertextid == ICPSave[playerid])
    {
		PlayerTextDrawHide(playerid, ICPBox[playerid]);
		PlayerTextDrawHide(playerid, ICPTitel[playerid]);
		PlayerTextDrawHide(playerid, ICPMessage[playerid]);
		PlayerTextDrawHide(playerid, ICPMessageEdit[playerid]);
		PlayerTextDrawHide(playerid, ICPHitsound[playerid]);
		PlayerTextDrawHide(playerid, ICPHitsoundEdit[playerid]);
		PlayerTextDrawHide(playerid, ICPSave[playerid]);
		PlayerTextDrawHide(playerid, ICPOChat[playerid]);
		PlayerTextDrawHide(playerid, ICPOChatEdit[playerid]);
		PlayerTextDrawHide(playerid, ICPCamera[playerid]);
		PlayerTextDrawHide(playerid, ICPCameraEdit[playerid]);
		PlayerTextDrawHide(playerid, ICPHandy[playerid]);
		PlayerTextDrawHide(playerid, ICPHandyEdit[playerid]);
		CancelSelectTextDraw(playerid);
		SendClientMessage(playerid,COLOR_ICP,"Deine Einstellungen wurden gespeichert.");
		DeletePVar(playerid,"ICPEdit");
	}
	else if(playertextid == Schreinerei[playerid][12])//Starten
    {
        if(START[playerid] == 1) return SendClientMessage(playerid,COLOR_GREY,"Du kannst die Maschine nicht noch einmal starten!");
        SendClientMessage(playerid,COLOR_INFO,"Maschine wurde gestartet!");
        GameTextForPlayer(playerid,"~w~Warte einen Moment!",3000,4);
        START[playerid] = 1;
        CancelSelectTextDraw(playerid);
        TextDrawShowForPlayer(playerid, Time);
		TextDrawShowForPlayer(playerid, Time2);
        for(new i=0;i<17;i++){ PlayerTextDrawHide(playerid,Schreinerei[playerid][i]); }
        SetTimerEx("StartMaschine",1500,false,"i",playerid);
        return true;
	}
	else if(playertextid == Schreinerei[playerid][13])//Stoppen
	{
	    if(START[playerid] == 0) return SendClientMessage(playerid,COLOR_INFO,"Du musst die Maschine starten, bevor du sie stoppen kannst!");
	    SendClientMessage(playerid,COLOR_INFO,"Maschine wurde gestoppt!");
	    GameTextForPlayer(playerid,"~w~Hole nun das ~r~Holz!",3000,4);
	    TextDrawShowForPlayer(playerid, Time);
		TextDrawShowForPlayer(playerid, Time2);
	    for(new i=0;i<17;i++){ PlayerTextDrawHide(playerid,Schreinerei[playerid][i]); }
		CancelSelectTextDraw(playerid);
		SetPlayerCheckpoint(playerid,941.7275,2138.0737,1011.0850,1.5);
		PlayerPickup[playerid] = CreateDynamicPickup(1239, 1,934.6694,2118.4045,1011.0850, -1, -1, playerid);
		HFCP7[playerid] = 1;
		MASCHINEFERTIG[playerid] = 1;
		return true;
	}
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	//Anti-Interiorflucht by GangstaSunny
	//KillTimer(AntiIF[playerid]);
	//KillTimer(AntiIF[issuerid]);
	//SetPVarInt(playerid,"AntiIntFlucht",1);
	//SetPVarInt(issuerid,"AntiIntFlucht",1);
	//AntiIF[playerid] = SetTimerEx("AntiIntFluchtFunction",5000,0,"i",playerid);
	//AntiIF[issuerid] = SetTimerEx("AntiIntFluchtFunction",5000,0,"i",issuerid);

	//Anti-SDM by GangstaSunny
	SetPVarInt(playerid,"AttackNotwehr",issuerid);
	if(GetPlayerScore(issuerid) < 2 && GetPVarInt(issuerid,"AttackNotwehr") != playerid)
	{
		TogglePlayerControllable(issuerid,false);
		TogglePlayerControllable(issuerid,true);
	    SDMTimer[issuerid] = SetTimerEx("AntiSDMFunction",15000,false,"i",issuerid);
	    SendClientMessage(issuerid,COLOR_SORRY,"* Achtung, unterlasse das DM als Neuling oder du wirst gebannt.");
	}
	if(SpielerInfo[issuerid][icpHitsound] == 1)
	{
	    PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
	}
	if(bodypart == 9 && GetPlayerWeapon(issuerid) == WEAPON_SNIPER)
	{
	    if(GetDistanceBetweenPlayers(playerid,issuerid) <= 70)
	    {
	        SetPlayerHealth(playerid,0.0);
	        GameTextForPlayer(issuerid,"~r~KOPFSCHUSS",3000,4);
	    }
	    else if(GetDistanceBetweenPlayers(playerid,issuerid) > 70)
	    {
	        new rand = random(5);
	        if(rand == 1)
	        {
	            SetPlayerHealth(playerid,0.0);
       			GameTextForPlayer(issuerid,"~r~KOPFSCHUSS",3000,4);
	        }
	    }
 	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
    if(weaponid == 23)
    {
        if(SpielerInfo[playerid][sFraktion] == 2 || SpielerInfo[playerid][sFraktion] == 6)
        {
            KillTimer(TazerTimer[playerid]);
			SetTimerEx("Tazer",17000,false,"i",damagedid);
            TazerTimer[playerid] = SetTimerEx("TazerSperre",25000,false,"i",playerid);
			SetPVarInt(playerid,"TazerSperre",1);
			SetPVarInt(damagedid,"Getazert",1);
			SendClientMessage(playerid,COLOR_SUPER,"Du hast den Spieler getazert.");
			TogglePlayerControllable(damagedid,false);
		}
    }
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, BULLET_HIT_TYPE:hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new string[144];
	if(hittype == BULLET_HIT_TYPE_OBJECT)
	{
		if(IsValidObject(hitid))
  		{
  		    if(hitid == BombenTor)
  		    {
  		        if(SpielerInfo[playerid][sFraktion] >= 9 && SpielerInfo[playerid][sFraktion] < 19)
  		        {
  		            if(BombenTorHealth == 10000)
  		            {
                		new rand = random(25);
                        BombenTorHealth -= rand;
                        format(string,sizeof(string),"Zugefügter Schaden: {FF0000}%d{00CDFF} | Verbleibender Schaden: {FF0000}%d{00CDFF}/{FF0000}10000",rand,BombenTorHealth);
                        SendClientMessage(playerid,COLOR_INFO,string);
         		    	SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! ES WIRD VERSUCHT, DAS TOR IN DER AREA 51 ZU ZERSTÖREN.");
  		            }
  		            else if(BombenTorHealth < 10000 && BombenTorHealth >= 25)
  		            {
  		                new rand = random(25);
                        BombenTorHealth -= rand;
                        format(string,sizeof(string),"Zugefügter Schaden: {FF0000}%d{00CDFF} | Verbleibender Schaden: {FF0000}%d{00CDFF}/{FF0000}10000",rand,BombenTorHealth);
                        SendClientMessage(playerid,COLOR_INFO,string);
  		            }
  		            else if(BombenTorHealth <= 25)
  		            {
  		                SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! ES WIRD VERSUCHT, DAS TOR IN DER AREA 51 WURDE ZERSTÖRT.");
						SendClientMessage(playerid,COLOR_SUPER,"Das Tor wurde erfolgreich zerstört!");
						DestroyObject(BombenTor);
						SetTimer("BombTorTimer",600000,false);
  		            }
  		        }
  		        else NichtBerechtigt
  		        return 1;
  		    }
  		}
	}
	return 1;
}

public ServerRestart()
{
    ServerRestartFolgt = 0;
	SendRconCommand("gmx");
}

public SaveAll()
{
    if(ServerRestartFolgt == 1)
	{
	    ServerRestartFolgt = 2;
		foreach(new i : Player)
		{
			if(IsPlayerNPC(i))
			{
				KickPlayer(i,"Server Restart");
			}
			else
   			{
			    SaveAccount(i);
	     		SavePlayerWeapons(i);
	  			SavePrivatCar(i);
  			}
		}
		SendClientMessageToAll(COLOR_SORRY,"Alle Accounts wurden erfolgreich gespeichert.");
		return 1;
	}
	else if(ServerRestartFolgt == 2)
	{
	    ServerRestartFolgt = 3;
	    SaveFrakInfo();
	    SendClientMessageToAll(COLOR_SORRY,"Alle Fraktionen wurden erfolgreich gespeichert.");
	    return 1;
	}
	else if(ServerRestartFolgt == 3)
	{
 		ServerRestartFolgt = 4;
    	SaveGangZones();
    	SaveDrogen();
    	SendClientMessageToAll(COLOR_SORRY,"Alle Gangzonen & Drogenpflanzen wurden erfolgreich gespeichert.");
    	return 1;
	}
	else if(ServerRestartFolgt == 4)
	{
 		ServerRestartFolgt = 5;
    	SaveGruppen();
    	SendClientMessageToAll(COLOR_SORRY,"Alle Gruppen wurden erfolgreich gespeichert.");
    	return 1;
	}
	else if(ServerRestartFolgt == 5)
	{
	    ServerRestartFolgt = 6;
        SaveTankstellen();
        SaveAmmunations();
        SaveStores();
        SendClientMessageToAll(COLOR_SORRY,"Alle Businesse wurden erfolgreich gespeichert.");
        return 1;
	}
	else if(ServerRestartFolgt == 6)
	{
        SaveHauser();
        SaveGarage();
        ServerRestartFolgt = 7;
        SendClientMessageToAll(COLOR_SORRY,"Alle Immobilien wurden erfolgreich gespeichert.");
	}
	else if(ServerRestartFolgt == 7)
	{
        SaveWerbetafel();
        ServerRestartFolgt = 8;
        SendClientMessageToAll(COLOR_SORRY,"Alle Werbetafeln wurden erfolgreich gespeichert.");
	}
	else if(ServerRestartFolgt == 8)
	{
        SaveVehicles();
        ServerRestartFolgt = 9;
        SendClientMessageToAll(COLOR_SORRY,"Alle Fahrzeuge wurden erfolgreich gespeichert.");
	}
	else if(ServerRestartFolgt == 9)
	{
        SaveFirmen();
        ServerRestartFolgt = 0;
        SendClientMessageToAll(COLOR_SORRY,"Alle Firmen wurden erfolgreich gespeichert.");
        KillTimer(SaveAllTimer);
	}
	return 1;
}

public ServerSpeichern()
{
    if(ServerSpeichernStatus == 1)
	{
	    ServerSpeichernStatus = 2;
		foreach(new i : Player)
		{
		    if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
		    SaveAccount(i);
   			SavePlayerWeapons(i);
  			SavePrivatCar(i);
  			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Accounts wurden erfolgreich gespeichert.");
	 		}
		}
		return 1;
	}
	else if(ServerSpeichernStatus == 2)
	{
	    ServerSpeichernStatus = 3;
	    SaveFrakInfo();
   		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Fraktionen wurden erfolgreich gespeichert.");
	 		}
		}
	    return 1;
	}
	else if(ServerSpeichernStatus == 3)
	{
 		ServerSpeichernStatus = 4;
    	SaveGangZones();
    	SaveDrogen();
   		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Gangzonen & Drogenpflanzen wurden erfolgreich gespeichert.");
	 		}
		}
    	return 1;
	}
	else if(ServerSpeichernStatus == 4)
	{
 		ServerSpeichernStatus = 5;
    	SaveGruppen();
   		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Gruppen wurden erfolgreich gespeichert.");
	 		}
		}
    	return 1;
	}
	else if(ServerSpeichernStatus == 5)
	{
	    ServerSpeichernStatus = 6;
        SaveTankstellen();
        SaveAmmunations();
        SaveStores();
   		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Businesse wurden erfolgreich gespeichert.");
	 		}
		}
        return 1;
	}
	else if(ServerSpeichernStatus == 6)
	{
        SaveHauser();
        SaveGarage();
        ServerSpeichernStatus = 7;
		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Immobilien wurden erfolgreich gespeichert.");
	 		}
		}
		return 1;
	}
	else if(ServerSpeichernStatus == 7)
	{
		SaveWerbetafel();
        ServerSpeichernStatus = 8;
		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Werbetafeln wurden erfolgreich gespeichert.");
	 		}
		}
		return 1;
	}
	else if(ServerSpeichernStatus == 8)
	{
        SaveVehicles();
        ServerSpeichernStatus = 9;
		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Fahrzeuge wurden erfolgreich gespeichert.");
	 		}
		}
        return 1;
	}
	else if(ServerSpeichernStatus == 9)
	{
        SaveFirmen();
        ServerSpeichernStatus = 10;
		foreach(new i : Player)
		{
			if(SpielerInfo[i][sAdmin] >= 6)
  			{
  			    SendClientMessage(i,COLOR_SORRY,"Alle Firmen wurden erfolgreich gespeichert.");
	 		}
		}
        return 1;
	}
	else if(ServerSpeichernStatus == 10)
	{
        ServerSpeichernStatus = 0;
        KillTimer(ServerSpeichernTimer);
	}
	return 1;
}

public ServerLaden()
{
	if(ServerLadenStatus == 1)
	{
	    printf("1. Fahrzeuginformationen werden geladen.");
	    LoadCarInfos();
	    ServerLadenStatus = 2;
	}
	else if(ServerLadenStatus == 2)
	{
	    ServerLadenStatus = 3;
	    printf("2. Fraktionsdaten werden geladen.");
	    LoadFrakInfo();
	}
	else if(ServerLadenStatus == 3)
	{
	    printf("3. Fahrzeuge werden geladen.");
	    LoadVehicles();
	    ServerLadenStatus = 4;
	}
	else if(ServerLadenStatus == 4)
	{
	    printf("4. Gangzonen und Drogenpflanzen werden geladen.");
	    LoadGangZones();
	    LoadDrogen();
	    ServerLadenStatus = 5;
	}
	else if(ServerLadenStatus == 5)
	{
	    printf("5. Tankstellen werden geladen");
	    LoadTankstellen();
	    ServerLadenStatus = 6;
	}
	else if(ServerLadenStatus == 6)
	{
	    printf("6. Ammunations werden geladen.");
	    LoadAmmunations();
	    ServerLadenStatus = 7;
	    return 1;
	}
	else if(ServerLadenStatus == 7)
	{
	    printf("7. 24/7 werden geladen.");
	    LoadStores();
	    ServerLadenStatus = 8;
	}
	else if(ServerLadenStatus == 8)
	{
	    printf("8. Haeuser werden geladen.");
	    LoadHauser();
	    ServerLadenStatus = 9;
	}
	else if(ServerLadenStatus == 9)
	{
	    printf("9. Garagen werden geladen.");
	    LoadGaragen();
	    ServerLadenStatus = 10;
	}
	else if(ServerLadenStatus == 10)
	{
 		printf("11. Blitzer werden geladen.");
	    LoadBlitzer();
	    ServerLadenStatus = 11;
	}
	else if(ServerLadenStatus == 11)
	{
 		printf("12. Gruppen werden geladen.");
	    LoadGruppen();
	    ServerLadenStatus = 12;
	}
	else if(ServerLadenStatus == 12)
	{
 		printf("13. Werbetafeln werden geladen.");
	    LoadWerbetafeln();
	    ServerLadenStatus = 13;
	}
	else if(ServerLadenStatus == 13)
	{
 		printf("14. Firmen werden geladen.");
	    LoadFirmen();
	    ServerLadenStatus = 14;
	}
	else if(ServerLadenStatus == 14)
	{
 		printf("15. Firmen-Grundstuecke werden geladen.");
	    LoadGrundstucke();
	    ServerLadenStatus = 15;
	}
	else if(ServerLadenStatus == 15)
	{
	    printf("16. Die Servereinstellungen werden geladen.");
	    LoadStuff();
	    ServerLadenStatus = 16;
	}
	else if(ServerLadenStatus == 16)
	{
	    printf("17. Die Firmen-Lager werden geladen.");
	    LoadFirmaLager();
		ServerLadenStatus = 17;
	}
	else if(ServerLadenStatus == 17)
	{
		KillTimer(ServerLadenTimer);
	    ServerLadenStatus = 0;
		printf("[SERVER WURDE ERFOLGREICH GESTARTET!]");
		SetGameModeText(SERV_MODE);
	}
	return 1;
}

public StopPlayerPlaySound(playerid)
{
    PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1069,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1098,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1166,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1184,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1186,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1188,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1036,0.0,0.0,0.0);
	return 1;
}

public RobC4Transporter(fahrerid,beifahrerid,robberid)
{
    new string[128],Float:Pos[3];
	robc4sec++;
	GetPlayerPos(fahrerid,Pos[0],Pos[1],Pos[2]);
	if(IsVehicleInRangeOfPoint(C4Transporter,10.0,Pos[0],Pos[1],Pos[2]) && IsPlayerInVehicle(robberid,C4Transporter))
	{
		pRobC4TimeNearVehicle++;
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~g~Neues C4 in ~b~%i~y~ Sekunden",60-pRobC4TimeNearVehicle);
	    GTFP(fahrerid,string,1000,3);
	    format(string,sizeof(string),"~n~~n~~n~~n~~n~~g~Neues C4 in ~b~%i~y~ Sekunden",60-pRobC4TimeNearVehicle);
	    GTFP(beifahrerid,string,1000,3);
	    format(string,sizeof(string),"~n~~n~~n~~n~~n~~g~Neues C4 in ~b~%i~y~ Sekunden",60-pRobC4TimeNearVehicle);
	    GTFP(robberid,string,1000,3);
	    pRobC4BackwardTime = 0;
	    if(pRobC4TimeNearVehicle >= 60)
	    {
		    pRobC4TimeNearVehicle = 0;
			format(string,sizeof(string),"Du reichst %s 1kg C4!",SpielerInfo[beifahrerid][sName]);
			SendClientMessage(robberid,COLOR_INFO,string);
			format(string,sizeof(string),"Du hast 1kg C4 von %s überreicht bekommen!",SpielerInfo[robberid][sName]);
			SendClientMessage(robberid,beifahrerid,string);
			GTFP(beifahrerid,"~g~C4 erhalten: ~y~1kg",1000,3);
			SpielerInfo[beifahrerid][sc4]++;
	    }
	}
	else
	{
		pRobC4BackwardTime++;
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~r~Ihr habt noch ~b~%i ~y~Sekunden~r~ um euch zum C4-Transporter zu begeben",20-pRobC4BackwardTime);
	    GTFP(fahrerid,string,1000,3);
	    format(string,sizeof(string),"~n~~n~~n~~n~~n~~r~Ihr habt noch ~b~%i ~y~Sekunden~r~ um euch zum C4-Transporter zu begeben",20-pRobC4BackwardTime);
	    GTFP(beifahrerid,string,1000,3);
	    format(string,sizeof(string),"~n~~n~~n~~n~~n~~r~Ihr habt noch ~b~%i ~y~Sekunden~r~ um euch zum C4-Transporter zu begeben",20-pRobC4BackwardTime);
	    GTFP(robberid,string,1000,3);
	    if(pRobC4BackwardTime >= 20)
	    {
			SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DER C4-TRANSPORTER WURDE ABGEBROCHEN.");
		    SendClientMessage(fahrerid,COLOR_SORRY,"Ihr seid am C4-Raub gescheitert.");
		    SendClientMessage(beifahrerid,COLOR_SORRY,"Ihr seid am C4-Raub gescheitert.");
		    SendClientMessage(robberid,COLOR_SORRY,"Ihr seid am C4-Raub gescheitert.");
		    RemovePlayerFromVehicle(robberid);
			SpielerInfo[fahrerid][sC4RobState] = false;
			SpielerInfo[beifahrerid][sC4RobState] = false;
			SpielerInfo[robberid][sC4RobState] = false;
			pRobC4BackwardTime = 0;
			pRobC4TimeNearVehicle = 0;
			KillTimer(C4robTimer);
			robc4sec = 0;
		}
	}
    if(robc4sec >= 360)
	{
		SendClientMessage(fahrerid,COLOR_SUPER,"Ihr habt den C4-Transporter erfolgreich ausgeraubt.");
	    SendClientMessage(beifahrerid,COLOR_SUPER,"Ihr habt den C4-Transporter erfolgreich ausgeraubt.");
	    SendClientMessage(robberid,COLOR_SUPER,"Ihr habt den C4-Transporter erfolgreich ausgeraubt.");
		SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DER C4-TRANSPORTER WURDE ÜBERFALLEN.");
		RemovePlayerFromVehicle(robberid);
		SpielerInfo[fahrerid][sC4RobState] = false;
		SpielerInfo[beifahrerid][sC4RobState] = false;
		SpielerInfo[robberid][sC4RobState] = false;
		pRobC4BackwardTime = 0;
		pRobC4TimeNearVehicle = 0;
		KillTimer(C4robTimer);
		robc4sec = 0;
	}
	return 1;
}

public EntKnockout(playerid)
{
    StopLoopingAnim(playerid);
    ClearAnimations(playerid);
    TextDrawHideForPlayer(playerid,BlackScreendraw);
    return true;
}

public KickTimer(playerid)
{
    TextDrawSetString(Logindraw[11],sachen[Motd]);
	SetPVarInt(playerid,"BeKicked", GetPVarInt(playerid,"BeKicked") + 1);
	if(GetPVarInt(playerid,"BeKicked") == 1)
	{
		TogglePlayerControllable(playerid,false);
		SetTimerEx("KickTimer",100,false,"i",playerid);
	}
	else if(GetPVarInt(playerid,"BeKicked") == 2){Kick(playerid);}
	return 1;
}

public ShowRegisterTextdraw(playerid)
{
   TextDrawSetString(Logindraw[11],sachen[Motd]);
   for(new i;i<16;i++) { TextDrawShowForPlayer(playerid,Logindraw[i]); }
   TextDrawShowForPlayer(playerid,Registring);
   SelectTextDraw(playerid,SRVFARBE);
   InterpolateCameraPos(playerid, 1885.304321, -904.915100, 142.389404, 1617.601806, -1121.535034, 127.599334, 18000);
   InterpolateCameraLookAt(playerid, 1881.369384, -907.981323, 142.051025, 1613.748413, -1124.710815, 127.342842, 18000);
   return 1;
}

public ShowLoginTextdraw(playerid)
{
   for(new i;i<16;i++) { TextDrawShowForPlayer(playerid,Logindraw[i]); }
   TextDrawShowForPlayer(playerid,Loginstring);
   SelectTextDraw(playerid,SRVFARBE);
   InterpolateCameraPos(playerid, 1885.304321, -904.915100, 142.389404, 1617.601806, -1121.535034, 127.599334, 18000);
   InterpolateCameraLookAt(playerid, 1881.369384, -907.981323, 142.051025, 1613.748413, -1124.710815, 127.342842, 18000);
   return 1;
}

public StartMaschine(playerid)
{
    START[playerid] = 1;
	MovePlayerObject(playerid,HolzNeu[playerid][0],940.59167, 2134.01782, 1011.47998,0.8);
	SetTimerEx("StartMaschine2",5000,false,"i",playerid);
	return true;
}

public StartMaschine2(playerid)
{
	HolzNeu[playerid][1] = CreatePlayerObject(playerid,2780, 940.44263, 2133.13452, 1009.30530,   -0.02000, 0.00000, 0.00000);
	SetTimerEx("StartMaschine3",5000,false,"i",playerid);
	return true;
}

public StartMaschine3(playerid)
{
    DestroyPlayerObject(playerid,HolzNeu[playerid][0]);
    DestroyPlayerObject(playerid,HolzNeu[playerid][1]);
    HolzNeu[playerid][2] = CreatePlayerObject(playerid,1463, 940.56653, 2134.31079, 1011.54352,   0.00000, 0.00000, 90.00000);
	SetTimerEx("StartMaschine4",1000,false,"i",playerid);
    return true;
}

public StartMaschine4(playerid)
{
    MovePlayerObject(playerid,HolzNeu[playerid][2],940.56653,  2138.5400, 1011.54352,0.8);
    SetTimerEx("StopMaschine",7000,false,"i",playerid);
    return true;
}

public StopMaschine(playerid)
{
	GameTextForPlayer(playerid,"Maschine fertig!",3000,4);
	SendClientMessage(playerid,COLOR_INFO,"Gehe nun wieder ans KeyPad und benutze 'N' um sie zu stoppen!");
	return true;
}

public SchreinereiIntro(playerid)
{
	TogglePlayerControllable(playerid,true);
	HFCP6[playerid] = 1;
	SetPlayerCheckpoint(playerid,940.6644,2128.4592,1011.0850,1.5);
	return true;
}

public BaumGefallt(playerid)
{
    SetPVarInt(playerid, "AviableInt",0);
    TogglePlayerControllable(playerid, true);
	ResetPlayerWeapons(playerid);
	if(GB2[playerid] == 1)
	{
	    SendClientMessage(playerid,COLOR_INFO,"");
	    SendClientMessage(playerid,COLOR_INFO,"Gehe nun zurück zur Base und hole dir einen Walton.");
		SendClientMessage(playerid,COLOR_INFO,"Danach fährst du mit dem Wagen zum Sägewerk in Los Santos.");
	}
    return true;
}

public ErstellungObjekteHolz(playerid)
{
	BaumeHolz[playerid][0] = CreatePlayerObject(playerid,789, 1063.57251, -251.00803, 85.67651,   0.00000, 0.00000, 0.00000); //steht
	BaumeHolz[playerid][1] = CreatePlayerObject(playerid,673, 993.35852, -382.82346, 69.91882,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][2] = CreatePlayerObject(playerid,673, 960.28668, -372.08679, 63.33770,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][3] = CreatePlayerObject(playerid,673, 982.43243, -359.07874, 68.16492,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][4] = CreatePlayerObject(playerid,673, 952.86096, -345.09460, 60.96141,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][5] = CreatePlayerObject(playerid,673, 983.79529, -328.28790, 68.14320,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][6] = CreatePlayerObject(playerid,673, 964.16803, -315.15341, 63.18056,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][7] = CreatePlayerObject(playerid,673, 990.78961, -301.31586, 69.06423,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][8] = CreatePlayerObject(playerid,673, 933.38489, -320.36514, 53.21004,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][9] = CreatePlayerObject(playerid,673, 932.79358, -357.69962, 55.07752,   0.00000, 0.00000, 0.00000);
	BaumeHolz[playerid][10] = CreatePlayerObject(playerid,673, 948.25598, -302.43826, 57.43135,   0.00000, 0.00000, 0.00000);
	return true;
}

public EntfernungObjekteHolz(playerid)
{
	DestroyPlayerObject(playerid,BaumeHolz[playerid][0]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][1]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][2]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][3]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][4]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][5]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][6]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][7]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][8]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][9]);
	DestroyPlayerObject(playerid,BaumeHolz[playerid][10]);
	return true;
}

public LockLicht(vehicleid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,false,alarm,doors,bonnet,boot,objective);
    return 1;
}

public TimeToKnast(playerid)
{
	if(SpielerInfo[playerid][sKnast] > 0)
	{
        SpielerInfo[playerid][sKnast] -= 1;
	}
	else if(SpielerInfo[playerid][sKnast] == 0)
	{
	    KillTimer(KnastTimer[playerid]);
		GameTextForPlayer(playerid,"Entlassen",3000,1);
		SpielerInfo[playerid][sKnast] = 0;
		SpielerInfo[playerid][sZelle] = 0;
		SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
		SpawnPlayerEx(playerid);
	}
}


public Float:GetDistanceBetweenPlayers(p1,p2)
{
    new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
    if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
    {
        return -1.00;
    }
    GetPlayerPos(p1,x1,y1,z1);
    GetPlayerPos(p2,x2,y2,z2);
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public Float:GetDistanceBetweenObjects(object1,object2)
{
    new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
    if(!IsValidObject(object1) || !IsValidObject(object2))
    {
        return -1.00;
    }
    GetObjectPos(object1,x1,y1,z1);
    GetObjectPos(object2,x2,y2,z2);
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public LSPDGarageT()
{
	MoveObject(LSPDGarage, 1593.3000500,-1638.0999800,12.5000000,3.0,0.0000000,0.0000000,180.0000000);
}

public LSPDSchrankeT()
{
	MoveObject(LSPDSchranke, 1544.6999500,-1630.9000200,13.1000000-0.01,0.01,0.0000000,270.0000000,270.0000000);
}

public FBITorT()
{
	MoveObject(FBITor, -2168.68530, 249.60730, 36.57600,3.0,0.00000, 0.00000, 90.00000);
}

public RussenTorT()
{
	MoveObject(RussenTor, 321.191,-1187.818,75.783,3.0,0.000,0.000,38.177);
}

public MautSchrankeT(playerid)
{
	if(GetPVarInt(playerid,"MautStation") == 1)
	{
	    MoveObject(MautSchranke[5], 1724.22595, 518.73871, 28.09300-0.01,0.01,0.00000, 89.00000, -19.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 2)
	{
	    MoveObject(MautSchranke[6], 1749.94031, 517.41351, 27.70300-0.01,0.01,0.00000, -89.80000, -19.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 3)
	{
	    MoveObject(MautSchranke[0], 50.20850, -1528.00586, 4.59290-0.01,0.01,0.00000, 88.00000, 81.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 4)
	{
	    MoveObject(MautSchranke[1], 55.64380, -1535.61462, 4.65890-0.01,0.01,0.00000, -88.00000, 82.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 5)
	{
	    MoveObject(MautSchranke[2], 32.93180, -1338.09875, 9.97200-0.01,0.01,0.00000, -89.50000, -51.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 6)
	{
	    MoveObject(MautSchranke[3], -9.03120, -1324.38770, 10.83550-0.01,0.01,0.00000, 89.50000, -50.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	else if(GetPVarInt(playerid,"MautStation") == 7)
	{
	    MoveObject(MautSchranke[4], 518.43420, 470.30151, 18.66560-0.01,0.01,0.00000, 90.00000, 35.00000);
	    DeletePVar(playerid,"MautStation");
	    return 1;
	}
	return 1;
}

public LspdDoorTimer(playerid)
{
    if(lspdaufzu == false)
    {
        lspdaufzu = true;
    	PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor, 1572.32544, -1666.77991, 1260.23682 + 0.01, 0.01, 0.0, 0.0, 0.0);
    }
    else
    {
        lspdaufzu = false;
        PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor, 1572.32544, -1666.77991, 1260.23682 - 0.01, 0.01, 0.0, 0.0, 90.0);
    }
    return 1;
}

public LspdDoorTimer2(playerid)
{
    if(lspd2aufzu == false)
    {
        lspd2aufzu = true;
    	PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor2, -2458.99023, 513.31030, 24.0757 + 0.01, 0.01, 0.0, 0.0, 90.0);
    }
    else
    {
        lspd2aufzu = false;
        PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor2, -2458.99023, 513.31030, 24.0757 - 0.01, 0.01, 0.0, 0.0, 180.0);
    }
    return 1;
}

public LspdDoorTimer3(playerid)
{
    if(lspd3aufzu == false)
    {
        lspd3aufzu = true;
    	PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor3, 1467.26086, -1808.37585, -42.96680 + 0.01, 0.01, 0.0, 0.0, 180.0);
    }
    else
    {
        lspd3aufzu = false;
        PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
        MoveObject(lspddoor3, 1467.26086, -1808.37585, -42.96680 - 0.01, 0.01, 0.0, 0.0, 90.0);
    }
    return 1;
}

public NewsTor1T()
{
	MoveObject(NewsTor[0], 781.79523, -1384.78162, 12.88760,3.0, 0.00000, 0.00000, 180.00000);
}

public NewsTor2T()
{
	MoveObject(NewsTor[1], 781.77570, -1330.23206, 12.70840,3.0, 0.00000, 0.00000, 179.60001);
}


public NewsStudioT()
{
	MoveObject(NewsStudioTor, 671.36200, -1353.85547,1696.4069,6.0, 0.00000, 0.00000, 0.00000);
}

public Tazer(playerid)
{
	DeletePVar(playerid,"Getazert");
	TogglePlayerControllable(playerid,true);
}

public TazerSperre(playerid)
{
	SendClientMessage(playerid,COLOR_SUPER,"Dein Tazer ist wieder einsatzbereit.");
    DeletePVar(playerid,"TazerSperre");
}

public PDEquiptGone(playerid)
{
	DeletePVar(playerid,"PDEquipt");
}

public CountdownTime(Sekunden)
{
	CountdownVar++;
	if(Sekunden-CountdownVar <= 5)
	{
	    foreach(new players : Player)
		{
		    if(GetPVarInt(players,"ProbeFahrt") == 1 || GetPVarInt(players,"ImImportCar") == 1)continue;
			PlayerPlaySound(players, 1139, 0.0, 0.0, 10.0);
	    	format(CountdownString,sizeof(CountdownString),"~y~%d~w~ Sekunden",Sekunden-CountdownVar);
			PlayerTextDrawSetString(players,CountdownDraw[players][3],CountdownString);
		}
	}
	else
	{
 		foreach(new players2 : Player)
		{
		    if(GetPVarInt(players2,"ProbeFahrt") == 1 || GetPVarInt(players2,"ImImportCar") == 1)continue;
			format(CountdownString,sizeof(CountdownString),"%d Sekunden",Sekunden-CountdownVar);
			PlayerTextDrawSetString(players2,CountdownDraw[players2][3],CountdownString);
		}
	}
	if(CountdownVar == Sekunden)
	{
		foreach(new players3 : Player)
		{
		    if(GetPVarInt(players3,"ProbeFahrt") == 1 || GetPVarInt(players3,"ImImportCar") == 1)continue;
		    PlayerTextDrawHide(players3,CountdownDraw[players3][0]);
		    PlayerTextDrawHide(players3,CountdownDraw[players3][1]);
		    PlayerTextDrawHide(players3,CountdownDraw[players3][2]);
		    PlayerTextDrawHide(players3,CountdownDraw[players3][3]);
	    }
		KillTimer(CountdownTimer);
		CountdownVar = 0;
		if(GlobalVars[crespawn] == 1)//Alle - Fahrzeuge
		{
		    for(new i=1; i<MAX_VEHICLES; i++)
		    {
	        	if(GetVehicleDriver(i) >= 1)continue;
	        	if(FahrzeugInfo[i][fZiviroller] == 1 || FahrzeugInfo[i][fImportCar] == 1 || FahrzeugInfo[i][fKurrierCar] == 1)continue;
	        	SetVehicleToRespawn(i);
		    }
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 3)//Pizzabote Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 2)
				{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
		    }
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Pizzaboten Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 4)//Kehrmaschinenfahrer Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 3)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Kehrmaschinenfahrer Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 5)//Piloten Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 4)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Piloten Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 6)//Busfahrer Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 5)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Busfahrer Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 7)//Müllmann Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 6)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Müllmann Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 8)//Landwirt Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 7)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Landwirt Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
		else if(GlobalVars[crespawn] == 9)//Landwirt Job - Fahrzeuge
		{
			for(new i=1; i<MAX_VEHICLES; i++)
    		{
				if(FahrzeugInfo[i][fNebenjob] == 10)
	    		{
		        	if(GetVehicleDriver(i) >= 1)continue;
		        	if(FahrzeugInfo[i][fJobFahrer] != 0)continue;
		        	SetVehicleToRespawn(i);
			    }
			}
		    SendClientMessageToAll(COLOR_INFO,"Alle unbenutzen Fahrzeuge vom Holzfäller Job wurden respawnt.");
		    GlobalVars[crespawn] = 0;
		}
	}
}

public LevelUpPlayer(playerid)
{
	if(GetPVarInt(playerid,"LevelUpTime") == 1)
	{
		PlayerTextDrawHide(playerid, LevelUP[playerid]);
	    PlayerTextDrawColour(playerid, LevelUP[playerid], 0x00E1FFFF);
		PlayerTextDrawShow(playerid, LevelUP[playerid]);
	    SetTimerEx("LevelUpPlayer",1000,false,"i",playerid);
	    SetPVarInt(playerid,"LevelUpTime",2);
	}
	else if(GetPVarInt(playerid,"LevelUpTime") == 2)
	{
	    PlayerTextDrawHide(playerid, LevelUP[playerid]);
	    PlayerTextDrawColour(playerid, LevelUP[playerid], 0xEBFF00FF);
	    PlayerTextDrawShow(playerid, LevelUP[playerid]);
	    SetTimerEx("LevelUpPlayer",1000, false,"i",playerid);
	    SetPVarInt(playerid,"LevelUpTime",3);
	}
	else if(GetPVarInt(playerid,"LevelUpTime") == 3)
	{
	    PlayerTextDrawHide(playerid, LevelUP[playerid]);
	    SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
	    StopAudioStreamForPlayer(playerid);
	    DeletePVar(playerid,"LevelUpTime");
	}
}

public settimeex(playerid)
{
    new hours,minutes,seconds,days,months,years,UhrzeitString[128], DatumString[256];
    gettime(hours, minutes, seconds);
    getdate(years, months, days);
    SetWorldTime(hours);
    format(UhrzeitString, sizeof UhrzeitString, "%02d:%02d", hours, minutes);
    TextDrawSetString(Time, UhrzeitString);
    format(DatumString, sizeof DatumString, "%02d/%02d/%04d", days, months, years);
    TextDrawSetString(Time2, DatumString);
}

public BombeExplode()
{
   	for(new bombID = 0; bombID < 10; bombID++)
	{
	    if(BombenInfo[bombID][bombcreate] == 1)
	    {
	        BombenInfo[bombID][bombtime]--;
	        if(BombenInfo[bombID][bombtime] < 1)
	        {
	            BombenInfo[bombID][bombcreate] = 0;
	            BombenInfo[bombID][bombtime] = 0;
	            GangZoneDestroy(BombenInfo[bombID][bombzone]);
	            DestroyPickup(BombenInfo[bombID][bombPickup]);
		        CreateExplosion(BombenInfo[bombID][bombPos][0],BombenInfo[bombID][bombPos][1],BombenInfo[bombID][bombPos][2],7,40.0);
		        CreateExplosion(BombenInfo[bombID][bombPos][0]+1,BombenInfo[bombID][bombPos][1]+1,BombenInfo[bombID][bombPos][2],7,40.0);
		        CreateExplosion(BombenInfo[bombID][bombPos][0]-1,BombenInfo[bombID][bombPos][1]-1,BombenInfo[bombID][bombPos][2],7,40.0);
			}
		}
	}
	return true;
}
public WerbungTimer()
{
	GlobalVars[WerbungAktiv] = 0;
	TextDrawSetString(StatusWerbung, "~g~Werbung: ~w~Keine - Benutze /ad um eine Werbung zu schalten.");
}

public PlayerMuted(playerid)
{
	SpielerInfo[playerid][sMuted] -= 1;
	if(SpielerInfo[playerid][sMuted] == 0)
	{
	    SendClientMessage(playerid,COLOR_SUPER,"Du bist wieder entmutet, reiß dich in Zukunft zusammen.");
	}
	return 1;
}

public PlayerWerbungSperre(playerid)
{
	SpielerInfo[playerid][sADSperre] -= 1;
	if(SpielerInfo[playerid][sADSperre] == 0)
	{
	    SendClientMessage(playerid,COLOR_SUPER,"Du bist wieder für die Werbung freigegeben, reiß dich in Zukunft zusammen.");
	}
	return 1;
}

public TryToNap(playerid)
{
	DeletePVar(playerid,"TriedToNap");
	return 1;
}

public Personalausweis(playerid)
{
	if(GetPVarInt(playerid,"Warten") == 1)
	{
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Achso du hast nicht genug Geld dabei. Komm einfach wieder sobald du 50$ dabei hast. Aufwiedersehen.");
	    DeletePVar(playerid,"Warten");
	    DeletePVar(playerid,"Rathaus");
        TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	SendClientMessage(playerid,COLOR_WHITE," ");
	SendClientMessage(playerid,COLOR_WHITE," ");
    SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Hier dein Personalausweis.");
	SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Da Los Santos eine große Stadt ist, werde ich dir noch einen Stadtplan mitgeben.");
	SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Michelle S.{FFFFFF} sagt: Am besten begibst du dich zur Fahrschule, du findest Sie im Stadtplan. Viel spaß noch.");
	SendClientMessage(playerid,COLOR_GREY,"* Du hast einen Personalausweis und einen Stadtplan erhalten.");
	SpielerInfo[playerid][sPerso] = 1;
	SpielerInfo[playerid][sStadtplan] = 1;
	GivePlayerMoneyEx(playerid,-50);
	TogglePlayerControllable(playerid,true);
	SetCameraBehindPlayer(playerid);
	DeletePVar(playerid,"Rathaus");
	
	new string[128];
	PlayerTextDrawShow(playerid,QuestTextdraw[playerid][0]);
	PlayerTextDrawShow(playerid,QuestTextdraw[playerid][1]);

    format(string,sizeof(string),"Hey ~b~%s",SpielerInfo[playerid][sName]);
    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][2], string);
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][2]);
    
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][3]);

    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][4], "Quest 2 ~g~erfolgreich ~w~absolviert.");
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][4]);

    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][5], "Begib dich nun zur ~b~Fahrschule~w~ (roter Marker)");
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][5]);

    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][6], "und absolviere dort deinen ~b~Autoschein");
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][6]);

    PlayerTextDrawSetString(playerid, QuestTextdraw[playerid][7], "~b~Quest 2: ~w~Absolviere deinen Autoschein-");
    PlayerTextDrawShow(playerid,QuestTextdraw[playerid][7]);

	SetPlayerCheckpoint(playerid,1021.5202,-1349.9446,13.5506,2.5);

    SpielerInfo[playerid][sQuest] = 1;
	return 1;
}

public SpeedoMeter(playerid)
{
	if(IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid))
	{
	 	new veh = GetPlayerVehicleID(playerid);
	 	if(IsAFahrrad(veh))return 1;
		if(FahrzeugInfo[veh][fTank] <= 0)
		{
			GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(veh, false, false, alarm, doors, bonnet, boot, objective);
			GameTextForPlayer(playerid,"Motor ~r~ausgeschaltet",3000,6);
			Motor[veh] = false;
			Licht[veh] = false;
		    GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~~n~~n~~n~~n~Der Tank ist leer.",3000,3);
		    KillTimer(TachoTimer[playerid]);
		    return 1;
		}
	    new string[24], Float:vHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);
  		PlayerTextDrawHide(playerid, Tacho[playerid][6]);
	    format(string,sizeof(string),"~g~%i",GetPlayerSpeed(playerid));
	    if(GetPlayerSpeed(playerid) >= 90){format(string,sizeof(string),"~y~%i",GetPlayerSpeed(playerid));}
		if(GetPlayerSpeed(playerid) >= 160){format(string,sizeof(string),"~r~%i",GetPlayerSpeed(playerid));}
		PlayerTextDrawSetString(playerid, Tacho[playerid][6], string);
		PlayerTextDrawShow(playerid, Tacho[playerid][6]);
	    PlayerTextDrawHide(playerid, Tacho[playerid][5]);
	    format(string,sizeof(string),"Schaden %.0f%",((1000 - vHealth) / 10));
		PlayerTextDrawSetString(playerid, Tacho[playerid][5], string);
		PlayerTextDrawShow(playerid, Tacho[playerid][5]);
	    NewKilometer[GetPlayerVehicleID(playerid)] = GetPlayerSpeed(playerid);
	    Kilometer(playerid);
	}
	return 1;
}

LoadCarInfos()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `carinfos` WHERE `ModelID` >= 400 AND `ModelID` <= 611", "onLoadCarInfos");
	return 1;
}

public ProbeFahrtPlayer(playerid)
{
	new string[80];
	ProbefahrtTime[playerid]--;
 	format(string,sizeof(string),"~g~%d~w~ Minuten",ProbefahrtTime[playerid]);
 	if(ProbefahrtTime[playerid] == 2){format(string,sizeof(string),"~y~%d~w~ Minuten",ProbefahrtTime[playerid]);}
 	if(ProbefahrtTime[playerid] == 1){format(string,sizeof(string),"~r~%d~w~ Minuten",ProbefahrtTime[playerid]);}
 	if(ProbefahrtTime[playerid] == 0)
	{
	    new stringanzeige[250];
	    KillTimer(ProbefahrtTimer[playerid]);
		SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid) +1);
		SendClientMessage(playerid,COLOR_YELLOW,"Du hast das Fahrzeug nicht zurückgebracht. Das Autohaus hat Anzeige erstattet!");
		format(stringanzeige,sizeof(stringanzeige),"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(playerid));
		SendClientMessage(playerid,COLOR_YELLOW,stringanzeige);
		format(string,sizeof(string),"~r~STRAFANZEIGE");
		SendCopMessage(COLOR_BLUE,"ZENTRALE: ACHTUNG: AN ALLE EINHEITEN! ES IST SOEBEN EINE NEUE STRAFANZEIGE EINGEGANGEN !!");
		format(stringanzeige,sizeof(stringanzeige),"ZENTRALE: Das Autohaus meldet ein geklautetes Fahrzeug. Der %s soll das Fahrzeug nach Ablauf der",SpielerInfo[playerid][sName]);
		SendCopMessage(COLOR_BLUE,stringanzeige);
		SendCopMessage(COLOR_BLUE,"ZENTRALE: Probefahrt-Frist nicht zurückgebracht haben. Bitte fahnden Sie nach dem Flüchtigen.");
		format(stringanzeige,sizeof(stringanzeige),"ZENTRALE: Laut Autohaus-Inhaber kann das Fahrzeug über '/orten [%d]' per GPS-Sender geortet werden.");
		SendCopMessage(COLOR_BLUE,stringanzeige);
	}
	PlayerTextDrawSetString(playerid, CountdownDraw[playerid][3], string);
	return 1;
}

public ImportCarPlayer()
{
	new string[80];
	ImportCarTime--;
 	format(string,sizeof(string),"~g~%d~w~ Minuten",ImportCarTime);
 	if(ImportCarTime == 10){format(string,sizeof(string),"~y~%d~w~ Minuten",ImportCarTime);}
 	if(ImportCarTime == 5){format(string,sizeof(string),"~r~%d~w~ Minuten",ImportCarTime);}
 	if(ImportCarTime == 0)
	{
	    KillTimer(ImportCarTimer);
	    Importfahrzeug = false;
		SetTimer("ImportCarTimer",3600000,false);
		DeleteVehicle(ImportCar);
		ImportCar = 0;
		SendClientMessageToAll(COLOR_ORANGE,"Das Importfahrzeug konnte nicht rechtzeitig abgeliefert werden.");
	}
	foreach(new i : Player)
	{
	    if(GetPVarInt(i,"Probefahrt") == 1)continue;
		PlayerTextDrawSetString(i, CountdownDraw[i][3], string);
	}
	return 1;
}

public KurrierCarPlayer(playerid)
{
	new string[80], kurrierid = GetPVarInt(playerid,"KurrierID");
	kurrierid--;
	KurrierCarTime[kurrierid]--;
 	format(string,sizeof(string),"~g~%d~w~ Minuten",KurrierCarTime[kurrierid]);
 	if(KurrierCarTime[kurrierid] == 1){format(string,sizeof(string),"~r~%d~w~ Minuten",KurrierCarTime[kurrierid]);}
 	if(KurrierCarTime[kurrierid] == 0)
	{
 		if(GetPVarInt(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],"Probefahrt") == 0)
        {
			PlayerTextDrawHide(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],CountdownDraw[FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar]][0]);
			PlayerTextDrawHide(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],CountdownDraw[FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar]][1]);
			PlayerTextDrawHide(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],CountdownDraw[FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar]][2]);
			PlayerTextDrawHide(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],CountdownDraw[FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar]][3]);
        }
	    KillTimer(KurrierCarTimer[kurrierid]);
	    SpielerInfo[FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar]][sKurrier] = 1;
		SendClientMessage(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],COLOR_ORANGE,"Das Kurrierfahrzeug konnte nicht rechtzeitig abgeliefert werden.");
  		Kurrierfahrzeug[kurrierid] = false;
		DeleteVehicle(KurrierCar[kurrierid]);
		KurrierCar[kurrierid] = 0;
		if(GetPVarInt(playerid,"KurrierID") == 1){SetPlayerPos(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],777.7709,-1016.0993,26.3594);}
		else if(GetPVarInt(playerid,"KurrierID") == 2){SetPlayerPos(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],-939.2057,1425.2814,30.4340);}
		else if(GetPVarInt(playerid,"KurrierID") == 3){SetPlayerPos(FahrzeugInfo[KurrierCar[kurrierid]][fKurrierCar],2300.4077,1928.9025,10.8417);}
	}
	foreach(new i : Player)
	{
	    if(GetPVarInt(i,"Probefahrt") == 1)continue;
		PlayerTextDrawSetString(i, CountdownDraw[i][3], string);
	}
	return 1;
}

public GangfightTime(Zone)
{
	GangZoneInfo[Zone][gzFightTime]--;
    KillTimer(GangZoneInfo[Zone][gzTimer]);
	GangZoneInfo[Zone][gzTimer] = SetTimerEx("GangfightTime",60000,false,"i",Zone);
	new gfstring[200];
	if(GangZoneInfo[Zone][gzFightTime] != 0)
	{
		foreach(new i : Player)
		{
			if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner])
			{
			    format(gfstring,sizeof(gfstring),"Noch ~r~%d Minuten ~w~verbleibend",GangZoneInfo[Zone][gzFightTime]);
			    PlayerTextDrawSetString(i, Gangfight[i][6], gfstring);
			}
		}
		return 1;
	}
	if(GangZoneInfo[Zone][gzFightTime] == 0)
	{
	    foreach(new i : Player)
		{
			if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner] || SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
			{
			    PlayerTextDrawDestroy(i, Gangfight[i][0]); PlayerTextDrawDestroy(i, Gangfight[i][1]); PlayerTextDrawDestroy(i, Gangfight[i][2]);
				PlayerTextDrawDestroy(i, Gangfight[i][3]); PlayerTextDrawDestroy(i, Gangfight[i][4]); PlayerTextDrawDestroy(i, Gangfight[i][5]); PlayerTextDrawDestroy(i, Gangfight[i][6]);
			}
		}
	    FrakInfo[GangZoneInfo[Zone][gzOwner]][fiGFAktiv] = 0;
	    FrakInfo[GangZoneInfo[Zone][gzAttacker]][fiGFAktiv] = 0;
	    KillTimer(GangZoneInfo[Zone][gzTimer]);
	    if(GangZoneInfo[Zone][gzOwnerPunkte] > GangZoneInfo[Zone][gzAttackerPunkte] || GangZoneInfo[Zone][gzOwnerPunkte] == GangZoneInfo[Zone][gzAttackerPunkte])
	    {
	        format(gfstring,sizeof(gfstring),"NEWS: Die Fraktion '%s' hat Ihr Ganggebiet gegen die Fraktion '%s' mit '%d' zu '%d' Punkten verteidigt!",FrakName(GangZoneInfo[Zone][gzOwner]),FrakName(GangZoneInfo[Zone][gzAttacker]),GangZoneInfo[Zone][gzOwnerPunkte],GangZoneInfo[Zone][gzAttackerPunkte]);
            SendClientMessageToAll(COLOR_GANGFIGHT,gfstring);
			foreach(new i : Player)
	    	{
	    	    UpdateGangZones(i);
				if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner])
				{
				    SendClientMessage(i,COLOR_GANGFIGHT,"Deine Fraktion hat das Gangfight gewonnen! Ihr habt euer Gebiet erfolgreich verteidigt!");
				}
				else if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzAttacker])
				{
				    SendClientMessage(i,COLOR_GANGFIGHT,"Deine Fraktion hat das Gangfight verloren! Strengt euch in Zukunft mehr an!");
				}
				DeletePVar(i,"TodGFZone");
			}
			GangZoneInfo[Zone][gzAttacker] = 0;
		    GangZoneInfo[Zone][gzLastFight] = 60;
		    GangZoneInfo[Zone][gzTimerLast] = SetTimerEx("LastGangFightZone",60000,true,"i",Zone);
		}
		else if(GangZoneInfo[Zone][gzOwnerPunkte] < GangZoneInfo[Zone][gzAttackerPunkte])
		{
		    FrakInfo[GangZoneInfo[Zone][gzAttacker]][fiFrakKasse] += 2000;
			new loser = GangZoneInfo[Zone][gzOwner];
			new loserpoints = GangZoneInfo[Zone][gzOwnerPunkte];
		    GangZoneInfo[Zone][gzOwner] = GangZoneInfo[Zone][gzAttacker];
		    GangZoneInfo[Zone][gzAttacker] = 0;
		    GangZoneInfo[Zone][gzLastFight] = 60;
		    new string[4];
			new iValue = GangZoneInfo[Zone][gzID];
			valstr(string,iValue);
			mysql_SetInt("gangzones", "Owner", GangZoneInfo[Zone][gzAttacker], "GID", string);
		    format(gfstring,sizeof(gfstring),"Gangzone der %s [ID:%d]\nTyp: %s | Wert: %d",FrakName(GangZoneInfo[Zone][gzOwner]),Zone,GangZoneTyp(GangZoneInfo[Zone][gzType]),GangZoneInfo[Zone][gzValue]);
		    Update3DTextLabelText(GangZoneInfo[Zone][gzLabel], 0xFFC800FF, gfstring);
		    format(gfstring,sizeof(gfstring),"NEWS: Die Fraktion '%s' hat das Ganggebiet der Fraktion '%s' mit '%d' zu '%d' Punkten übernommen!",FrakName(GangZoneInfo[Zone][gzOwner]),FrakName(loser),GangZoneInfo[Zone][gzAttackerPunkte],loserpoints);
            SendClientMessageToAll(COLOR_GANGFIGHT,gfstring);
            GangZoneInfo[Zone][gzTimerLast] = SetTimerEx("LastGangFightZone",60000, true,"i",Zone);
			foreach(new i : Player)
	    	{
	    	    UpdateGangZones(i);
				if(SpielerInfo[i][sFraktion] == GangZoneInfo[Zone][gzOwner])
				{
				    SendClientMessage(i,COLOR_GANGFIGHT,"Deine Fraktion hat das Gangfight gewonnen! Eure Fraktion erhaltet das Gebiet und 2000$!");
				}
				else if(SpielerInfo[i][sFraktion] == loser)
				{
				    SendClientMessage(i,COLOR_GANGFIGHT,"Deine Fraktion hat das Gangfight verloren! Das Ganggebiet gehört jetzt nicht mehr euch!");
				}
			}
		}
	}
	return 1;
}

public LastGangFightZone(Zone)
{
	GangZoneInfo[Zone][gzLastFight]--;
	if(GangZoneInfo[Zone][gzLastFight] == 0)
	{
	    KillTimer(GangZoneInfo[Zone][gzTimerLast]);
	}
	return 1;
}

public WertGangFightZone(Zone)
{
    new string[100], rand;
	if(GangZoneInfo[Zone][gzType] == 1){rand = random(2000)+4000;}//Geld
	else if(GangZoneInfo[Zone][gzType] == 3){rand = random(4)+10;}//Samen
	GangZoneInfo[Zone][gzValue] += rand;
    format(string,sizeof(string),"Gangzone der %s [ID:%d]\nTyp: %s | Wert: %d",FrakName(GangZoneInfo[Zone][gzOwner]),Zone,GangZoneTyp(GangZoneInfo[Zone][gzType]),GangZoneInfo[Zone][gzValue]);
    Update3DTextLabelText(GangZoneInfo[Zone][gzLabel], 0xFFC800FF, string);
    return 1;
}

public FrakCarRespawnTimout(Fraktion)
{
	FrakInfo[Fraktion][fiCarRespawn]--;
	if(FrakInfo[Fraktion][fiCarRespawn] == 0)
	{
	    KillTimer(FrakInfo[Fraktion][fiCarRespawnTimer]);
	}
}

public GruppenCarRespawnTimout(Gruppe)
{
	GruppenInfo[Gruppe][gCarRespawn]--;
	if(GruppenInfo[Gruppe][gCarRespawn] == 0)
	{
	    KillTimer(GruppenInfo[Gruppe][gCarRespawnTimer]);
	}
}

public CTFTryTimeOut(Zone)
{
	GangZoneInfo[Zone][gzCTFTry] = 0;
}

public GodmodeCheck(playerid,pID)
{
	if(!IsPlayerConnected(pID))return NichtOnline
	new Float:Leben,string[164];
	GetPlayerHealth(pID,Leben);
	SendClientMessage(pID,COLOR_SUPER,"Godmode Test: Der Godmode Check wurde erfolgreich beendet.");
	SendClientMessage(pID,COLOR_SUPER,"Godmode Test: Das Ergebnis wurde dem Teammitglied übermittelt.");
	format(string,sizeof(string),"Godmode Test: Du hast den %s auf Godmode überprüft.",SpielerInfo[pID][sName]);
	SendClientMessage(playerid,COLOR_SUPER,string);
	if(Leben >= 100)
	{
		SendClientMessage(playerid,COLOR_WHITE,"Godmode Test: {00FF00}Positiv{FFFFFF}!");
		SetPlayerHealth(pID,100);
	}
	else
	{
    	SendClientMessage(playerid,COLOR_WHITE,"Godmode Test: {FF0000}Negativ{FFFFFF}!");
    	SetPlayerHealth(pID,100);
	}
	return 1;
}

public TrailerBetanken(playerid)
{
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	TogglePlayerControllable(playerid,true);
	if(!AnTankstelle(playerid))
	{
		SendClientMessage(playerid,COLOR_SUPER,"Dein Anhänger wurde erfolgreich aufgetankt. Du kannst die Tankstellen jetzt beliefern.");
		SendClientMessage(playerid,COLOR_INFO,"Hinweis: Benutze '/tankstelleninfo' um den Status der Tankstellen einzusehen.");
	}
	else
 	{
 	    new merker = false, tsid = GetNearTankstelleID(playerid);
 	    DeletePVar(playerid,"TStelleBetanken");
     	if(GetPVarInt(playerid,"TrailerBetanken") == 1)//Benzin
     	{
     	    new Liter = 10000-TankstellenInfo[tsid][tsBenzinLiter];
			new abzug = GetPVarInt(playerid,"TrailerKapazität")-Liter;
			if(abzug <= 0)
			{
                if(strlen(TankstellenInfo[tsid][tsBesitzer]) < 2)//Staat
                {
                    new string[150];
                    format(string,sizeof(string),"Dein Gehalt in höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[1][jiGehalt]);
					SendClientMessage(playerid,COLOR_SUPER,string);
					SpielerInfo[playerid][sPayDayGeld] += JobInfo[1][jiGehalt];
				}
				TankstellenInfo[tsid][tsBenzinLiter] += GetPVarInt(playerid,"TrailerKapazität");
				SetPVarInt(playerid,"TrailerKapazität",0);
  				merker = true;

			}
			else if(abzug > 0)
			{
			    TankstellenInfo[tsid][tsBenzinLiter] += Liter;
			    SetPVarInt(playerid,"TrailerKapazität",abzug);
			}
   			TankstellenInfo[tsid][tsIsFillingB] = 0;
     	}
     	else if(GetPVarInt(playerid,"TrailerBetanken") == 2)//Diesel
     	{
 	    	new Liter = 10000-TankstellenInfo[tsid][tsDieselLiter];
			new abzug = GetPVarInt(playerid,"TrailerKapazität")-Liter;
			if(abzug <= 0)
			{
   				if(strlen(TankstellenInfo[tsid][tsBesitzer]) < 2)//Staat
                {
                    new string[150];
                    format(string,sizeof(string),"Dein Gehalt in höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[1][jiGehalt]);
					SendClientMessage(playerid,COLOR_SUPER,string);
			    	SpielerInfo[playerid][sPayDayGeld] += JobInfo[1][jiGehalt];
				}
  				TankstellenInfo[tsid][tsDieselLiter] += GetPVarInt(playerid,"TrailerKapazität");
  				SetPVarInt(playerid,"TrailerKapazität",0);
  				merker = true;
			}
			else if(abzug > 0)
			{
			    TankstellenInfo[tsid][tsDieselLiter] += Liter;
			    SetPVarInt(playerid,"TrailerKapazität",abzug);
			}
			TankstellenInfo[tsid][tsIsFillingD] = 0;
     	}
     	else if(GetPVarInt(playerid,"TrailerBetanken") == 3)//Kerosin
     	{
	    	new Liter = 10000-TankstellenInfo[tsid][tsKerosinLiter];
			new abzug = GetPVarInt(playerid,"TrailerKapazität")-Liter;
			if(abzug <= 0)
			{
   				if(strlen(TankstellenInfo[tsid][tsBesitzer]) < 2)//Staat
                {
                    new string[150];
                    format(string,sizeof(string),"Dein Gehalt in höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[1][jiGehalt]);
					SendClientMessage(playerid,COLOR_SUPER,string);
			    	SpielerInfo[playerid][sPayDayGeld] += JobInfo[1][jiGehalt];
				}
  				TankstellenInfo[tsid][tsKerosinLiter] += GetPVarInt(playerid,"TrailerKapazität");
  				SetPVarInt(playerid,"TrailerKapazität",0);
				merker = true;
			}
			else if(abzug > 0)
			{
			    TankstellenInfo[tsid][tsKerosinLiter] += Liter;
			    SetPVarInt(playerid,"TrailerKapazität",abzug);
			}
			TankstellenInfo[tsid][tsIsFillingK] = 0;
     	}
	    new string[224];
	    SendClientMessage(playerid,COLOR_YELLOW,">>> Neue Anhänger Kapazität <<<");
	    format(string,sizeof(string),"{FF0000}%d{FFFFFF}L/1000L",GetPVarInt(playerid,"TrailerKapazität"));
	    SendClientMessage(playerid,COLOR_WHITE,string);
	    SendClientMessage(playerid,COLOR_SORRY,"");
        SendClientMessage(playerid,COLOR_YELLOW,">>> Neue Tankstellen Kapazität <<");
        format(string,sizeof(string),"Benzin: {FF0000}%d{FFFFFF}L/10000L",TankstellenInfo[tsid][tsBenzinLiter]);
    	SendClientMessage(playerid,COLOR_WHITE,string);
     	format(string,sizeof(string),"Diesel: {FF0000}%d{FFFFFF}L/10000L",TankstellenInfo[tsid][tsDieselLiter]);
    	SendClientMessage(playerid,COLOR_WHITE,string);
     	format(string,sizeof(string),"Kerosin: {FF0000}%d{FFFFFF}L/10000L",TankstellenInfo[tsid][tsKerosinLiter]);
    	SendClientMessage(playerid,COLOR_WHITE,string);
    	SendClientMessage(playerid,COLOR_SORRY,"");
    	format(string,sizeof(string),"Du hast vom Staat %d$ erhalten.",JobInfo[1][jiGehalt]);
    	SendClientMessage(playerid,COLOR_WHITE,string);
		if(merker)
		{
		    SendClientMessage(playerid,COLOR_SORRY,"");
		    DeletePVar(playerid,"TruckerAngebot");
		    SendClientMessage(playerid,COLOR_INFO,"Gebe deinen Anhänger am roten Marker ab. Dies ist notwendig, um dein Gehalt zu erhalten.");
		    SetPlayerCheckpoint(playerid,2153.7937,-2290.0913,13.3805,5.0);
		}
	}
	return 1;
}

public TheoriAufgaben(playerid)
{
	ClearChat(playerid,10);
	if(GetPVarInt(playerid,"TheoriTest") == 1)
	{
	    SetPVarInt(playerid,"TheoriTest",2);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 1/4 ~_____________________|");
	  	SendClientMessage(playerid, COLOR_WHITE, "Auf welcher Fahrspur darfst du andere Fahrzeuge überholen?");
	  	SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
	 	SendClientMessage(playerid, COLOR_WHITE, "A: Links");//Richtig
	   	SendClientMessage(playerid, COLOR_WHITE, "B: Rechts");
	   	SendClientMessage(playerid, COLOR_WHITE, "C: Beide");
   	}
	else if(GetPVarInt(playerid,"TheoriTest") == 2)
	{
	    SetPVarInt(playerid,"TheoriTest",3);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 2/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Wie lautet die Richtgeschwindigkeit in der Stadt?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Es gibt keine maximalen Geschwindigkeiten, es wird sich angepasst");
		SendClientMessage(playerid, COLOR_WHITE, "B: Bis zu 90 KM/H auf Landstraßen und in der Stadt");
		SendClientMessage(playerid, COLOR_WHITE, "C: Maximal 90 KM/H in der Stadt, ländlich empfohlen max. 160 KM/H");//Richtig
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 3)
	{
        SetPVarInt(playerid,"TheoriTest",4);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 3/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Was ist deine Aufgabe wenn dir ein Einsatzfahrzeug begegnet?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Hupen und andere Autofahrer warnen");
		SendClientMessage(playerid, COLOR_WHITE, "B: Die Polizei verständigen und um Hilfe beten");
		SendClientMessage(playerid, COLOR_WHITE, "C: Rechts ran fahren und Platz machen");//Richtig
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 4)
	{
        SetPVarInt(playerid,"TheoriTest",5);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 4/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Wie lange darfst du dein Fahrzeug maximal am Straßenrand parken?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Da es dafür keine Regelung gibt, ist das mir überlassen");
		SendClientMessage(playerid, COLOR_WHITE, "B: Maximal 3 Minuten, es sei den es hat eine Panne");//Richtig
		SendClientMessage(playerid, COLOR_WHITE, "C: Nur 5 Minuten, länger wenn ich neben einem Parkplatz parke");
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 5)
	{
        SetPVarInt(playerid,"TheoriTest",6);
	}
}

public TheoriFlugAufgaben(playerid)
{
	ClearChat(playerid,10);
	if(GetPVarInt(playerid,"TheoriTest") == 1)
	{
	    SetPVarInt(playerid,"TheoriTest",2);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 1/4 ~_____________________|");
	  	SendClientMessage(playerid, COLOR_WHITE, "Welches der folgenden Regeln gibt es?");
	  	SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
	 	SendClientMessage(playerid, COLOR_WHITE, "A: Tiefflugverbot");//Richtig
	   	SendClientMessage(playerid, COLOR_WHITE, "B: Tiefflugerlaubnis");
	   	SendClientMessage(playerid, COLOR_WHITE, "C: Beim Fliegen gibt es keine Regeln");
   	}
	else if(GetPVarInt(playerid,"TheoriTest") == 2)
	{
	    SetPVarInt(playerid,"TheoriTest",3);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 2/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Wo ist das Landen erlaubt?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Man darf überall landen");
		SendClientMessage(playerid, COLOR_WHITE, "B: Nur am Flughafen und im Gelände");
		SendClientMessage(playerid, COLOR_WHITE, "C: Nur an Flughäfen und gekennzeichneten Hubschrauber-Landeplätzen");//Richtig
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 3)
	{
        SetPVarInt(playerid,"TheoriTest",4);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 3/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Darfst du in der Nacht fliegen?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Nein. Es herrscht ein Nachtflugverbot");
		SendClientMessage(playerid, COLOR_WHITE, "B: Ja, aber nur wenn ich eine Nachtfluglizenz besitze");
		SendClientMessage(playerid, COLOR_WHITE, "C: Ja darf man. Es zählt nur erhöhte Vorsicht");//Richtig
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 4)
	{
        SetPVarInt(playerid,"TheoriTest",5);
		SendClientMessage(playerid, COLOR_RED, "|_____________________~ Frage 4/4 ~_____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Gibt es eine Flugverbotszone? Wenn ja, was ist das?");
		SendClientMessage(playerid, COLOR_RED, "_________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "A: Nein, gibt es nicht");
		SendClientMessage(playerid, COLOR_WHITE, "B: Ja gibt es. Das sind Staatsgebäude wie Polizei,- & Regierungseinrichtungen");//Richtig
		SendClientMessage(playerid, COLOR_WHITE, "C: Ja gibt es. Darf ich aber ohne weiters überfliegen");
	}
	else if(GetPVarInt(playerid,"TheoriTest") == 5)
	{
        SetPVarInt(playerid,"TheoriTest",6);
	}
}

public Praxis(playerid)
{
    SetPVarInt(playerid,"FahrschulStunde",1);
    TogglePlayerControllable(playerid,true);
}

public OhneSchein(playerid)
{
	SetPlayerDrunkLevel(playerid, 8000);
}

public Heilen(playerid)
{
	new pID = GetPVarInt(playerid,"Arzt");
 	new Float:Health, string[128];
	GetPlayerHealth(playerid,Health);
	if(!IsPlayerConnected(pID) || GetDistanceBetweenPlayers(playerid, pID) > 12)
 	{
 	    DeletePVar(playerid,"Arzt");
 	    DeletePVar(playerid,"HealthPreis");
 	    SendClientMessage(playerid,COLOR_SORRY,"Die Behandlung wurde abgebrochen.");
 	    KillTimer(HealthTimer[playerid]);
 	    KillTimer(HealthTimer[pID]);
 	    return 1;
  	}
  	else
   	{
		if(Health < 100)
  		{
  		    SetPlayerHealth(playerid,Health+7);
			return 1;
		}
		else if(Health == 100 || Health > 100)
		{
		    SetPlayerHealth(playerid,100);
			format(string,sizeof(string),"%s %s hat dich erfolgreich geheilt.",RangName(pID),SpielerInfo[pID][sName]);
			SendClientMessage(playerid,COLOR_SUPER,string);
			format(string,sizeof(string),"Du hast %s erfolgreich geheilt.",SpielerInfo[playerid][sName]);
			SendClientMessage(pID,COLOR_SUPER,string);
			TogglePlayerControllable(playerid,true);
			TogglePlayerControllable(pID,true);
		    KillTimer(HealthTimer[playerid]);
		    KillTimer(HealthTimer[pID]);
		    DeletePVar(playerid,"Arzt");
 	    	DeletePVar(playerid,"HealthPreis");
 	    	DeletePVar(pID,"Patient");
 	    	DeletePVar(pID,"HealthPreis");
		    return 1;
		}
	}
	return 1;
}

/*public Krankenhaus(playerid)
{
    SpielerInfo[playerid][sKrankenhaus] = 0;
    SpielerInfo[playerid][sWiederbeleben] = 0;
    ClearChat(playerid,10);
    TogglePlayerControllable(playerid, true);
    GivePlayerMoneyEx(playerid,-250);
    KillTimer(KrankenhausTimer[playerid]);
    SendClientMessage(playerid,COLOR_WHITE,"Du wurdest aus dem Krankenhaus entlassen. Die Behandlung kostete dich {FF0000}250${FFFFFF}.");
	if(SpielerInfo[playerid][sFraktion] < 9)//Zivilist
	{
	    SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));
	}
	else if(SpielerInfo[playerid][sFraktion] >= 9)//Gang
	{
		new skinid[3], string[25];
		format(skinid,sizeof(skinid),"%d",SpielerInfo[playerid][sFraktion]);
		format(string,sizeof(string),"Rang%d",SpielerInfo[playerid][sRank]);
		SetPlayerSkin(playerid,mysql_GetInt("skinordnung", string, "frakid", skinid));
	}
	Tot_X[playerid] = 0;
	Tot_Y[playerid] = 0;
 	Tot_Z[playerid] = 0;
	Tot_Int[playerid] = 0;
	Tot_World[playerid] = 0;
	SpawnPlayerEx(playerid);
	return 1;
}*/

public DeadCountdown(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SpielerInfo[playerid][sWiederbeleben] = 0;
	/*SpielerInfo[playerid][sKrankenhaus] = 1;
	SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir haben dich schwer verletzt auf dem Boden gefunden.");
	SendClientMessage(playerid,COLOR_WHITE,"{FF0000}Dr.Maylay{FFFFFF} sagt: Wir werden alles geben, damit du wieder Gesund wirst.");
	SetPlayerPos(playerid,1157.0767,-1333.8702,-0.8598);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	TogglePlayerControllable(playerid, false);
	InterpolateCameraPos(playerid, 1218.753417, -1390.132690, 27.705785, 1213.214477, -1286.707763, 21.138881, 30000);
	InterpolateCameraLookAt(playerid, 1215.090942, -1387.057373, 26.246854, 1209.218261, -1289.590820, 20.291431, 30000);
	KrankenhausTimer[playerid] = SetTimerEx("Krankenhaus",30000,false,"i",playerid);*/
	KillTimer(FallPlayerTimer[playerid]);
   	KillTimer(DeadTimer[playerid]);
	SpawnPlayerEx(playerid);
}

public FallPlayer(playerid)
{
	SetPlayerPos(playerid, Tot_X[playerid], Tot_Y[playerid], Tot_Z[playerid]);
	SetPlayerInterior(playerid, Tot_Int[playerid]);
	SetPlayerVirtualWorld(playerid, Tot_World[playerid]);
	ApplyAnimationEx(playerid,"PED","KO_skid_front",4.1, false, true, true, true, 0);
}

LoadTankstellen()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `tankstellen` ORDER BY `ID` ASC", "onLoadTankstellen");
	return 1;
}

LoadAmmunations()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `ammunation` ORDER BY `ID` ASC", "onLoadAmmunations");
	return 1;
}

LoadStores()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `stores` ORDER BY `ID` ASC", "onLoadStores");
	return 1;
}

LoadHauser()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `hauser` ORDER BY `ID` ASC", "onLoadHauser");
	return 1;
}

LoadGaragen()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `garagen` ORDER BY `ID` ASC", "onLoadGaragen");
	return 1;
}

LoadJobInfos()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `jobinfos` ORDER BY `ID` ASC", "onLoadJobInfos");
	return 1;
}

LoadBlitzer()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `blitzer` ORDER BY `ID` ASC", "onLoadBlitzer");
	return 1;
}

LoadGruppen()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `gruppen` ORDER BY `ID` ASC", "onLoadGruppen");
	return 1;
}

LoadWerbetafeln()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `werbetafel` ORDER BY `ID` ASC", "onLoadWerbetafeln");
	return 1;
}

LoadFirmen()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `firmen` ORDER BY `ID` ASC", "onLoadFirmen");
	return 1;
}

LoadGrundstucke()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `firmagrundstucke` ORDER BY `firmengrid` ASC", "onLoadGrundstucke");
	return 1;
}

LoadStuff()
{
 	mysql_tquery(sqlHandle, "SELECT * FROM `stuff` WHERE `ID`='1' LIMIT 1", "onLoadStuff");
 	return 1;
}

LoadFirmaLager()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `firmalager` ORDER BY `firmenlid` ASC", "onLoadFirmaLager");
	return 1;
}

public Wetter()
{
	SendICPMessage("Das News Studio informiert, dass eine Wetteränderung in ganz San Andreas vorliegt.");
	Weather[0] = WetterRandomLS[random(sizeof(WetterRandomLS))];
	Weather[1] = WetterRandomSF[random(sizeof(WetterRandomSF))];
	Weather[2] = WetterRandomLV[random(sizeof(WetterRandomLV))];
}

public SetPlayerWetter(playerid)
{
    if(GetPVarInt(playerid,"InGarage") == 0 || GetPVarInt(playerid,"InHaus") == 0)
    {
	    new Float:xx, Float:yy, Float:zz;
		GetPlayerPos(playerid, xx, yy, zz);
		if((xx > -992.5172 && xx < 4000.0000) && (yy < 528.0000 && yy > -4000.0000)) //Los Santos
		{
			SetPlayerWeather(playerid, Weather[0]);
		}
		if((xx > -4000.0000 && xx< -992.5172) && (yy < 4000.0000 && yy > -4000.0000)) //San Fierro
		{
			SetPlayerWeather(playerid, Weather[1]);
		}
		if((xx > -992.5172 && xx< 4000.0000) && (yy < 4000.0000 && yy > 528.0000)) //Las Venturas
		{
			SetPlayerWeather(playerid, Weather[2]);
		}
	}
	return 1;
}

public Reanimation(playerid)
{
	ClearAnimations(playerid, SYNC_ALL);
	SendClientMessage(playerid,COLOR_SUPER,"Du wurdest wiederbelebt.");
	TogglePlayerControllable(GetPVarInt(playerid,"Lebensretter"), true);
	SpawnPlayerEx(playerid);
	return 1;
}

public BankrobTimer()
{
	Bankrob = 0;
	BankRobGeldSackSpawned[0] = 0;
	BankRobGeldSackSpawned[1] = 0;
	BankRobAmLaufen = 0;
	BankAttacker = 0;
}

public PlayerBankrob(playerid)
{
	new string[224];
	if(PlayerBankRobSec[playerid] != 0)
	{
    	PlayerBankRobSec[playerid]--;
    	format(string,sizeof(string),"~w~ NOCH ~b~ %d Sekunden ~w~ BIS ZUM NEUEN GELDBEUTEL",PlayerBankRobSec[playerid]);
		PlayerTextDrawSetString(playerid, BankraubTD[playerid][5], string);
	}
	else if(PlayerBankRobSec[playerid] == 0)
	{
	    PlayerBankRobSec[playerid] = 60;
		PlayerTextDrawSetString(playerid, BankraubTD[playerid][5], "~w~ NOCH ~b~ 60 Sekunden ~w~ BIS ZUM NEUEN GELDBEUTEL");

		new Random_Geld = 2000+random(5000);
		if(BankRobGeldSackSpawned[1] == 0 && BankRobVan == 0)
		{
			BankRobGeld[0] = Random_Geld;
			BankRobGeldSack[0] = CreateDynamicObject(1550,GeldSack[0][0],GeldSack[0][1],GeldSack[0][2],GeldSack[0][3],GeldSack[0][4],GeldSack[0][5]);
	 	    BankRobGeldSackLabel[0] = Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N'{FFFFFF}\num den Geldsack aufzuheben", 0x008080FF, GeldSack[0][0],GeldSack[0][1],GeldSack[0][2], 5.0, 0);
	        PlayerTextDrawSetString(playerid, BankraubTD[playerid][4], "~w~ GELDBEUTEL IN DER BANK: ~b~ 1");
			SendClientMessage(playerid,COLOR_YELLOW,"Hebe die Geldsäcke mit der N Taste auf und bringe sie in das Fluchtfahrzeug.");
			SendClientMessage(playerid,COLOR_INFO,"Das Fluchtfahrzeug befindet sich am roten Marker.");
			SetPlayerCheckpoint(playerid,1796.7577,-1715.0984,13.6615,5.0);
			
 			new vehicleid;
			vehicleid = CreateVehicle(482,1796.7577,-1715.0984,13.6615,178.9112,0,0,-1);
			FahrzeugInfo[vehicleid][fModelID] = 482;
			LinkVehicleToInterior(vehicleid,GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(vehicleid,GetPlayerVirtualWorld(playerid));
			FahrzeugInfo[vehicleid][fTank] = VehicleData[FahrzeugInfo[vehicleid][fModelID]-400][vehLiter];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);

			FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
			FahrzeugInfo[vehicleid][fPosition][0] = 1796.7577; FahrzeugInfo[vehicleid][fPosition][1] = -1715.0984; FahrzeugInfo[vehicleid][fPosition][2] = 13.6615; FahrzeugInfo[vehicleid][fPosition][3] = 178.9112; FahrzeugInfo[vehicleid][fColor][1] = 0;
			format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Bankrob"); FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 0; FahrzeugInfo[vehicleid][fPaintjob] = 3;
			FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter]; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0; FahrzeugInfo[vehicleid][fAutohaus] = 0;
			FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 0; FahrzeugInfo[vehicleid][fSupmobil] = 0;
			FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0; FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0; FahrzeugInfo[vehicleid][fBankrob] = BankAttacker;

			FahrzeugInfo[vehicleid][fTuning][0] = 0;
			FahrzeugInfo[vehicleid][fTuning][1] = 0;
			FahrzeugInfo[vehicleid][fTuning][2] = 0;
			FahrzeugInfo[vehicleid][fTuning][3] = 0;
			FahrzeugInfo[vehicleid][fTuning][4] = 0;
			FahrzeugInfo[vehicleid][fTuning][5] = 0;
			FahrzeugInfo[vehicleid][fTuning][6] = 0;
			FahrzeugInfo[vehicleid][fTuning][7] = 0;
			FahrzeugInfo[vehicleid][fTuning][8] = 0;
			FahrzeugInfo[vehicleid][fTuning][9] = 0;
			FahrzeugInfo[vehicleid][fTuning][10] = 0;
			FahrzeugInfo[vehicleid][fTuning][11] = 0;
			FahrzeugInfo[vehicleid][fTuning][12] = 0;
			FahrzeugInfo[vehicleid][fTuning][13] = 0;

			SetVehicleNumberPlate(vehicleid,FahrzeugInfo[vehicleid][fKennzeichen]);

			Motor[vehicleid] = false;
			Licht[vehicleid] = false;
			DOOR[vehicleid] = false;
			Motorhaube[vehicleid] = false;
			Kofferraum[vehicleid] = false;

			SetVehicleHealth(vehicleid,2000);
			BankRobVan = vehicleid;
	
			BankRobGeldSackSpawned[0]++;
			BankRobGeldSackSpawned[1]++;
			return 1;
		}
	 	else if(BankRobGeldSackSpawned[1] == 1)
		{
			BankRobGeldSack[BankRobGeldSackSpawned[1]] = CreateDynamicObject(1550,GeldSack[BankRobGeldSackSpawned[1]][0],GeldSack[BankRobGeldSackSpawned[1]][1],GeldSack[BankRobGeldSackSpawned[1]][2],GeldSack[BankRobGeldSackSpawned[1]][3],GeldSack[BankRobGeldSackSpawned[1]][4],GeldSack[BankRobGeldSackSpawned[1]][5]);
	    	BankRobGeldSackLabel[BankRobGeldSackSpawned[1]] = Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N'{FFFFFF}\num den Geldsack aufzuheben", 0x008080FF, GeldSack[BankRobGeldSackSpawned[1]][0],GeldSack[BankRobGeldSackSpawned[1]][1],GeldSack[BankRobGeldSackSpawned[1]][2], 5.0, 0);
            if(BankRobGeldSackSpawned[0] == 0)
			{
	        	PlayerTextDrawSetString(playerid, BankraubTD[playerid][4], "~w~ GELDBEUTEL IN DER BANK: ~b~ 1");
	        }
	        else if(BankRobGeldSackSpawned[0] == 1)
	        {
	            PlayerTextDrawSetString(playerid, BankraubTD[playerid][4], "~w~ GELDBEUTEL IN DER BANK: ~b~ 2");
	        }
			BankRobGeld[BankRobGeldSackSpawned[1]] = Random_Geld;
			BankRobGeldSackSpawned[0]++;
			BankRobGeldSackSpawned[1]++;
			return 1;
		}
	 	else if(BankRobGeldSackSpawned[1] > 1 && BankRobGeldSackSpawned[1] < 9)
		{
			BankRobGeldSackSpawned[0]++;
			BankRobGeldSackSpawned[1]++;
			BankRobGeldSack[BankRobGeldSackSpawned[1]] = CreateDynamicObject(1550,GeldSack[BankRobGeldSackSpawned[1]][0],GeldSack[BankRobGeldSackSpawned[1]][1],GeldSack[BankRobGeldSackSpawned[1]][2],GeldSack[BankRobGeldSackSpawned[1]][3],GeldSack[BankRobGeldSackSpawned[1]][4],GeldSack[BankRobGeldSackSpawned[1]][5]);
	 	    BankRobGeldSackLabel[BankRobGeldSackSpawned[1]] = Create3DTextLabel("{FFFFFF}Benutze '{FF0000}N'{FFFFFF}\num den Geldsack aufzuheben", 0x008080FF, GeldSack[BankRobGeldSackSpawned[1]][0],GeldSack[BankRobGeldSackSpawned[1]][1],GeldSack[BankRobGeldSackSpawned[1]][2], 5.0, 0);
			BankRobGeld[BankRobGeldSackSpawned[1]] = Random_Geld;
			format(string,sizeof(string),"~w~ GELDBEUTEL IN DER BANK: ~b~ %d",BankRobGeldSackSpawned[0]);
	        PlayerTextDrawSetString(playerid, BankraubTD[playerid][4], string);
			return 1;
		}
		else if(BankRobGeldSackSpawned[1] == 9)
		{
		    KillTimer(PlayerBankRobTimer[playerid]);
		    SendClientMessage(playerid,COLOR_SUPER,"Das komplette Geld wurde in Säcke gepackt.");
     		format(string,sizeof(string),"~r~ Kein Geldsack mehr vorhanden",PlayerBankRobSec[playerid]);
			PlayerTextDrawSetString(playerid, BankraubTD[playerid][5], string);
		    return 1;
		}
	}
	return 1;
}

public PizzaBekommen(playerid)
{
 	if(GetPVarInt(playerid,"PizzaTragen") == 0)
 	{
 	    SetPVarInt(playerid,"PizzaTragen",1);
 	    SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 1)
 	{
 	    SetPVarInt(playerid,"PizzaTragen",2);
 	    SetPlayerAttachedObject(playerid,1,1582,6,0.144000,0.125000,-0.271000,64.000068,11.300006,95.000099,1.000000,1.000000,1.000000);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 2)
 	{
        SetPVarInt(playerid,"PizzaTragen",3);
        SetPlayerAttachedObject(playerid,2,1582,5,0.140000,0.242999,0.091000,-84.100090,171.000045,-111.600036,1.000000,1.000000,1.000000);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 3)
 	{
        SetPVarInt(playerid,"PizzaTragen",4);
        SetPlayerAttachedObject(playerid,3,1582,5,0.128000,0.304999,0.102000,-84.599952,170.100112,-111.000007,1.000000,1.000000,1.000000);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 4)
 	{
        SetPVarInt(playerid,"PizzaTragen",5);
        TogglePlayerControllable(playerid, true);
        SetPlayerAttachedObject(playerid,4,1582,5,0.113999,0.361999,0.106000,95.900123,8.800045,69.599998,1.000000,1.000000,1.000000);
        KillTimer(PizzaBekommenTimer[playerid]);
        SendClientMessage(playerid,COLOR_SUPER,"Begebe dich jetzt zu einem Dienstfahrzeug und benutze hinten am Kofferraum '/reinlegen'.");
 	}
	return 1;
}

public PizzaReinlegen(playerid)
{
	if(GetPVarInt(playerid,"PizzaTragen") == 5)
 	{
 	    SetPVarInt(playerid,"PizzaTragen",4);
 	    RemovePlayerAttachedObject(playerid,4);
 	    PizzaSpieler[playerid][0] = CreateDynamicObject(1582,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(PizzaSpieler[playerid][0], GetPVarInt(playerid,"PizzaAuto"), -0.524999,-1.875000,0.325000,0.000000,0.000000,0.000000);
		Streamer_Update(playerid);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 4)
 	{
 	    SetPVarInt(playerid,"PizzaTragen",3);
 	    RemovePlayerAttachedObject(playerid,3);
 	    PizzaSpieler[playerid][1] = CreateDynamicObject(1582,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(PizzaSpieler[playerid][1], GetPVarInt(playerid,"PizzaAuto"), 0.124999,-1.875000,0.325000,0.000000,0.000000,0.000000);
		Streamer_Update(playerid);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 3)
 	{
        SetPVarInt(playerid,"PizzaTragen",2);
        RemovePlayerAttachedObject(playerid,2);
        PizzaSpieler[playerid][2] = CreateDynamicObject(1582,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(PizzaSpieler[playerid][2], GetPVarInt(playerid,"PizzaAuto"), 0.609999,-1.875000,0.325000,0.000000,0.000000,0.000000);
		Streamer_Update(playerid);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 2)
 	{
        SetPVarInt(playerid,"PizzaTragen",1);
        RemovePlayerAttachedObject(playerid,1);
        PizzaSpieler[playerid][3] = CreateDynamicObject(1582,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(PizzaSpieler[playerid][3], GetPVarInt(playerid,"PizzaAuto"), -0.270000,-1.875000,0.394999,0.000000,0.000000,0.000000);
		Streamer_Update(playerid);
 	}
 	else if(GetPVarInt(playerid,"PizzaTragen") == 1)
 	{
        SetPVarInt(playerid,"PizzaTragen",0);
        RemovePlayerAttachedObject(playerid,0);
        PizzaSpieler[playerid][4] = CreateDynamicObject(1582,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(PizzaSpieler[playerid][4], GetPVarInt(playerid,"PizzaAuto"), 0.379999,-1.875000,0.394999,0.000000,0.000000,0.000000);
		Streamer_Update(playerid);
		GetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        TogglePlayerControllable(playerid, true);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        KillTimer(PizzaReinlegenTimer[playerid]);
        SendClientMessage(playerid,COLOR_SUPER,"Steige jetzt in das Fahrzeug ein und benutze anschließend '/ausliefern'.");
        SendClientMessage(playerid,COLOR_INFO,"Hinweis: Sollte mal kein Checkpoint gesetzt werden, verwende dann anschließend erneut '/ausliefern'.");
 	}
	return 1;
}

public HeuballenReinlegen(playerid)
{
    GetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, boot, objective);
	new ballenid = GetPVarInt(playerid,"HeuballenID");
	if(GetPVarInt(playerid,"HeuballenImWalton") == 0)
 	{
 		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
 	    SetPVarInt(playerid,"HeuballenImWalton",1);
 	    DeletePVar(playerid,"HatHeuballen");
 	    RemovePlayerAttachedObject(playerid,4);
 	    LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.26598, -1.49226, 0.17318,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 1)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
 	    SetPVarInt(playerid,"HeuballenImWalton",2);
 	    DeletePVar(playerid,"HatHeuballen");
 	    RemovePlayerAttachedObject(playerid,4);
 	    LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.24678, -1.93366, 0.17318,   0.00000, 0.00000, 0.0000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 2)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",3);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.21002, -2.37258, 0.17318,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 3)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",4);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), -0.72677, -1.88892, 0.17320,   0.00000, 0.00000, 90.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 4)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",5);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.74135, -1.88724, 0.57277,   0.00000, 0.00000, 90.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 5)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",6);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.27960, -1.89879, 0.57277,   0.00000, 0.00000, 90.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 6)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",7);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), -0.18153, -1.95572, 0.57277,   0.00000, 0.00000, 90.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 7)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",8);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), -0.64335, -2.03803, 0.57277,   0.00000, 0.00000, 90.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 8)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",9);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.00488, -1.54170, 0.93270,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 9)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",10);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.01010, -1.78495, 0.93270,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 10)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",11);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), -0.00862, -2.06432, 0.93270,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 11)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",12);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.02584, -2.44748, 0.93270,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
		return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 12)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",GetPVarInt(playerid,"HeuballenImWalton")+1);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
        LandwirtObjekt[playerid][ballenid] = CreateDynamicObject(2901,0,0,-1000,0,0,0,-1,-1,-1,100,100);
		AttachDynamicObjectToVehicle(LandwirtObjekt[playerid][ballenid], GetPVarInt(playerid,"LandwirtAuto"), 0.02584, -2.44748, 0.93270,   0.00000, 0.00000, 0.00000);
		Streamer_Update(playerid);
 	    return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") > 12 && GetPVarInt(playerid,"HeuballenImWalton") < 23)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",GetPVarInt(playerid,"HeuballenImWalton")+1);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
		Streamer_Update(playerid);
 	    return 1;
 	}
 	else if(GetPVarInt(playerid,"HeuballenImWalton") == 23)
 	{
		TogglePlayerControllable(playerid, true);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 		SetVehicleParamsEx(GetPVarInt(playerid,"LandwirtAuto"), engine, lights, alarm, doors, bonnet, false, objective);
        SetPVarInt(playerid,"HeuballenImWalton",GetPVarInt(playerid,"HeuballenImWalton")+1);
        DeletePVar(playerid,"HatHeuballen");
        RemovePlayerAttachedObject(playerid,4);
		Streamer_Update(playerid);
		SetPlayerCheckpoint(playerid,-23.2852,-274.7156,5.4197,3.5);
		SetPVarInt(playerid,"LandwirtStufe",4);
		SetPVarInt(playerid,"HeuballenAbgabe",1);
		SendClientMessage(playerid,COLOR_INFO,"Sehr gut, das waren alle Heuballen. Bringe die nun zum roten Marker.");
		return 1;
 	}
	return 1;
}

public HeuballenAbgabe(playerid)
{
	SetPVarInt(playerid,"LandwirtStufe",5);
	TogglePlayerControllable(playerid,true);
	GameTextForPlayer(playerid,"~w~Bringe den ~r~Walton~w~ nun zum ~r~Abgabepunkt~w~.",3000,4);
	SetPlayerCheckpoint(playerid,-105.4470,72.9262,3.1172,3.5);
	for(new ballen=0; ballen<sizeof(LandwirtInfo); ballen++)
 	{
		if(LandwirtInfo[ballen][lStufe] != 3)continue;
		if(LandwirtObjekt[playerid][ballen] <= 0)continue;
		DestroyDynamicObject(LandwirtObjekt[playerid][ballen]);
		LandwirtObjekt[playerid][ballen] = -1;
	}
	return 1;
}

public PizzaRausnehmen(playerid)
{
    GetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, boot, objective);
	if(PizzaAusgeliefert[playerid] == 0)
	{
	    DestroyDynamicObject(PizzaSpieler[playerid][4]);
	    SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
     	Kofferraum[GetPVarInt(playerid,"PizzaAuto")] = false;
		SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
		SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		TogglePlayerControllable(playerid, true);
	}
	else if(PizzaAusgeliefert[playerid] == 1)
	{
        DestroyDynamicObject(PizzaSpieler[playerid][3]);
        SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
        Kofferraum[GetPVarInt(playerid,"PizzaAuto")] = false;
        SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
		SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		TogglePlayerControllable(playerid, true);
	}
	else if(PizzaAusgeliefert[playerid] == 2)
	{
        DestroyDynamicObject(PizzaSpieler[playerid][2]);
        SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
        Kofferraum[GetPVarInt(playerid,"PizzaAuto")] = false;
        SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
		SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		TogglePlayerControllable(playerid, true);
	}
	else if(PizzaAusgeliefert[playerid] == 3)
	{
        DestroyDynamicObject(PizzaSpieler[playerid][1]);
        SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
        Kofferraum[GetPVarInt(playerid,"PizzaAuto")] = false;
        SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
		SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		TogglePlayerControllable(playerid, true);
	}
	else if(PizzaAusgeliefert[playerid] == 4)
	{
        DestroyDynamicObject(PizzaSpieler[playerid][0]);
        SetPlayerAttachedObject(playerid,0,1582,5,0.165000,0.112000,0.090999,96.500038,9.499996,-111.499992,1.000000,1.000000,1.000000);
        Kofferraum[GetPVarInt(playerid,"PizzaAuto")] = false;
        SetVehicleParamsEx(GetPVarInt(playerid,"PizzaAuto"), engine, lights, alarm, doors, bonnet, false, objective);
		SetPlayerCheckpoint(playerid,PizzaKundenPos[playerid][0],PizzaKundenPos[playerid][1],PizzaKundenPos[playerid][2],3.0);
		SendClientMessage(playerid,COLOR_SUPER,"Bringe die Pizza jetzt zum Kunden. Der Kunde befindet sich am roten Marker.");
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public PayDay(playerid)
{
    if(Afk[playerid] == 0)
    {
		new string[264], GehaltRang[32];
		SpielerInfo[playerid][sPayDay]++;
		/*new tmp_rest = (gettime() - GetPVarInt(playerid, "PayDaySec")) % 60;
		SpielerInfo[playerid][sPayDay] += (gettime() - GetPVarInt(playerid, "PayDaySec")) / 60;
		SetPVarInt(playerid, "PayDaySec", gettime() - tmp_rest);*/
		if(SpielerInfo[playerid][sPayDay] == 45)
		{
		    new OldGiro = SpielerInfo[playerid][sBankkonto];
		    GameTextForPlayer(playerid,"~g~Zahltag",2000,1);
		    SpielerInfo[playerid][sPayDay] = 0;
		    GivePlayerEXP(playerid,25);
		    if(SpielerInfo[playerid][sNebenjob] != 0 && SpielerInfo[playerid][sDonator] == 0 && SpielerInfo[playerid][sPremium] == 0)
		    {
		        if(SpielerInfo[playerid][sQuitJob] < 10)
		        {
		            SpielerInfo[playerid][sQuitJob]++;
		        }
		 	}
		 	if(SpielerInfo[playerid][sKurrier] == 1)
	   		{
	        	SendClientMessage(playerid,COLOR_INFO,"Du kannst nun wieder die Kurrier Mission ausüben.");
	        	SpielerInfo[playerid][sKurrier] = 0;
		 	}
		    SendClientMessage(playerid,COLOR_WHITE,"");
		    SendClientMessage(playerid,COLOR_WHITE,"");
		    SendClientMessage(playerid,COLOR_WHITE,"");
		    SendClientMessage(playerid,COLOR_WHITE,"|_____________________{FF0000}Zahltag{FFFFFF}____________________|");
			if(SpielerInfo[playerid][sFraktion] != 0)
			{
			    new FrakID[3], Gehalt;
			    if(SpielerInfo[playerid][sTeam] == 0)
			    {
				    format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",SpielerInfo[playerid][sRank]);
				    format(FrakID,sizeof(FrakID),"%d",SpielerInfo[playerid][sFraktion]);
				    Gehalt = mysql_GetInt("frakinfos", GehaltRang, "FID", FrakID);
			    }
			    else if(SpielerInfo[playerid][sTeam] == 0)
			    {
			    	format(GehaltRang,sizeof(GehaltRang),"Gehalt_TRang%d",SpielerInfo[playerid][sRank]);
				    format(FrakID,sizeof(FrakID),"%d",SpielerInfo[playerid][sFraktion]);
				    Gehalt = mysql_GetInt("frakinfos", GehaltRang, "FID", FrakID);
			    }
			    if(FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] >= Gehalt)
			    {
			        if(SpielerInfo[playerid][sBankPin] == 0)
			        {
			            GivePlayerMoneyEx(playerid,Gehalt);
			            FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] -= Gehalt;
	  				    format(string,sizeof(string),"Fraktionsgehalt:			{FF0000}%d$",Gehalt);
					    SendClientMessage(playerid,COLOR_SUPER,string);
					    SendClientMessage(playerid,COLOR_INFO,"Da du kein Bankkonto besitzt, hast du das Geld Bar auf die Hand bekommen.");
			        }
			        else
			        {
					    SpielerInfo[playerid][sBankkonto] += Gehalt;
					    FrakInfo[SpielerInfo[playerid][sFraktion]][fiFrakKasse] -= Gehalt;
					    format(string,sizeof(string),"Fraktionsgehalt:			{FF0000}%d$",Gehalt);
					    SendClientMessage(playerid,COLOR_SUPER,string);
					}
				}
				else
				{
	   				format(string,sizeof(string),"Fraktionsgehalt:			{FF0000}Nicht genügend Geld in der Fraktionskasse",Gehalt);
				    SendClientMessage(playerid,COLOR_SUPER,string);
				}
			}
			if(SpielerInfo[playerid][sGruppe] != 0)
			{
				if(GruppenInfo[SpielerInfo[playerid][sGruppe]][gUpgrade][0] == 1)
				{
				    new gid[2], gruppenid = SpielerInfo[playerid][sGruppe];
				    format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",SpielerInfo[playerid][sGRank]);
				    format(gid,sizeof(gid),"%d",SpielerInfo[playerid][sGruppe]);
				    new Gehalt2 = mysql_GetInt("gruppen", GehaltRang, "ID", gid);
				    if(GruppenInfo[gruppenid][gKasse] >= Gehalt2)
				    {
				        if(SpielerInfo[playerid][sBankPin] == 0)
				        {
				            GivePlayerMoneyEx(playerid,Gehalt2);
				            GruppenInfo[gruppenid][gKasse] -= Gehalt2;
		  				    format(string,sizeof(string),"Gruppengehalt:			{FF0000}%d$",Gehalt2);
						    SendClientMessage(playerid,COLOR_SUPER,string);
						    SendClientMessage(playerid,COLOR_INFO,"Da du kein Bankkonto besitzt, hast du das Geld Bar auf die Hand bekommen.");
				        }
				        else
				        {
						    SpielerInfo[playerid][sBankkonto] += Gehalt2;
						    GruppenInfo[gruppenid][gKasse] -= Gehalt2;
						    format(string,sizeof(string),"Gruppengehalt:			{FF0000}%d$",Gehalt2);
						    SendClientMessage(playerid,COLOR_SUPER,string);
						}
					}
					else
					{
		   				format(string,sizeof(string),"Gruppengehalt:			{FF0000}Nicht genügend Geld in der Gruppenkasse",Gehalt2);
					    SendClientMessage(playerid,COLOR_SUPER,string);
					}
				}
			}
			if(SpielerInfo[playerid][sNebenjob] != 0)
			{
			    new Float:Zinsen, ZinsenInt;
			    Zinsen = SpielerInfo[playerid][sPayDayGeld]*0.03;
			    ZinsenInt = floatround(Zinsen,floatround_round);
			    format(string,sizeof(string),"Gehaltscheck: %d$ [Zinsen: %d$]",SpielerInfo[playerid][sPayDayGeld],ZinsenInt);
			    SendClientMessage(playerid,COLOR_SUPER,string);
			    SpielerInfo[playerid][sBankkonto] += SpielerInfo[playerid][sPayDayGeld]+ZinsenInt;
			    SpielerInfo[playerid][sPayDayGeld] = 0;
			}
			if(SpielerInfo[playerid][sBankPin] != 0)
			{
			    format(string,sizeof(string),"Girokonto vorher: {FF0000}%d${9ACD32} Jetzt/Neu: {FF0000}%d${9ACD32} ({FF0000}+%d$ {9ACD32}insgesamt)",OldGiro,SpielerInfo[playerid][sBankkonto],SpielerInfo[playerid][sBankkonto]-OldGiro);
			    SendClientMessage(playerid,COLOR_SUPER,string);
		    }
		    if(SpielerInfo[playerid][sTankstelle] != 0)
			{
	  			format(string,128,"Geschäftskonto (Tankstelle):	{FF0000}%d$",TankstellenInfo[SpielerInfo[playerid][sTankstelle]][tsKasse]);
		    	SendClientMessage(playerid,COLOR_SUPER,string);
			}
	  		if(SpielerInfo[playerid][sAmmunation] != 0)
			{
				format(string,128,"Geschäftskonto (Ammunation):	{FF0000}%d$",AmmunationInfo[SpielerInfo[playerid][sAmmunation]][amKasse]);
		    	SendClientMessage(playerid,COLOR_SUPER,string);
			}
			if(SpielerInfo[playerid][sStore] != 0)
			{
				format(string,128,"Geschäftskonto (24/7):	{FF0000}%d$",StoreInfo[SpielerInfo[playerid][sStore]][siKasse]);
		    	SendClientMessage(playerid,COLOR_SUPER,string);
			}
		    SendClientMessage(playerid,COLOR_WHITE,"|_________________________________________________|");
		    if(GetPlayerWantedLevelEx(playerid) != 0)
		    {
				SetPlayerWantedLevelEx(playerid,GetPlayerWantedLevelEx(playerid)-1);
				format(string,128,"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(playerid));
				SendClientMessage(playerid,COLOR_YELLOW,string);
		    }
		}
	}
}

public Unfreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

public SpawnCarInGarage(playerid)
{
	new vehicleid = GetPVarInt(playerid,"GarageVehicleID"), hs = GetPVarInt(playerid,"GaragenID"), parkid = GetPVarInt(playerid,"Parkplatz"), Float:Pos[4];
	Pos[0] = GetPVarFloat(playerid,"ParkPosX"); Pos[1] = GetPVarFloat(playerid,"ParkPosY"); Pos[2] = GetPVarFloat(playerid,"ParkPosZ"); Pos[3] = GetPVarFloat(playerid,"ParkPosA");
	DeletePVar(playerid,"GarageVehicleID"); DeletePVar(playerid,"GaragenID"); DeletePVar(playerid,"Parkplatz"); DeletePVar(playerid,"ParkPosX");
	DeletePVar(playerid,"ParkPosY"); DeletePVar(playerid,"ParkPosZ"); DeletePVar(playerid,"ParkPosA");
	SetVehicleVirtualWorld(vehicleid,hs);
	SetVehiclePos(vehicleid,Pos[0],Pos[1],Pos[2]);
	SetVehicleZAngle(vehicleid,Pos[3]);
	
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	Motor[vehicleid] = false;
	Licht[vehicleid] = false;
	DOOR[vehicleid] = true;
	Motorhaube[vehicleid] = false;
	Kofferraum[vehicleid] = false;
	CarRadio[vehicleid] = false;
	
	if(parkid == 1){GaragenInfo[hs][giFahrzeug][0] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 2){GaragenInfo[hs][giFahrzeug][1] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 3){GaragenInfo[hs][giFahrzeug][2] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 4){GaragenInfo[hs][giFahrzeug][3] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 5){GaragenInfo[hs][giFahrzeug][4] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 6){GaragenInfo[hs][giFahrzeug][5] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 7){GaragenInfo[hs][giFahrzeug][6] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 8){GaragenInfo[hs][giFahrzeug][7] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 9){GaragenInfo[hs][giFahrzeug][8] = FahrzeugInfo[vehicleid][fModelID];}
	else if(parkid == 10){GaragenInfo[hs][giFahrzeug][9] = FahrzeugInfo[vehicleid][fModelID];}
	FahrzeugInfo[vehicleid][fGarage] = hs;
	FahrzeugInfo[vehicleid][fGPark] = parkid;
	SetTimerEx("Unfreeze",3000,false,"i",playerid);
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid,2414.4395,2820.4709,-47.9852);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,hs);
	SetCameraBehindPlayer(playerid);
	SetPVarInt(playerid,"GarageID",hs);
	SetPVarInt(playerid,"InGarage",1);
	SetPlayerWeather(playerid,2);
	SendClientMessage(playerid,COLOR_SUPER,"Das Fahrzeug wurde erfolgreich in die Garage geparkt.");
	return 1;
}

public NotrufTimer1(playerid)
{
	NotrufSperre[playerid][0] = 0;
	SendClientMessage(playerid,COLOR_SUPER,"Du kanst nun wieder einen Streifenwagen anfordern.");
	return 1;
}

public NotrufTimer2(playerid)
{
    NotrufSperre[playerid][1] = 0;
    SendClientMessage(playerid,COLOR_SUPER,"Du kanst nun wieder das FBI anfordern.");
	return 1;
}

public NotrufTimer3(playerid)
{
    NotrufSperre[playerid][2] = 0;
    SendClientMessage(playerid,COLOR_SUPER,"Du kanst nun wieder einen Sanitäter anfordern.");
	return 1;
}

/*public FCNPC_OnSpawn(npcid)
{
	return 1;
}*/

public RobBarT(playerid)
{
	new string[144];
	if(RobBarValue[playerid] < 409.000000)
	{
	    RobBarValue[playerid] += 5.000000;
	    if(RobBarValue[playerid] > 409.000000)
	    {
	        RobBarValue[playerid] = 409.000000;
	    }
	    PlayerTextDrawHide(playerid,RobBar[playerid][1]);
    	PlayerTextDrawTextSize(playerid,RobBar[playerid][1], RobBarValue[playerid], -1.000000);
    	PlayerTextDrawShow(playerid, RobBar[playerid][1]);
	}
	else
	{
	    new money = 700+random(1500);
	    SendClientMessage(playerid,COLOR_SUPER,"Der Raub war erfolgreich. Bringe nun das Geld schnell zum roten Marker.");
	    SetPlayerCheckpoint(playerid,375.8552,-2054.8748,8.0156,5.0);
	    SetPVarInt(playerid,"GeldImGeldsack",money);
		SetPVarInt(playerid,"HatGeldsack",1);
		SetPlayerAttachedObject(playerid,0,1550,1,0.070999,-0.285000,0.016999,3.200000,84.000015,0.699999,0.913000,0.907999,0.778000);
		PlayerTextDrawHide(playerid,RobBar[playerid][0]);
		PlayerTextDrawHide(playerid,RobBar[playerid][1]);
		PlayerTextDrawHide(playerid,RobBar[playerid][2]);
		KillTimer(RobBarTimer[playerid]);

	    if(GetPVarInt(playerid,"InAmmunation") == 1)
	   	{
	    	SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DIE KAMERA EINES AMMUNATIONS, MELDET EINEN RAUBÜBERFALL.");
	    	format(string,sizeof(string),"ZENTRALE: BENUTZE: /showammu %d, UM DORT HIN EINEN MARKER ZUSETZEN.",GetPVarInt(playerid,"AmmunationID")+1);
			SendCopMessage(COLOR_BLUE,string);
		}
  		if(GetPVarInt(playerid,"InStore") == 1)
	   	{
	    	SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DIE KAMERA EINES 24/7, MELDET EINEN RAUBÜBERFALL.");
	    	format(string,sizeof(string),"ZENTRALE: BENUTZE: /showstore %d, UM DORT HIN EINEN MARKER ZUSETZEN.",GetPVarInt(playerid,"StoreID")+1);
			SendCopMessage(COLOR_BLUE,string);
		}
	}
	return 1;
}

public TimeToRob(playerid)
{
    RobBarAllowed[playerid] = 0;
	return 1;
}

public KickPlayer(playerid,string[])
{
	SetPVarInt(playerid,"BeKicked",0);
	SetTimerEx("KickTimer",100,false,"i",playerid);
	if(strlen(string) < 2)
	{
	    new kick[128];
	    format(kick,sizeof(kick),"%s wurde vom System gekickt.",SpielerInfo[playerid][sName]);
	    LogKick(kick);
	}
	else {LogKick(string);}
	return 1;
}

public SendAdminMessage(color,const message[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && SpielerInfo[i][sAdmin] > 0)
		{
			SendClientMessage(i,color,message);
		}
	}
	return 1;
}

public GetPlayerSpeed(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid),KMHPos[playerid][0],KMHPos[playerid][1],KMHPos[playerid][2]);
	}
	new Float:Speed = floatsqroot(KMHPos[playerid][0]*KMHPos[playerid][0] + KMHPos[playerid][1]*KMHPos[playerid][1] + KMHPos[playerid][2]*KMHPos[playerid][2]);
	return floatround(Speed * 100 * 1.61);
}

public AntiSDMFunction(playerid)
{
	TogglePlayerControllable(playerid,true);
	KillTimer(SDMTimer[playerid]);
	return 1;
}

public EndIPBan(playerid){Ban(playerid);}

public ServerNews()
{
	if(ServerNewsVar == 0)
	{
	    SendClientMessageToAll(COLOR_WHITE," ");
	    SendClientMessageToAll(COLOR_YELLOW,"============================Nachrichten=============================");
	    SendClientMessageToAll(COLOR_WHITE,"=     Schon gewusst? Du kannst ab 5 im Monat einen Donatorstatus erwerben.     = ");
	    SendClientMessageToAll(COLOR_WHITE,"=  Wir bieten dir PaySafeCard, Paypal & Banküberweisung als Zahlungsmethoden.  = ");
	    SendClientMessageToAll(COLOR_YELLOW,"==================================================================");
	    SendClientMessageToAll(COLOR_WHITE," ");
	    ServerNewsVar++;
	}
	else if(ServerNewsVar == 1)
	{
	    SendClientMessageToAll(COLOR_WHITE," ");
	    SendClientMessageToAll(COLOR_YELLOW,"==================================Nachrichten==================================");
	    SendClientMessageToAll(COLOR_WHITE,"= Du kannst unser Support-Team jederzeit im Forum, im Spiel oder im Teamspeak =");
	    SendClientMessageToAll(COLOR_WHITE,"=    erreichen. Gehe dazu auf forum.rosalife.de oder benutze /support    =");
	    SendClientMessageToAll(COLOR_YELLOW,"===============================================================================");
	    SendClientMessageToAll(COLOR_WHITE," ");
	    ServerNewsVar++;
	}
	else if(ServerNewsVar == 2)
	{
	    SendClientMessageToAll(COLOR_WHITE," ");
	    SendClientMessageToAll(COLOR_YELLOW,"==================================Nachrichten==================================");
	    SendClientMessageToAll(COLOR_WHITE,"=   Falls du Fehler im Spiel entdeckst kannst du uns diese im Forum melden.   =");
	    SendClientMessageToAll(COLOR_WHITE,"= Wenn du einer Fraktion beitreten möchtest, bewerbe dich bei dieser im Forum =");
	    SendClientMessageToAll(COLOR_YELLOW,"===============================================================================");
	    SendClientMessageToAll(COLOR_WHITE," ");
	    ServerNewsVar = 0;
	}
}

public AntiIntFluchtFunction(playerid){DeletePVar(playerid,"AntiIntFlucht"); return 1;}

public PilotRoute(playerid)
{
	TogglePlayerControllable(playerid, true);
	if(GetPVarInt(playerid,"PilotArbeitet") == 1)
	{
 		SetPVarInt(playerid,"PilotArbeitet",2);
	    SendClientMessage(playerid,COLOR_SUPER,"Das Flugzeug wurde beladen. Bringe die Ware zum San Fierro Airport.");
	    SetPlayerCheckpoint(playerid,-1642.5271,-149.6707,14.8681,7.0);
	    return 1;
	}
	else if(GetPVarInt(playerid,"PilotArbeitet") == 2)
	{
	    SetPVarInt(playerid,"PilotArbeitet",3);
	    SendClientMessage(playerid,COLOR_SUPER,"Das Flugzeug wurde beladen. Bringe die Ware zum Las Venturas Airport.");
	    SetPlayerCheckpoint(playerid,1388.8792,1683.4226,11.5457,7.0);
	    return 1;
	}
	else if(GetPVarInt(playerid,"PilotArbeitet") == 3)
	{
	    SetPVarInt(playerid,"PilotArbeitet",4);
	    SendClientMessage(playerid,COLOR_SUPER,"Das Flugzeug wurde beladen. Bringe die Ware zum Los Santos Airport.");
	    SetPlayerCheckpoint(playerid,2061.6660,-2593.2915,14.2723,7.0);
	    return 1;
	}
	return 1;
}

public Busfahrer(playerid)
{
	new string[144];
	if(GetPVarInt(playerid,"BusCountdown") > 0)
 	{
		SetPVarInt(playerid,"BusCountdown",GetPVarInt(playerid,"BusCountdown")-1);
		format(string,sizeof(string),"Weiterfahrt in~n~~b~%d sec",GetPVarInt(playerid,"BusCountdown"));
		GameTextForPlayer(playerid, string, 1000, 5);
		return 1;
 	}
	KillTimer(BusfahrerTimer[playerid]);
    SetPVarInt(playerid,"BusfahrerRoute",GetPVarInt(playerid,"BusfahrerRoute")+1);
	new id = GetBusRouteID(GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
	if(id == -1)return printf("Fehler aufgetreten! BusfarerID ist fail.%d %d",GetPVarInt(playerid,"BusfahrerLinie"),GetPVarInt(playerid,"BusfahrerRoute"));
    TogglePlayerControllable(playerid, true);
    SetPlayerCheckpoint(playerid,BusRouteInfo[id][bPos_X],BusRouteInfo[id][bPos_Y],BusRouteInfo[id][bPos_Z],5.0);
    DeletePVar(playerid,"AnBusHaltestelle");
    DeletePVar(playerid,"BusCountdown");
	return 1;
}

LoadVehicles()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `vehicles` ORDER BY `ID` ASC", "onLoadVehicles");
	return 1;
}

public MuellEntleeren(playerid)
{
	new string[128], tmpcar = GetPVarInt(playerid,"MüllAuto");
	Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter");
	SetVehicleToRespawn(tmpcar);
	FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	DeletePVar(playerid,"MüllBeutel");
	DeletePVar(playerid,"MüllBeutelHand");
	DeletePVar(playerid,"MüllmannArbeitet");
	MuellHausPos[playerid][0] = 0;
	MuellHausPos[playerid][1] = 0;
	MuellHausPos[playerid][2] = 0;
	MuellAutoPos[playerid][0] = 0;
	MuellAutoPos[playerid][1] = 0;
	MuellAutoPos[playerid][2] = 0;
	format(string,sizeof(string),"Dein Gehalt in Höhe von %d$ wird dir am Payday überwiesen. Benutze /payday um deinen Check einzusehen.",JobInfo[6][jiGehalt]);
	SendClientMessage(playerid,COLOR_INFO,string);
	SpielerInfo[playerid][sPayDayGeld] += JobInfo[6][jiGehalt];
	TogglePlayerControllable(playerid, true);
	return 1;
}

public CameraFahrten(playerid)
{
	if(GetPVarInt(playerid,"CamFahrt") == 0)//FBI Base
	{
	    InterpolateCameraPos(playerid, -2118.856201, 334.437530, 92.006568, -2138.267822, 191.594757, 72.065650, 5000);
		InterpolateCameraLookAt(playerid, -2122.397216, 331.727752, 94.268913, -2140.997314, 195.449249, 70.424758, 5000);
		SetPVarInt(playerid,"CamFahrt",1);
		return 1;
	}
	else if(GetPVarInt(playerid,"CamFahrt") == 1)//LS Stadthalle
	{
	    InterpolateCameraPos(playerid, 1365.949462, -1731.150146, 52.851879, 1504.315917, -1717.744018, 24.425392, 5000);
		InterpolateCameraLookAt(playerid, 1370.783935, -1731.203613, 51.577049, 1501.608154, -1721.939941, 24.175498, 5000);
	    SetPVarInt(playerid,"CamFahrt",2);
	    return 1;
	}
	else if(GetPVarInt(playerid,"CamFahrt") == 2)//LS Ammunation
	{
	    InterpolateCameraPos(playerid, 1346.778320, -1504.113525, 57.420509, 1335.881958, -1268.780395, 15.793972, 5000);
		InterpolateCameraLookAt(playerid, 1346.864135, -1499.293823, 56.092876, 1340.156250, -1271.351440, 16.141666, 5000);
 		SetPVarInt(playerid,"CamFahrt",3);
	    return 1;
	}
	else if(GetPVarInt(playerid,"CamFahrt") == 3)//LS Police
	{
		InterpolateCameraPos(playerid, 1510.096435, -1732.273437, 42.812564, 1514.012817, -1585.462646, 55.850650, 5000);
		InterpolateCameraLookAt(playerid, 1513.704345, -1729.464111, 40.790184, 1516.362182, -1589.218627, 53.532752, 5000);
 		DeletePVar(playerid,"CamFahrt");
	    return 1;
	}
	return 1;
}

public FreikaufKeyWeg(playerid)
{
	DeletePVar(playerid,"FreikaufSchluessel");
	SendClientMessage(playerid,COLOR_INFO,"Du hast ab sofort kein Zugang mehr zur LSPD-Schranke.");
	return 1;
}

public ImportFahrzeugTimer()
{
	ImportCar = true;
	return 1;
}

/*public CanBurn(playerid)
{
	if(...)
	{
		return 1;
	}
	return -1;
}*/

public DestroyFire(id)
{
 	FeuerInfo[id][Erstellt] = false;
	FeuerInfo[id][oPosX] = -1;
	FeuerInfo[id][oPosY] = -1;
	FeuerInfo[id][oPosZ] = -1;
	DestroyDynamicObject(FeuerInfo[id][FID]);
	RemoveSmokeFromFire(id);
}

public ExtinguishTimer(playerid, id)
{
	if(id < -1 && (Aiming_at_Flame(playerid) == id || Pissing_at_Flame(playerid) == id))
	{
		TogglePlayerBurning(id, false);
	}
	else if(FeuerInfo[id][Erstellt] == true && Pressing(playerid) & KEY_FIRE && Aiming_at_Flame(playerid) == id || Pissing_at_Flame(playerid) == id)
	{
	    if(Pissing_at_Flame(playerid) == id)
		{
				SendClientMessage(playerid, COLOR_SUPER, "Du hast einen Brand ausgepinkelt.");
				PlayerPlaySound(playerid, 1139, 0, 0, 0);
		}
		if(Aiming_at_Flame(playerid) == id)
		{
				SendClientMessage(playerid, COLOR_SUPER, "Du hast erfolgreich einen Brand gelöscht.");
				PlayerPlaySound(playerid, 1139, 0, 0, 0);
		}
	    DestroyFire(id);
	}
	KillTimer(PlayerFireTimer[playerid][2]);
	PlayerFireTimer[playerid][2] = -1;
}

public TogglePlayerBurning(playerid, burning)
{
	if(burning)
	{
	    SetPlayerAttachedObject(playerid, 1, 18690, 2, -1, 0, -1.9, 0, 0);
		GetPlayerHealth(playerid, PlayerOnFireHP[playerid]);
		KillTimer(PlayerFireTimer[playerid][0]); KillTimer(PlayerFireTimer[playerid][1]);
		PlayerFireTimer[playerid][0] = SetTimerEx("BurningTimer", 91, true, "d", playerid);
		PlayerFireTimer[playerid][1] = SetTimerEx("TogglePlayerBurning", 7000, false, "dd", playerid, 0);
	}
	else
	{
		KillTimer(PlayerFireTimer[playerid][0]);
		RemovePlayerAttachedObject(playerid, 1);
	}
	SetPVarInt(playerid, "IsOnFire", burning);
	return 1;
}

public RemoveSmokeFromFire(id)
{
    for(new i; i < 5; i++)
	{
		DestroyDynamicObject(FeuerInfo[id][RID][i]);
		FeuerInfo[id][RID][i] = -1;
	}
}

public FeuerEinsatz()
{
	new bool:count = false, query[464];
	if(Feuerbereit == false)
	{
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] != 5)continue;
		    if(SpielerInfo[i][sTeam] == 1 || SpielerInfo[i][sRank] >= 6)
		    {
		    	count = true;
		    }
		}
		if(count)
		{
		    new feuer = mysql_GetInt("config", "ValueInt", "Config", "Feuer");
		    new rand = random(feuer);
		    mysql_format(sqlHandle, query, sizeof(query),"SELECT * FROM `feuer` WHERE `Alarm` = '%d'", rand);
			mysql_tquery(sqlHandle, query, "onFireMissionLoaded");
	 	}
  	}
  	return 1;
}

public FeuerStatus()
{
	new bool:cout = false;
	for(new i = 0; i < MAX_FEUER; i++)
	{
		if(FeuerInfo[i][Erstellt] == true)
	    {
	        cout = true;
	    }
	}
	if(cout == false)
	{
		KillTimer(FeuerStatusTimer);
	    FrakInfo[5][fiFrakKasse] += 5000;
		foreach(new i : Player)
		{
		    if(SpielerInfo[i][sFraktion] == 5 || SpielerInfo[i][sFraktion] == 2 || SpielerInfo[i][sFraktion] == 6)
		    {
			    if(SpielerInfo[i][sFraktion] == 2 || SpielerInfo[i][sFraktion] == 6)
			    {
		    		SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS S.A RETTUNGSDIENST, MELDET DAS DAS FEUER");
					SendClientMessage(i,COLOR_BLUE,"ZENTRALE: ERFOLGREICH GELÖSCHT WURDE. >> EINSATZ BEENDET <<");
			    }
	   			else if(SpielerInfo[i][sFraktion] == 5)
			    {
	    			SendClientMessage(i,COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! DAS FEUER WURDE ERFOLGREICH GELÖSCHT");
					SendClientMessage(i,COLOR_BLUE,"ZENTRALE: BELOHNUNG: 5.000$ >> EINSATZ BEENDET <<");
			    }
			}
		}
		Feuerbereit = false;
		return 1;
	}
	return 1;
}

public BombTorTimer()
{
    SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !!DAS TOR IN DER AREA 51 WURDE REPARIERT.");
	BombenTor = CreateObject(971, 283.05493, 1868.84778, 7.75518,   0.00000, 0.00000, 269.82675);
	BombenTorHealth = 10000;
	return 1;
}

public BombTimer(playerid)
{
	new string[144];
	if(GetPVarInt(playerid,"BombCountdown") >= 1)
	{
		SetPVarInt(playerid,"BombCountdown",GetPVarInt(playerid,"BombCountdown")-1);
		format(string,sizeof(string),"Bombe explodiert in~n~~r~%d sec",GetPVarInt(playerid,"BombCountdown"));
		GameTextForPlayer(playerid, string, 1000, 5);
		return 1;
	}
	else
	{
	    KillTimer(BombenTimer[playerid]);
	    GameTextForPlayer(playerid, "~r~Bombe explodiert!", 1000, 5);
 		SpielerInfo[playerid][sBombe] = 0;
 		new Float:Pos[3], bombID = GetPVarInt(playerid,"BombID");
		GetObjectPos(bombID,Pos[0],Pos[1],Pos[2]);
 		CreateExplosion(Pos[0],Pos[1],Pos[2],1,5.0);
		if(GetDistanceBetweenObjects(bombID, LSPDSchranke) <= 5)
		{
 		    DestroyObject(LSPDSchranke);
 		    LSPDSchrankeZ = 600;
			SendClientMessage(playerid,COLOR_SUPER,"Die Schranke vom LSPD wurde zerstört.");
 		}
		else if(GetDistanceBetweenObjects(bombID, LSPDGarage) <= 5)
		{
 		    DestroyObject(LSPDGarage);
 		    LSPDGarageZ = 600;
			SendClientMessage(playerid,COLOR_SUPER,"Das Tor zur LSPD Garage wurde gesprengt.");
 		}
		else if(GetDistanceBetweenObjects(bombID, FBITor) <= 5)
		{
 		    DestroyObject(FBITor);
 		    FBITorZ = 600;
			SendClientMessage(playerid,COLOR_SUPER,"Das FBI Tor wurde gesprengt.");
 		}
		else if(GetDistanceBetweenObjects(bombID, RussenTor) <= 5)
		{
 		    DestroyObject(RussenTor);
 		    RussenTorZ = 600;
			SendClientMessage(playerid,COLOR_SUPER,"Das Tor von der Russen Mafia wurde gesprengt.");
 		}
 		DeletePVar(playerid,"BombCountdown");
 		DeletePVar(playerid,"BombID");
 		DestroyObject(bombID);
 		return 1;
	}
}

public TorStatus()
{
	if(LSPDGarageZ > 1)
	{
	    LSPDGarageZ--;
	}
	else if(LSPDGarageZ == 1)
	{
	    LSPDGarage = CreateObject(969,1593.3000500,-1638.0999800,12.5000000,0.0000000,0.0000000,180.0000000); //object(LSPD Tor)
	    LSPDGarageZ = 0;
	}
	if(LSPDSchrankeZ > 1)
	{
	    LSPDSchrankeZ--;
	}
	else if(LSPDSchrankeZ == 1)
	{
 		LSPDSchranke = CreateObject(968,1544.6999500,-1630.9000200,13.1000000,0.0000000,270.0000000,270.0000000); //object(barrierturn) (1)
	    LSPDSchrankeZ = 0;
	}
	if(FBITorZ > 1)
	{
	    FBITorZ--;
	}
	else if(FBITorZ == 1)
	{
	    FBITor = CreateObject(2990, -2168.68530, 249.60730, 36.57600,   0.00000, 0.00000, 90.00000);
	    FBITorZ = 0;
	}
	if(RussenTorZ > 1)
	{
	    RussenTorZ--;
	}
	else if(RussenTorZ == 1)
	{
	    RussenTor = CreateObject(988,321.191,-1187.818,75.783,0.000,0.000,38.177);
	    RussenTorZ = 0;
	}
	return 1;
}

public AC_PutPlayerInVehicleEx(playerid,vehicleid,seatid)
{
    AC_PutedVehicle[playerid] = 1;
    EnterLockedV[playerid] = 0;
    stopAC[playerid] = 3;
    return PutPlayerInVehicle(playerid,vehicleid,seatid);
}

public Afktimered(playerid)
{
    if(GetPVarInt(playerid,"LoggedIn") == 1 && IsPlayerConnected(playerid))
    {
        if(Afk[playerid] == 1)return 1;
        if(afktimedrestka[playerid] <= 0)
        {
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            AfkX[playerid] = X;
            AfkY[playerid] = Y;
            AfkZ[playerid] = Z;
            afktimedrestka[playerid] += 1;
        }
        if(afktimedrestka[playerid] >= 1)
        {
            if(IsPlayerInRangeOfPoint(playerid,3,AfkX[playerid],AfkY[playerid],AfkZ[playerid]))
            {
                if(Afk[playerid] == 0)
                {
                    if(afktimedrestka[playerid] < 9)
                    {
                        afktimedrestka[playerid] += 1;
                    }
                    else
                    {
						Afk[playerid] = 1;
						new hour,minute,second;
						new string1[10];
						gettime(hour,minute,second);
						format(string1, sizeof string1, "%s%d:%s%d:%s%d", (hour < 10) ? ("0") : (""), hour, (minute < 10) ? ("0") : (""), minute, (second < 10) ? ("0") : (""), second);
						new string[125];
						format(string,sizeof(string),"* Spieler ist Abwesend seit [{FF0000}%s{FFFFFF}] *",string1);
						Afklabel[playerid] = Create3DTextLabel(string, COLOR_WHITE, 30.0, 40.0, 0.3, 20.0, 0);
						Attach3DTextLabelToPlayer(Afklabel[playerid], playerid, 0.0, 0.0, 0.4);
						TogglePlayerControllable(playerid, false);
						afktimedrestka[playerid]=0;
						SendClientMessage(playerid,COLOR_INFO,"Hinweis: Du bist nun Abwesend gemeldet.");
					}
   				}
  			}
     		else
       		{
         		afktimedrestka[playerid] -= 1;
           	}
		}
	}
    return 1;
}

public pfand(playerid)
{
    pfanddurchsucht[playerid] = 0;
}

public DrogenStatus()
{
	for(new mf=1;mf<MAX_DROGEN;mf++)
	{
	    new string[164];
		if(DrogenInfo[mf][dErstellt] == false)continue;
		if(DrogenInfo[mf][dReife] < 100)
		{
			DrogenInfo[mf][dReife]++;
			format(string, sizeof(string), "Drogenpflanze von {FF0000}%s{FFFFFF}\nReife: {FF0000}%d{FFFFFF} Prozent",DrogenInfo[mf][dBesitzer],DrogenInfo[mf][dReife]);
			Update3DTextLabelText(DrogenInfo[mf][dText], COLOR_WHITE, string);
		}
	}
}

//stocks - German Samplife
stock SetVehicleIndicator(vehicleid, leftindicator=0, rightindicator=0)
{
    if(!leftindicator & !rightindicator) return false;
    new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
    if(rightindicator)
    {
        if(IsTrailerAttachedToVehicle(vehicleid))
        {
            new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
        	GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
            Indicators_xqz[vehicleid][4] = CreateObject(19294, 0, 0, 0,0,0,0);
            AttachObjectToVehicle(Indicators_xqz[vehicleid][4], GetVehicleTrailer(vehicleid),  _vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
        }
    	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
        Indicators_xqz[vehicleid][0] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
        Indicators_xqz[vehicleid][1] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
    }
    else if(leftindicator)
    {
        if(IsTrailerAttachedToVehicle(vehicleid))
        {
            new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
        	GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
            Indicators_xqz[vehicleid][5] = CreateObject(19294, 0, 0, 0,0,0,0);
            AttachObjectToVehicle(Indicators_xqz[vehicleid][5], GetVehicleTrailer(vehicleid),  -_vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
        }
        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
        Indicators_xqz[vehicleid][2] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
        Indicators_xqz[vehicleid][3] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
    }
    return 1;
}

stock Peeing(playerid)
{
	return GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_PISSING;
}

stock IsAtFlame(playerid)
{
	for(new i; i < MAX_FEUER; i++)
	{
	    if(FeuerInfo[i][Erstellt] == false)continue;
	    if(!IsPlayerInAnyVehicle(playerid) && (IsPlayerInRangeOfPoint(playerid, 1.5, FeuerInfo[i][oPosX], FeuerInfo[i][oPosY], FeuerInfo[i][oPosZ]+2.5) ||
											   IsPlayerInRangeOfPoint(playerid, 1.5, FeuerInfo[i][oPosX], FeuerInfo[i][oPosY], FeuerInfo[i][oPosZ]+2.5-1)))
	    {
			return 1;
		}
	}
	return 0;
}

stock IsPlayerInArea(playerid, Float:MinX, Float:MaxX, Float:MinY, Float:MaxY)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	#pragma unused z
    if(x >= MinX && x <= MaxX && y >= MinY && y <= MaxY) { return 1; }
    return 0;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, &Float:a, Float:distance)
{
	GetPlayerPos(playerid, x, y ,z);
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
	}
	else
	{
		GetPlayerFacingAngle(playerid, a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return 0;
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
	new Float:TGTDistance;

	// get distance from camera to target
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

new AaF_cache[MAX_PLAYERS] = { -1, ... };
new AaF_cacheTime[MAX_PLAYERS];

stock Aiming_at_Flame(playerid)
{
	if(gettime() - AaF_cacheTime[playerid] < 1)
  	{
  	    return AaF_cache[playerid];
 	}
 	AaF_cacheTime[playerid] = gettime();

	new id = -1;
	new Float:dis = 99999.99;
	new Float:dis2;
	new Float:px, Float:py, Float:pz;
	new Float:x, Float:y, Float:z, Float:a;
	GetXYInFrontOfPlayer(playerid, x, y, z, a, 1);
	z -= 2.5;

	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);

	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && (IsInWaterCar(playerid) || HasExtinguisher(playerid) || GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN || Peeing(playerid)) && GetPVarInt(i, "IsOnFire"))
	    {
	        GetPlayerPos(i, px, py, pz);
	        if(!Peeing(playerid))
		 	{
	        	dis2 = DistanceCameraTargetToLocation(cx, cy, cz, px, py, pz, fx, fy, fz);
 			}
 			else
 			{
 			    if(IsPlayerInRangeOfPoint(playerid, 1.5, px, py, pz))
				{
	        		dis2 = 0.0;
				}
 			}
	        if(dis2 < dis)
	        {
				dis = dis2;
	    		id = i;
	    		if(Peeing(playerid))
	    		{
	    		    return id;
				}
			}
		}
	}
	if(id != -1) { return id; }
	for(new i; i < MAX_FEUER; i++)
	{
		if(FeuerInfo[i][Erstellt] == true)
		{
		    if(IsInWaterCar(playerid) || HasExtinguisher(playerid) || GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN || Peeing(playerid))
		    {
		        if(!Peeing(playerid))
				{
					dis2 = DistanceCameraTargetToLocation(cx, cy, cz, FeuerInfo[i][oPosX], FeuerInfo[i][oPosY], FeuerInfo[i][oPosZ]+2.5, fx, fy, fz);
				}
				else
				{
				    dis2 = GetDistanceBetweenPoints(x,y,z,FeuerInfo[i][oPosX],FeuerInfo[i][oPosY],FeuerInfo[i][oPosZ]);
				}
				if((IsPlayerInAnyVehicle(playerid) && dis2 < 8.0 && dis2 < dis) || (!IsPlayerInAnyVehicle(playerid) && ((dis2 < 1.5 && dis2 < dis) || (Peeing(playerid) && dis2 < 2.0 && dis2 < dis))))
				{
				    dis = dis2;
				    id = i;
				}
			}
		}
	}
	if(id != -1)
	{
		if((IsPlayerInAnyVehicle(playerid) && !IsPlayerInRangeOfPoint(playerid, 50, FeuerInfo[id][oPosX], FeuerInfo[id][oPosY], FeuerInfo[id][oPosZ]))
		|| (!IsPlayerInAnyVehicle(playerid)  && !IsPlayerInRangeOfPoint(playerid, 5, FeuerInfo[id][oPosX], FeuerInfo[id][oPosY], FeuerInfo[id][oPosZ])))
		{
			id = -1;
		}
	}
	AaF_cache[playerid] = id;
	return id;
}
stock Pissing_at_Flame(playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_PISSING)
	{
	    return Aiming_at_Flame(playerid);
	}
	return -1;
}

stock IsInWaterCar(playerid)
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 601){return 1;}
	return 0;
}

stock HasExtinguisher(playerid)
{
    if(GetPlayerWeapon(playerid) == WEAPON_FIREEXTINGUISHER && !IsPlayerInAnyVehicle(playerid))
	{
		return 1;
	}
	return 0;
}

stock CanPlayerBurn(playerid, val = 0)
{
	//if(CallRemoteFunction("CanBurn", "d", playerid) >= 0 && !IsPlayerInWater(playerid) && GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279 && ((!val && !GetPVarInt(playerid, "IsOnFire")) || (val && GetPVarInt(playerid, "IsOnFire"))))
    if(!IsPlayerInWater(playerid) && GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279 && ((!val && !GetPVarInt(playerid, "IsOnFire")) || (val && GetPVarInt(playerid, "IsOnFire"))))
	{
		return 1;
	}
	return 0;
}

stock IsPlayerFlyAnim(playerid)
{
        if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
            new animlib[32], animname[32];
            GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

            if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_GLIDE", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_BREAST", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_CRAWL", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_UNDER", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_GLIDE", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_UNDER", true)) return 1;
            else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_TREAD", true)) return 1;

        }
        return 0;
}

stock IsPlayerInWater(playerid)
{
	new Float:X, Float:Y, Float:Z, an = GetPlayerAnimationIndex(playerid);
	GetPlayerPos(playerid, X, Y, Z);
	if((1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 0 || (Z <= 41.0 && IsPlayerInArea(playerid, -1387, -473, 2025, 2824))) ||
	(1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 2 || (Z <= 39.0 && IsPlayerInArea(playerid, -1387, -473, 2025, 2824))))
	{
	    return 1;
 	}
 	return 0;
}

stock IsPlayerAnWasser(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if((x >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893) ||
    (x >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||
    (x >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) ||
    (x >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||
    (x >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) ||
    (x >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||
    (x >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) ||
    (x >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||
    (x >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) ||
    (x >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||
    (x >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) ||
    (x >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||
    (x >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))
    {
		return 1;
    }
    return 0;
}

stock DeleteJobFahrzeug(playerid)
{
	if(GetPVarInt(playerid,"PizzaAuto") != 0)
	{
		new vehicleid = GetPVarInt(playerid,"PizzaAuto");
		Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem");
	    SetVehicleToRespawn(vehicleid);
		DestroyDynamicObject(PizzaSpieler[playerid][0]);
		DestroyDynamicObject(PizzaSpieler[playerid][1]);
		DestroyDynamicObject(PizzaSpieler[playerid][2]);
		DestroyDynamicObject(PizzaSpieler[playerid][3]);
		DestroyDynamicObject(PizzaSpieler[playerid][4]);
	    PizzaKundenPos[playerid][0] = 0;
	    PizzaKundenPos[playerid][1] = 0;
	    PizzaKundenPos[playerid][2] = 0;
	    PizzaKofferraumPos[playerid][0] = 0;
	    PizzaKofferraumPos[playerid][1] = 0;
	    PizzaKofferraumPos[playerid][2] = 0;
		PizzaAusgeliefert[playerid] = 0;
	    DeletePVar(playerid,"PizzaTragen");
	    DeletePVar(playerid,"PizzaGeholt");
	    DeletePVar(playerid,"PizzaAusliefern");
	    DeletePVar(playerid,"PizzaAuto");
	    FahrzeugInfo[vehicleid][fJobFahrer] = 0;
	    return 1;
	}
	else if(GetPVarInt(playerid,"KehrmaschinenAuftrag") != 0)
	{
		new vehicleid = GetPVarInt(playerid,"Kehrmaschine");
	    Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter");
	    SetVehicleToRespawn(vehicleid);
   	    DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"Kehrmaschine");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"KehrmaschinenAuftrag");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"KfahrerArbeitet");
	    FahrzeugInfo[vehicleid][fJobFahrer] = 0;
	    return 1;
	}
	else if(GetPVarInt(playerid,"PilotArbeitet") != 0)
	{
	    new vehicleid = GetPVarInt(playerid,"FlugID");
 		Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
   	    DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"FlugID");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"PilotArbeitet");
	    FahrzeugInfo[vehicleid][fJobFahrer] = 0;
	    return 1;
	}
	else if(GetPVarInt(playerid,"BusfahrerArbeitet") != 0)
	{
	    new vehicleid = GetPVarInt(playerid,"BusID");
		Update3DTextLabelText(FahrzeugInfo[vehicleid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"BusID");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"BusfahrerArbeitet");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"BusfahrerLinie");
		DeletePVar(FahrzeugInfo[vehicleid][fJobFahrer],"BusfahrerRoute");
		FahrzeugInfo[vehicleid][fJobFahrer] = 0;
		return 1;
	}
	else if(GetPVarInt(playerid,"MüllmannArbeitet") != 0)
	{
	    KillTimer(MuellmannTimer[playerid]);
  		new tmpcar = GetPVarInt(playerid,"MüllAuto");
	    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter");
	    SetVehicleToRespawn(tmpcar);
	    FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	    DeletePVar(playerid,"MüllBeutel");
	    DeletePVar(playerid,"MüllBeutelHand");
	    DeletePVar(playerid,"MüllmannArbeitet");
	    MuellHausPos[playerid][0] = 0;
	    MuellHausPos[playerid][1] = 0;
	    MuellHausPos[playerid][2] = 0;
	    MuellAutoPos[playerid][0] = 0;
	    MuellAutoPos[playerid][1] = 0;
	    MuellAutoPos[playerid][2] = 0;
	    return 1;
	}
	else if(GetPVarInt(playerid,"LandwirtArbeitet") != 0)
	{
	    KillTimer(LandwirtTimer[playerid]);

	    new vehid = GetPVarInt(playerid,"LandwirtAuto");
		if(GetPVarInt(playerid,"LandwirtStufe") == 2)
		{
		    DestroyVehicle(GetPVarInt(playerid,"TraktorTrailer"));
 	    	Update3DTextLabelText(FahrzeugInfo[vehid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
	    	SetVehicleToRespawn(vehid);
		}
		else if(GetPVarInt(playerid,"LandwirtStufe") == 3 || GetPVarInt(playerid,"LandwirtStufe") == 5)
		{
 	    	Update3DTextLabelText(FahrzeugInfo[vehid][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
	    	SetVehicleToRespawn(vehid);
		}
		for(new ballen=0; ballen<sizeof(LandwirtInfo); ballen++)
 		{
			if(LandwirtObjekt[playerid][ballen] <= 0)continue;
			DestroyDynamicObject(LandwirtObjekt[playerid][ballen]);
			LandwirtObjekt[playerid][ballen] = -1;
		}
	    FahrzeugInfo[vehid][fJobFahrer] = 0;
	    WaltonKofferraumPos[playerid][0] = 0;
	    WaltonKofferraumPos[playerid][1] = 0;
	    WaltonKofferraumPos[playerid][2] = 0;
	    return 1;
	}
	else if(GetPVarInt(playerid,"HolzfallerArbeitet") != 0)
	{
  		new tmpcar = GetPVarInt(playerid,"HolzfallerAuto");
	    Update3DTextLabelText(FahrzeugInfo[tmpcar][fLabel], COLOR_WHITE, "Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}");
	    SetVehicleToRespawn(tmpcar);
	    FahrzeugInfo[tmpcar][fJobFahrer] = 0;
	    HFCP10[playerid] = 0;
	    grossBaum[playerid] = 0;
	    GBGefallt[playerid] = 0;
		HFCP2[playerid] = 0;
		DeletePVar(playerid,"HolzfallerStufe");
 		DeletePVar(playerid,"HolzfallerArbeitet");
	    return 1;
	}
	return 1;
}

stock TankstellenTafelUpdate(itankid)
{
	if(TankstellenInfo[itankid][tsTafel]>0)
	{
		DestroyDynamicObject(TankstellenInfo[itankid][tsTafel]);
	}

	new query[128];
	mysql_format(sqlHandle, query, 128, "SELECT * FROM `tankstellen` WHERE `ID` = '%d'",itankid);
	mysql_tquery(sqlHandle, query, "onLoadTankstellenUpdate", "i", itankid);
	return 1;
}

stock Float:GetDistance( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
	return  floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) );
}

stock SelectTextDrawEx(playerid)
{
    SetPVarInt(playerid,"TextDrawSelect",1);
    return SelectTextDraw(playerid);
}

stock CreateFCar(playerid,schein)
{
	new vehicleid, Float:Position[4], rand = random(3);
	if(schein == 1)//Autoschein
	{
		if(rand == 0)
		{
		    Position[0] = 1034.8416;
		    Position[1] = -1330.5389;
		    Position[2] = 13.1160;
		    Position[3] = 270.4880;
		}
		else if(rand == 1)
		{
		    Position[0] = 1012.1721;
		    Position[1] = -1330.4299;
		    Position[2] = 13.1099;
		    Position[3] = 269.1209;
		}
		else if(rand == 2)
		{
		    Position[0] = 979.4965;
		    Position[1] = -1330.5557;
		    Position[2] = 13.1047;
		    Position[3] = 270.2867;
		}
		vehicleid = CreateVehicle(405,Position[0],Position[1],Position[2],Position[3],2,2,-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Fahrschule");
		SetVehicleNumberPlate(vehicleid,"Fahrschule");
		FahrzeugInfo[vehicleid][fModelID] = 401;
  		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("{FF0000}* Achtung Fahrschule *", 0x008080FF, 0.0, 0.0, 0.0, 15.0, 0, true);
  		Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid, 0.0, 0.0, 1.2);
	}
	else if(schein == 2)//Flugschein
	{
		if(rand == 0)
		{
		    Position[0] = 978.7614;
		    Position[1] = -1377.6647;
		    Position[2] = 21.8329;
		    Position[3] = 269.9409;
		}
		else if(rand == 1)
		{
		    Position[0] = 980.8425;
		    Position[1] = -1359.5309;
		    Position[2] = 21.8329;
		    Position[3] = 269.8376;
		}
		else if(rand == 2)
		{
		    Position[0] = 980.8580;
		    Position[1] = -1344.3140;
		    Position[2] = 21.8336;
		    Position[3] = 268.9448;
		}
		vehicleid = CreateVehicle(487,Position[0],Position[1],Position[2],Position[3],2,1,-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Fahrschule");
		FahrzeugInfo[vehicleid][fModelID] = 487;
		SetVehicleHealth(vehicleid,3000);
		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("{FF0000}* Achtung Fahrschule *", 0x008080FF, 0.0, 0.0, 0.0, 15.0, 0, true);
		Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid, 0.0, 0.0, 1.2);
	}
	else if(schein == 3)//LKWschein
	{
		if(rand == 0)
		{
		    Position[0] = 953.4742;
		    Position[1] = -1329.7324;
		    Position[2] = 14.3993;
		    Position[3] = 270.1272;
		}
		else if(rand == 1)
		{
		    Position[0] = 986.0818;
		    Position[1] = -1329.8043;
		    Position[2] = 14.4118;
		    Position[3] = 269.8145;
		}
		else if(rand == 2)
		{
		    Position[0] = 1033.3359;
		    Position[1] = -1329.8627;
		    Position[2] = 14.4101;
		    Position[3] = 269.3374;
		}
		vehicleid = CreateVehicle(515,Position[0],Position[1],Position[2],Position[3],2,2,-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Fahrschule");
		SetVehicleNumberPlate(vehicleid,"Fahrschule");
		FahrzeugInfo[vehicleid][fModelID] = 515;
		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("{FF0000}* Achtung Fahrschule *", 0x008080FF, 0.0, 0.0, 0.0, 15.0, 0, true);
	    Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid, 0.0, 0.0, 1.2);
	}
	else if(schein == 4)//Bikeschein
	{
		if(rand == 0)
		{
		    Position[0] = 1020.5880;
		    Position[1] = -1316.3042;
		    Position[2] = 12.9426;
		    Position[3] = 90.1790;
		}
		else if(rand == 1)
		{
		    Position[0] = 998.9742;
		    Position[1] = -1316.3723;
		    Position[2] = 12.9530;
		    Position[3] = 90.1789;
		}
		else if(rand == 2)
		{
		    Position[0] = 973.7923;
		    Position[1] = -1316.4506;
		    Position[2] = 12.9265;
		    Position[3] = 90.1789;
		}
		vehicleid = CreateVehicle(461,Position[0],Position[1],Position[2],Position[3],2,2,-1);
		format(FahrzeugInfo[vehicleid][fKennzeichen], 0, "Fahrschule");
		SetVehicleNumberPlate(vehicleid,"Fahrschule");
		FahrzeugInfo[vehicleid][fModelID] = 461;
		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("{FF0000}* Achtung Fahrschule *", 0x008080FF, 0.0, 0.0, 0.0, 15.0, 0, true);
		Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid, 0.0, 0.0, 1.2);
	}
	else if(schein == 5)//Bootschein
	{
	    new rand2 = random(4);
		if(rand2 == 0)
		{
		    Position[0] = -2941.1711;
		    Position[1] = 496.0121;
		    Position[2] = 0.0226;
		    Position[3] = 0.6833;
		}
		else if(rand2 == 1)
		{
		    Position[0] = -2953.5635;
		    Position[1] = 495.5471;
		    Position[2] = 0.3342;
		    Position[3] = 357.7354;
		}
		else if(rand2 == 2)
		{
		    Position[0] = -2969.8521;
		    Position[1] = 496.5679;
		    Position[2] = -0.0450;
		    Position[3] = 0.2871;
		}
		else if(rand2 == 3)
		{
		    Position[0] = -2981.9565;
		    Position[1] = 496.6998;
		    Position[2] = 0.4628;
		    Position[3] = 359.5481;
		}
		vehicleid = CreateVehicle(454,Position[0],Position[1],Position[2],Position[3],2,2,-1);
		FahrzeugInfo[vehicleid][fModelID] = 454;
		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("{FF0000}* Achtung Fahrschule *", 0x008080FF, 0.0, 0.0, 0.0, 15.0, 0, true);
		Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid, 0.0, 0.0, 1.2);
		AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	
	FahrzeugInfo[vehicleid][fTank] = VehicleData[FahrzeugInfo[vehicleid][fModelID]-400][vehLiter];
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, false, false, false, true, false, false, false);
	AC_PutPlayerInVehicleEx(playerid,vehicleid,0);

	FahrzeugInfo[vehicleid][fDatabaseID] = 0; FahrzeugInfo[vehicleid][fErstellt] = true;
	FahrzeugInfo[vehicleid][fPosition][0] = Position[0]; FahrzeugInfo[vehicleid][fPosition][1] = Position[1]; FahrzeugInfo[vehicleid][fPosition][2] = Position[2]; FahrzeugInfo[vehicleid][fPosition][3] = Position[3]; FahrzeugInfo[vehicleid][fColor][1] = 2;
 	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0; FahrzeugInfo[vehicleid][fParkkralle] = 0; FahrzeugInfo[vehicleid][fKilometer] = 0; FahrzeugInfo[vehicleid][fColor][0] = 2; FahrzeugInfo[vehicleid][fPaintjob] = 3;
	FahrzeugInfo[vehicleid][fTank] = VehicleData[GetVehicleModel(vehicleid)-400][vehLiter]; FahrzeugInfo[vehicleid][fRang] = 0; FahrzeugInfo[vehicleid][fFraktion] = 0; FahrzeugInfo[vehicleid][fGruppe] = 0; FahrzeugInfo[vehicleid][fFirma] = 0;
	FahrzeugInfo[vehicleid][fAutohaus] = 0; FahrzeugInfo[vehicleid][fNebenjob] = 0; FahrzeugInfo[vehicleid][fGarage] = 0; FahrzeugInfo[vehicleid][fGPark] = 0; FahrzeugInfo[vehicleid][fFahrschule] = 1;
	FahrzeugInfo[vehicleid][fSupmobil] = 0; FahrzeugInfo[vehicleid][fZiviroller] = 0; FahrzeugInfo[vehicleid][fImportCar] = 0; FahrzeugInfo[vehicleid][fKurrierCar] = 0;
	FahrzeugInfo[vehicleid][fPreis] = 0; FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, ""); FahrzeugInfo[vehicleid][fBesitzerID] = 0; FahrzeugInfo[vehicleid][fTuning][0] = 0; FahrzeugInfo[vehicleid][fTuning][1] = 0; FahrzeugInfo[vehicleid][fTuning][2] = 0;
	FahrzeugInfo[vehicleid][fTuning][3] = 0; FahrzeugInfo[vehicleid][fTuning][4] = 0; FahrzeugInfo[vehicleid][fTuning][5] = 0; FahrzeugInfo[vehicleid][fTuning][6] = 0; FahrzeugInfo[vehicleid][fTuning][7] = 0;
	FahrzeugInfo[vehicleid][fTuning][8] = 0; FahrzeugInfo[vehicleid][fTuning][9] = 0; FahrzeugInfo[vehicleid][fTuning][10] = 0; FahrzeugInfo[vehicleid][fTuning][11] = 0; FahrzeugInfo[vehicleid][fTuning][12] = 0; FahrzeugInfo[vehicleid][fTuning][13] = 0; FahrzeugInfo[vehicleid][fJobEXP] = 0;
	SetVehicleNumberPlate(vehicleid,"Fahrschule");

	FahrschulCar[vehicleid] = playerid;
	SetPVarInt(playerid,"FahrschulCar",vehicleid);

	Motor[vehicleid] = false;
	Licht[vehicleid] = false;
	DOOR[vehicleid] = true;
	Motorhaube[vehicleid] = false;
	Kofferraum[vehicleid] = false;
	return 1;
}

stock GetBusRouteID(buslinie,route)
{
    for(new i=0; i<sizeof(BusRouteInfo); i++)
	{
	    if(BusRouteInfo[i][bLinie] == buslinie && BusRouteInfo[i][bRoute] == route)
		{
			return i;
		}
	}
	return -1;
}

stock SavePlayerWeapons(playerid)
{
    new Waffen[13][2], query[512];
	for (new i = 0; i <= 12; i++)
	{
	    GetPlayerWeaponData(playerid, WEAPON_SLOT:i, WEAPON:Waffen[i][0], Waffen[i][1]);
	}
	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `accounts` SET `wpSlot1`='%d', `wpSlot2`='%d', `wpSlot3`='%d', `wpSlot4`='%d', `wpSlot5`='%d', `wpSlot6`='%d', `wpSlot7`='%d', `wpSlot8`='%d', `wpSlot9`='%d', `wpSlot10`='%d', `wpSlot11`='%d', `wpSlot12`='%d' WHERE `Name`='%s'"
	,Waffen[0][0],Waffen[1][0],Waffen[2][0],Waffen[3][0],Waffen[4][0],Waffen[5][0],Waffen[6][0],Waffen[7][0],Waffen[8][0],Waffen[9][0],Waffen[10][0],Waffen[11][0],SpielerInfo[playerid][sName]);
	mysql_tquery(sqlHandle, query);

    mysql_format(sqlHandle, query,sizeof(query),"UPDATE `accounts` SET `wpSlot1Ammu`='%d', `wpSlot2Ammu`='%d', `wpSlot3Ammu`='%d', `wpSlot4Ammu`='%d', `wpSlot5Ammu`='%d', `wpSlot6Ammu`='%d', `wpSlot7Ammu`='%d', `wpSlot8Ammu`='%d', `wpSlot9Ammu`='%d', `wpSlot10Ammu`='%d', `wpSlot11Ammu`='%d', `wpSlot12Ammu`='%d' WHERE `Name`='%s'"
	,Waffen[0][1],Waffen[1][1],Waffen[2][1],Waffen[3][1],Waffen[4][1],Waffen[5][1],Waffen[6][1],Waffen[7][1],Waffen[8][1],Waffen[9][1],Waffen[10][1],Waffen[11][1],SpielerInfo[playerid][sName]);
    mysql_tquery(sqlHandle, query);
	return 1;
}

stock GetPlayerArea(playerid)
{
    new str[130];
    //if(GetPlayerInterior(playerid) > 0){format(str,sizeof(str),"INTERIOR");}
    format(str,sizeof(str),"%s",Zones[GetPlayerZone(playerid)][zone_name]);
    return str;
}

stock GetPlayerZone(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    for(new i=0;i<sizeof(Zones);i++)
    {
        if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
        return i;
    }
    return false;
}

stock DeleteVehicle(vehicleid)
{
    RemoveTuning(vehicleid);
	FahrzeugInfo[vehicleid][fDatabaseID] = 0;
	FahrzeugInfo[vehicleid][fErstellt] = false;
	FahrzeugInfo[vehicleid][fModelID] = 0;
	FahrzeugInfo[vehicleid][fPosition][0] = 0.0;
	FahrzeugInfo[vehicleid][fPosition][1] = 0.0;
	FahrzeugInfo[vehicleid][fPosition][2] = 0.0;
	FahrzeugInfo[vehicleid][fPosition][3] = 0.0;
	FahrzeugInfo[vehicleid][fColor][0] = 0;
	FahrzeugInfo[vehicleid][fColor][1] = 0;
	FahrzeugInfo[vehicleid][fPaintjob] = 3;
	FahrzeugInfo[vehicleid][fKennzeichen] = 0;
	FahrzeugInfo[vehicleid][fAbgeschleppt] = 0;
	FahrzeugInfo[vehicleid][fParkkralle] = 0;
	FahrzeugInfo[vehicleid][fKilometer] = 0;
	FahrzeugInfo[vehicleid][fTank] = 0.0;
	FahrzeugInfo[vehicleid][fRang] = 0;
	for(new i=0;i<14;i++){
	FahrzeugInfo[vehicleid][fTuning][i] = 0;}
	FahrzeugInfo[vehicleid][fFraktion] = 0;
	FahrzeugInfo[vehicleid][fGruppe] = 0;
	FahrzeugInfo[vehicleid][fFirma] = 0;
	FahrzeugInfo[vehicleid][fPreis] = 0;
	FahrzeugInfo[vehicleid][fBesitzerID] = 0;
	FahrzeugInfo[vehicleid][fBesitzer] = 0; format(FahrzeugInfo[vehicleid][fBesitzer], 0, "");
	FahrzeugInfo[vehicleid][fkGeld] = 0;
	FahrzeugInfo[vehicleid][fkC4] = 0;
	FahrzeugInfo[vehicleid][fJobEXP] = 0;
	FahrzeugInfo[vehicleid][fBankrob] = 0;
	FahrzeugInfo[vehicleid][fAutohaus] = 0;
	FahrzeugInfo[vehicleid][fNebenjob] = 0;
	FahrzeugInfo[vehicleid][fGarage] = 0;
	FahrzeugInfo[vehicleid][fGPark] = 0;
	FahrzeugInfo[vehicleid][fFahrschule] = 0;
	FahrzeugInfo[vehicleid][fSupmobil] = 0;
	FahrzeugInfo[vehicleid][fZiviroller] = 0;
	FahrzeugInfo[vehicleid][fImportCar] = 0;
	FahrzeugInfo[vehicleid][fKurrierCar] = 0;
	Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
	FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;

	for(new supobjects; supobjects < 4; supobjects++)
	{
	    DestroyDynamicObject(FahrzeugInfo[vehicleid][fSupMobilObj][supobjects]);
	    FahrzeugInfo[vehicleid][fSupMobilObj][supobjects] = INVALID_OBJECT_ID;
	}
	if(FahrzeugInfo[vehicleid][fNeonStatus] == true)
	{
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][0]);
		DestroyDynamicObject(FahrzeugInfo[vehicleid][fNeonObj][1]);
		FahrzeugInfo[vehicleid][fNeonObj][0] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonObj][1] = INVALID_OBJECT_ID;
		FahrzeugInfo[vehicleid][fNeonStatus] = false;
	}
	DestroyDynamicObject(FahrzeugInfo[vehicleid][fPDObject]);
	FahrzeugInfo[vehicleid][fPDObject] = INVALID_OBJECT_ID;

	DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][0]);
	DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][1]);
	DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][2]);
	DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][3]);
	DestroyDynamicObject(FahrzeugInfo[vehicleid][fSirene][4]);

	FahrzeugInfo[vehicleid][fSirene][0] = INVALID_OBJECT_ID;
	FahrzeugInfo[vehicleid][fSirene][1] = INVALID_OBJECT_ID;
	FahrzeugInfo[vehicleid][fSirene][2] = INVALID_OBJECT_ID;
	FahrzeugInfo[vehicleid][fSirene][3] = INVALID_OBJECT_ID;
	FahrzeugInfo[vehicleid][fSirene][4] = INVALID_OBJECT_ID;
	
	FahrzeugInfo[vehicleid][fSireneBool] = false;

	Motor[vehicleid] = false;
	Licht[vehicleid] = false;
	DOOR[vehicleid] = true;
	Motorhaube[vehicleid] = false;
	Kofferraum[vehicleid] = false;
	DestroyVehicle(vehicleid);
	return 1;
}

stock AddOther(vehicleid)
{
	new var[264];
    if(FahrzeugInfo[vehicleid][fAutohaus] != 0)//Autohausfahrzeug
	{
		format(var,sizeof(var),"{FE0000}%s {FFFFFF}zu Verkaufen!\nPreis: {FE0000}%d$",FahrzeugName[FahrzeugInfo[vehicleid][fModelID]-400],FahrzeugInfo[vehicleid][fPreis]);
		FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel(var, 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, false);
		Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
		return 1;
	}
	else if(FahrzeugInfo[vehicleid][fNebenjob] > 0)//Nebenjobfahrzeug
	{ 
		if(FahrzeugInfo[vehicleid][fNebenjob] == 1)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem", 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 2)
		{
			FahrzeugInfo[vehicleid][fPizzaObjekt] = CreateObject(1582,0,0,-1000,0,0,0,100);
			AttachObjectToVehicle(FahrzeugInfo[vehicleid][fPizzaObjekt], vehicleid, 0.000000,-0.674999,1.350000,-90.000000,89.099983,0.000000);
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem", 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 3)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter", 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 4)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 5)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 6)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}\nMüll: {FF0000}0{FFFFFF} Liter", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 7)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
		else if(FahrzeugInfo[vehicleid][fNebenjob] == 10)
		{
			FahrzeugInfo[vehicleid][fLabel] = Create3DTextLabel("Jobfahrzeug von\n{FE0000}Niemandem{FFFFFF}", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, 0, false);
			Attach3DTextLabelToVehicle(FahrzeugInfo[vehicleid][fLabel],vehicleid,0.0,0.0,0.2);
			return 1;
		}
	}
 	else if(FahrzeugInfo[vehicleid][fFraktion] != 0)//Fraktionsfahrzeug
	{
	    if(FahrzeugInfo[vehicleid][fFraktion] == 2 || FahrzeugInfo[vehicleid][fFraktion] == 3 || FahrzeugInfo[vehicleid][fFraktion] == 4)//Cop car
	 	{
	 	    if(FahrzeugInfo[vehicleid][fModelID] == 596 || FahrzeugInfo[vehicleid][fModelID] == 597)
	 	    {
	 	        new pdobjtext[20];
				FahrzeugInfo[vehicleid][fPDObject] = CreateDynamicObject(19477, 0.0, 0.0, 0.0, 0.0, 90.0, 0.0,-1,-1,-1,100,100);
				AttachDynamicObjectToVehicle(FahrzeugInfo[vehicleid][fPDObject], vehicleid, 0.0100, -0.8700, 0.8050, 0.0000, -90.0000, 270.0000);
				format(pdobjtext,sizeof(pdobjtext),"{000000}PD %d",FahrzeugInfo[vehicleid][fDatabaseID]);
				SetDynamicObjectMaterialText(FahrzeugInfo[vehicleid][fPDObject], 0, pdobjtext, OBJECT_MATERIAL_SIZE_256x128, "Arial", 48, 0, 0xFFFF8200, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				return 1;
			}
		}
   	}
	return 1;
}

stock AddTuning(vehicleid)
{
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][0]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][1]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][2]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][3]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][4]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][5]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][6]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][7]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][8]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][9]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][10]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][11]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][12]);
	AddVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][13]);
	ChangeVehicleColours(vehicleid, FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1]);
	return 1;
}

stock RemoveTuning(vehicleid)
{
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][0]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][1]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][2]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][3]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][4]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][5]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][6]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][7]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][8]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][9]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][10]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][11]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][12]);
	RemoveVehicleComponent(vehicleid, FahrzeugInfo[vehicleid][fTuning][13]);
	return 1;
}

stock SetPlayerMoneyEx(playerid,money)
{
	if(!IsPlayerConnected(playerid))return 0;
 	ResetPlayerMoney(playerid);
 	SpielerInfo[playerid][sGeld] = money;
	GivePlayerMoney(playerid,SpielerInfo[playerid][sGeld]);
	return 1;
}

stock GivePlayerMoneyEx(playerid,money)
{
	if(!IsPlayerConnected(playerid))return 0;
	SpielerInfo[playerid][sGeld] = SpielerInfo[playerid][sGeld]+money;
    GivePlayerMoney(playerid,money);
	return 1;
}

stock GetPlayerMoneyEx(playerid) return SpielerInfo[playerid][sGeld];

stock CreateBlitzer(playerid,geschwindigkeit,ortschaft[])
{
	new string[128],query[256];
    for(new i=0;i<MAX_BLITZER;i++)
	{
	 	if(Blitzer[i][Erstellt] == false)
		{
			GetPlayerPos(playerid,Blitzer[i][oPosX],Blitzer[i][oPosY],Blitzer[i][oPosZ]);
		    Blitzer[i][Erstellt] = true;
		    Blitzer[i][Geschwindigkeit] = geschwindigkeit;
		    Blitzer[i][ObjectID] = -1;
		    strmid(Blitzer[i][BlitzerOrt],ortschaft,0,strlen(ortschaft),64);
		    Blitzer[i][ID] = CreateDynamicObject(18880,Blitzer[i][oPosX],Blitzer[i][oPosY],Blitzer[i][oPosZ]-2.0,0.0,0.0,15.0);
		    format(string,sizeof(string),"Blitzer %i\nRichtgeschwindigkeit: %iKm/h\n\nToleranz: %iKm/h",i,Blitzer[i][Geschwindigkeit]);
			BlitzerLabel[i] = CreateDynamic3DTextLabel(string,0x7DC5007A,Blitzer[i][oPosX],Blitzer[i][oPosY],Blitzer[i][oPosZ],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0);
			format(string,sizeof(string),"%s %s hat einen Blitzer aufgestellt. Geschwindigkeit: %i KM/H - Ort: %s",RangName(playerid),SpielerInfo[playerid][sName],geschwindigkeit,ortschaft);
			foreach(new id : Player){if(SpielerInfo[id][sFraktion] == 8){SendClientMessage(id,COLOR_INFO,string);}}
			mysql_format(sqlHandle, query,sizeof(query),"INSERT INTO `blitzer` (`ID`,`Geschwindigkeit`,`Ort`,`PosX`,`PosY`,`PosZ`) VALUES ('%d','%d','%s','%f','%f','%f')",i,Blitzer[i][Geschwindigkeit],Blitzer[i][BlitzerOrt],Blitzer[i][oPosX],Blitzer[i][oPosY],Blitzer[i][oPosZ]);
		    mysql_tquery(sqlHandle, query);
			return i;
		}
	}
	return -1;
}

stock DeleteBlitzer(playerid)
{
    new query[128];
    for(new i=0;i<MAX_BLITZER;i++)
	{
	  	if(IsPlayerInRangeOfPoint(playerid,2,Blitzer[i][oPosX],Blitzer[i][oPosY],Blitzer[i][oPosZ]))
	   	{
		    if(Blitzer[i][Erstellt] == true)
		    {
			    Blitzer[i][Erstellt] = false;
			    Blitzer[i][oPosX] = -1;
			    Blitzer[i][oPosY] = -1;
			    Blitzer[i][oPosZ] = -1;
			    Blitzer[i][Geschwindigkeit] = -1;
				if(Blitzer[i][ObjectID] != -1) DestroyDynamicObject(Blitzer[i][ObjectID]);
			    Blitzer[i][ObjectID] = -1;
				DestroyDynamicObject(Blitzer[i][ID]);
				DestroyDynamic3DTextLabel(BlitzerLabel[i]);
				SendClientMessage(playerid,COLOR_SUPER,"Der Blitzer wurde entfernt.");
				mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `blitzer` WHERE `ID` = '%d'",i);
				mysql_tquery(sqlHandle, query);
				return 1;
		    }
	    }
    }
	return SendClientMessage(playerid,COLOR_GREY,"Du befindest dich an keinem Blitzer.");
}

stock DeleteAllBlitzer()
{
	new query[128];
    for(new i=0;i<MAX_BLITZER;i++)
	{
	 	if(Blitzer[i][Erstellt] == true)
		{
			Blitzer[i][Erstellt] = false;
			Blitzer[i][oPosX] = -1;
			Blitzer[i][oPosY] = -1;
			Blitzer[i][oPosZ] = -1;
			Blitzer[i][Geschwindigkeit] = -1;
			if(Blitzer[i][ObjectID] != -1) DestroyDynamicObject(Blitzer[i][ObjectID]);
		    Blitzer[i][ObjectID] = -1;
			DestroyDynamicObject(Blitzer[i][ID]);
			DestroyDynamic3DTextLabel(BlitzerLabel[i]);
			mysql_format(sqlHandle, query,sizeof(query),"DELETE FROM `blitzer` WHERE `ID` = '%d'",i);
		   	mysql_tquery(sqlHandle, query);
		}
	}
	return 1;
}

stock ReturnBlitzerID(playerid)
{
    for(new i=0;i<MAX_BLITZER;i++)
	{
	 	if(Blitzer[i][Erstellt] == true)
		{
			if(IsPlayerInRangeOfPoint(playerid,2.5,Blitzer[i][sperreX],Blitzer[i][sperreY],Blitzer[i][sperreZ]))
			return i;
		}
	}
	return -1;
}

stock DestroyVehicleEx(tmpcar)
{
	printf("Das Fahrzeug mit der ID '%d' wurde gelöscht.",tmpcar);
	RemoveVehicleTuning(tmpcar);
	return DestroyVehicle(tmpcar);
}

stock RemoveVehicleTuning(tmpcar)
{
    for(new tuningcomp;tuningcomp<13;tuningcomp++)
    {
        new tuning = GetVehicleComponentInSlot(tmpcar, CARMODTYPE:tuningcomp);
        if(tuning >= 1000 || tuning <= 1193)
        {
            RemoveVehicleComponent(tmpcar,tuning);
        }
    }
	return 1;
}

stock ShowStats(playerid,targetid)
{
	new stats[312], PayDayTime = 60-SpielerInfo[targetid][sPayDay];
	format(stats,sizeof(stats),"Name: %s ~n~Level: %d - %d/%d EXP - ~n~Noch %d Minuten bis zum Payday ~n~~n~Verwarnungen: %d ~n~Kills: %d - Tode: %d | Paintball"
	,SpielerInfo[targetid][sName],GetPlayerScore(targetid),SpielerInfo[targetid][sEXP],SpielerInfo[targetid][sEXPNeeded],PayDayTime,SpielerInfo[targetid][sWarns],SpielerInfo[targetid][sPBKills],SpielerInfo[targetid][sPBTode]);
	PlayerTextDrawSetString(playerid, StatsDraw[playerid][3], stats);
	new GehaltRang[32], FrakID[3];
    format(GehaltRang,sizeof(GehaltRang),"Gehalt_Rang%d",SpielerInfo[targetid][sRank]);
    format(FrakID,sizeof(FrakID),"%d",SpielerInfo[targetid][sFraktion]);
    new Gehalt = mysql_GetInt("frakinfos", GehaltRang, "FID", FrakID);
	if(SpielerInfo[targetid][sFrakSperre] == 0)
	{
	    if(SpielerInfo[targetid][sFraktion] == 0)
	    {
			format(stats,sizeof(stats),"Fraktion: %s ~n~Rank: Keinen ~n~Gehalt: %d$ ~n~Fraksperre: ~g~Nein"
			,FrakKurzel(SpielerInfo[targetid][sFraktion]),Gehalt);
			PlayerTextDrawSetString(targetid, StatsDraw[playerid][4], stats);
		}
		else
		{
			format(stats,sizeof(stats),"Fraktion: %s ~n~Rank: %s ~n~Gehalt: %d$ ~n~Fraksperre: ~g~Nein"
			,FrakKurzel(SpielerInfo[targetid][sFraktion]),RangName(targetid),Gehalt);
			PlayerTextDrawSetString(targetid, StatsDraw[playerid][4], stats);
		}
	}
	else if(SpielerInfo[targetid][sFrakSperre] == 1)
	{
 		if(SpielerInfo[targetid][sFraktion] == 0)
	    {
			format(stats,sizeof(stats),"Fraktion: %s ~n~Rank: Keinen ~n~Gehalt: %d$ ~n~Fraksperre: ~r~Ja"
			,FrakKurzel(SpielerInfo[targetid][sFraktion]),Gehalt);
			PlayerTextDrawSetString(playerid, StatsDraw[playerid][4], stats);
		}
		else
		{
			format(stats,sizeof(stats),"Fraktion: %s ~n~Rank: %s ~n~Gehalt: %d$ ~n~Fraksperre: ~r~Ja"
			,FrakKurzel(SpielerInfo[targetid][sFraktion]),RangName(targetid),Gehalt);
			PlayerTextDrawSetString(playerid, StatsDraw[playerid][4], stats);
		}
	}
	format(stats,4,"%d",GetPlayerSkin(targetid));
	PlayerTextDrawSetString(playerid, StatsDraw[playerid][1], stats);
	PlayerTextDrawShow(playerid, StatsDraw[playerid][0]);
	PlayerTextDrawShow(playerid, StatsDraw[playerid][1]);
	PlayerTextDrawShow(playerid, StatsDraw[playerid][2]);
	PlayerTextDrawShow(playerid, StatsDraw[playerid][3]);
	PlayerTextDrawShow(playerid, StatsDraw[playerid][4]);
	return 1;
}

stock IsPlayerInInvalidNosVehicle(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	#define MAX_INVALID_NOS_VEHICLES 52
	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] = {
	581,523,462,521,463,522,461,448,468,586,
	509,481,510,472,473,493,595,484,430,453,
	452,446,454,590,569,537,538,570,449,
	406 };
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
		{
			if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
		}
	}
	return false;
}

stock IsComponentidCompatible(modelid, componentid)
{
	if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
	componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
	componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
	componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
	return true;

	switch (modelid)
	{
		case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
		case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
		case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
		case 409: return (componentid == 1009);
		case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
		case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
		case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
		case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
		case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
		case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
		case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
		case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
		case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
		case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
		case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 506: return (componentid == 1009);
		case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
		case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
		case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
		case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
		case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
		case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
		case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
		case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
		case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
		case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
		case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
		case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
		case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
		case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
		case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
		case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
		case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
		case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
		case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
		case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
		case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
		case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
		case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
		case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
		case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
		case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
	}
	return false;
}

stock GetClosestVehicle(playerid, Float:range)
{
	new Float:p_X, Float:p_Y, Float:p_Z, Float:Distance, Float:PretendentDistance = range +1, Pretendent;
    GetPlayerPos(playerid, p_X, p_Y, p_Z);
    for(new vehicleid=1; vehicleid < MAX_VEHICLES; vehicleid++)
    {
        Distance = GetVehicleDistanceFromPoint(vehicleid, p_X, p_Y, p_Z);
        if(Distance <= range && Distance <= PretendentDistance)
        {
            Pretendent = vehicleid;
            PretendentDistance = Distance;
        }
    }
    return Pretendent;
}
//native in openMP
stock RemovePlayerWeaponEx(playerid, WaffenID)
{
 	new AlteWaffe[12], AlteAmmo[12];
 	for(new Slot = 0; Slot != 12; Slot++)
    {
        new Waffe;
        GetPlayerWeaponData(playerid, Slot, Waffe, WaffenID);

        if(Waffe != WaffenID)
        {
        	GetPlayerWeaponData(playerid, Slot, AlteWaffe[Slot], AlteAmmo[Slot]);
        }
    }

    ResetPlayerWeapons(playerid);
    for(new Slot = 0; Slot != 12; Slot++)
    {
     	GivePlayerWeapon(playerid, AlteWaffe[Slot], AlteAmmo[Slot]);
    }
    return 1;
}


stock DestroyVars(playerid)
{
	new string[264];
	stopAC[playerid] = 0;
	AC_PlayerVeh[playerid] = -1;
	EnterLockedV[playerid] = 0;
	ProbefahrtCar[playerid] = 0;
	NotrufSperre[playerid][0] = 0;
	NotrufSperre[playerid][1] = 0;
	NotrufSperre[playerid][2] = 0;
  	Tot_X[playerid] = 0;
	Tot_Y[playerid] = 0;
 	Tot_Z[playerid] = 0;
	Tot_Int[playerid] = 0;
	Tot_World[playerid] = 0;
	AfkX[playerid] = 0;
	AfkY[playerid] = 0;
	AfkZ[playerid] = 0;
	Afk[playerid] = 0;
	lastUpdate[playerid] = 0;
	Afkversuche[playerid] = 0;
	afktimedrestka[playerid] = 0;
	pfanddurchsucht[playerid] = 0;
	
   	KillTimer(FallPlayerTimer[playerid]);
   	KillTimer(DeadTimer[playerid]);
   	KillTimer(KrankenhausTimer[playerid]);
   	KillTimer(HealthTimer[playerid]);
   	KillTimer(PayDayTimer[playerid]);
   	KillTimer(NotrufTimer[playerid][0]);
   	KillTimer(NotrufTimer[playerid][1]);
   	KillTimer(NotrufTimer[playerid][2]);
   	KillTimer(KnastTimer[playerid]);
   	KillTimer(SDMTimer[playerid]);
   	KillTimer(PilotenTimer[playerid]);
   	KillTimer(CamFahrten[playerid]);
   	KillTimer(BusfahrerTimer[playerid]);
	KillTimer(AC_Check[playerid]);
	KillTimer(BombenTimer[playerid]);
	KillTimer(Afktimer[playerid]);
	KillTimer(MutePlayerTimer[playerid]);
	KillTimer(WerbungSperrePlayerTimer[playerid]);
	
	mysql_SetInt("accounts", "Connected", 0, "Name", SpielerInfo[playerid][sName]);
	
	DeleteJobFahrzeug(playerid);
	
	if(GetPVarInt(playerid,"Ziviroller") != 0)
	{
	    new vehicleid = GetPVarInt(playerid,"Ziviroller");
	    DeleteVehicle(vehicleid);
	}
   	if(GetPVarInt(playerid,"SupTicket") == 1)
   	{
		DeleteSupTicket(playerid);
   	}
	if(GetPVarInt(playerid,"Fahrradverleih") == 1)
	{
	    DestroyVehicleEx(GetPVarInt(playerid,"FahrradID"));
	}
 	if(GetPVarInt(playerid,"FSchein") != 0)
    {
        new vehicleid = GetPVarInt(playerid,"FahrschulCar");
  		DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid,"FahrschulStunde");
		DeletePVar(playerid,"FSchein");
		DeletePVar(playerid,"FahrschulCar");
		schulung[playerid] = 0;
		FahrschulCar[vehicleid] = 0;
		Fehlerpunkte[playerid] = 0;
		Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
		FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
		DeleteVehicle(vehicleid);
        DisablePlayerCheckpoint(playerid);
    }
    if(GetPVarInt(playerid,"Supmobil") != 0)
	{
		DeleteVehicle(GetPVarInt(playerid,"Supmobil"));
		DeletePVar(playerid,"Supmobil");
	}
	if(SpielerLKWTrailer[playerid] > 0)
	{
	    DestroyVehicleEx(SpielerLKWTrailer[playerid]);
		SetVehicleToRespawn(GetPVarInt(playerid,"SpielerLKW"));
	    SpielerLKWTrailer[playerid] = 0;
	}
	if(GetPVarInt(playerid,"Bankrob") == 1)
	{
	    BankRobAmLaufen = 0;
	    DeleteVehicle(BankRobVan);
	    BankRobVan = -1;
	    KillTimer(PlayerBankRobTimer[playerid]);
		SendCopMessage(COLOR_BLUE,"ZENTRALE: AN ALLE EINHEITEN !! EINE STRAFANZEIGE WURDE SOEBEN >ZURÜCKGEZOGEN<.");
		format(string,sizeof(string),"ZENTRALE: Der Bankräuber hat sich aus dem Staub gemacht (Logout).",SpielerInfo[playerid][sName]);
		SendCopMessage(COLOR_BLUE,string);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][0]);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][1]);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][2]);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][3]);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][4]);
		PlayerTextDrawHide(playerid, BankraubTD[playerid][5]);
		for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
 		{
 		    DestroyDynamicObject(BankRobGeldSack[sackid]);
 		    Delete3DTextLabel(BankRobGeldSackLabel[sackid]);
 		    BankRobGeldSackLabel[sackid] = Text3D:INVALID_3DTEXT_ID;
 		}
	}
	if(GetPVarInt(playerid,"BombID") != 0)
	{
	    DestroyObject(GetPVarInt(playerid,"BombID"));
	}
 	Delete3DTextLabel(Afklabel[playerid]);
 	Afklabel[playerid] = Text3D:INVALID_3DTEXT_ID;
 	
	SpielerInfo[playerid][sPosX] = 0; SpielerInfo[playerid][sPosY] = 0; SpielerInfo[playerid][sPosZ] = 0;
	SpielerInfo[playerid][sPosA] = 0; SpielerInfo[playerid][sStadt] = 0;
	SpielerInfo[playerid][sSpawn] = 0; SpielerInfo[playerid][sAdmin] = 0; SpielerInfo[playerid][sFraktion] = 0;
	SpielerInfo[playerid][sLeader] = 0; SpielerInfo[playerid][sRank] = 0; SpielerInfo[playerid][sKnast] = 0;
	SpielerInfo[playerid][sZelle] = 0; SpielerInfo[playerid][sEXP] = 0; SpielerInfo[playerid][sEXPNeeded] = 0;
	SpielerInfo[playerid][sWarns] = 0; SpielerInfo[playerid][sADSperre] = 0;
	SpielerInfo[playerid][sMuted] = 0; SpielerInfo[playerid][sBadword] = 0; SpielerInfo[playerid][sPerso] = 0;
	SpielerInfo[playerid][sBankPin] = 0; SpielerInfo[playerid][sBankkonto] = 0; SpielerInfo[playerid][sMission] = 0;
	SpielerInfo[playerid][sMissionComp] = 0; SpielerInfo[playerid][sTankstelle] = 0; SpielerInfo[playerid][sAmmunation] = 0;
	SpielerInfo[playerid][sHaus] = 0; SpielerInfo[playerid][sGHaus] = 0; SpielerInfo[playerid][sMieter] = 0; SpielerInfo[playerid][sWanteds] = 0;
	SpielerInfo[playerid][sNebenjob] = 0; SpielerInfo[playerid][sKurrier] = 0; SpielerInfo[playerid][sBombe] = 0;
	SpielerInfo[playerid][sCarLic] = 0; SpielerInfo[playerid][sBikeLic] = 0; SpielerInfo[playerid][sFlugLic] = 0;
	SpielerInfo[playerid][sTruckLic] = 0; SpielerInfo[playerid][sBootLic] = 0; SpielerInfo[playerid][sWeaponLic] = 0;
	SpielerInfo[playerid][sKrankenhaus] = 0; SpielerInfo[playerid][sWiederbeleben] = 0; SpielerInfo[playerid][sPaket] = 0;
	SpielerInfo[playerid][sPayDay] = 0; SpielerInfo[playerid][sNavi] = 0; SpielerInfo[playerid][sHandy] = 0;
	SpielerInfo[playerid][sGuthaben] = 0; SpielerInfo[playerid][sTelefonbuch] = 0; SpielerInfo[playerid][sRepairkit] = 0;
	SpielerInfo[playerid][sPBKills] = 0; SpielerInfo[playerid][sPBTode] = 0; SpielerInfo[playerid][sStartbonus] = 0;
	SpielerInfo[playerid][sMP3] = 0; SpielerInfo[playerid][sBlitzerZeit] = 0; SpielerInfo[playerid][sGeld] = 0;
	SpielerInfo[playerid][sTicketsBearbeitet] = 0; SpielerInfo[playerid][sPayDayGeld] = 0;
	SpielerInfo[playerid][sLotto][0]=0;SpielerInfo[playerid][sLotto][1]=0;SpielerInfo[playerid][sLotto][2]=0;
	SpielerInfo[playerid][sJobEXP][0] = 0; SpielerInfo[playerid][sJobEXP][1] = 0; SpielerInfo[playerid][sJobEXP][2] = 0;
	SpielerInfo[playerid][sJobEXP][3] = 0; SpielerInfo[playerid][sJobEXP][4] = 0; SpielerInfo[playerid][sDrogen] = 0;
	SpielerInfo[playerid][sTutorial] = 0; SpielerInfo[playerid][sQuest] = 0; SpielerInfo[playerid][sGruppe] = 0;
	SpielerInfo[playerid][sGLeader] = 0; SpielerInfo[playerid][sGRank] = 0; SpielerInfo[playerid][sFLeader] = 0;
	SpielerInfo[playerid][sFirma] = 0; SpielerInfo[playerid][sFRank] = 0; SpielerInfo[playerid][sGFirma] = 0;
	SpielerInfo[playerid][sOnline] = 0; SpielerInfo[playerid][sKurrier] = 0; SpielerInfo[playerid][sBombe] = 0;
	SpielerInfo[playerid][sSpectate] = 0; SpielerInfo[playerid][sPfandflaschen] = 0; SpielerInfo[playerid][sBeutel] = 0;
	SpielerInfo[playerid][sKampfstyle] = 0; SpielerInfo[playerid][sHelm] = 0; SpielerInfo[playerid][sDrogenPflanze] = 0;
	SpielerInfo[playerid][sC4RobState] = false; SpielerInfo[playerid][sc4] = 0;
	return 1;
}

stock GetXYInFrontOfVehicle(vehicleid, &Float:xs, &Float:ys, &Float:zs, Float:distance)
{
	new Float:as;
	GetVehiclePos(vehicleid,xs,ys,zs);

	GetVehicleZAngle(vehicleid, as);

	xs += (distance * floatsin(-as, degrees));
	ys += (distance * floatcos(-as, degrees));
	return 1;
}

stock SpawnPlayerEx(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new tmpcar = GetPlayerVehicleID(playerid);
        if(FahrzeugInfo[tmpcar][fFraktion] == 0 && FahrzeugInfo[tmpcar][fGruppe] == 0 && FahrzeugInfo[tmpcar][fFirma] == 0 && strlen(FahrzeugInfo[tmpcar][fBesitzer]) == 0){SetVehicleParamsEx(tmpcar,engine,lights,alarm,false,bonnet,boot,objective);}
        new Float:pX, Float:pY, Float:pZ;
        GetPlayerPos(playerid,pX,pY,pZ);
        SetPlayerPos(playerid,pX,pY,pZ+5);
        SetTimerEx("OnPlayerSpawn",10,false,"i",playerid);
    }
    else SpawnPlayer(playerid);
    return 1;
}

stock CreateNummernSchild(playerid)
{
	new Float:xx, Float:yy, Float:zz;
	GetPlayerPos(playerid, xx, yy, zz);
	new bla1 = random(26), bla2 = random(26);
	new zahl1 = random(9)+1, zahl2 = random(9)+1, zahl3 = random(9)+1, zahl4 = random(9)+1;
	new string[10], stadt[3], mitte[2], zahlen[4];
	new zahl = random(4)+1;

	if(SpielerInfo[playerid][sStadt] == 1)
	{
 		format(stadt, sizeof(stadt), "LS");
	}
	else if(SpielerInfo[playerid][sStadt] == 2)
	{
 		format(stadt, sizeof(stadt), "SF");
	}
	else if(SpielerInfo[playerid][sStadt] == 3)
	{
	    format(stadt, sizeof(stadt), "LV");
	}

	format(mitte, sizeof(mitte), "%s%s", ABC[bla1], ABC[bla2]);

	if(zahl == 1){format(zahlen, sizeof(zahlen), "%d", zahl1);}
	else if(zahl == 2){format(zahlen, sizeof(zahlen), "%d%d", zahl1, zahl2);}
	else if(zahl == 3){format(zahlen, sizeof(zahlen), "%d%d%d", zahl1, zahl2, zahl3);}
	else if(zahl == 4){format(zahlen, sizeof(zahlen), "%d%d%d%d", zahl1, zahl2, zahl3, zahl4);}

	format(string, sizeof(string), "%s:%s:%s", stadt, mitte, zahlen);
	return string;
}

stock CreateFirmaNummernSchild(vehicleid,firmaid)
{
	new string[5];
	format(string, sizeof(string), "%s", FirmenInfo[firmaid][fSchild]);
	format(FahrzeugInfo[vehicleid][fKennzeichen], 5, string);
	SetVehicleNumberPlate(vehicleid,string);
	return 1;
}

stock CreateFrakNummernSchild(vehicleid,frakid)
{
	new string[10];
	if(frakid == 1)
	{
 		format(string, sizeof(string), "Regierung");
	}
	else if(frakid == 2)
	{
 		format(string, sizeof(string), "SAPD");
	}
	else if(frakid == 5)
	{
	    format(string, sizeof(string), "SARD");
	}
	else if(frakid == 6)
	{
	    format(string, sizeof(string), "FBI");
	}
	else if(frakid == 8)
	{
	    format(string, sizeof(string), "NEWS");
	}
	else if(frakid == 9)
	{
	    format(string, sizeof(string), "GROVE");
	}
	else if(frakid == 10)
	{
	    format(string, sizeof(string), "BALLAS");
	}
	else if(frakid == 11)
	{
	    format(string, sizeof(string), "VAGOS");
	}
	else if(frakid == 12)
	{
	    format(string, sizeof(string), "AZTECAS");
	}
	else if(frakid == 13)
	{
	    format(string, sizeof(string), "RIFA");
	}
	else if(frakid == 14)
	{
	    format(string, sizeof(string), "TRIADEN");
	}
	else if(frakid == 15)
	{
	    format(string, sizeof(string), "YAKUZA");
	}
	else if(frakid == 16)
	{
	    format(string, sizeof(string), "CAMORRA");
	}
	else if(frakid == 17)
	{
	    format(string, sizeof(string), "ITALIAN");
	}
	else if(frakid == 18)
	{
	    format(string, sizeof(string), "RUSSIA");
	}
	format(FahrzeugInfo[vehicleid][fKennzeichen], 10, string);
	SetVehicleNumberPlate(vehicleid,string);
	return 1;
}

stock GetOwner(vehicleid)
{
    for(new i = 1; i < MAX_PLAYERS; i++)
    {
    	for(new x = 0; x < MAX_PCAR; x++)
        {
	        if(PrivatCar[i][x][pcCarobj] == vehicleid){return i;}
	        else if(PrivatCar[i][x][pcCarobj] == vehicleid){return i;}
	        else if(PrivatCar[i][x][pcCarobj] == vehicleid){return i;}
		}
    }
    return -1;
}

stock GetOwnerSlot(vehicleid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        for(new x = 0; x < MAX_PCAR; x++)
        {
            if(PrivatCar[i][x][pcCarobj] == vehicleid){return x;}
        }
    }
    return -1;
}

stock ApplyAnimationEx(playerid, const animlib[], const animname[], Float:fDelta, bool:loop, bool:lockx, bool:locky, bool:freeze, time, FORCE_SYNC:forceSync = SYNC_NONE)
{
    ApplyAnimation(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, forceSync);
    return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forceSync);
}

stock IsPlayerSwimmingEx(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new animlib[32], animname[32];
		GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

		if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_GLIDE", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_BREAST", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_CRAWL", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_UNDER", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_DIVE_GLIDE", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_UNDER", true)) return 1;
		else if(!strcmp(animlib, "SWIM", true) && !strcmp(animname, "SWIM_TREAD", true)) return 1;
	}
	return 0;
}
stock IsPlayerInWaterEx(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if((x >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893) ||//Represa do deserto de Las Venturas
	(x >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||//Piscina de uma casa em VineWood (Mad Dog's Mansion)
	(x >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) ||//Piscina de uma casa em VineWood (Perto Mad Dog's Mansion)
	(x >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||// 2 Piscinas em VineWood
	(x >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) ||//Lago da árvore caída, ou Lago Morto
	(x >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||//Lago perto do aeroporto Los Santos
	(x >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) ||//Lago perto da Igreja Los Santos
	(x >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||//Park Glen Los Santos
	(x >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) ||//Lago em San Fierro
	(x >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||//Cascata do Login em Las Venturas
	(x >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) ||//Navio Pirata em Las Venturas
	(x >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||//Frente de um Cascino em Las Venturas
	(x >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))//Piscina de um prédio em Las Venturas
	{
			return 1;
    }
    return 0;
}

stock TStelleUpgrades(Variable)
{
    new status[30];
    if(Variable == 0){status="{FF0000}Nicht vorhanden";}
    else {status="{9ACD32}Vorhanden";}
    return status;
}

stock FScheinInfo(Variable)
{
    new status[30];
    if(Variable == 0){status="{FF0000}Nicht vorhanden";}
    else {status="{9ACD32}Vorhanden";}
    return status;
}

stock SetPlayerWantedLevelEx(playerid,Anzahl)
{
	SpielerInfo[playerid][sWanteds] = Anzahl;
	if(SpielerInfo[playerid][sWanteds] > 0)
	{
		new string[10];
		format(string,sizeof(string),"%d ]",SpielerInfo[playerid][sWanteds]);
		PlayerTextDrawHide(playerid,WantedDraw[playerid]);
		PlayerTextDrawSetString(playerid, WantedDraw[playerid], string);
		PlayerTextDrawShow(playerid,WantedDraw[playerid]);
	}
	else if(SpielerInfo[playerid][sWanteds] <= 0)
	{
	    PlayerTextDrawHide(playerid,WantedDraw[playerid]);
	}
	return 1;
}

stock GetPlayerWantedLevelEx(playerid)
{
	return SpielerInfo[playerid][sWanteds];
}

stock LoadGangZones()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `gangzones` ORDER BY `GID` ASC", "onLoadGangZones");
	return 1;
}

stock LoadDrogen()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `drogenpflanzen` ORDER BY `ID` ASC", "onLoadDrogen");
	return 1;
}

stock SaveTankstellen()
{
	new query[524];
	for(new mf=1;mf<MAX_TSTELLEN;mf++)
    {
        if(TankstellenInfo[mf][tsErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `tankstellen` SET `Besitzer`='%s', `Beschreibung`='%s', `Preis`='%d', `Benzin`='%d', `Diesel`='%d', `Kerosin`='%d', `Benzin Preis`='%d', `Diesel Preis`='%d', `Kerosin Preis`='%d', `Benzin Liter`='%d', `Diesel Liter`='%d', `Kerosin Liter`='%d', `Kasse`='%d' WHERE `ID`='%d'",
	    TankstellenInfo[mf][tsBesitzer],TankstellenInfo[mf][tsBeschreibung],TankstellenInfo[mf][tsPreis],TankstellenInfo[mf][tsBenzin],TankstellenInfo[mf][tsDiesel],TankstellenInfo[mf][tsKerosin],TankstellenInfo[mf][tsBenzinPreis],TankstellenInfo[mf][tsDieselPreis],TankstellenInfo[mf][tsKerosinPreis],
		TankstellenInfo[mf][tsBenzinLiter],TankstellenInfo[mf][tsDieselLiter],TankstellenInfo[mf][tsKerosinLiter],TankstellenInfo[mf][tsKasse],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveAmmunations()
{
	new query[364];
	for(new mf=1;mf<MAX_AMMUS;mf++)
    {
        if(AmmunationInfo[mf][amErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `ammunation` SET `Besitzer`='%s', `Preis`='%d', `Armour`='%d', `Schlagring`='%d', `Messer`='%d' WHERE `ID`='%d'",
	    AmmunationInfo[mf][amBesitzer],AmmunationInfo[mf][amPreis],AmmunationInfo[mf][amArmour],AmmunationInfo[mf][amSchlagring],AmmunationInfo[mf][amMesser],mf);
		mysql_tquery(sqlHandle, query);
		
		mysql_format(sqlHandle, query,sizeof query,"UPDATE `ammunation` SET `Baseball`='%d', `Deagle`='%d', `MP5`='%d', `AK`='%d', `M4`='%d', `Sniper`='%d', `Fallschirm`='%d',`Kasse`='%d' WHERE `ID`='%d'",
	    AmmunationInfo[mf][amBaseball],AmmunationInfo[mf][amDeagle],AmmunationInfo[mf][amMP5],AmmunationInfo[mf][amAK],AmmunationInfo[mf][amM4],AmmunationInfo[mf][amSniper],AmmunationInfo[mf][amFallschirm],AmmunationInfo[mf][amKasse],mf);
	 	mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveStores()
{
	new query[364];
	for(new mf=1;mf<MAX_STORES;mf++)
    {
        if(StoreInfo[mf][siErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `stores` SET `Besitzer`='%s', `Kasse`='%d', `Preis`='%d', `Navi`='%d', `Handy`='%d', `Telefonbuch`='%d', `Repairkit`='%d', `MP3Player`='%d' WHERE `ID`='%d'",
	    StoreInfo[mf][siBesitzer],StoreInfo[mf][siKasse],StoreInfo[mf][siPreis],StoreInfo[mf][siNavi],StoreInfo[mf][siHandy],StoreInfo[mf][siTelefonbuch],StoreInfo[mf][siRepairkit],StoreInfo[mf][siMP3],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveHauser()
{
	new query[364];
	for(new mf=1;mf<MAX_HAUSER;mf++)
    {
        if(HausInfo[mf][hsErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `hauser` SET `Besitzer`='%s', `Preis`='%d', `Ort`='%d', `Typ`='%d', `Interior`='%d', `Locked`='%d', `Mietbar`='%d', `Miete`='%d', `Health`='%d' WHERE `ID`='%d'",
	    HausInfo[mf][hsBesitzer],HausInfo[mf][hsPreis],HausInfo[mf][hsOrt],HausInfo[mf][hsTyp],HausInfo[mf][hsInterior],HausInfo[mf][hsLocked],HausInfo[mf][hsMietbar],HausInfo[mf][hsMiete],HausInfo[mf][hsHealth],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveGarage()
{
	new query[364];
	for(new mf=1;mf<MAX_GARAGEN;mf++)
    {
        if(GaragenInfo[mf][giErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof(query),"UPDATE `garagen` SET `Besitzer`='%s', `Preis`='%d', `Ort`='%d', `Locked`='%d', `Mietbar`='%d', `Miete`='%d', `Fahrzeug1`='%d', `Fahrzeug2`='%d', `Fahrzeug3`='%d' WHERE `ID`='%d'",
	    GaragenInfo[mf][giBesitzer],GaragenInfo[mf][giPreis],GaragenInfo[mf][giOrt],GaragenInfo[mf][giLocked],GaragenInfo[mf][giMietbar],GaragenInfo[mf][giMiete],GaragenInfo[mf][giFahrzeug][0],GaragenInfo[mf][giFahrzeug][1],GaragenInfo[mf][giFahrzeug][2],mf);
		mysql_tquery(sqlHandle, query);
		
		mysql_format(sqlHandle, query,sizeof(query),"UPDATE `garagen` SET `Fahrzeug4`='%d', `Fahrzeug5`='%d', `Fahrzeug6`='%d', `Fahrzeug7`='%d', `Fahrzeug8`='%d', `Fahrzeug9`='%d', `Fahrzeug10`='%d' WHERE `ID`='%d'",
	    GaragenInfo[mf][giFahrzeug][3],GaragenInfo[mf][giFahrzeug][4],GaragenInfo[mf][giFahrzeug][5],GaragenInfo[mf][giFahrzeug][6],GaragenInfo[mf][giFahrzeug][7],GaragenInfo[mf][giFahrzeug][8],GaragenInfo[mf][giFahrzeug][9],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveGangZones()
{
	new query[230];
	for(new mf=1;mf<MAX_GANGZONES;mf++)
    {
        if(GangZoneInfo[mf][gzErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `gangzones` SET `Owner`='%d', `Attacker`='%d', `Value`='%d', `OwnerPunkte`='%d', `AttackerPunkte`='%d', `LastFight`='%d', `FightTime`='%d', `Gebiet`='%d' WHERE `GID`='%d'",
	    GangZoneInfo[mf][gzOwner],GangZoneInfo[mf][gzAttacker],GangZoneInfo[mf][gzValue],GangZoneInfo[mf][gzOwnerPunkte],GangZoneInfo[mf][gzAttackerPunkte],GangZoneInfo[mf][gzLastFight],GangZoneInfo[mf][gzFightTime],GangZoneInfo[mf][gzGebiet],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveDrogen()
{
	new query[230];
	for(new mf=1;mf<MAX_DROGEN;mf++)
    {
        if(DrogenInfo[mf][dErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `drogenpflanzen` SET `Reife`='%d'  WHERE `ID`='%d'",DrogenInfo[mf][dReife],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveGruppen()
{
	new query[230];
	for(new mf=1;mf<MAX_GRUPPEN;mf++)
    {
        if(GruppenInfo[mf][gErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `gruppen` SET `Kasse`='%d', `GehaltUpgrade`='%d', `Kennzeichen`='%s' WHERE `ID`='%d'",
	    GruppenInfo[mf][gKasse],GruppenInfo[mf][gUpgrade][0],GruppenInfo[mf][gSchild],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveFirmen()
{
	new query[800];
	for(new mf=1;mf<MAX_FIRMEN;mf++)
    {
        if(FirmenInfo[mf][fErstellt] == false)continue;
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `firmen` SET `fOwner`='%s', `Kasse`='%d', `GehaltUpgrade`='%d', `Kennzeichen`='%s', `geburen`='%d', `geburenLS`='%d', `geburenSF`='%d', `geburenLV`='%d' WHERE `ID`='%d'",
	    FirmenInfo[mf][fOwner],FirmenInfo[mf][fKasse],FirmenInfo[mf][fUpgrade][0],FirmenInfo[mf][fSchild],FirmenInfo[mf][geburen],FirmenInfo[mf][geburenLS],FirmenInfo[mf][geburenSF],FirmenInfo[mf][geburenLV],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock StartGangfight(playerid)
{
    for(new mf=1;mf<MAX_GANGZONES;mf++)
    {
        if(GangZoneInfo[mf][gzErstellt] == false)continue;
        if(SpielerInfo[playerid][sFraktion] == GangZoneInfo[mf][gzAttacker] || SpielerInfo[playerid][sFraktion] == GangZoneInfo[mf][gzOwner] && GangZoneInfo[mf][gzFightTime] > 1)
        {
			PlayerTextDrawDestroy(playerid, Gangfight[playerid][0]); PlayerTextDrawDestroy(playerid, Gangfight[playerid][1]); PlayerTextDrawDestroy(playerid, Gangfight[playerid][2]);
			PlayerTextDrawDestroy(playerid, Gangfight[playerid][3]); PlayerTextDrawDestroy(playerid, Gangfight[playerid][4]); PlayerTextDrawDestroy(playerid, Gangfight[playerid][5]); PlayerTextDrawDestroy(playerid, Gangfight[playerid][6]);

			Gangfight[playerid][0] = CreatePlayerTextDraw(playerid,468.000000, 120.000000, "~r~");
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][0], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][0], TEXT_DRAW_FONT_1);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][0], 0.000000, 5.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][0], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][0], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][0], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][0], 1);
			PlayerTextDrawUseBox(playerid,Gangfight[playerid][0], true);
			PlayerTextDrawBoxColour(playerid,Gangfight[playerid][0], 16843188);
			PlayerTextDrawTextSize(playerid,Gangfight[playerid][0], 610.000000, 0.000000);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][0], false);

			Gangfight[playerid][1] = CreatePlayerTextDraw(playerid,491.000000, 113.000000, "Gangfight");
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][1], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][1], TEXT_DRAW_FONT_2);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][1], 0.400000, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][1], -4980481);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][1], true);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][1], true);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][1], false);

			Gangfight[playerid][2] = CreatePlayerTextDraw(playerid,470.000000, 126.000000, "Grove Street Families");
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][2], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][2], TEXT_DRAW_FONT_2);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][2], 0.190000, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][2], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][2], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][2], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][2], 1);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][2], false);

			Gangfight[playerid][3] = CreatePlayerTextDraw(playerid,470.000000, 138.000000, "Rolling High Ballas");
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][3], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][3], TEXT_DRAW_FONT_2);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][3], 0.199999, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][3], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][3], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][3], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][3], 1);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][3], false);

			Gangfight[playerid][4] = CreatePlayerTextDraw(playerid,607.000000, 126.000000, "75 Kills");
			PlayerTextDrawAlignment(playerid,Gangfight[playerid][4], TEXT_DRAW_ALIGN_RIGHT);
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][4], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][4], TEXT_DRAW_FONT_2);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][4], 0.170000, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][4], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][4], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][4], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][4], 1);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][4], false);

			Gangfight[playerid][5] = CreatePlayerTextDraw(playerid,607.000000, 138.000000, "32 Kills");
			PlayerTextDrawAlignment(playerid,Gangfight[playerid][5], TEXT_DRAW_ALIGN_RIGHT);
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][5], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][5], TEXT_DRAW_FONT_2);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][5], 0.170000, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][5], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][5], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][5], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][5], 1);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][5], false);

			Gangfight[playerid][6] = CreatePlayerTextDraw(playerid,539.000000, 151.000000, "Noch ~r~19 Minuten ~w~ verbleibend");
			PlayerTextDrawAlignment(playerid,Gangfight[playerid][6], TEXT_DRAW_ALIGN_CENTRE);
			PlayerTextDrawBackgroundColour(playerid,Gangfight[playerid][6], 255);
			PlayerTextDrawFont(playerid,Gangfight[playerid][6], TEXT_DRAW_FONT_3);
			PlayerTextDrawLetterSize(playerid,Gangfight[playerid][6], 0.250000, 1.000000);
			PlayerTextDrawColour(playerid,Gangfight[playerid][6], -1);
			PlayerTextDrawSetOutline(playerid,Gangfight[playerid][6], 0);
			PlayerTextDrawSetProportional(playerid,Gangfight[playerid][6], true);
			PlayerTextDrawSetShadow(playerid,Gangfight[playerid][6], 1);
			PlayerTextDrawSetSelectable(playerid,Gangfight[playerid][6], false);
        
            new gfstring[60];
            format(gfstring,sizeof(gfstring),"%s",FrakName(GangZoneInfo[mf][gzOwner]));
	        PlayerTextDrawSetString(playerid, Gangfight[playerid][2], gfstring);
	        format(gfstring,sizeof(gfstring),"%s",FrakName(GangZoneInfo[mf][gzAttacker]));
	        PlayerTextDrawSetString(playerid, Gangfight[playerid][3], gfstring);
	        format(gfstring,sizeof(gfstring),"%d P.",GangZoneInfo[mf][gzOwnerPunkte]);
	        PlayerTextDrawSetString(playerid, Gangfight[playerid][4], gfstring);
	        format(gfstring,sizeof(gfstring),"%d P.",GangZoneInfo[mf][gzAttackerPunkte]);
	        PlayerTextDrawSetString(playerid, Gangfight[playerid][5], gfstring);
	        format(gfstring,sizeof(gfstring),"Noch ~r~%d Minuten ~w~verbleibend",GangZoneInfo[mf][gzFightTime]);
	        PlayerTextDrawSetString(playerid, Gangfight[playerid][6], gfstring);
	        
			PlayerTextDrawShow(playerid, Gangfight[playerid][0]); PlayerTextDrawShow(playerid, Gangfight[playerid][1]); PlayerTextDrawShow(playerid, Gangfight[playerid][2]);
			PlayerTextDrawShow(playerid, Gangfight[playerid][3]); PlayerTextDrawShow(playerid, Gangfight[playerid][4]); PlayerTextDrawShow(playerid, Gangfight[playerid][5]); PlayerTextDrawShow(playerid, Gangfight[playerid][6]);
	        UpdateGangZones(playerid);
        }
    }
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW && GetPVarInt(playerid,"ICPEdit") == 1){SelectTextDraw(playerid,0x6E6E6EFF);}
  	if(clickedid == Registring)
	{
	   CancelSelectTextDraw(playerid);
	   for(new i;i<16;i++) { TextDrawHideForPlayer(playerid,Logindraw[i]); }
       TextDrawHideForPlayer(playerid,Registring);
	   new reggstring[320];
	   format(reggstring,sizeof(reggstring),"{FFFFFF}Willkommen auf "SERV_NAME" {007DFF}%s{FFFFFF}.\nBitte erstelle dir einen Account. Mit diesem wirst du dann am Spiel teilhaben können.\nWähle für deinen Account ein sicheres Passwort, es muss zwischen {FE0000}8 und 24 Zeichen{FFFFFF} lang sein.",SpielerInfo[playerid][sName]);
	   ShowPlayerDialog(playerid,DIALOG_REGSTEP1,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" | Account erstellen 1/5",reggstring,"Erstellen","");
    }
	if(clickedid == Loginstring)
	{
	   CancelSelectTextDraw(playerid);
	   for(new i;i<16;i++) { TextDrawHideForPlayer(playerid,Logindraw[i]); }
	   TextDrawHideForPlayer(playerid,Loginstring);
	   new logingstring[320];
       format(logingstring,sizeof(logingstring),"{FFFFFF}Willkommen zurück auf "SERV_NAME" {007DFF}%s{FFFFFF}.\nIn unserer Datenbank wurde dein Account gefunden. Bitte logge dich ein indem du das Passwort\neingibst was du bei deiner Registration gewählt hattest. Bei Fragen wende dich an unser Team.",SpielerInfo[playerid][sName]);
       ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{007DFF}"SERV_NAME" | Einloggen",logingstring,"Weiter","");
	}
	return 0;
}

stock UpdateGangZones(playerid)
{
    for(new mf=1;mf<MAX_GANGZONES;mf++)
    {
        if(GangZoneInfo[mf][gzErstellt] == false)continue;
        GangZoneHideForPlayer(playerid, GangZoneInfo[mf][gzID]);
        GangZoneShowForPlayer(playerid, GangZoneInfo[mf][gzID], FrakZoneColor(GangZoneInfo[mf][gzOwner]));
        GangZoneStopFlashForPlayer(playerid, GangZoneInfo[mf][gzID]);
        if(GangZoneInfo[mf][gzFightTime] > 1)
        {
            GangZoneFlashForPlayer(playerid, GangZoneInfo[mf][gzID], FrakZoneColor(GangZoneInfo[mf][gzAttacker]));
        }
    }
}

stock FrakZoneColor(Fraktion)
{
    if(Fraktion == 9)return 0x00C71EA1;//Grove
    else if(Fraktion == 10)return 0xD633AFA1;//Ballas
    else if(Fraktion == 11)return 0xFFDB00A1;//Vagos
    else if(Fraktion == 12)return 0x436FFEA1;//Aztecas
    else if(Fraktion == 13)return 0x43CFFEA1;//Rifa
    else if(Fraktion == 14)return 0x004A00A1;//Triads
    else if(Fraktion == 15)return 0x0A0A0AA1;//DaNangBoys
    else if(Fraktion == 16)return 0xDCDCDCA1;//Camorra
    else if(Fraktion == 17)return 0x8E744FA1;//Italian
    else if(Fraktion == 18)return 0x0A0A0AA1;//Russian
    else return 0xFFFFFF77;//keine Fraktion
}

stock GangZoneTyp(Typ)
{
	new typname[12];
	if(Typ == 1){typname="Geld";}
	else if(Typ == 2){typname="Materialien";}
	else if(Typ == 3){typname="Samen";}
	return typname;
}

stock IsPlayerInGangZoneEx(playerid)
{
    new Float:GangZone[3];
    GetPlayerPos(playerid,GangZone[0],GangZone[1],GangZone[2]);
    for(new fs = 1;fs<MAX_GANGZONES;fs++)
	{
	    if(GangZoneInfo[fs][gzErstellt] == false)continue;
    	if((GangZone[0] >= GangZoneInfo[fs][gzX2] && GangZone[0] <= GangZoneInfo[fs][gzX1]) && (GangZone[1] >= GangZoneInfo[fs][gzY2] && GangZone[1] <= GangZoneInfo[fs][gzY1]) && GangZone[2] <= 500)return fs;
	}
	return -255;
}

stock LoadFrakInfo()
{
	mysql_tquery(sqlHandle, "SELECT * FROM `frakinfos` ORDER BY `FID` ASC", "onLoadFrakInfo");
	return 1;
}

stock SaveFrakInfo()
{
	new query[270];
	for(new mf=1;mf<MAX_FRAKS;mf++)
    {
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `frakinfos` SET `Members`='%d', `Kasse`='%d', `Mats`='%d', `Bomben`='%d', `GVerbrecher`='%d', `WarGegner`='%d', `WarPoints`='%d' WHERE `FID`='%d'",
	    FrakInfo[mf][fiFrakMembers],FrakInfo[mf][fiFrakKasse],FrakInfo[mf][fiMats],FrakInfo[mf][fiBomb],FrakInfo[mf][fiFrakGVerbrecher],FrakInfo[mf][fiWarGegner],FrakInfo[mf][fiWarPoints],mf);
		mysql_tquery(sqlHandle, query);
	}
	return 1;
}

stock SaveWerbetafel()
{
	new query[164], wtafel = 0;
	while(wtafel<sizeof(Werbetafeln))
	{
   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `werbetafel` SET `Text`='%s' WHERE `ID`='%d'",
	    Werbetafeln[wtafel][wtafeltext],wtafel);
		mysql_tquery(sqlHandle, query);
		wtafel++;
	}
	printf("Werbetafeln gespeichert %d/%d -",wtafel,sizeof(Werbetafeln));
	return 1;
}

stock AmATM(playerid)
{
 	for(new atm=0; atm<sizeof(ATMs); atm++)
 	{
 		if(IsPlayerInRangeOfPoint(playerid,2.5,ATMs[atm][0],ATMs[atm][1],ATMs[atm][2]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock AnMuelltonne(playerid)
{
 	for(new mt=0; mt<sizeof(Muelltonnen); mt++)
 	{
 		if(IsPlayerInRangeOfPoint(playerid,2.5,Muelltonnen[mt][0],Muelltonnen[mt][1],Muelltonnen[mt][2]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock AmLTM(playerid)
{
 	for(new ltm=0; ltm<sizeof(LTMs); ltm++)
 	{
 		if(IsPlayerInRangeOfPoint(playerid,2.5,LTMs[ltm][0],LTMs[ltm][1],LTMs[ltm][2]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock AmRestaurant(playerid)
{
	for(new id=0; id<sizeof(FastFoodInfo); id++)
 	{
 		if(IsPlayerInRangeOfPoint(playerid,2.5,FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetRestaurant(playerid)
{
 	for(new id=0; id<sizeof(FastFoodInfo); id++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.5,FastFoodInfo[id][fEPos_X],FastFoodInfo[id][fEPos_Y],FastFoodInfo[id][fEPos_Z]))return id;
	}
	return -1;
}

stock AmGeldSack(playerid)
{
 	for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
 	{
 		if(IsPlayerInRangeOfPoint(playerid,2.5,GeldSack[sackid][0],GeldSack[sackid][1],GeldSack[sackid][2]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetGeldSack(playerid)
{
 	for(new sackid=0; sackid<sizeof(GeldSack); sackid++)
 	{
 	    if(BankRobGeldSack[sackid] == 0)continue;
		if(IsPlayerInRangeOfPoint(playerid,1.0,GeldSack[sackid][0],GeldSack[sackid][1],GeldSack[sackid][2]))return sackid;
	}
	return -1;
}

stock AmHeuballen(playerid)
{
	new Float:Pos[3];
 	for(new ballen=0; ballen<sizeof(LandwirtInfo); ballen++)
 	{
		if(LandwirtInfo[ballen][lStufe] != 3)continue;
		if(LandwirtObjekt[playerid][ballen] <= 0)continue;
        GetDynamicObjectPos(LandwirtObjekt[playerid][ballen],Pos[0],Pos[1],Pos[2]);
 		if(IsPlayerInRangeOfPoint(playerid,2.5,Pos[0],Pos[1],Pos[2]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetHeuballen(playerid)
{
    new Float:Pos[3];
 	for(new ballen=0; ballen<sizeof(LandwirtInfo); ballen++)
 	{
 	    if(LandwirtInfo[ballen][lStufe] != 3)continue;
 	    if(LandwirtObjekt[playerid][ballen] <= 0)continue;
 	    GetDynamicObjectPos(LandwirtObjekt[playerid][ballen],Pos[0],Pos[1],Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid,2.5,Pos[0],Pos[1],Pos[2]))return ballen;
	}
	return -1;
}

stock AnTankstelle(playerid)
{
	for(new ts = 1;ts<MAX_TSTELLEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid,5.0,TankstellenInfo[ts][tsPos_X][0],TankstellenInfo[ts][tsPos_Y][0],TankstellenInfo[ts][tsPos_Z][0]) || IsPlayerInRangeOfPoint(playerid,5.0,TankstellenInfo[ts][tsPos_X][1],TankstellenInfo[ts][tsPos_Y][1],TankstellenInfo[ts][tsPos_Z][1]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock AnTankstellenHaus(playerid)
{
	for(new ts = 1;ts<MAX_TSTELLEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid,3.0,TankstellenInfo[ts][tsEPos_X],TankstellenInfo[ts][tsEPos_Y],TankstellenInfo[ts][tsEPos_Z]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearTankstellenHausID(playerid)
{
	for(new ts = 1;ts<MAX_TSTELLEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, TankstellenInfo[ts][tsEPos_X], TankstellenInfo[ts][tsEPos_Y], TankstellenInfo[ts][tsEPos_Z]))return ts;
	}
	return -1;
}

stock GetNearTankstelleID(playerid)
{
	for(new ts = 1;ts<MAX_TSTELLEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid,5.0,TankstellenInfo[ts][tsPos_X][0],TankstellenInfo[ts][tsPos_Y][0],TankstellenInfo[ts][tsPos_Z][0]) || IsPlayerInRangeOfPoint(playerid,5.0,TankstellenInfo[ts][tsPos_X][1],TankstellenInfo[ts][tsPos_Y][1],TankstellenInfo[ts][tsPos_Z][1]))return ts;
	}
	return -1;
}

stock AnAmmunation(playerid)
{
	for(new ts = 1;ts<MAX_AMMUS;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, AmmunationInfo[ts][amPos_X], AmmunationInfo[ts][amPos_Y], AmmunationInfo[ts][amPos_Z]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearAmmunationID(playerid)
{
	for(new ts = 1;ts<MAX_AMMUS;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, AmmunationInfo[ts][amPos_X], AmmunationInfo[ts][amPos_Y], AmmunationInfo[ts][amPos_Z]))return ts;
	}
	return -1;
}

stock AnStore(playerid)
{
	for(new ts = 1;ts<MAX_STORES;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, StoreInfo[ts][siPos_X], StoreInfo[ts][siPos_Y], StoreInfo[ts][siPos_Z]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearStoreID(playerid)
{
	for(new ts = 1;ts<MAX_STORES;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, StoreInfo[ts][siPos_X], StoreInfo[ts][siPos_Y], StoreInfo[ts][siPos_Z]))return ts;
	}
	return -1;
}

stock AnHaus(playerid)
{
	for(new ts = 1;ts<MAX_HAUSER;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HausInfo[ts][hsPos_X], HausInfo[ts][hsPos_Y], HausInfo[ts][hsPos_Z]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearHausID(playerid)
{
	for(new ts = 1;ts<MAX_HAUSER;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HausInfo[ts][hsPos_X], HausInfo[ts][hsPos_Y], HausInfo[ts][hsPos_Z]))return ts;
	}
	return -1;
}

stock GetHausID(playerid)
{
	if(SpielerInfo[playerid][sHaus] != 0 && SpielerInfo[playerid][sSpawn] == 2)
	{
	    return SpielerInfo[playerid][sHaus];
	}
	else if(SpielerInfo[playerid][sGHaus] != 0 && SpielerInfo[playerid][sSpawn] == 3)
	{
	    return SpielerInfo[playerid][sGHaus];
	}
	else if(SpielerInfo[playerid][sMieter] != 0 && SpielerInfo[playerid][sSpawn] == 2)
	{
	    return SpielerInfo[playerid][sMieter];
	}
    return -1;
}

stock AnGarage(playerid)
{
	for(new ts = 1;ts<MAX_GARAGEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GaragenInfo[ts][giPos_X], GaragenInfo[ts][giPos_Y], GaragenInfo[ts][giPos_Z]))
		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearGarageID(playerid)
{
	for(new ts = 1;ts<MAX_GARAGEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GaragenInfo[ts][giPos_X], GaragenInfo[ts][giPos_Y], GaragenInfo[ts][giPos_Z]))return ts;
	}
	return -1;
}

stock GetGarageID(playerid)
{
	if(SpielerInfo[playerid][sGarage] != 0 || SpielerInfo[playerid][sGMieter] != 0)
	{
		if(SpielerInfo[playerid][sGarage] != 0)
		{
		    return SpielerInfo[playerid][sGarage];
		}
		else if(SpielerInfo[playerid][sGMieter] != 0)
		{
		    return SpielerInfo[playerid][sGMieter];
		}
	}
	return -1;
}

stock AnGrundstuck(playerid)
{
	for(new ts = 1;ts<MAX_FIRMENGR;ts++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, GFirmaInfo[ts][iposx], GFirmaInfo[ts][iposy], GFirmaInfo[ts][iposz]))
	    {
	        return 1;
		}
	}
	return 0;
}

stock GetNearGrundstuckID(playerid)
{
	for(new ts = 1;ts<MAX_FIRMENGR;ts++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, GFirmaInfo[ts][iposx], GFirmaInfo[ts][iposy], GFirmaInfo[ts][iposz]))return ts;
	}
	return -1;
}

stock AnDrogenPflanze(playerid)
{
	for(new ts = 1;ts<MAX_DROGEN;ts++)
    {
		if(DrogenInfo[ts][dErstellt] == false)continue;
 		if(IsPlayerInRangeOfPoint(playerid,3.0,DrogenInfo[ts][dPos_X],DrogenInfo[ts][dPos_Y],DrogenInfo[ts][dPos_Z]))
 		{
 	    	return 1;
		}
	}
	return 0;
}

stock GetNearDrogenPflanzeID(playerid)
{
	for(new ts = 1;ts<MAX_DROGEN;ts++)
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, DrogenInfo[ts][dPos_X], DrogenInfo[ts][dPos_Y], DrogenInfo[ts][dPos_Z]))return ts;
	}
	return -1;
}

stock FrakCarFarbe1(frakid)
{
    new frakcolor;
	if(frakid == 0){frakcolor=0;}//Zivi
	if(frakid == 1){frakcolor=1;}//Regierung
	if(frakid == 2){frakcolor=79;}//LSPD
	if(frakid == 3){frakcolor=79;}//SFPD
	if(frakid == 4){frakcolor=79;}//LVPD
	if(frakid == 5){frakcolor=1;}//San Andreas Rettungsdienst
	if(frakid == 6){frakcolor=0;}//Federal Bureau of Investigation
	if(frakid == 7){frakcolor=6;}//San Andreas Ordnungsamt
	if(frakid == 8){frakcolor=108;}//Interglobal Television
	if(frakid == 9){frakcolor=16;}//Grove Street Families
	if(frakid == 10){frakcolor=85;}//Rolling High Ballas
	if(frakid == 11){frakcolor=6;}//Los Santos Vagos
	if(frakid == 12){frakcolor=103;}//Varrios Los Aztecas
	if(frakid == 13){frakcolor=87;}//San Fierro Rifa
	if(frakid == 14){frakcolor=83;}//Triaden
	if(frakid == 15){frakcolor=0;}//Yakuza
	if(frakid == 16){frakcolor=14;}//Camorra
	if(frakid == 17){frakcolor=61;}//Italian Mafia
	if(frakid == 18){frakcolor=0;}//Russian Mafia
	if(frakid == 19){frakcolor=0;}//International Contract Agency
	if(frakid == 20){frakcolor=0;}//Terroristen
	return frakcolor;
}

stock FrakCarFarbe2(frakid)
{
    new frakcolor;
	if(frakid == 0){frakcolor=0;}//Zivi
	if(frakid == 1){frakcolor=1;}//Regierung
	if(frakid == 2){frakcolor=1;}//LSPD
	if(frakid == 3){frakcolor=1;}//SFPD
	if(frakid == 4){frakcolor=1;}//LVPD
	if(frakid == 5){frakcolor=3;}//San Andreas Rettungsdienst
	if(frakid == 6){frakcolor=0;}//Federal Bureau of Investigation
	if(frakid == 7){frakcolor=1;}//San Andreas Ordnungsamt
	if(frakid == 8){frakcolor=1;}//Interglobal Television
	if(frakid == 9){frakcolor=16;}//Grove Street Families
	if(frakid == 10){frakcolor=85;}//Rolling High Ballas
	if(frakid == 11){frakcolor=6;}//Los Santos Vagos
	if(frakid == 12){frakcolor=103;}//Varrios Los Aztecas
	if(frakid == 13){frakcolor=87;}//San Fierro Rifa
	if(frakid == 14){frakcolor=83;}//San Fierro Triads
	if(frakid == 15){frakcolor=0;}//Yakuza
	if(frakid == 16){frakcolor=14;}//Camorra
	if(frakid == 17){frakcolor=61;}//Italian Mafia
	if(frakid == 18){frakcolor=0;}//Russian Mafia
	if(frakid == 19){frakcolor=0;}//International Contract Agency
	if(frakid == 20){frakcolor=0;}//Terroristen
	return frakcolor;
}

stock Kilometer(playerid)
{
	new PLAYER_STATE:State = GetPlayerState(playerid);
	if(State == PLAYER_STATE_DRIVER){OldKilometer[GetPlayerVehicleID(playerid)] += (NewKilometer[GetPlayerVehicleID(playerid)]*5)/36;}
    if(OldKilometer[GetPlayerVehicleID(playerid)]  > 499)
    {
        new string[46];
        OldKilometer[GetPlayerVehicleID(playerid)] = 0;
        FahrzeugInfo[GetPlayerVehicleID(playerid)][fKilometer]++;

		new Float:tankverlust = VehicleData[GetVehicleModel(GetPlayerVehicleID(playerid))-400][vehVerbrauch]/100;
	    FahrzeugInfo[GetPlayerVehicleID(playerid)][fTank] -= floatabs(tankverlust)*27;
		foreach(new i : Player)
        {
            if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
            {
                PlayerTextDrawHide(i, Tacho[i][9]);
		        format(string,sizeof(string),"%i Kilometer",FahrzeugInfo[GetPlayerVehicleID(playerid)][fKilometer]);
			    PlayerTextDrawSetString(i, Tacho[i][9], string);
			    PlayerTextDrawShow(i, Tacho[i][9]);
			    PlayerTextDrawHide(i, Tacho[i][3]);
		        format(string,sizeof(string),"%s %.2f/%dL",TankArtName(GetPlayerVehicleID(playerid)),FahrzeugInfo[GetPlayerVehicleID(playerid)][fTank],VehicleData[GetVehicleModel(GetPlayerVehicleID(playerid))-400][vehLiter]);
			    PlayerTextDrawSetString(i, Tacho[i][3], string);
			    PlayerTextDrawShow(i, Tacho[i][3]);
			}
		}
    }
    return 1;
}

stock TankArtName(tmpcar)
{
	new status[12];
	switch(VehicleData[GetVehicleModel(tmpcar)-400][vehTankArt])
	{
	    case 0:{status="Benzin";}
	    case 1:{status="Diesel";}
	    case 2:{status="Kerosin";}
	}
	return status;
}

stock IsAFahrrad(tmpcar)
{
    new modelid = GetVehicleModel(tmpcar);
    if(modelid == 481 || modelid == 509 || modelid == 510) return 1;
    else return 0;
}

stock IsAMotorrad(tmpcar)
{
	new modelid = GetVehicleModel(tmpcar);
	if(modelid == 448 || modelid == 461 || modelid == 462 || modelid == 463 || modelid == 468 || modelid == 471
	|| modelid == 521 || modelid == 522 || modelid == 523 || modelid == 581) return 1;
	else return 0;
}

stock IsABoot(tmpcar)
{
	new modelid = GetVehicleModel(tmpcar);
	if(modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473
	|| modelid == 484 || modelid == 493 || modelid == 595) return 1;
	else return 0;
}

stock IsAHelikopter(tmpcar)
{
    new modelid = GetVehicleModel(tmpcar);
    if(modelid == 417 || modelid == 425 || modelid == 447 || modelid == 469 || modelid == 487 || modelid == 488 || modelid == 497 || modelid == 548 || modelid == 563) return 1;
    else return 0;
}

stock IsAFlugzeug(tmpcar)
{
	new modelid = GetVehicleModel(tmpcar);
	if(modelid == 417 || modelid == 425 || modelid == 447 || modelid == 460 || modelid == 469 || modelid == 476
	|| modelid == 487 || modelid == 488 || modelid == 497 || modelid == 511 || modelid == 512 || modelid == 513
	|| modelid == 519 || modelid == 520 || modelid == 548 || modelid == 553 || modelid == 563 || modelid == 577
	|| modelid == 592 || modelid == 593) return 1;
	else return 0;
}

stock IsALKW(tmpcar)
{
	new modelid = GetVehicleModel(tmpcar);
	if(modelid == 403 || modelid == 406 || modelid == 407 || modelid == 408 || modelid == 413 || modelid == 414
	|| modelid == 416 || modelid == 427 || modelid == 428 || modelid == 431 || modelid == 433 || modelid == 435
	|| modelid == 437 || modelid == 443 || modelid == 450 || modelid == 455 || modelid == 456 || modelid == 486
	|| modelid == 498 || modelid == 499 || modelid == 508 || modelid == 514 || modelid == 515 || modelid == 524
	|| modelid == 532 || modelid == 544 || modelid == 552 || modelid == 554 || modelid == 556 || modelid == 482
	|| modelid == 557 || modelid == 573 || modelid == 578 || modelid == 582 || modelid == 584 || modelid == 588
	|| modelid == 591 || modelid == 601 || modelid == 609 || modelid == 610 || modelid == 611 || modelid == 423
	|| modelid == 440 || modelid == 444 || modelid == 459) return 1;
	else return 0;
}

stock GivePlayerEXP(playerid,Anzahl)
{
	SpielerInfo[playerid][sEXP] += Anzahl;
	if(SpielerInfo[playerid][sEXP] >= SpielerInfo[playerid][sEXPNeeded])
	{
	    SpielerInfo[playerid][sEXPNeeded] = ExpInfo[GetPlayerScore(playerid)][eExp];
	    mysql_SetInt("accounts", "EXPNeeded", SpielerInfo[playerid][sEXPNeeded], "Name", SpielerInfo[playerid][sName]);
		PlayerTextDrawShow(playerid, LevelUP[playerid]);
		SetPVarInt(playerid,"LevelUpTime",1);
		SetTimerEx("LevelUpPlayer",1000, false,"i",playerid);
	}
	return 1;
}

/*stock GetVehicleDriver(vehicleid)
{
    for(new i=1; i < MAX_VEHICLES; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
        if(GetPlayerVehicleID(i) == vehicleid)
        {
            return i;
        }
    }
    return -1;
}*/

stock IsVehicleInRangeOfPoint(vehicleid,Float:radi,Float:x,Float:y,Float:z)
{
    if(IsValidVehicle(vehicleid))
	{
		new Float:oldposx,Float:oldposy,Float:oldposz,Float:tempposx,Float:tempposy,Float:tempposz;
	  	GetVehiclePos(vehicleid,oldposx,oldposy,oldposz);
	   	tempposx = (oldposx -x);
	    tempposy = (oldposy -y);
	    tempposz = (oldposz -z);
	    if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	    {
	   		return 1;
	    }
	    return 0;
    }
    return 1;
}

stock ReifenPlatt(tire1,tire2,tire3,tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

stock AddNagelBand(playerid)
{
	new Float:x,Float:y,Float:z,Float:a;
 	GetPlayerPos(playerid,x,y,z);
  	GetPlayerFacingAngle(playerid,a);
   	for(new i=0;i<MAX_NAGELBAENDER;i++)
	{
	 	if(NagelBand[i][Erstellt] == false)
		{
		  	NagelBand[i][oPosX] = x;
		   	NagelBand[i][oPosY] = y;
		    NagelBand[i][oPosZ] = z;
		    NagelBand[i][Erstellt] = true;
		    NagelBand[i][ID] = CreateDynamicObject(2899,NagelBand[i][oPosX],NagelBand[i][oPosY],NagelBand[i][oPosZ]-0.9,0.0,0.0,a+90.0);
			SendClientMessage(playerid,COLOR_SUPER,"Du hast einen Nagelband gelegt.");
			return i;
	    }
    }
    return SendClientMessage(playerid,COLOR_SORRY,"Die maximale Anzahl an Nagelbänder wurden erreicht.");
}

stock RemoveNagelBand(playerid)
{
	for(new i=0;i<MAX_NAGELBAENDER;i++)
	{
	  	if(IsPlayerInRangeOfPoint(playerid,2,NagelBand[i][oPosX],NagelBand[i][oPosY],NagelBand[i][oPosZ]))
	   	{
		    if(NagelBand[i][Erstellt] == true)
		    {
			    NagelBand[i][Erstellt] = false;
			    NagelBand[i][oPosX] = -1;
			    NagelBand[i][oPosY] = -1;
			    NagelBand[i][oPosZ] = -1;
				DestroyDynamicObject(NagelBand[i][ID]);
				SendClientMessage(playerid,COLOR_SUPER,"Du hast einen Nagelband entfernt.");
				return i;
		    }
	    }
    }
    return SendClientMessage(playerid,COLOR_SUPER,"Du bist an keinem Nagelband.");
}

stock RemoveAllNagelBand()
{
	for(new i=0;i<MAX_NAGELBAENDER;i++)
	{
	 	if(NagelBand[i][Erstellt] == true)
		{
			NagelBand[i][Erstellt] = false;
			NagelBand[i][oPosX] = -1;
			NagelBand[i][oPosY] = -1;
			NagelBand[i][oPosZ] = -1;
			DestroyDynamicObject(NagelBand[i][ID]);
		}
	}
 	return 1;
}

stock NagelBandCount()
{
	new index;
	for(new i=0;i<MAX_NAGELBAENDER;i++)
	{
	 	if(NagelBand[i][Erstellt] == true)
		index++;
	}
 	return index;
}

stock AddSchild(playerid,id,Float:x,Float:y,Float:z,Float:a)
{
   	for(new i=0;i<MAX_SCHILDER;i++)
	{
	 	if(SchildInfo[i][Erstellt] == false)
		{
	  	SchildInfo[i][oPosX] = x;
	   	SchildInfo[i][oPosY] = y;
	    SchildInfo[i][oPosZ] = z;
	    SchildInfo[i][Erstellt] = true;
	    SchildInfo[i][ID] = CreateDynamicObject(id,SchildInfo[i][oPosX],SchildInfo[i][oPosY],SchildInfo[i][oPosZ],0.0,0.0,a);
		SendClientMessage(playerid,COLOR_SUPER,"Du hast ein Straßenschild errichtet.");
		return i;
	    }
    }
    return SendClientMessage(playerid,COLOR_SORRY,"Die maximale Anzahl an Straßenschilder wurden erreicht.");
}

stock AddSperre(playerid,id,Float:x,Float:y,Float:z,Float:a)
{
   	for(new i=0;i<MAX_SPERREN;i++)
	{
	 	if(RoadBlock[i][Erstellt] == false)
		{
	  	RoadBlock[i][oPosX] = x;
	   	RoadBlock[i][oPosY] = y;
	    RoadBlock[i][oPosZ] = z;
	    RoadBlock[i][Erstellt] = true;
	    RoadBlock[i][ID] = CreateDynamicObject(id,RoadBlock[i][oPosX],RoadBlock[i][oPosY],RoadBlock[i][oPosZ],0.0,0.0,a);
		SendClientMessage(playerid,COLOR_SUPER,"Du hast eine Straßensperre errichtet.");
		return i;
	    }
    }
    return SendClientMessage(playerid,COLOR_SORRY,"Die maximale Anzahl an Straßensperren wurden erreicht.");
}

stock RemoveSchild(playerid)
{
	for(new i=0;i<MAX_SCHILDER;i++)
 	{
	  	if(IsPlayerInRangeOfPoint(playerid,2,SchildInfo[i][oPosX],SchildInfo[i][oPosY],SchildInfo[i][oPosZ]))
	   	{
		    if(SchildInfo[i][Erstellt] == true)
		    {
			    SchildInfo[i][Erstellt] = false;
			    SchildInfo[i][oPosX] = -1;
			    SchildInfo[i][oPosY] = -1;
			    SchildInfo[i][oPosZ] = -1;
				DestroyDynamicObject(SchildInfo[i][ID]);
				SendClientMessage(playerid,COLOR_SUPER,"Du hast ein Straßenschild entfernt.");
				return i;
		    }
	    }
    }
    return SendClientMessage(playerid,COLOR_GREY,"Du bist an keinem Straßenschild.");
}

stock RemoveSperre(playerid)
{
	for(new i=0;i<MAX_SPERREN;i++)
 	{
	  	if(IsPlayerInRangeOfPoint(playerid,2.0,RoadBlock[i][oPosX],RoadBlock[i][oPosY],RoadBlock[i][oPosZ]))
	   	{
		    if(RoadBlock[i][Erstellt] == true)
		    {
			    RoadBlock[i][Erstellt] = false;
			    RoadBlock[i][oPosX] = -1;
			    RoadBlock[i][oPosY] = -1;
			    RoadBlock[i][oPosZ] = -1;
				DestroyDynamicObject(RoadBlock[i][ID]);
				SendClientMessage(playerid,COLOR_SUPER,"Du hast eine Straßensperre entfernt.");
				return i;
		    }
	    }
    }
    return SendClientMessage(playerid,COLOR_GREY,"Du bist an keiner Straßensperre.");
}

stock RemoveAllSchilder()
{
	for(new i=0;i<MAX_SCHILDER;i++)
 	{
	 	if(SchildInfo[i][Erstellt] == true)
		{
			SchildInfo[i][Erstellt] = false;
			SchildInfo[i][oPosX] = -1;
			SchildInfo[i][oPosY] = -1;
			SchildInfo[i][oPosZ] = -1;
			DestroyDynamicObject(SchildInfo[i][ID]);
		}
	}
 	return 1;
}

stock RemoveAllSperre()
{
	for(new i=0;i<MAX_SPERREN;i++)
 	{
	 	if(RoadBlock[i][Erstellt] == true)
		{
			RoadBlock[i][Erstellt] = false;
			RoadBlock[i][oPosX] = -1;
			RoadBlock[i][oPosY] = -1;
			RoadBlock[i][oPosZ] = -1;
			DestroyDynamicObject(RoadBlock[i][ID]);
		}
	}
 	return 1;
}

stock SchilderCount()
{
	new index;
	for(new i=0;i<MAX_SCHILDER;i++)
 	{
	 	if(SchildInfo[i][Erstellt] == true)
		index++;
	}
 	return index;
}

stock SperreCount()
{
	new index;
	for(new i=0;i<MAX_SPERREN;i++)
 	{
	 	if(RoadBlock[i][Erstellt] == true)
		index++;
	}
 	return index;
}

stock FreezePlayer(playerid, boolean)
{
	if(boolean == 1)
	{
		PlayerTextDrawShow(playerid,Freeze[playerid]);
		SelectTextDraw(playerid, 0x00000000);
		SetPVarInt(playerid,"Freezed",1);
	}
	else
	{
		CancelSelectTextDraw(playerid);
		PlayerTextDrawHide(playerid,Freeze[playerid]);
		SetPVarInt(playerid,"Freezed",0);
	}
	return 1;
}

stock IsPlayerInAnyGang(playerid)
{
	if(SpielerInfo[playerid][sFraktion] > 8 && SpielerInfo[playerid][sFraktion] < 19)
	    return 1;
	else return 0;
}

stock CreateSupTicket(playerid, const message[])
{
	new string[128], query[265];
	format(string,sizeof(string),"%s hat ein Support-Ticket geschrieben!",SpielerInfo[playerid][sName]);
	SetPVarInt(playerid,"SupTicket",1);
	SetPVarInt(playerid,"SupTicketOpen",0);
	SendAdminMessage(COLOR_INFO,string);

    new Uhrzeit[16], Datum[16];
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	format(Uhrzeit,sizeof(Uhrzeit),"%02d:%02d:%02d",Hour,Minute,Second);
	format(Datum,sizeof(Datum),"%d/%02d/%02d",Day,Month,Year);
	mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `oldtickets` (`Name`, `Text, `Uhrzeit`, `Datum`) VALUES ('%s', '%s', '%s', '%s')", SpielerInfo[playerid][sName], message, Uhrzeit, Datum);
    mysql_tquery(sqlHandle, query);
	
	mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `suptickets` (`Name`, `Text`) VALUES ('%s', '%s')", SpielerInfo[playerid][sName], message);
    mysql_tquery(sqlHandle, query);
	return 1;
}

stock DeleteSupTicket(playerid)
{
    mysql_Delete("suptickets", "Name", SpielerInfo[playerid][sName]);
    return 1;
}

stock WarnPlayer(playerid,admin[],Reason[])
{
    SpielerInfo[playerid][sWarns] += 1;
	new query[664], Uhrzeit[16], Datum[16];
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	format(Uhrzeit,sizeof(Uhrzeit),"%02d:%02d:%02d",Hour,Minute,Second);
	format(Datum,sizeof(Datum),"%d/%02d/%02d",Day,Month,Year);
	mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `accwarns` (`Name`, `Teammitglied`, `Warngrund`, `Uhrzeit`, `Datum`) VALUES ('%s', '%s', '%s', '%s', '%s')", SpielerInfo[playerid][sName], admin , Reason, Uhrzeit, Datum);
    mysql_tquery(sqlHandle, query);
    return 1;
}

stock MutePlayer(playerid,zeit)
{
	SpielerInfo[playerid][sMuted] = zeit;
	MutePlayerTimer[playerid] = SetTimerEx("PlayerMuted",100*10*60, true,"i",playerid);
	return 1;
}

stock WerbungSperre(playerid,zeit)
{
	SpielerInfo[playerid][sADSperre] = zeit;
	WerbungSperrePlayerTimer[playerid] = SetTimerEx("PlayerWerbungSperre",100*10*60, true,"i",playerid);
	return 1;
}

stock BanPlayer(playerid,admin[],Reason[])
{
	new query[200], Uhrzeit[16], Datum[16];
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	format(Uhrzeit,sizeof(Uhrzeit),"%02d:%02d:%02d",Hour,Minute,Second);
	format(Datum,sizeof(Datum),"%d/%02d/%02d",Day,Month,Year);
	mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `accbans` (`Name`, `Teammitglied`, `Bangrund`, `Uhrzeit`, `Datum`) VALUES ('%s', '%s', '%s', '%s', '%s')", SpielerInfo[playerid][sName], admin , Reason, Uhrzeit, Datum);
    mysql_tquery(sqlHandle, query);
	SetTimerEx("EndIPBan",100,false,"i",playerid);
	return 1;
}

stock TBanPlayer(playerid,dauer,admin[],grund[])
{
    new timestamp, query[250], Uhrzeit[16], Datum[16];
	timestamp = gettime();
	timestamp += dauer * 60;
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	format(Uhrzeit,sizeof(Uhrzeit),"%02d:%02d:%02d",Hour,Minute,Second);
	format(Datum,sizeof(Datum),"%d/%02d/%02d",Day,Month,Year);
	mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `timebans` (`Name`, `Teammitglied`, `Bangrund`, `Uhrzeit`, `Datum`, `serv_Data`) VALUES ('%s', '%s', '%s', '%s', '%s', '%i')", SpielerInfo[playerid][sName], admin , grund , Uhrzeit, Datum, timestamp);
    mysql_tquery(sqlHandle, query);
	KickPlayer(playerid,"");
	return 1;
}

stock LogWarn(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/WARN_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogBan(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/BAN_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogTBan(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/TBAN_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogUnban(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/UNBAN_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogUntban(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/UNTBAN_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogKick(event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/KICK_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogBefehl(event[])
{
	new eventgstring[200];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/BEFEHL_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogRcon(event[])
{
	new eventgstring[200];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/RCON_LOG.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock LogMySQLError(const event[])
{
	new eventgstring[128];
    gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	new File:log = fopen("Serverlogs/MYSQL_ERROR.log", io_append);
	format(eventgstring,sizeof(eventgstring),"[%d/%02d/%02d | %02d:%02d:%02d] %s",Day,Month,Year,Hour,Minute,Second,event);
 	fwrite(log, eventgstring);
  	fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock ClearChat(playerid,Zeilen)
{
    for(new i = 0; i < Zeilen; i++)
	{
		SendClientMessage(playerid,0xFFFFFFFF," ");
	}
	return 1;
}

stock SendCopMessage(color,const message[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && SpielerInfo[i][sFraktion] == 2 || SpielerInfo[i][sFraktion] == 6)
		{
			SendClientMessage(i,color,message);
		}
	}
	return 1;
}

stock SendICPMessage(const message[])
{
	foreach(new i : Player)
	{
	    if(SpielerInfo[i][icpNachrichten] == 1)
	    {
	        SendClientMessage(i,COLOR_ICP,message);
	    }
	}
	return 1;
}

stock SendOOCMessage(const message[])
{
	foreach(new i : Player)
	{
	    if(SpielerInfo[i][icpOChat] == 1)
	    {
	        SendClientMessage(i,COLOR_WHITE,message);
	    }
	}
	return 1;
}

stock SendLeiterMessage(color,const message[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && SpielerInfo[i][sAdmin] == 8)
		{
			SendClientMessage(i,color,message);
		}
	}
	return 1;
}

stock AdmDuty(playerid)
{
	new admdutys[60];
	switch(GetPVarInt(playerid,"AdminDuty"))
	{
	    case 0:{admdutys="{C8C8C8}Außer Dienst{FFFFFF}";}
		case 1:{admdutys="{00FE00}Im Support-Dienst{FFFFFF}";}
	}
	return admdutys;
}

stock HausLocked(playerid)
{
	new hsinfo[35], hs = SpielerInfo[playerid][sHaus];
	switch(HausInfo[hs][hsLocked])
	{
	    case 0:{hsinfo="{9ACD32}Aufgeschlossen";}
		case 1:{hsinfo="{FF0000}Abgeschlossen";}
	}
	return hsinfo;
}

stock GHausLocked(playerid)
{
	new hsinfo[35], hs = SpielerInfo[playerid][sGHaus];
	switch(HausInfo[hs][hsLocked])
	{
	    case 0:{hsinfo="{9ACD32}Aufgeschlossen";}
		case 1:{hsinfo="{FF0000}Abgeschlossen";}
	}
	return hsinfo;
}

stock HausMietbar(playerid)
{
	new hsinfo[35], hs = SpielerInfo[playerid][sHaus];
	switch(HausInfo[hs][hsMietbar])
	{
	    case 0:{hsinfo="{9ACD32}Nein";}
		case 1:{hsinfo="{FF0000}Ja";}
	}
	return hsinfo;
}

stock GarageLocked(playerid)
{
	new ginfo[35], hs = SpielerInfo[playerid][sGarage];
	switch(GaragenInfo[hs][giLocked])
	{
	    case 0:{ginfo="{9ACD32}Aufgeschlossen";}
		case 1:{ginfo="{FF0000}Abgeschlossen";}
	}
	return ginfo;
}


stock GarageMietbar(playerid)
{
	new ginfo[35], hs = SpielerInfo[playerid][sGarage];
	switch(GaragenInfo[hs][giMietbar])
	{
	    case 0:{ginfo="{9ACD32}Nein";}
		case 1:{ginfo="{FF0000}Ja";}
	}
	return ginfo;
}

stock WaffenName(waffenid)
{
	new wpname[24];
	switch(waffenid)
	{
		case 0:{wpname="Faust";}
		case 1:{wpname="Schlagring";}
		case 2:{wpname="Golfschläger";}
		case 3:{wpname="Schlagstock";}
		case 4:{wpname="Knife";}
		case 5:{wpname="Baseballschläger";}
		case 6:{wpname="Schaufel";}
		case 7:{wpname="Billiardköl";}
		case 8:{wpname="Katana";}
		case 9:{wpname="Chainsaw";}
		case 10:{wpname="Lila Dildo";}
		case 11:{wpname="Dildo";}
		case 12:{wpname="Vibrator";}
		case 13:{wpname="Silberner Vibrator";}
		case 14:{wpname="Blumen";}
		case 15:{wpname="Gehstock";}
		case 16:{wpname="Granate";}
		case 17:{wpname="Tränengas";}
		case 18:{wpname="Molotov Cocktail";}
		case 22:{wpname="9MM Glock";}
		case 23:{wpname="Schallgedämpfte 9MM";}
		case 24:{wpname="Desert Eagle";}
		case 25:{wpname="Shotgun";}
		case 26:{wpname="Sawnoff Shotgun";}
		case 27:{wpname="Combat Shotgun";}
		case 28:{wpname="Micro SMG/Uzi";}
		case 29:{wpname="MP5";}
		case 30:{wpname="AK-47";}
		case 31:{wpname="M4";}
		case 32:{wpname="Tec-9";}
		case 33:{wpname="Country Rifle";}
		case 34:{wpname="Sniper";}
		case 35:{wpname="Raketenwerfer";}
		case 36:{wpname="Flugabwehrrakete";}
		case 37:{wpname="Flammenwerfer";}
		case 38:{wpname="Minigun";}
		case 39:{wpname="C4";}
		case 40:{wpname="C4-Auslöser";}
		case 41:{wpname="Sprühdose";}
		case 42:{wpname="Feuerlöscher";}
		case 43:{wpname="Kamera";}
		case 44:{wpname="Nachtsichgerät";}
		case 45:{wpname="Thermalsichgerät";}
		case 46:{wpname="Fallschirm";}
	}
	return wpname;
}

stock FahrzeugStatus(Zahl,tmpcar)
{
    new status[25];
	if(Zahl == 1)
	{
		if(!Motor[tmpcar]) status="{FF0000}Aus";
		else status="{9ACD32}An";
		return status;
	}
	if(Zahl == 2)
	{
		if(!Licht[tmpcar]) status="{FF0000}Ausgeschaltet";
		else status="{9ACD32}Angeschaltet";
		return status;
	}
	if(Zahl == 3)
	{
		if(!DOOR[tmpcar])status="{9ACD32}Offen";
		else status="{FF0000}Geschlossen";
		return status;
	}
	if(Zahl == 4)
	{
		if(!Motorhaube[tmpcar])status="{FF0000}Geschlossen";
		else status="{9ACD32}Offen";
		return status;
	}
	if(Zahl == 5)
	{
		if(!Kofferraum[tmpcar])status="{FF0000}Geschlossen";
		else status="{9ACD32}Offen";
		return status;
	}
	if(Zahl == 6)
	{
		if(!Radio[tmpcar])status="{FF0000}Ausgeschaltet";
		else status="{9ACD32}Angeschaltet";
		return status;
	}
	return status;
}
		
stock AdminName(playerid)
{
	new admname[22];
	switch(SpielerInfo[playerid][sAdmin])
	{
		case 0:{admname="Spieler";}
		case 1:{admname="Supporter";}
		case 2:{admname="Moderator";}
		case 3:{admname="Administrator";}
		case 4:{admname="Head-Administrator";}
		case 5:{admname="Entwickler";}
		case 6:{admname="Projektleiter";}
	}
	return admname;
}

stock JobName(JobID)
{
	new jbname[22];
	switch(JobID)
	{
		case 0:{jbname="Arbeitslos";}
		case 1:{jbname="Freier Slot";}
		case 2:{jbname="Pizzabote";}
		case 3:{jbname="KM-Fahrer";}
		case 4:{jbname="Pilot";}
		case 5:{jbname="Busfahrer";}
		case 6:{jbname="Muellmann";}
		case 7:{jbname="Landwirt";}
		case 10:{jbname="Holzfäller";}
	}
	return jbname;
}

stock RangName(playerid)
{
    new rstring1[3], rstring2[3], r1[24];
	if(SpielerInfo[playerid][sFraktion] == 5)
	{
	    if(SpielerInfo[playerid][sTeam] == 0)//Sanitäter
	    {
			format(rstring1,sizeof(rstring1),"%d",SpielerInfo[playerid][sRank]);
			format(rstring2,sizeof(rstring2),"%d",SpielerInfo[playerid][sFraktion]);
		    format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", rstring1, "frakid", rstring2));
		    return r1;
		}
  		else if(SpielerInfo[playerid][sTeam] == 1)//Feuerwehr
	    {
			format(rstring1,sizeof(rstring1),"T%d",SpielerInfo[playerid][sRank]);
			format(rstring2,sizeof(rstring2),"%d",SpielerInfo[playerid][sFraktion]);
		    format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", rstring1, "frakid", rstring2));
		    return r1;
	    }
    }
    else
    {
		format(rstring1,sizeof(rstring1),"%d",SpielerInfo[playerid][sRank]);
		format(rstring2,sizeof(rstring2),"%d",SpielerInfo[playerid][sFraktion]);
	    format(r1,sizeof(r1),"%s",mysql_GetString("rangnamen", rstring1, "frakid", rstring2));
	    return r1;
    }
    return r1;
}

stock GRangName(playerid)
{
	new rstring1[3], rstring2[3], r1[24];
	format(rstring1,sizeof(rstring1),"%d",SpielerInfo[playerid][sGRank]);
	format(rstring2,sizeof(rstring2),"%d",SpielerInfo[playerid][sGruppe]);
    format(r1,sizeof(r1),"%s",mysql_GetString("grangnamen", rstring1, "gid", rstring2));
    return r1;
}

stock FRangName(playerid)
{
	new rstring1[3], rstring2[3], r1[24];
	format(rstring1,sizeof(rstring1),"%d",SpielerInfo[playerid][sFRank]);
	format(rstring2,sizeof(rstring2),"%d",SpielerInfo[playerid][sFirma]);
    format(r1,sizeof(r1),"%s",mysql_GetString("frangnamen", rstring1, "fid", rstring2));
    return r1;
}

stock JaNein(Variable)
{
	new ausgabe[11];
	switch(Variable)
	{
	    case 0:{ausgabe="Ja";}
	    case 0:{ausgabe="Nein";}
	}
	return ausgabe;
}

stock FrakKurzel(FrakID)
{
	new ausgabe[32];
	switch(FrakID)
	{
	    case 0:{ausgabe="Keine Fraktion";}
		case 1:{ausgabe="S.A Regierung";}
		case 2:{ausgabe="S.A Police Dep.";}
		case 3:{ausgabe="S.F Police Dep.";}
		case 4:{ausgabe="L.V Police Dep.";}
		case 5:{ausgabe="S.A Rettungsdienst";}
		case 6:{ausgabe="F.B.I";}
		case 7:{ausgabe="S.A Ordnungsamt";}
		case 8:{ausgabe="San News (IT)";}
		case 9:{ausgabe="G.S.F";}
		case 10:{ausgabe="R.H.B";}
		case 11:{ausgabe="L.S.V";}
		case 12:{ausgabe="V.L.A";}
		case 13:{ausgabe="S.F Rifa";}
		case 14:{ausgabe="Triaden";}
		case 15:{ausgabe="Yakuza";}
		case 16:{ausgabe="Camorra";}
		case 17:{ausgabe="Italian Mafia";}
		case 18:{ausgabe="Russian Mafia";}
		case 19:{ausgabe="International Contract Agency";}
		case 20:{ausgabe="Terroristen";}
	}
	return ausgabe;
}

stock FrakName(Fraktion)
{
	new frakname[34];
	switch(Fraktion)
	{
		case 0:{frakname="Keine Fraktion";}
		case 1:{frakname="San Andreas Government Department";}
		case 2:{frakname="San Andreas Police Department";}
		case 3:{frakname="San Fierro Police Department";}
		case 4:{frakname="Las Venturas Police Department";}
		case 5:{frakname="San Andreas Rettungsdienst";}
		case 6:{frakname="Federal Bureau of Investigation";}
		case 7:{frakname="San Andreas Ordnungsamt";}
		case 8:{frakname="Interglobal Television";}
		case 9:{frakname="Grove Street Families";}
		case 10:{frakname="Rolling High Ballas";}
		case 11:{frakname="Los Santos Vagos";}
		case 12:{frakname="Los Aztecas";}
		case 13:{frakname="San Fierro Rifa";}
		case 14:{frakname="Triaden";}
		case 15:{frakname="Yakuza";}
		case 16:{frakname="Camorra";}
		case 17:{frakname="Italian Mafia";}
		case 18:{frakname="Russian Mafia";}
		case 19:{frakname="International Contract Agency";}
		case 20:{frakname="Terroristen";}
	}
	return frakname;
}

stock AddVehicleTuning(vehicleid)
{
	if(FahrzeugInfo[vehicleid][fTuning][0] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][0]);}
	if(FahrzeugInfo[vehicleid][fTuning][1] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][1]);}
	if(FahrzeugInfo[vehicleid][fTuning][2] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][2]);}
	if(FahrzeugInfo[vehicleid][fTuning][3] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][3]);}
	if(FahrzeugInfo[vehicleid][fTuning][4] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][4]);}
	if(FahrzeugInfo[vehicleid][fTuning][5] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][5]);}
	if(FahrzeugInfo[vehicleid][fTuning][6] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][6]);}
	if(FahrzeugInfo[vehicleid][fTuning][7] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][7]);}
	if(FahrzeugInfo[vehicleid][fTuning][8] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][8]);}
	if(FahrzeugInfo[vehicleid][fTuning][9] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][9]);}
	if(FahrzeugInfo[vehicleid][fTuning][10] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][10]);}
	if(FahrzeugInfo[vehicleid][fTuning][11] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][11]);}
	if(FahrzeugInfo[vehicleid][fTuning][12] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][12]);}
	if(FahrzeugInfo[vehicleid][fTuning][13] != 0){AddVehicleComponent(vehicleid,FahrzeugInfo[vehicleid][fTuning][13]);}
	return 1;
}

stock LoadPrivatCar(playerid)
{
	if(IsPlayerNPC(playerid) || GetPVarInt(playerid,"LoggedIn") == 0)return 0;
    
	new string[256];
    mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `vehicles` WHERE `Besitzer` = '%e'", SpielerInfo[playerid][sName]);
    mysql_tquery(sqlHandle, string, "onLoadPrivatCar", "i", playerid);
	return 1;
}

stock SaveAccount(playerid)
{
    if(!IsPlayerNPC(playerid) && GetPVarInt(playerid,"LoggedIn") == 1 && GetPVarInt(playerid,"ServerPasswort") == 0)
    {
		new query[450], query1[256], stringzusammen[3600];

		GetPlayerPos(playerid,SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ]);
		GetPlayerFacingAngle(playerid,SpielerInfo[playerid][sPosA]);
		mysql_format(sqlHandle, query1,sizeof(query1),"UPDATE `accounts` SET `Connected` = '0' WHERE `Name` = '%s'",SpielerInfo[playerid][sName]);
		mysql_tquery(sqlHandle, query1);


		if(GetPVarInt(playerid,"CopDuty") == 1)
		{
		    DeletePVar(playerid,"CopDuty");
		    CopDuty--;
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
			KillTimer(PDEquiptTimer[playerid]);
		}
		else if(GetPVarInt(playerid,"FBIDuty") == 1)
		{
		    DeletePVar(playerid,"FBIDuty");
		    FBIDuty--;
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
			KillTimer(PDEquiptTimer[playerid]);
		}
		else if(GetPVarInt(playerid,"MedicDuty") == 1)
		{
			DeletePVar(playerid,"MedicDuty");
			MedicDuty--;
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
		}
		else if(GetPVarInt(playerid,"FireDuty") == 1)
		{
			DeletePVar(playerid,"FireDuty");
			ResetPlayerWeapons(playerid);
	        SetPlayerArmour(playerid,0);
	        SetPlayerColor(playerid,COLOR_WHITE);
		}
	    else if(GetPVarInt(playerid,"PizzaboteDuty") == 1){DeletePVar(playerid,"PizzaboteDuty");}
	    else if(GetPVarInt(playerid,"KehrmaschinenDuty") == 1){DeletePVar(playerid,"KehrmaschinenDuty");}
	    else if(GetPVarInt(playerid,"PilotDuty") == 1){DeletePVar(playerid,"PilotDuty");}
	    else if(GetPVarInt(playerid,"BusfahrerDuty") == 1){DeletePVar(playerid,"BusfahrerDuty");}
	    else if(GetPVarInt(playerid,"MüllmannDuty") == 1){DeletePVar(playerid,"MüllmannDuty");}
	    else if(GetPVarInt(playerid,"LandwirtDuty") == 1){DeletePVar(playerid,"LandwirtDuty");}
	    else if(GetPVarInt(playerid,"HolzfallerDuty") == 1)
		{
			DeletePVar(playerid,"HolzfallerDuty");
			EntfernungObjekteHolz(playerid);
  		}
	 	SetPlayerSkin(playerid,mysql_GetInt("accounts", "SkinID", "Name", SpielerInfo[playerid][sName]));

		format(query,sizeof query,"UPDATE `accounts` SET `PositionX`='%f', `PositionY`='%f', `PositionZ`='%f', `PositionA`='%f', `Spawn`='%d', `Stadt`='%d', `SkinID`='%d', `Admin`='%d', `Fraktion`='%d', `Team`='%d', `Leader`='%d', `Rank`='%d',",
	    SpielerInfo[playerid][sPosX],SpielerInfo[playerid][sPosY],SpielerInfo[playerid][sPosZ],SpielerInfo[playerid][sPosA],SpielerInfo[playerid][sSpawn],SpielerInfo[playerid][sStadt],GetPlayerSkin(playerid),SpielerInfo[playerid][sAdmin],
		SpielerInfo[playerid][sFraktion],SpielerInfo[playerid][sTeam],SpielerInfo[playerid][sLeader],SpielerInfo[playerid][sRank]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		format(query,sizeof query,"`lVerbrechen`='%s', `Wanteds`='%d', `Knastzeit`='%d', `Zelle`='%d', `EXP`='%d', `Verwarnungen`='%d', `Mutezeit`='%d', `WerbungSperre`='%d', `Badword`='%d', `IP-Adresse`='%s', `Bargeld`='%d', `Perso`='%d', `Stadtplan`='%d', `Mission`='%d', `MissionComplete`='%d' WHERE `Name`='%s'",
	    SpielerInfo[playerid][sLastCrime],GetPlayerWantedLevelEx(playerid),SpielerInfo[playerid][sKnast],SpielerInfo[playerid][sZelle],SpielerInfo[playerid][sEXP],SpielerInfo[playerid][sWarns],
		SpielerInfo[playerid][sMuted],SpielerInfo[playerid][sADSperre],SpielerInfo[playerid][sBadword],SpielerInfo[playerid][sIPAdresse],GetPlayerMoneyEx(playerid),SpielerInfo[playerid][sPerso],SpielerInfo[playerid][sStadtplan],
		SpielerInfo[playerid][sMission],SpielerInfo[playerid][sMissionComp],SpielerInfo[playerid][sName]);
		strcat(stringzusammen,query);
		mysql_tquery(sqlHandle, stringzusammen);

		strdel(query,0,sizeof(query));
		strdel(stringzusammen,0,sizeof(stringzusammen));

		format(query,sizeof query,"UPDATE `accounts` SET `Level`='%d', `BankPIN`='%d', `Bankkonto`='%d', `Tankstelle`='%d', `Nebenjob`='%d', `QuitJob`='%d', `Autoschein`='%d', `Bootschein`='%d', `Waffenschein`='%d', `Flugschein`='%d', `LKWschein`='%d', `Motorradschein`='%d',",
	    GetPlayerScore(playerid),SpielerInfo[playerid][sBankPin],SpielerInfo[playerid][sBankkonto],SpielerInfo[playerid][sTankstelle],SpielerInfo[playerid][sNebenjob],SpielerInfo[playerid][sQuitJob],
		SpielerInfo[playerid][sCarLic],SpielerInfo[playerid][sBootLic],SpielerInfo[playerid][sWeaponLic],SpielerInfo[playerid][sFlugLic],SpielerInfo[playerid][sTruckLic],SpielerInfo[playerid][sBikeLic]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		format(query,sizeof query,"`Krankenhaus`='%d', `Wiederbeleben`='%d', `Tot_X`='%f', `Tot_Y`='%f', `Tot_Z`='%f', `Tot_Int`='%d', `Tot_World`='%d', `Paket`='%d', `Ammunation`='%d', `Store`='%d', `Haus`='%d', `Gruppenhaus`='%d', `Mieter`='%d', `PayDay`='%d', `Navi`='%d' WHERE `Name`='%s'",
		SpielerInfo[playerid][sKrankenhaus],SpielerInfo[playerid][sWiederbeleben],Tot_X[playerid],Tot_Y[playerid],Tot_Z[playerid],Tot_Int[playerid],Tot_World[playerid],SpielerInfo[playerid][sPaket],
		SpielerInfo[playerid][sAmmunation],SpielerInfo[playerid][sStore],SpielerInfo[playerid][sHaus],SpielerInfo[playerid][sGHaus],SpielerInfo[playerid][sMieter],SpielerInfo[playerid][sPayDay],SpielerInfo[playerid][sNavi],SpielerInfo[playerid][sName]);
		strcat(stringzusammen,query);
		mysql_tquery(sqlHandle, stringzusammen);

		strdel(query,0,sizeof(query));
		strdel(stringzusammen,0,sizeof(stringzusammen));

		format(query,sizeof query,"UPDATE `accounts` SET `Handy`='%d', `Guthaben`='%d', `Telefonbuch`='%d', `Repairkit`='%d', `MP3Player`='%d', `PBKills`='%d', `PBTode`='%d', `Interior`='%d', `VirtualWorld`='%d', `Handschellen`='%d', `Startbonus`='%d', `Fraksperre`='%d',",
		SpielerInfo[playerid][sHandy],SpielerInfo[playerid][sGuthaben],SpielerInfo[playerid][sTelefonbuch],SpielerInfo[playerid][sRepairkit],SpielerInfo[playerid][sMP3],SpielerInfo[playerid][sPBKills],
		SpielerInfo[playerid][sPBTode],SpielerInfo[playerid][sInterior],SpielerInfo[playerid][sVirtualWorld],GetPVarInt(playerid,"Handschellen"),SpielerInfo[playerid][sStartbonus],SpielerInfo[playerid][sFrakSperre]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		format(query,sizeof query,"`icpNachrichten`='%d', `icpHitsound`='%d', `icpOChat`='%d', `icpCamera`='%d', `icpHandy`='%d', `stvoAutoschein`='%d', `stvoMotorradschein`='%d', `stvoFlugschein`='%d', `stvoTruckschein`='%d', `stvoBootschein`='%d', `TicketsBearbeitet`='%d', `PayDayGeld`='%d' WHERE `Name`='%s'",
		SpielerInfo[playerid][icpNachrichten],SpielerInfo[playerid][icpHitsound],SpielerInfo[playerid][icpOChat],SpielerInfo[playerid][icpCamera],SpielerInfo[playerid][icpHandy],SpielerInfo[playerid][stvoCarLic],SpielerInfo[playerid][stvoBikeLic],SpielerInfo[playerid][stvoFlugLic],SpielerInfo[playerid][stvoTruckLic],SpielerInfo[playerid][stvoBootLic],
		SpielerInfo[playerid][sTicketsBearbeitet],SpielerInfo[playerid][sPayDayGeld],SpielerInfo[playerid][sName]);
		strcat(stringzusammen,query);
		mysql_tquery(sqlHandle, stringzusammen);

		strdel(query,0,sizeof(query));
		strdel(stringzusammen,0,sizeof(stringzusammen));

		format(query,sizeof query,"UPDATE `accounts` SET `Lotto1`='%d', `Lotto2`='%d', `Lotto3`='%d', `TruckerSkill`='%d', `PizzaboteSkill`='%d', `KehrmaschinenSkill`='%d', `PilotenSkill`='%d', `BusfahrerSkill`='%d', `MuellmannSkill`='%d', `Drogen`='%d', `Tutorial`='%d', `Quest`='%d', `Contract`='%d',",
		SpielerInfo[playerid][sLotto][0],SpielerInfo[playerid][sLotto][1],SpielerInfo[playerid][sLotto][2],SpielerInfo[playerid][sJobEXP][0],SpielerInfo[playerid][sJobEXP][1],SpielerInfo[playerid][sJobEXP][2],SpielerInfo[playerid][sJobEXP][3],
		SpielerInfo[playerid][sJobEXP][4],SpielerInfo[playerid][sJobEXP][5],SpielerInfo[playerid][sDrogen],SpielerInfo[playerid][sTutorial],SpielerInfo[playerid][sQuest],SpielerInfo[playerid][sContract]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		format(query,sizeof query,"`Gruppe`='%d', `GLeader`='%d', `GRank`='%d', `Donator`='%d', `sFLeader`='%d', `sFirma`='%d', `sFRank`='%d', `sGFirma`='%d', `Premium`='%d', `Garage`='%d', `GMieter`='%d', `Materialien`='%d', `Kurrier`='%d', `Bombe`='%d', `Pfandflaschen`='%d', `Beutel`='%d', `Kampfstyle`='%d', `Helm`='%d', `DrogenPflanze`='%d', `C4`='%d' WHERE `Name`='%s'",
		SpielerInfo[playerid][sGruppe],SpielerInfo[playerid][sGLeader],SpielerInfo[playerid][sGRank],SpielerInfo[playerid][sDonator],SpielerInfo[playerid][sFLeader],SpielerInfo[playerid][sFirma],SpielerInfo[playerid][sFRank],SpielerInfo[playerid][sGFirma],SpielerInfo[playerid][sPremium],SpielerInfo[playerid][sGarage],
		SpielerInfo[playerid][sGMieter],SpielerInfo[playerid][sMaterialien],SpielerInfo[playerid][sKurrier],SpielerInfo[playerid][sBombe],SpielerInfo[playerid][sPfandflaschen],SpielerInfo[playerid][sBeutel],SpielerInfo[playerid][sKampfstyle],
		SpielerInfo[playerid][sHelm],SpielerInfo[playerid][sDrogenPflanze],SpielerInfo[playerid][sc4],SpielerInfo[playerid][sName]);
 	
		strcat(stringzusammen,query);
		mysql_tquery(sqlHandle, stringzusammen);

		strdel(query,0,sizeof(query));
		strdel(stringzusammen,0,sizeof(stringzusammen));
		printf("Account %s wurde erfolgreich gespeichert", SpielerInfo[playerid][sName]);
	    return 1;
	}
	return 1;
}

stock LoadAccount(playerid)
{
	if(!IsPlayerNPC(playerid) && GetPVarInt(playerid,"LoggedIn") == 1 && GetPVarInt(playerid,"ServerPasswort") == 0)
    {
	    new string[256], pname[24];
	    GetPlayerName(playerid, pname, sizeof(pname));

		mysql_format(sqlHandle, string,sizeof(string),"UPDATE `accounts` SET `Online`='1' WHERE `Name`='%s'", pname);
		mysql_tquery(sqlHandle, string);

	    mysql_format(sqlHandle, string, sizeof(string),"SELECT * FROM `accounts` WHERE `Name` = '%s' LIMIT 1", pname);
	    mysql_tquery(sqlHandle, string, "onLoadPlayerAccount", "i", playerid);
	}
	return 1;
}

stock SaveVehicles()
{
	new query[400], stringzusammen[2000], VEHICLE_PANEL_STATUS:panels, VEHICLE_TYRE_STATUS:tires, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights;
	for(new i=1;i<MAX_VEHICLES;i++)
    {
		if(!IsValidVehicle(i) || FahrzeugInfo[i][fDatabaseID] == 0)continue;
		if(FahrzeugInfo[i][fFahrschule] == 1 || FahrzeugInfo[i][fSupmobil] == 1 || FahrzeugInfo[i][fZiviroller] == 1 || FahrzeugInfo[i][fImportCar] == 1 || FahrzeugInfo[i][fKurrierCar] != 0 || FahrzeugInfo[i][fBankrob] != 0)continue;
		GetVehicleDamageStatus(i,panels,_doors,_lights,tires);

   		mysql_format(sqlHandle, query,sizeof query,"UPDATE `vehicles` SET `ModelID`='%d', `PositionX`='%f', `PositionY`='%f', `PositionZ`='%f', `PositionA`='%f', `Farbe1`='%d', `Farbe2`='%d', `Paintjob`='%d', `Fraktion`='%d', `Gruppe`='%d', `Firma`='%d', `Autohaus`='%d', `Nebenjob`='%d', `Garage`='%d', `GPark`='%d', `Fahrschule`='%d', `Besitzer`='%s',",
	    FahrzeugInfo[i][fModelID],FahrzeugInfo[i][fPosition][0],FahrzeugInfo[i][fPosition][1],FahrzeugInfo[i][fPosition][2],FahrzeugInfo[i][fPosition][3],FahrzeugInfo[i][fColor][0],FahrzeugInfo[i][fColor][1],FahrzeugInfo[i][fPaintjob],FahrzeugInfo[i][fFraktion],FahrzeugInfo[i][fGruppe],FahrzeugInfo[i][fFirma],FahrzeugInfo[i][fAutohaus],
		FahrzeugInfo[i][fNebenjob],FahrzeugInfo[i][fGarage],FahrzeugInfo[i][fGPark],FahrzeugInfo[i][fFahrschule],FahrzeugInfo[i][fBesitzer]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		mysql_format(sqlHandle, query,sizeof query,"`Kennzeichen`='%s', `Abgeschleppt`='%d', `Parkkralle`='%d', `Kilometer`='%d', `Tank`='%f', `Rang`='%d', `Preis`='%d',",
	    FahrzeugInfo[i][fKennzeichen],FahrzeugInfo[i][fAbgeschleppt],FahrzeugInfo[i][fParkkralle],FahrzeugInfo[i][fKilometer],FahrzeugInfo[i][fTank],FahrzeugInfo[i][fRang],FahrzeugInfo[i][fPreis]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		mysql_format(sqlHandle, query,sizeof query,"`Spoiler`='%d', `Hood`='%d', `Roof`='%d', `Sideskirt`='%d', `Lamps`='%f', `Nitro`='%d', `Exhaust`='%d', `Wheels`='%d', `Stereo`='%d', `Hydraulics`='%d',",
	    FahrzeugInfo[i][fTuning][0],FahrzeugInfo[i][fTuning][1],FahrzeugInfo[i][fTuning][2],FahrzeugInfo[i][fTuning][3],FahrzeugInfo[i][fTuning][4],FahrzeugInfo[i][fTuning][5],FahrzeugInfo[i][fTuning][6],FahrzeugInfo[i][fTuning][7],
		FahrzeugInfo[i][fTuning][8],FahrzeugInfo[i][fTuning][9]);
		strcat(stringzusammen,query);
		strdel(query,0,sizeof(query));

		mysql_format(sqlHandle, query,sizeof query,"`Front Bumper`='%d', `Rear Bumper`='%d', `Vent Right`='%d', `Vent Left`='%d', `Panels`='%f', `Doors`='%d', `Lights`='%d', `Tires`='%d', `Geld`='%d', `C4`='%d', `JobEXP`='%d' WHERE `ID`='%d'",
	    FahrzeugInfo[i][fTuning][10],FahrzeugInfo[i][fTuning][11],FahrzeugInfo[i][fTuning][12],FahrzeugInfo[i][fTuning][13],panels,_doors,_lights,tires,FahrzeugInfo[i][fkGeld],FahrzeugInfo[i][fkC4],FahrzeugInfo[i][fJobEXP],FahrzeugInfo[i][fDatabaseID]);
		strcat(stringzusammen,query);
		mysql_tquery(sqlHandle, stringzusammen);
		strdel(query,0,sizeof(query));
		strdel(stringzusammen,0,sizeof(stringzusammen));
	}
	return 1;
}

stock SavePrivatCarVehicle(vehicleid)
{
	new query[364], stringzusammen[1024], VEHICLE_PANEL_STATUS:panels, VEHICLE_TYRE_STATUS:tires, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights;
	GetVehicleDamageStatus(vehicleid,panels,_doors,_lights,tires);

	mysql_format(sqlHandle, query,sizeof query,"UPDATE `vehicles` SET `ModelID`='%d', `PositionX`='%f', `PositionY`='%f', `PositionZ`='%f', `PositionA`='%f', `Farbe1`='%d', `Farbe2`='%d', `Paintjob`='%d', `Fraktion`='%d', `Gruppe`='%d', `Firma`='%d', `Autohaus`='%d', `Nebenjob`='%d', `Garage`='%d', `GPark`='%d', `Fahrschule`='%d', `Besitzer`='%s',",
    FahrzeugInfo[vehicleid][fModelID],FahrzeugInfo[vehicleid][fPosition][0],FahrzeugInfo[vehicleid][fPosition][1],FahrzeugInfo[vehicleid][fPosition][2],FahrzeugInfo[vehicleid][fPosition][3],FahrzeugInfo[vehicleid][fColor][0],FahrzeugInfo[vehicleid][fColor][1],FahrzeugInfo[vehicleid][fPaintjob],
	FahrzeugInfo[vehicleid][fFraktion],FahrzeugInfo[vehicleid][fGruppe],FahrzeugInfo[vehicleid][fFirma],FahrzeugInfo[vehicleid][fAutohaus],FahrzeugInfo[vehicleid][fNebenjob],FahrzeugInfo[vehicleid][fGarage],FahrzeugInfo[vehicleid][fGPark],FahrzeugInfo[vehicleid][fFahrschule],FahrzeugInfo[vehicleid][fBesitzer]);
	strcat(stringzusammen,query);
	strdel(query,0,sizeof(query));

	mysql_format(sqlHandle, query,sizeof query,"`Kennzeichen`='%s', `Abgeschleppt`='%d', `Parkkralle`='%d', `Kilometer`='%d', `Tank`='%f', `Rang`='%d',",
    FahrzeugInfo[vehicleid][fKennzeichen],FahrzeugInfo[vehicleid][fAbgeschleppt],FahrzeugInfo[vehicleid][fParkkralle],FahrzeugInfo[vehicleid][fKilometer],FahrzeugInfo[vehicleid][fTank],FahrzeugInfo[vehicleid][fRang]);
	strcat(stringzusammen,query);
	strdel(query,0,sizeof(query));

	mysql_format(sqlHandle, query,sizeof query,"`Spoiler`='%d', `Hood`='%d', `Roof`='%d', `Sideskirt`='%d', `Lamps`='%f', `Nitro`='%d', `Exhaust`='%d', `Wheels`='%d', `Stereo`='%d', `Hydraulics`='%d',",
    FahrzeugInfo[vehicleid][fTuning][0],FahrzeugInfo[vehicleid][fTuning][1],FahrzeugInfo[vehicleid][fTuning][2],FahrzeugInfo[vehicleid][fTuning][3],FahrzeugInfo[vehicleid][fTuning][4],FahrzeugInfo[vehicleid][fTuning][5],FahrzeugInfo[vehicleid][fTuning][6],FahrzeugInfo[vehicleid][fTuning][7],
	FahrzeugInfo[vehicleid][fTuning][8],FahrzeugInfo[vehicleid][fTuning][9]);
	strcat(stringzusammen,query);
	strdel(query,0,sizeof(query));

	mysql_format(sqlHandle, query,sizeof query,"`Front Bumper`='%d', `Rear Bumper`='%d', `Vent Right`='%d', `Vent Left`='%d', `Panels`='%f', `Doors`='%d', `Lights`='%d', `Tires`='%d', `Geld`='%d', `C4`='%d' WHERE `ID`='%d'",
    FahrzeugInfo[vehicleid][fTuning][10],FahrzeugInfo[vehicleid][fTuning][11],FahrzeugInfo[vehicleid][fTuning][12],FahrzeugInfo[vehicleid][fTuning][13],panels,_doors,_lights,tires,FahrzeugInfo[vehicleid][fkGeld],FahrzeugInfo[vehicleid][fkC4],FahrzeugInfo[vehicleid][fDatabaseID]);
	strcat(stringzusammen,query);
	mysql_tquery(sqlHandle, stringzusammen);
	strdel(query,0,sizeof(query));
	strdel(stringzusammen,0,sizeof(stringzusammen));
	return 1;
}

stock SavePrivatCar(playerid)
{
	new query[664], stringzusammen[1024], VEHICLE_PANEL_STATUS:panels, VEHICLE_TYRE_STATUS:tires, VEHICLE_DOOR_STATUS:_doors, VEHICLE_LIGHT_STATUS:_lights;
	for(new i=1;i<MAX_VEHICLES;i++)
    {
		if(FahrzeugInfo[i][fDatabaseID] == 0) continue;
		if(FahrzeugInfo[i][fBesitzerID] == -1) continue;
		if(FahrzeugInfo[i][fBesitzerID] == playerid)
		{
			printf("FahrzeugInfo[i][fBesitzerID] %d",FahrzeugInfo[i][fBesitzerID]);

			GetVehicleDamageStatus(i,panels,_doors,_lights,tires);

			mysql_format(sqlHandle, query,sizeof query,"UPDATE `vehicles` SET `ModelID`='%d', `PositionX`='%f', `PositionY`='%f', `PositionZ`='%f', `PositionA`='%f', `Farbe1`='%d', `Farbe2`='%d', `Paintjob`='%d', `Fraktion`='%d', `Gruppe`='%d', `Firma`='%d', `Autohaus`='%d', `Nebenjob`='%d', `Garage`='%d', `GPark`='%d', `Fahrschule`='%d', `Besitzer`='%s',",
			FahrzeugInfo[i][fModelID],FahrzeugInfo[i][fPosition][0],FahrzeugInfo[i][fPosition][1],FahrzeugInfo[i][fPosition][2],FahrzeugInfo[i][fPosition][3],FahrzeugInfo[i][fColor][0],FahrzeugInfo[i][fColor][1],FahrzeugInfo[i][fPaintjob],FahrzeugInfo[i][fFraktion],FahrzeugInfo[i][fGruppe],FahrzeugInfo[i][fFirma],
			FahrzeugInfo[i][fAutohaus],FahrzeugInfo[i][fNebenjob],FahrzeugInfo[i][fGarage],FahrzeugInfo[i][fGPark],FahrzeugInfo[i][fFahrschule],FahrzeugInfo[i][fBesitzer]);
			strcat(stringzusammen,query);
			strdel(query,0,sizeof(query));

			mysql_format(sqlHandle, query,sizeof query,"`Kennzeichen`='%s', `Abgeschleppt`='%d', `Parkkralle`='%d', `Kilometer`='%d', `Tank`='%f', `Rang`='%d',",
			FahrzeugInfo[i][fKennzeichen],FahrzeugInfo[i][fAbgeschleppt],FahrzeugInfo[i][fParkkralle],FahrzeugInfo[i][fKilometer],FahrzeugInfo[i][fTank],FahrzeugInfo[i][fRang]);
			strcat(stringzusammen,query);
			strdel(query,0,sizeof(query));

			mysql_format(sqlHandle, query,sizeof query,"`Spoiler`='%d', `Hood`='%d', `Roof`='%d', `Sideskirt`='%d', `Lamps`='%f', `Nitro`='%d', `Exhaust`='%d', `Wheels`='%d', `Stereo`='%d', `Hydraulics`='%d',",
			FahrzeugInfo[i][fTuning][0],FahrzeugInfo[i][fTuning][1],FahrzeugInfo[i][fTuning][2],FahrzeugInfo[i][fTuning][3],FahrzeugInfo[i][fTuning][4],FahrzeugInfo[i][fTuning][5],FahrzeugInfo[i][fTuning][6],FahrzeugInfo[i][fTuning][7],
			FahrzeugInfo[i][fTuning][8],FahrzeugInfo[i][fTuning][9]);
			strcat(stringzusammen,query);
			strdel(query,0,sizeof(query));

			mysql_format(sqlHandle, query,sizeof query,"`Front Bumper`='%d', `Rear Bumper`='%d', `Vent Right`='%d', `Vent Left`='%d', `Panels`='%f', `Doors`='%d', `Lights`='%d', `Tires`='%d', `Geld`='%d', `C4`='%d' WHERE `ID`='%d'",
			FahrzeugInfo[i][fTuning][10],FahrzeugInfo[i][fTuning][11],FahrzeugInfo[i][fTuning][12],FahrzeugInfo[i][fTuning][13],panels,_doors,_lights,tires,FahrzeugInfo[i][fkGeld],FahrzeugInfo[i][fkC4],FahrzeugInfo[i][fDatabaseID]);
			strcat(stringzusammen,query);
			mysql_tquery(sqlHandle, stringzusammen);
			strdel(query,0,sizeof(query));
			strdel(stringzusammen,0,sizeof(stringzusammen));
			
			DeleteVehicle(i);
		}
	}
	return 1;
}

stock mysql_connection()
{
	mysql_log(ALL);
	new MySQLOpt:options = mysql_init_options();
	mysql_set_option(options, AUTO_RECONNECT, true);
    sqlHandle = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DATA, options);
    if(mysql_errno(sqlHandle) != 0)
    {
		print("MYSQL: Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        printf("Host: %s | User: %s | Passwort: %s | Datenbank: %s",MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DATA);
		return 0;
	}
	else
	{
       	#if defined LOCALHOST
        print("MYSQL: MySQL Verbindung zu Localhost wurde erfolgreich aufgebaut.");
		#else
		print("MYSQL: MySQL Verbindung zum Gameserver wurde erfolgreich aufgebaut.");
		#endif
		GlobalVars[Rekord] = mysql_GetInt("allgemein", "Rekord", "ServerID", "1");
		LottoJackpot = mysql_GetInt("config", "ValueInt", "Config", "LottoGewinn");
        return 1;
    }
}

stock mysql_CheckBeta(playerid)
{
    new Name[MAX_PLAYER_NAME];
  	GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
    if(strcmp(mysql_GetString("beta", "Aktiviert", "Name", Name), "regist") == 0)
	{
	    return false;
	}
	return true;
}

stock CreateAccount(playerid, pass[])
{
	printf("CreateAccount executed %i", playerid);
	new query[256],Name[MAX_PLAYER_NAME],DaTum[64];
    GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
    getdate(Year, Month, Day);
	if(Day < 10){format(DaTum,sizeof(DaTum),"0%d.%02d.%02d",Day, Month, Year);}
	else if(Day > 9){format(DaTum,sizeof(DaTum),"%d.%02d.%02d",Day, Month, Year);}
 	mysql_format(sqlHandle, query, sizeof(query), "DELETE FROM `accounts` WHERE `Name` = '%e'", Name);
	mysql_tquery(sqlHandle, query);

    mysql_format(sqlHandle, query, sizeof(query), "INSERT INTO `accounts` (`Name`, `Passwort`, `Registerdatum`, `IP-Adresse`) VALUES ('%e', '%e', '%s', '%s')", Name, pass, DaTum, SpielerInfo[playerid][sIPAdresse]);
	mysql_tquery(sqlHandle, query);

	mysql_format(sqlHandle, query,sizeof(query),"UPDATE `accounts` SET `Connected` = '1', `Kampfstyle` = '1' WHERE `Name` = '%s'",Name);
	mysql_tquery(sqlHandle, query);

	SetPlayerScore(playerid,1);
	SpielerInfo[playerid][sEXPNeeded] = 400;
	SpielerInfo[playerid][sKampfstyle] = 1;
	SpielerInfo[playerid][icpHandy] = 1;
	GivePlayerMoneyEx(playerid,3500);
	SetPlayerColor(playerid,COLOR_WHITE);
	PayDayTimer[playerid] = SetTimerEx("PayDay",60000,true,"i",playerid);
	AC_Check[playerid] = SetTimerEx("AC_CheckStatus",1000, true,"i",playerid);
	Afktimer[playerid] = SetTimerEx("Afktimered",60000, true,"i",playerid);
    return true;
}

stock mysql_GetInt(Table[], Field[], Where[], Is[])
{
	new query[256], Get;
	mysql_format(sqlHandle, query, sizeof(query), "SELECT %s FROM %s WHERE %s = '%s'", Field, Table, Where, Is);
	new Cache:result = mysql_query(sqlHandle, query);
	cache_get_value_name_int(0, Field, Get);
	cache_delete(result);
	return Get;
}

stock mysql_GetString(Table[], Field[], Where[], Is[])
{
	new query[256], Get[256];
	mysql_format(sqlHandle, query, sizeof(query), "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
	new Cache:result = mysql_query(sqlHandle, query);
	cache_get_value_name(0, Field, Get);
	cache_delete(result);
	return Get;
}

public Float:mysql_GetFloat(Table[], Field[], Where[], Is[])
{
    new query[256], Float:sqlfloat;
    mysql_format(sqlHandle, query, sizeof(query), "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    new Cache:result = mysql_query(sqlHandle, query);
    cache_get_value_name_float(0, Field, sqlfloat);
	cache_delete(result);
    return sqlfloat;
}

stock mysql_SetInt(Table[], Field[], To, Where[], Where2[])
{
    new query[256];
    mysql_format(sqlHandle, query, sizeof(query), "UPDATE `%s` SET `%s` = '%d' WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_tquery(sqlHandle, query);
    return true;
}

stock mysql_SetString(Table[], Field[], To[], Where[], Where2[])
{
    new query[256];
    mysql_format(sqlHandle, query, sizeof(query), "UPDATE `%s` SET `%s` = '%s' WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_tquery(sqlHandle, query);
    return true;
}

stock mysql_SetFloat(Table[], Field[], Float:To, Where[], Where2[])
{
    new query[256];
    mysql_format(sqlHandle, query, sizeof(query), "UPDATE `%s` SET `%s` = '%f' WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_tquery(sqlHandle, query);
    return true;
}

stock mysql_Delete(Table[], Where[], Is[])
{
    new query[256];
    mysql_format(sqlHandle, query, sizeof(query), "DELETE FROM `%s` WHERE `%s` = '%s'", Table, Where, Is);
	mysql_tquery(sqlHandle, query);
	return 1;
}

stock GetAge(const Birthday[16])
{
	new D,M,Y,Age;
	getdate(Y,M,D);
	for(new i = strlen(Birthday); i > -1; i--)
	{
		if(Birthday[i] == '.')
		{
			new Tmp[32];
			for(new o = i-1; o > -1; o--)
			{
				if(Birthday[o] == '.')
				{
					strmid(Tmp,Birthday,o+1,i);
					if(strval(Tmp)>=M)
					{
						strmid(Tmp,Birthday,0,o);
						if(strval(Tmp)>D)
						{
							strmid(Tmp,Birthday,i+1,strlen(Birthday));
							Age = Y-strval(Tmp)-1;
							break;
						}
					}
					strmid(Tmp,Birthday,i+1,strlen(Birthday));
					Age = Y-strval(Tmp);
					break;
				}
			}
		}
	}
	return Age;
}

stock ProxDetector(Float:radi, playerid, const text[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			    {
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, text);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, text);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, text);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, text);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, text);
					}
				}
			}
		}
	}
	return 1;
}

public AC_CheckStatus(playerid)
{
	new ac_string[256], Float:Position[3], Float:Health, aim = -1, piss = -1;
	if(!IsPlayerNPC(playerid) && GetPVarInt(playerid,"LoggedIn") == 1)
	{
	    settimeex(playerid);
		if(!(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID))
		{
		    new vehicleid = GetPlayerSurfingVehicleID(playerid), pID = GetVehicleDriver(vehicleid);
      		if(!IsABoot(vehicleid))
      		{
				if(GetPlayerSpeed(pID) > 10)
				{
				    GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					SetPlayerPos(playerid, Position[0]+2, Position[1]+2, Position[2]+1);
				}
			}
		}
		if(GetPVarInt(playerid, "IsOnFire") && !CanPlayerBurn(playerid, 1))
		{
			TogglePlayerBurning(playerid, false);
		}
		if(CanPlayerBurn(playerid) && IsAtFlame(playerid))
		{
			TogglePlayerBurning(playerid, true);
		}
		if(Pissing_at_Flame(playerid) != -1 || Aiming_at_Flame(playerid) != -1)
		{
			piss = Pissing_at_Flame(playerid); aim = Aiming_at_Flame(playerid);
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~~h~WASSER MARSCH!", 1500, 6);
			if(PlayerFireTimer[playerid][2] == -1 && ((aim != -1 && Pressing(playerid) & KEY_FIRE) || piss != -1))
			{
			    new value, time, Float:x, Float:y, Float:z;
			    if(piss != -1)
			    {
					value = piss;
					time = 10;
				}
				else if(aim != -1)
				{
					value = aim;
					if(GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN)
					{
						CreateExplosion(FeuerInfo[value][oPosX],FeuerInfo[value][oPosY],FeuerInfo[value][oPosZ], 2, 5);
					}
					if(IsPlayerInAnyVehicle(playerid))
					{
					    time = 1;
					}
					else
					{
						time = 4;
					}
				}
				if(value < -1)
				{
					time = 2;
				}
				time *= 1000;
				if(value >= -1)
				{
					x = FeuerInfo[value][oPosX];
				    y = FeuerInfo[value][oPosY];
				    z = FeuerInfo[value][oPosZ];
				    RemoveSmokeFromFire(value);
					FeuerInfo[value][RID][0] = CreateDynamicObject(18727, x, y, z, 0.0, 0.0, 0.0);
					FeuerInfo[value][RID][1] = CreateDynamicObject(18727, x+1, y, z, 0.0, 0.0, 0.0);
					FeuerInfo[value][RID][2] = CreateDynamicObject(18727, x-1, y, z, 0.0, 0.0, 0.0);
					FeuerInfo[value][RID][3] = CreateDynamicObject(18727, x, y+1, z, 0.0, 0.0, 0.0);
					FeuerInfo[value][RID][4] = CreateDynamicObject(18727, x, y-1, z, 0.0, 0.0, 0.0);
				}
				PlayerFireTimer[playerid][2] = SetTimerEx("ExtinguishTimer", time, false, "dd", playerid, value);
			}
		}
		new Float:x, Float:y, Float:z;
	  	if(CanPlayerBurn(playerid) && GetPVarInt(playerid, "IsOnFire") && !GetPVarInt(playerid, "IsOnFire"))
    	{
		  	GetPlayerPos(playerid, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 1.2, x, y, z))
			{
			    TogglePlayerBurning(playerid, true);
			}
		}
		if(GetPVarInt(playerid,"InGarage") == 0 || GetPVarInt(playerid,"InHaus") == 0)
		{
			SetPlayerWetter(playerid);
		}
		if(GetPVarInt(playerid,"InGarage") == 1)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        new vehicleid = GetPlayerVehicleID(playerid), gid = GetPVarInt(playerid,"GarageID");
 				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 				{
					if(GetPlayerSpeed(playerid) > 3)
					{
					    SetVehicleVirtualWorld(vehicleid,0);
						SetVehiclePos(vehicleid,GaragenInfo[gid][giOPos_X],GaragenInfo[gid][giOPos_Y],GaragenInfo[gid][giOPos_Z]);
						SetVehicleZAngle(vehicleid,GaragenInfo[gid][giOPos_A]);
						
						FahrzeugInfo[vehicleid][fGPark]--;
						GaragenInfo[gid][giFahrzeug][FahrzeugInfo[vehicleid][fGPark]] = 0;
						FahrzeugInfo[vehicleid][fGarage] = 0;
						FahrzeugInfo[vehicleid][fGPark] = 0;
						
						SetPlayerPos(playerid,GaragenInfo[gid][giPos_X],GaragenInfo[gid][giPos_Y],GaragenInfo[gid][giPos_Z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetCameraBehindPlayer(playerid);
      					AC_PutPlayerInVehicleEx(playerid,vehicleid,0);
						DeletePVar(playerid,"GarageID");
						DeletePVar(playerid,"InGarage");
					}
 				}
		    }
  		}
		if(SpielerInfo[playerid][sQuest] == 6)
		{
		    SpielerInfo[playerid][sQuest] = 7;
		    SendClientMessage(playerid,COLOR_SUPER,"Du hast alle Quest's erfolgreich absolviert.");
		    SendClientMessage(playerid,COLOR_SUPER,"Als Belohnung erhälst du 400EXP + 10.000$.");
	    	GivePlayerMoneyEx(playerid,10000);
			GivePlayerEXP(playerid,400);
			
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][0]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][1]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][2]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][3]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][4]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][5]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][6]);
			PlayerTextDrawHide(playerid,QuestTextdraw[playerid][7]);
		}
		if(SpielerInfo[playerid][sNebenjob] == 7 && GetPVarInt(playerid,"LandwirtTrailer") == 0)
 		{
		    if(IsVehicleStreamedIn(GetPVarInt(playerid,"TraktorTrailer"), playerid))
		    {
		        SetPVarInt(playerid,"LandwirtTrailer",1);
				AttachTrailerToVehicle(GetPVarInt(playerid,"TraktorTrailer"), GetPVarInt(playerid,"LandwirtAuto"));
		 	}
		}
	    if(schulung[playerid] == 1 || schulung[playerid] == 3 || schulung[playerid] == 4)
        {
            if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(FahrzeugInfo[vehicleid][fFahrschule] == 1)
				{
		            if(GetPlayerSpeed(playerid) > 90)
					{
					    if(Fehlerpunkte[playerid] > -1 && Fehlerpunkte[playerid] < 10)
					    {
		    				Fehlerpunkte[playerid] += 1;
							format(ac_string,sizeof(ac_string),"Du darfst nur maximal 90 KM/H fahren, %d/10 Fehlerpunkten!",Fehlerpunkte[playerid]);
							SendClientMessage(playerid,COLOR_SORRY,ac_string);
					    }
					    if(Fehlerpunkte[playerid] == 10)
					    {
					        vehicleid = GetPlayerVehicleID(playerid);
			     			DisablePlayerCheckpoint(playerid);
							DeletePVar(playerid,"FahrschulStunde");
							DeletePVar(playerid,"FSchein");
							DeletePVar(playerid,"FahrschulCar");
							schulung[playerid] = 0;
							FahrschulCar[vehicleid] = 0;
							Fehlerpunkte[playerid] = 0;
							Delete3DTextLabel(FahrzeugInfo[vehicleid][fLabel]);
							FahrzeugInfo[vehicleid][fLabel] = Text3D:INVALID_3DTEXT_ID;
							DeleteVehicle(vehicleid);
					        DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid,COLOR_SORRY,"Die Fahrschulprüfung wurde abgebrochen, da du dich nicht an die Richtgeschwindigkeit gehalten hast.");
							SetPlayerPos(playerid,1021.5202,-1349.9446,13.5506);
						}
					}
				}
			}
        }
        if(GetPlayerTargetDynamicActor(playerid) != INVALID_ACTOR_ID && IsValidDynamicActor(GetPlayerTargetDynamicActor(playerid)) && GetPVarInt(playerid,"RobberyCheck") == 1)//In Progress...
	    {
	        if(SpielerInfo[playerid][sFraktion] != 2 || SpielerInfo[playerid][sFraktion] != 5 || SpielerInfo[playerid][sFraktion] != 6)
	        {
		        SetPVarInt(playerid,"Robbery",1);
				ApplyDynamicActorAnimation(GetPVarInt(playerid,"IsAmingAt"), "PED", "handsup", 4.1, false, false, false, false, 0);
		        SetPVarInt(playerid,"Robbery",0);
			}
	    }
	    if(GetPlayerTargetDynamicActor(playerid) != INVALID_ACTOR_ID && IsValidDynamicActor(GetPlayerTargetDynamicActor(playerid)) && GetPVarInt(playerid,"RobberyCheck") == 0 && GetPlayerWeapon(playerid) > WEAPON_MOLTOV && GetPVarInt(playerid,"HatGeldsack") == 0)//Starten...
	    {
	        if(SpielerInfo[playerid][sFraktion] != 2 || SpielerInfo[playerid][sFraktion] != 5 || SpielerInfo[playerid][sFraktion] != 6)
	        {
		        new str[128], pID = GetPlayerTargetDynamicActor(playerid);
				if(RobBarAllowed[pID] == 0)
				{
				    SetPlayerWantedLevelEx(playerid, GetPlayerWantedLevelEx(playerid) +3);
				    SendClientMessage(playerid,COLOR_SORRY,"Die Kamera hat dich erfasst und der Alarm wurde ausgelöst!");
					format(str,sizeof(str),"Aktuelles Wantedlevel: %d",GetPlayerWantedLevelEx(playerid));
					SendClientMessage(playerid,COLOR_YELLOW,str);
					SetPVarInt(playerid,"AmAusrauben",1);
			        PlayAudioStreamForPlayer(playerid,"https://rosalife.de/sounds/Alarm.mp3");
	 	    		PlayerTextDrawShow(playerid, RobBar[playerid][0]);
	 	    		PlayerTextDrawTextSize(playerid,RobBar[playerid][1], 212.000000, -1.000000);
		    		PlayerTextDrawShow(playerid, RobBar[playerid][1]);
		    		PlayerTextDrawShow(playerid, RobBar[playerid][2]);
		    		RobBarTimer[playerid] = SetTimerEx("RobBarT",1000,true,"i",playerid);
		    		RobBarValue[playerid] = 212.000000;
			        SetPVarInt(playerid,"RobberyCheck",1);
			        SetPVarInt(playerid,"IsAmingAt",pID);
			        SetTimerEx("TimeToRob",1800000,false,"i",pID);
			        RobBarAllowed[pID] = 1;
				}
   			}
	    }
		if(GetPlayerTargetDynamicActor(playerid) == INVALID_ACTOR_ID && GetPVarInt(playerid,"RobberyCheck") == 1)//Stoppen
		{
		    KillTimer(RobBarTimer[playerid]);
			PlayerTextDrawHide(playerid,RobBar[playerid][0]);
			PlayerTextDrawHide(playerid,RobBar[playerid][1]);
			PlayerTextDrawHide(playerid,RobBar[playerid][2]);
			ClearDynamicActorAnimations(GetPVarInt(playerid,"IsAmingAt"));
		    ApplyDynamicActorAnimation(GetPVarInt(playerid,"IsAmingAt"), "ped", "cower", 3.0, true, false, false, false, 0);
		    DeletePVar(playerid,"Robbery");
		    DeletePVar(playerid,"RobberyCheck");
		    DeletePVar(playerid,"IsAmingAt");
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(FahrzeugInfo[vehicleid][fImportCar] == 0 || FahrzeugInfo[vehicleid][fKurrierCar] == 0)
		    {
				GetVehicleHealth(vehicleid, Health);
				if(Health <= 300)
				{
				    SetVehicleHealth(vehicleid, 350);
				    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
					GameTextForPlayer(playerid,"Motor ~r~zerstoert",3000,6);
					Motor[vehicleid] = false;
				}
			}
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
		    	new vehicleid = GetPlayerVehicleID(playerid), string[164];
				if(SpielerInfo[playerid][sBlitzerZeit] != 0)return SpielerInfo[playerid][sBlitzerZeit] -= 1;
				for(new blitzerid=0;blitzerid<MAX_BLITZER;blitzerid++)
		 		{
			 		if(Blitzer[blitzerid][Erstellt] == true)
			  		{
					  	if(IsVehicleInRangeOfPoint(vehicleid,12.5,Blitzer[blitzerid][oPosX],Blitzer[blitzerid][oPosY],Blitzer[blitzerid][oPosZ]) && gettime() > SpielerInfo[playerid][sBlitzerZeit])
					 	{
					 		if(GetPVarInt(playerid,"CopDuty") == 1)return 1;
					 		else if(GetPVarInt(playerid,"FBIDuty") == 1)return 1;
					 		else if(GetPVarInt(playerid,"MedicDuty") == 1)return 1;
					 		else if(GetPVarInt(playerid,"FireDuty") == 1)return 1;
					 		else if(GetPVarInt(playerid,"AdminDuty") == 1)return 1;
					 	    new Float:Speed = GetPlayerSpeed(playerid);
							new str[20];
							format(str,sizeof(str),"%f",Speed);
							new NewSpeed = strval(str);

						 	if(NewSpeed > Blitzer[blitzerid][Geschwindigkeit]+10)
						 	{
						 	    new kmh = GetPlayerSpeed(playerid)-Blitzer[blitzerid][Geschwindigkeit];
						 	    new Preis = 15*kmh;
						 	    GivePlayerMoneyEx(playerid,-Preis);
						 	    FrakInfo[2][fiFrakKasse] += Preis;
						 	    FrakInfo[7][fiFrakKasse] += Preis;
							 	SpielerInfo[playerid][sBlitzerZeit] = 10;
						        PlayerPlaySound(playerid,1132,0.0,0.0,0.0);
								format(string,sizeof(string),"Du wurdest wegen einer überhöhten Geschwindigkeit (%d/%dKm/h | Toleranz: 10Km/h) geblitzt. Bußgeld: %d$",GetPlayerSpeed(playerid),Blitzer[blitzerid][Geschwindigkeit],Preis);
							    SendClientMessage(playerid,COLOR_SORRY,string);
							}
					    }
			    	}
			    }
		    }
		}
		if(stopAC[playerid] > 0)return stopAC[playerid] --;
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
		{
		    SendClientMessage(playerid,AC_COLOR," ");
		    SendClientMessage(playerid,AC_COLOR,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Jetpack-Hack");
      		KickPlayer(playerid,ac_string);
		}
	 	/*if(!IsPlayerInAnyVehicle(playerid) && AC_PlayerVeh[playerid] > 0)
	 	{
	 	    SendClientMessage(playerid,AC_COLOR," ");
		    SendClientMessage(playerid,AC_COLOR,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Fast-Carexit");
      		KickPlayer(playerid,ac_string);
		}*/
		if(IsPlayerFlyAnim(playerid))
       	{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				new Float:XPos,Float:YPos,Float:ZPos;
				GetPlayerPos(playerid,XPos,YPos,ZPos);
				if(ZPos > 1.0)
				{
					if(!IsPlayerAnWasser(playerid))
					{
  						SendClientMessage(playerid,COLOR_WHITE," ");
		 				SendClientMessage(playerid,COLOR_KICK,"ANTI-CHEAT: Das System hat dich vom Server gekickt! Grund: Fly-Hack");
		 				KickPlayer(playerid,"");
						return 1;
					}
				}
			}
		}
	}
	return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("MYSQL VERBINDUNG VERLOREN !!!!!");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return 1;
}

#include "functions/vehicle/getVehicleFuelAmount.pwn"

#include "callbacks/auth/OnPassswordVerify.pwn"
#include "callbacks/auth/OnPassswordHash.pwn"

#include "callbacks/mysql/onCheckPlayerAccount.pwn"
#include "callbacks/mysql/onCheckPlayerBanned.pwn"
#include "callbacks/mysql/onCheckPlayerTimebanned.pwn"
#include "callbacks/mysql/onHitmanContractSucces.pwn"
#include "callbacks/mysql/onBanPlayerOffline.pwn"
#include "callbacks/mysql/onUnbanPlayer.pwn"
#include "callbacks/mysql/onTimebanPlayerOffline.pwn"
#include "callbacks/mysql/onUntimebanPlayer.pwn"
#include "callbacks/mysql/onShowHitmanContracts.pwn"
#include "callbacks/mysql/onPlayerSetHitmanContract.pwn"
#include "callbacks/mysql/onPlayerBuyTowedVehicle.pwn"
#include "callbacks/mysql/onPlayerBuyGroupHouse.pwn"
#include "callbacks/mysql/onPlayerSellGroupHouse.pwn"
#include "callbacks/mysql/onShowTowedFactionVeh.pwn"
#include "callbacks/mysql/onShowTowedPlayerVeh.pwn"
#include "callbacks/mysql/onShowTowedGroupVeh.pwn"
#include "callbacks/mysql/onFactionVehCreated.pwn"
#include "callbacks/mysql/onJobVehCreated.pwn"
#include "callbacks/mysql/onBuycarCreated.pwn"
#include "callbacks/mysql/onCheckCompanyExists.pwn"
#include "callbacks/mysql/onCheckCompanyNumberplate.pwn"
#include "callbacks/mysql/onCheckGroupExists.pwn"
#include "callbacks/mysql/onCheckGroupNumberplate.pwn"
#include "callbacks/mysql/onLoadCarInfos.pwn"
#include "callbacks/mysql/onLoadTankstellen.pwn"
#include "callbacks/mysql/onLoadAmmunations.pwn"
#include "callbacks/mysql/onLoadStores.pwn"
#include "callbacks/mysql/onLoadHauser.pwn"
#include "callbacks/mysql/onLoadGaragen.pwn"
#include "callbacks/mysql/onLoadJobInfos.pwn"
#include "callbacks/mysql/onLoadBlitzer.pwn"
#include "callbacks/mysql/onLoadStuff.pwn"
#include "callbacks/mysql/onLoadGruppen.pwn"
#include "callbacks/mysql/onLoadWerbetafeln.pwn"
#include "callbacks/mysql/onLoadFirmen.pwn"
#include "callbacks/mysql/onLoadGrundstucke.pwn"
#include "callbacks/mysql/onLoadFirmaLager.pwn"
#include "callbacks/mysql/onLoadVehicles.pwn"
#include "callbacks/mysql/onFireMissionLoaded.pwn"
#include "callbacks/mysql/onLoadTankstellenUpdate.pwn"
#include "callbacks/mysql/onLoadGangZones.pwn"
#include "callbacks/mysql/onLoadDrogen.pwn"
#include "callbacks/mysql/onLoadFrakInfo.pwn"
#include "callbacks/mysql/onLoadPrivatCar.pwn"
#include "callbacks/mysql/onLoadPlayerAccount.pwn"
#include "callbacks/mysql/onPlayerEnterPassword.pwn"
#include "callbacks/mysql/onPlayerInputBetaykey.pwn"
#include "callbacks/mysql/onPlayerVehicleCreated.pwn"
#include "callbacks/mysql/onGroupVehicleCreated.pwn"
#include "callbacks/mysql/onCompanyVehicleCreated.pwn"

AntiDeAMX()
{
	new a[][] =
	{
	"Unarmed  (Fist)",
	"Brass K"
	};
	#pragma  unused a
	//#error German Samplife ist registriert an: German Samplife GbR (GangstaSunny & Tobi_DeKey)
}
